[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 13, 2018 7:38:35 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1395:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1423:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1459:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1490:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1518:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1554:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1599:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1902:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1929:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1958:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d15(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e8(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50219.404 ops/s
[info] # Warmup Iteration   2: 636288.958 ops/s
[info] # Warmup Iteration   3: 746842.506 ops/s
[info] # Warmup Iteration   4: 753455.768 ops/s
[info] # Warmup Iteration   5: 777627.739 ops/s
[info] Iteration   1: 767862.326 ops/s
[info]                  ·gc.alloc.rate:                   2216.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4542.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4121.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 789129.542 ops/s
[info]                  ·gc.alloc.rate:                   2287.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              4561.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4000.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 799330.094 ops/s
[info]                  ·gc.alloc.rate:                   2317.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              4563.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5260.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 794171.759 ops/s
[info]                  ·gc.alloc.rate:               2304.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          4565.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3975.029 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 803291.206 ops/s
[info]                  ·gc.alloc.rate:               2330.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          4564.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3939.056 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   790756.985 ±(99.9%) 53393.576 ops/s [Average]
[info]   (min, avg, max) = (767862.326, 790756.985, 803291.206), stdev = 13866.142
[info]   CI (99.9%): [737363.410, 844150.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2291.327 ±(99.9%) 172.023 MB/sec [Average]
[info]   (min, avg, max) = (2216.561, 2291.327, 2330.244), stdev = 44.674
[info]   CI (99.9%): [2119.305, 2463.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4559.703 ±(99.9%) 36.996 B/op [Average]
[info]   (min, avg, max) = (4542.833, 4559.703, 4565.961), stdev = 9.608
[info]   CI (99.9%): [4522.707, 4596.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2141.276 ±(99.9%) 1142.143 MB/sec [Average]
[info]   (min, avg, max) = (2005.890, 2141.276, 2671.852), stdev = 296.611
[info]   CI (99.9%): [999.133, 3283.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4259.442 ±(99.9%) 2171.521 B/op [Average]
[info]   (min, avg, max) = (3939.056, 4259.442, 5260.731), stdev = 563.937
[info]   CI (99.9%): [2087.922, 6430.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.893), stdev = 1.734
[info]   CI (99.9%): [≈ 0, 7.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.621 ±(99.9%) 13.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.621, 7.979), stdev = 3.554
[info]   CI (99.9%): [≈ 0, 15.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42077.971 ops/s
[info] # Warmup Iteration   2: 1587828.495 ops/s
[info] # Warmup Iteration   3: 1822950.320 ops/s
[info] # Warmup Iteration   4: 1928869.193 ops/s
[info] # Warmup Iteration   5: 1937026.834 ops/s
[info] Iteration   1: 1799257.752 ops/s
[info]                  ·gc.alloc.rate:                   1197.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1047.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1167.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1819822.661 ops/s
[info]                  ·gc.alloc.rate:                   1207.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1044.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1932792.963 ops/s
[info]                  ·gc.alloc.rate:                   1299.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1057.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1088.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1826430.134 ops/s
[info]                  ·gc.alloc.rate:               1202.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          1036.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 575.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1897044.866 ops/s
[info]                  ·gc.alloc.rate:                   1264.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              1049.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1855069.675 ±(99.9%) 219354.697 ops/s [Average]
[info]   (min, avg, max) = (1799257.752, 1855069.675, 1932792.963), stdev = 56965.718
[info]   CI (99.9%): [1635714.978, 2074424.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1234.433 ±(99.9%) 173.509 MB/sec [Average]
[info]   (min, avg, max) = (1197.927, 1234.433, 1299.089), stdev = 45.060
[info]   CI (99.9%): [1060.924, 1407.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1047.116 ±(99.9%) 29.623 B/op [Average]
[info]   (min, avg, max) = (1036.542, 1047.116, 1057.769), stdev = 7.693
[info]   CI (99.9%): [1017.493, 1076.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.707 ±(99.9%) 1150.019 MB/sec [Average]
[info]   (min, avg, max) = (668.460, 1202.707, 1338.291), stdev = 298.656
[info]   CI (99.9%): [52.688, 2352.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1019.382 ±(99.9%) 962.396 B/op [Average]
[info]   (min, avg, max) = (575.993, 1019.382, 1167.067), stdev = 249.931
[info]   CI (99.9%): [56.986, 1981.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.851 ±(99.9%) 7.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.851, 4.215), stdev = 1.881
[info]   CI (99.9%): [≈ 0, 8.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.707 ±(99.9%) 6.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.707, 3.497), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1714142.673 ops/s
[info] # Warmup Iteration   2: 5606795.268 ops/s
[info] # Warmup Iteration   3: 6016020.339 ops/s
[info] # Warmup Iteration   4: 6056803.397 ops/s
[info] # Warmup Iteration   5: 6038742.019 ops/s
[info] Iteration   1: 6051612.358 ops/s
[info]                  ·gc.alloc.rate:               418.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133.058 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6006725.629 ops/s
[info]                  ·gc.alloc.rate:               416.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6187411.660 ops/s
[info]                  ·gc.alloc.rate:      409.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.105 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6156407.261 ops/s
[info]                  ·gc.alloc.rate:                   420.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              107.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6120907.749 ops/s
[info]                  ·gc.alloc.rate:               419.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   6104612.931 ±(99.9%) 286832.834 ops/s [Average]
[info]   (min, avg, max) = (6006725.629, 6104612.931, 6187411.660), stdev = 74489.576
[info]   CI (99.9%): [5817780.098, 6391445.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   416.837 ±(99.9%) 17.225 MB/sec [Average]
[info]   (min, avg, max) = (409.280, 416.837, 420.410), stdev = 4.473
[info]   CI (99.9%): [399.612, 434.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.472 ±(99.9%) 7.684 B/op [Average]
[info]   (min, avg, max) = (104.105, 107.472, 109.122), stdev = 1.996
[info]   CI (99.9%): [99.787, 115.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.436 ±(99.9%) 1064.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.436, 671.969), stdev = 276.512
[info]   CI (99.9%): [≈ 0, 1538.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   122.320 ±(99.9%) 273.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.320, 172.743), stdev = 71.065
[info]   CI (99.9%): [≈ 0, 395.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1434.490 ops/s
[info] # Warmup Iteration   2: 112814.143 ops/s
[info] # Warmup Iteration   3: 264055.514 ops/s
[info] # Warmup Iteration   4: 270135.476 ops/s
[info] # Warmup Iteration   5: 268283.996 ops/s
[info] Iteration   1: 266115.529 ops/s
[info]                  ·gc.alloc.rate:                   2319.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              13715.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11887.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 260288.450 ops/s
[info]                  ·gc.alloc.rate:                   2280.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              13786.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12178.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 264488.016 ops/s
[info]                  ·gc.alloc.rate:                   2316.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              13780.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16002.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 272296.494 ops/s
[info]                  ·gc.alloc.rate:               2383.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          13778.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11679.721 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 271962.075 ops/s
[info]                  ·gc.alloc.rate:               2409.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          13942.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15624.324 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   267030.113 ±(99.9%) 19710.612 ops/s [Average]
[info]   (min, avg, max) = (260288.450, 267030.113, 272296.494), stdev = 5118.783
[info]   CI (99.9%): [247319.501, 286740.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2341.800 ±(99.9%) 205.257 MB/sec [Average]
[info]   (min, avg, max) = (2280.167, 2341.800, 2409.762), stdev = 53.305
[info]   CI (99.9%): [2136.542, 2547.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13800.755 ±(99.9%) 324.023 B/op [Average]
[info]   (min, avg, max) = (13715.963, 13800.755, 13942.280), stdev = 84.148
[info]   CI (99.9%): [13476.732, 14124.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.993 ±(99.9%) 1434.291 MB/sec [Average]
[info]   (min, avg, max) = (2010.044, 2286.993, 2700.484), stdev = 372.481
[info]   CI (99.9%): [852.702, 3721.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13474.559 ±(99.9%) 8265.855 B/op [Average]
[info]   (min, avg, max) = (11679.721, 13474.559, 16002.591), stdev = 2146.616
[info]   CI (99.9%): [5208.703, 21740.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.225 ±(99.9%) 1.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.729), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.340 ±(99.9%) 7.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.340, 4.309), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 8.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18918.236 ops/s
[info] # Warmup Iteration   2: 802322.986 ops/s
[info] # Warmup Iteration   3: 904709.851 ops/s
[info] # Warmup Iteration   4: 900982.286 ops/s
[info] # Warmup Iteration   5: 908340.985 ops/s
[info] Iteration   1: 911886.117 ops/s
[info]                  ·gc.alloc.rate:                   2443.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4624.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 892976.337 ops/s
[info]                  ·gc.alloc.rate:                   2379.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              4193.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3532.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 899578.604 ops/s
[info]                  ·gc.alloc.rate:               2423.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          4239.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4678.599 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 914717.291 ops/s
[info]                  ·gc.alloc.rate:               2451.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          4217.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3457.373 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 915877.686 ops/s
[info]                  ·gc.alloc.rate:               2480.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          4261.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4616.650 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   907007.207 ±(99.9%) 39173.749 ops/s [Average]
[info]   (min, avg, max) = (892976.337, 907007.207, 915877.686), stdev = 10173.298
[info]   CI (99.9%): [867833.457, 946180.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2435.550 ±(99.9%) 145.014 MB/sec [Average]
[info]   (min, avg, max) = (2379.009, 2435.550, 2480.412), stdev = 37.660
[info]   CI (99.9%): [2290.536, 2580.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4225.731 ±(99.9%) 100.114 B/op [Average]
[info]   (min, avg, max) = (4193.002, 4225.731, 4261.609), stdev = 25.999
[info]   CI (99.9%): [4125.617, 4325.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2410.980 ±(99.9%) 1419.758 MB/sec [Average]
[info]   (min, avg, max) = (2004.393, 2410.980, 2687.059), stdev = 368.707
[info]   CI (99.9%): [991.222, 3830.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4181.949 ±(99.9%) 2418.449 B/op [Average]
[info]   (min, avg, max) = (3457.373, 4181.949, 4678.599), stdev = 628.064
[info]   CI (99.9%): [1763.500, 6600.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.747), stdev = 1.673
[info]   CI (99.9%): [≈ 0, 7.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.301 ±(99.9%) 11.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.301, 6.467), stdev = 2.888
[info]   CI (99.9%): [≈ 0, 12.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71242.400 ops/s
[info] # Warmup Iteration   2: 2568019.271 ops/s
[info] # Warmup Iteration   3: 2690327.629 ops/s
[info] # Warmup Iteration   4: 2720929.794 ops/s
[info] # Warmup Iteration   5: 2701104.079 ops/s
[info] Iteration   1: 2700473.507 ops/s
[info]                  ·gc.alloc.rate:                   1160.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              676.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2732467.270 ops/s
[info]                  ·gc.alloc.rate:               1153.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          664.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2701481.411 ops/s
[info]                  ·gc.alloc.rate:                   1154.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2700155.816 ops/s
[info]                  ·gc.alloc.rate:                   1166.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              679.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2709553.990 ops/s
[info]                  ·gc.alloc.rate:                   1142.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.231 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2708826.399 ±(99.9%) 53018.726 ops/s [Average]
[info]   (min, avg, max) = (2700155.816, 2708826.399, 2732467.270), stdev = 13768.795
[info]   CI (99.9%): [2655807.673, 2761845.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1155.468 ±(99.9%) 33.527 MB/sec [Average]
[info]   (min, avg, max) = (1142.925, 1155.468, 1166.026), stdev = 8.707
[info]   CI (99.9%): [1121.941, 1188.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   671.319 ±(99.9%) 27.273 B/op [Average]
[info]   (min, avg, max) = (663.906, 671.319, 679.540), stdev = 7.083
[info]   CI (99.9%): [644.046, 698.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.799 ±(99.9%) 1409.521 MB/sec [Average]
[info]   (min, avg, max) = (668.181, 1069.799, 1338.535), stdev = 366.048
[info]   CI (99.9%): [≈ 0, 2479.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   622.227 ±(99.9%) 827.387 B/op [Average]
[info]   (min, avg, max) = (384.837, 622.227, 780.075), stdev = 214.870
[info]   CI (99.9%): [≈ 0, 1449.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.793 ±(99.9%) 6.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.841), stdev = 1.704
[info]   CI (99.9%): [≈ 0, 7.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.461 ±(99.9%) 3.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 2.231), stdev = 0.990
[info]   CI (99.9%): [≈ 0, 4.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:50:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2450506.887 ops/s
[info] # Warmup Iteration   2: 14059928.045 ops/s
[info] # Warmup Iteration   3: 14512565.596 ops/s
[info] # Warmup Iteration   4: 14519817.634 ops/s
[info] # Warmup Iteration   5: 14494657.299 ops/s
[info] Iteration   1: 14843212.644 ops/s
[info]                  ·gc.alloc.rate:               768.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 14681457.970 ops/s
[info]                  ·gc.alloc.rate:                   765.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14703585.199 ops/s
[info]                  ·gc.alloc.rate:               767.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.839 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14769591.217 ops/s
[info]                  ·gc.alloc.rate:               789.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          84.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14832617.604 ops/s
[info]                  ·gc.alloc.rate:                   768.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              81.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14766092.927 ±(99.9%) 282015.397 ops/s [Average]
[info]   (min, avg, max) = (14681457.970, 14766092.927, 14843212.644), stdev = 73238.503
[info]   CI (99.9%): [14484077.530, 15048108.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   772.153 ±(99.9%) 38.526 MB/sec [Average]
[info]   (min, avg, max) = (765.363, 772.153, 789.862), stdev = 10.005
[info]   CI (99.9%): [733.626, 810.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.299 ±(99.9%) 4.173 B/op [Average]
[info]   (min, avg, max) = (81.514, 82.299, 84.170), stdev = 1.084
[info]   CI (99.9%): [78.126, 86.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.170 ±(99.9%) 1.377 MB/sec [Average]
[info]   (min, avg, max) = (670.596, 671.170, 671.481), stdev = 0.358
[info]   CI (99.9%): [669.793, 672.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   71.536 ±(99.9%) 1.417 B/op [Average]
[info]   (min, avg, max) = (71.093, 71.536, 71.949), stdev = 0.368
[info]   CI (99.9%): [70.119, 72.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1487263.869 ops/s
[info] # Warmup Iteration   2: 16026000.993 ops/s
[info] # Warmup Iteration   3: 17179987.270 ops/s
[info] # Warmup Iteration   4: 17172887.564 ops/s
[info] # Warmup Iteration   5: 17181108.627 ops/s
[info] Iteration   1: 17184827.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17166712.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17173276.004 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17183653.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17178718.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17177437.714 ±(99.9%) 29022.691 ops/s [Average]
[info]   (min, avg, max) = (17166712.892, 17177437.714, 17184827.907), stdev = 7537.101
[info]   CI (99.9%): [17148415.023, 17206460.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6192.970 ops/s
[info] # Warmup Iteration   2: 360757.807 ops/s
[info] # Warmup Iteration   3: 690351.481 ops/s
[info] # Warmup Iteration   4: 694736.591 ops/s
[info] # Warmup Iteration   5: 682911.637 ops/s
[info] Iteration   1: 663328.316 ops/s
[info]                  ·gc.alloc.rate:               1967.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          4666.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4755.233 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 665635.687 ops/s
[info]                  ·gc.alloc.rate:                   1969.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4754.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.747 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 696790.867 ops/s
[info]                  ·gc.alloc.rate:                   2070.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              4677.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4550.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 698282.603 ops/s
[info]                  ·gc.alloc.rate:               2075.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          4677.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4550.801 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 698333.549 ops/s
[info]                  ·gc.alloc.rate:                   2076.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              4679.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4558.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   684474.204 ±(99.9%) 70386.038 ops/s [Average]
[info]   (min, avg, max) = (663328.316, 684474.204, 698333.549), stdev = 18279.030
[info]   CI (99.9%): [614088.167, 754860.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2031.901 ±(99.9%) 223.452 MB/sec [Average]
[info]   (min, avg, max) = (1967.382, 2031.901, 2076.306), stdev = 58.030
[info]   CI (99.9%): [1808.449, 2255.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4671.256 ±(99.9%) 38.025 B/op [Average]
[info]   (min, avg, max) = (4656.254, 4671.256, 4679.140), stdev = 9.875
[info]   CI (99.9%): [4633.231, 4709.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2014.541 ±(99.9%) 26.707 MB/sec [Average]
[info]   (min, avg, max) = (2004.977, 2014.541, 2022.648), stdev = 6.936
[info]   CI (99.9%): [1987.834, 2041.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4633.884 ±(99.9%) 425.038 B/op [Average]
[info]   (min, avg, max) = (4550.801, 4633.884, 4755.233), stdev = 110.381
[info]   CI (99.9%): [4208.847, 5058.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.156 ±(99.9%) 1.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.739), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.368 ±(99.9%) 2.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.747), stdev = 0.771
[info]   CI (99.9%): [≈ 0, 3.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110273.725 ops/s
[info] # Warmup Iteration   2: 1881616.511 ops/s
[info] # Warmup Iteration   3: 2018036.926 ops/s
[info] # Warmup Iteration   4: 2027576.707 ops/s
[info] # Warmup Iteration   5: 2108288.497 ops/s
[info] Iteration   1: 2135621.998 ops/s
[info]                  ·gc.alloc.rate:               2970.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          2188.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1971.954 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2123267.948 ops/s
[info]                  ·gc.alloc.rate:                   2940.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              2179.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1983.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2113428.456 ops/s
[info]                  ·gc.alloc.rate:                   2942.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              2191.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1996.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2082867.911 ops/s
[info]                  ·gc.alloc.rate:               2928.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          2212.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3362.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2540.601 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 2106039.344 ops/s
[info]                  ·gc.alloc.rate:                   2933.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              2192.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2016.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2112245.131 ±(99.9%) 76309.658 ops/s [Average]
[info]   (min, avg, max) = (2082867.911, 2112245.131, 2135621.998), stdev = 19817.376
[info]   CI (99.9%): [2035935.474, 2188554.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2943.281 ±(99.9%) 62.802 MB/sec [Average]
[info]   (min, avg, max) = (2928.547, 2943.281, 2970.709), stdev = 16.310
[info]   CI (99.9%): [2880.479, 3006.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2193.041 ±(99.9%) 46.925 B/op [Average]
[info]   (min, avg, max) = (2179.672, 2193.041, 2212.896), stdev = 12.186
[info]   CI (99.9%): [2146.115, 2239.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2818.950 ±(99.9%) 1169.992 MB/sec [Average]
[info]   (min, avg, max) = (2675.969, 2818.950, 3362.232), stdev = 303.843
[info]   CI (99.9%): [1648.958, 3988.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2101.927 ±(99.9%) 946.449 B/op [Average]
[info]   (min, avg, max) = (1971.954, 2101.927, 2540.601), stdev = 245.790
[info]   CI (99.9%): [1155.478, 3048.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.016), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.610 ops/s
[info] # Warmup Iteration   2: 8948737.706 ops/s
[info] # Warmup Iteration   3: 10080612.733 ops/s
[info] # Warmup Iteration   4: 10474028.290 ops/s
[info] # Warmup Iteration   5: 10410616.474 ops/s
[info] Iteration   1: 10408135.924 ops/s
[info]                  ·gc.alloc.rate:                   1304.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10444605.607 ops/s
[info]                  ·gc.alloc.rate:               1304.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          196.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201.067 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 10347025.383 ops/s
[info]                  ·gc.alloc.rate:                   1302.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9865855.717 ops/s
[info]                  ·gc.alloc.rate:                   1252.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9787229.022 ops/s
[info]                  ·gc.alloc.rate:                   1233.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10170570.331 ±(99.9%) 1221435.367 ops/s [Average]
[info]   (min, avg, max) = (9787229.022, 10170570.331, 10444605.607), stdev = 317202.886
[info]   CI (99.9%): [8949134.963, 11392005.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1279.713 ±(99.9%) 132.029 MB/sec [Average]
[info]   (min, avg, max) = (1233.177, 1279.713, 1304.996), stdev = 34.288
[info]   CI (99.9%): [1147.684, 1411.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   198.019 ±(99.9%) 4.708 B/op [Average]
[info]   (min, avg, max) = (196.565, 198.019, 199.833), stdev = 1.223
[info]   CI (99.9%): [193.311, 202.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1334.799 ±(99.9%) 4.056 MB/sec [Average]
[info]   (min, avg, max) = (1333.711, 1334.799, 1336.318), stdev = 1.053
[info]   CI (99.9%): [1330.743, 1338.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   206.682 ±(99.9%) 25.265 B/op [Average]
[info]   (min, avg, max) = (201.067, 206.682, 214.444), stdev = 6.561
[info]   CI (99.9%): [181.417, 231.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.984 ±(99.9%) 8.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.984, 4.825), stdev = 2.147
[info]   CI (99.9%): [≈ 0, 9.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 1.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.770), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88304.807 ops/s
[info] # Warmup Iteration   2: 3005772.260 ops/s
[info] # Warmup Iteration   3: 3313948.622 ops/s
[info] # Warmup Iteration   4: 3314166.982 ops/s
[info] # Warmup Iteration   5: 3293085.242 ops/s
[info] Iteration   1: 3294663.521 ops/s
[info]                  ·gc.alloc.rate:                   2069.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              988.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 3294708.093 ops/s
[info]                  ·gc.alloc.rate:                   2058.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              983.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     957.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3239232.917 ops/s
[info]                  ·gc.alloc.rate:               2024.031 MB/sec
[info]                  ·gc.alloc.rate.norm:          983.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 971.986 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3328782.642 ops/s
[info]                  ·gc.alloc.rate:               2093.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 946.123 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3344232.583 ops/s
[info]                  ·gc.alloc.rate:               2102.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943.335 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3300323.951 ±(99.9%) 155624.595 ops/s [Average]
[info]   (min, avg, max) = (3239232.917, 3300323.951, 3344232.583), stdev = 40415.213
[info]   CI (99.9%): [3144699.357, 3455948.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2069.629 ±(99.9%) 119.212 MB/sec [Average]
[info]   (min, avg, max) = (2024.031, 2069.629, 2102.670), stdev = 30.959
[info]   CI (99.9%): [1950.417, 2188.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   986.934 ±(99.9%) 12.266 B/op [Average]
[info]   (min, avg, max) = (983.411, 986.934, 989.607), stdev = 3.185
[info]   CI (99.9%): [974.668, 999.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2003.529 ±(99.9%) 10.488 MB/sec [Average]
[info]   (min, avg, max) = (2000.516, 2003.529, 2007.125), stdev = 2.724
[info]   CI (99.9%): [1993.041, 2014.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   955.549 ±(99.9%) 44.011 B/op [Average]
[info]   (min, avg, max) = (943.335, 955.549, 971.986), stdev = 11.430
[info]   CI (99.9%): [911.538, 999.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 7.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.101), stdev = 1.823
[info]   CI (99.9%): [≈ 0, 7.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.402 ±(99.9%) 3.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 1.959), stdev = 0.871
[info]   CI (99.9%): [≈ 0, 3.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3918229.745 ops/s
[info] # Warmup Iteration   2: 12136063.023 ops/s
[info] # Warmup Iteration   3: 13383091.263 ops/s
[info] # Warmup Iteration   4: 13906306.586 ops/s
[info] # Warmup Iteration   5: 13856785.691 ops/s
[info] Iteration   1: 13601104.134 ops/s
[info]                  ·gc.alloc.rate:               1766.582 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.898 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 12984070.988 ops/s
[info]                  ·gc.alloc.rate:                   1716.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13073481.938 ops/s
[info]                  ·gc.alloc.rate:                   1699.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13082387.140 ops/s
[info]                  ·gc.alloc.rate:               1728.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          207.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242.584 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13068712.833 ops/s
[info]                  ·gc.alloc.rate:                   1714.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13161951.406 ±(99.9%) 957540.085 ops/s [Average]
[info]   (min, avg, max) = (12984070.988, 13161951.406, 13601104.134), stdev = 248670.119
[info]   CI (99.9%): [12204411.321, 14119491.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1725.173 ±(99.9%) 97.575 MB/sec [Average]
[info]   (min, avg, max) = (1699.385, 1725.173, 1766.582), stdev = 25.340
[info]   CI (99.9%): [1627.598, 1822.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.281 ±(99.9%) 6.766 B/op [Average]
[info]   (min, avg, max) = (204.420, 206.281, 208.096), stdev = 1.757
[info]   CI (99.9%): [199.515, 213.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1615.362 ±(99.9%) 1421.096 MB/sec [Average]
[info]   (min, avg, max) = (1344.465, 1615.362, 2022.412), stdev = 369.054
[info]   CI (99.9%): [194.266, 3036.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   193.496 ±(99.9%) 177.296 B/op [Average]
[info]   (min, avg, max) = (155.898, 193.496, 245.120), stdev = 46.043
[info]   CI (99.9%): [16.201, 370.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.894), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.351), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17543.523 ops/s
[info] # Warmup Iteration   2: 336147.175 ops/s
[info] # Warmup Iteration   3: 1190070.473 ops/s
[info] # Warmup Iteration   4: 1219658.454 ops/s
[info] # Warmup Iteration   5: 1211728.712 ops/s
[info] Iteration   1: 1227892.022 ops/s
[info]                  ·gc.alloc.rate:                   3100.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              3973.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3415.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1224939.449 ops/s
[info]                  ·gc.alloc.rate:                   3092.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              3973.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3329.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4277.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1223642.041 ops/s
[info]                  ·gc.alloc.rate:               3103.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          3991.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3435.785 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1224449.430 ops/s
[info]                  ·gc.alloc.rate:               3132.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          4026.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3351.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4307.374 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 1223238.917 ops/s
[info]                  ·gc.alloc.rate:               3103.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          3993.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3464.248 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1224832.372 ±(99.9%) 7067.677 ops/s [Average]
[info]   (min, avg, max) = (1223238.917, 1224832.372, 1227892.022), stdev = 1835.453
[info]   CI (99.9%): [1217764.695, 1231900.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3106.511 ±(99.9%) 58.332 MB/sec [Average]
[info]   (min, avg, max) = (3092.649, 3106.511, 3132.407), stdev = 15.149
[info]   CI (99.9%): [3048.179, 3164.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3991.600 ±(99.9%) 83.153 B/op [Average]
[info]   (min, avg, max) = (3973.353, 3991.600, 4026.286), stdev = 21.594
[info]   CI (99.9%): [3908.447, 4074.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2941.813 ±(99.9%) 1401.293 MB/sec [Average]
[info]   (min, avg, max) = (2664.799, 2941.813, 3351.090), stdev = 363.911
[info]   CI (99.9%): [1540.521, 4343.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3780.027 ±(99.9%) 1802.786 B/op [Average]
[info]   (min, avg, max) = (3415.293, 3780.027, 4307.374), stdev = 468.178
[info]   CI (99.9%): [1977.242, 5582.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.416), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.534), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244524.007 ops/s
[info] # Warmup Iteration   2: 2306992.774 ops/s
[info] # Warmup Iteration   3: 2348438.419 ops/s
[info] # Warmup Iteration   4: 2416465.643 ops/s
[info] # Warmup Iteration   5: 2331610.695 ops/s
[info] Iteration   1: 2334731.456 ops/s
[info]                  ·gc.alloc.rate:                   2057.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1357.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2475303.590 ops/s
[info]                  ·gc.alloc.rate:                   2175.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1383.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2408028.371 ops/s
[info]                  ·gc.alloc.rate:                   2133.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1394.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2356139.236 ops/s
[info]                  ·gc.alloc.rate:               2092.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          1397.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1341.375 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2371968.286 ops/s
[info]                  ·gc.alloc.rate:                   2105.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              1396.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1334.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2389234.188 ±(99.9%) 212004.949 ops/s [Average]
[info]   (min, avg, max) = (2334731.456, 2389234.188, 2475303.590), stdev = 55057.012
[info]   CI (99.9%): [2177229.239, 2601239.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2112.788 ±(99.9%) 171.022 MB/sec [Average]
[info]   (min, avg, max) = (2057.637, 2112.788, 2175.658), stdev = 44.414
[info]   CI (99.9%): [1941.765, 2283.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1391.657 ±(99.9%) 24.057 B/op [Average]
[info]   (min, avg, max) = (1383.334, 1391.657, 1397.307), stdev = 6.248
[info]   CI (99.9%): [1367.600, 1415.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2009.467 ±(99.9%) 10.942 MB/sec [Average]
[info]   (min, avg, max) = (2006.365, 2009.467, 2013.567), stdev = 2.842
[info]   CI (99.9%): [1998.525, 2020.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1324.120 ±(99.9%) 120.288 B/op [Average]
[info]   (min, avg, max) = (1276.620, 1324.120, 1357.076), stdev = 31.238
[info]   CI (99.9%): [1203.833, 1444.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.602), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 6.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.494 ±(99.9%) 4.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.494, 2.428), stdev = 1.081
[info]   CI (99.9%): [≈ 0, 4.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.627 ops/s
[info] # Warmup Iteration   2: 17698367.299 ops/s
[info] # Warmup Iteration   3: 18299551.879 ops/s
[info] # Warmup Iteration   4: 18642829.687 ops/s
[info] # Warmup Iteration   5: 18808386.548 ops/s
[info] Iteration   1: 18760042.667 ops/s
[info]                  ·gc.alloc.rate:               587.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.861 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 18411777.688 ops/s
[info]                  ·gc.alloc.rate:               584.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56.917 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 19314949.264 ops/s
[info]                  ·gc.alloc.rate:                   610.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19948836.915 ops/s
[info]                  ·gc.alloc.rate:                   631.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19941699.612 ops/s
[info]                  ·gc.alloc.rate:                   622.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   19275461.229 ±(99.9%) 2661177.522 ops/s [Average]
[info]   (min, avg, max) = (18411777.688, 19275461.229, 19948836.915), stdev = 691099.352
[info]   CI (99.9%): [16614283.707, 21936638.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   607.493 ±(99.9%) 79.572 MB/sec [Average]
[info]   (min, avg, max) = (584.740, 607.493, 631.094), stdev = 20.665
[info]   CI (99.9%): [527.920, 687.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.600 ±(99.9%) 1.333 B/op [Average]
[info]   (min, avg, max) = (49.160, 49.600, 49.974), stdev = 0.346
[info]   CI (99.9%): [48.267, 50.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.239 ±(99.9%) 1.454 MB/sec [Average]
[info]   (min, avg, max) = (665.972, 666.239, 666.892), stdev = 0.378
[info]   CI (99.9%): [664.785, 667.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   54.448 ±(99.9%) 7.461 B/op [Average]
[info]   (min, avg, max) = (52.556, 54.448, 56.917), stdev = 1.937
[info]   CI (99.9%): [46.988, 61.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178086.105 ops/s
[info] # Warmup Iteration   2: 6052919.009 ops/s
[info] # Warmup Iteration   3: 6261453.062 ops/s
[info] # Warmup Iteration   4: 6371525.776 ops/s
[info] # Warmup Iteration   5: 6328901.176 ops/s
[info] Iteration   1: 6101571.328 ops/s
[info]                  ·gc.alloc.rate:               1714.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 344.835 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 6357255.224 ops/s
[info]                  ·gc.alloc.rate:                   1809.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     497.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6414445.226 ops/s
[info]                  ·gc.alloc.rate:                   1798.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     327.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6117853.723 ops/s
[info]                  ·gc.alloc.rate:                   1744.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     515.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6092864.554 ops/s
[info]                  ·gc.alloc.rate:               1724.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 344.822 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6216798.011 ±(99.9%) 600315.612 ops/s [Average]
[info]   (min, avg, max) = (6092864.554, 6216798.011, 6414445.226), stdev = 155900.058
[info]   CI (99.9%): [5616482.399, 6817113.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1758.252 ±(99.9%) 167.083 MB/sec [Average]
[info]   (min, avg, max) = (1714.289, 1758.252, 1809.920), stdev = 43.391
[info]   CI (99.9%): [1591.169, 1925.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445.100 ±(99.9%) 12.891 B/op [Average]
[info]   (min, avg, max) = (441.190, 445.100, 448.592), stdev = 3.348
[info]   CI (99.9%): [432.209, 457.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1603.813 ±(99.9%) 1411.735 MB/sec [Average]
[info]   (min, avg, max) = (1334.919, 1603.813, 2007.821), stdev = 366.623
[info]   CI (99.9%): [192.078, 3015.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   405.947 ±(99.9%) 353.895 B/op [Average]
[info]   (min, avg, max) = (327.890, 405.947, 515.140), stdev = 91.905
[info]   CI (99.9%): [52.052, 759.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.777 ±(99.9%) 6.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.841), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.951), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 1.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5676527.396 ops/s
[info] # Warmup Iteration   2: 27495250.108 ops/s
[info] # Warmup Iteration   3: 28287845.149 ops/s
[info] # Warmup Iteration   4: 27579410.288 ops/s
[info] # Warmup Iteration   5: 28080120.148 ops/s
[info] Iteration   1: 28193055.631 ops/s
[info]                  ·gc.alloc.rate:               901.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.856 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 28143561.703 ops/s
[info]                  ·gc.alloc.rate:               875.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28200644.255 ops/s
[info]                  ·gc.alloc.rate:                   875.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28298283.395 ops/s
[info]                  ·gc.alloc.rate:               893.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.710 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 28407467.167 ops/s
[info]                  ·gc.alloc.rate:                   893.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28248602.430 ±(99.9%) 404433.073 ops/s [Average]
[info]   (min, avg, max) = (28143561.703, 28248602.430, 28407467.167), stdev = 105029.985
[info]   CI (99.9%): [27844169.357, 28653035.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   887.992 ±(99.9%) 45.704 MB/sec [Average]
[info]   (min, avg, max) = (875.425, 887.992, 901.733), stdev = 11.869
[info]   CI (99.9%): [842.289, 933.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.462 ±(99.9%) 2.293 B/op [Average]
[info]   (min, avg, max) = (48.858, 49.462, 50.317), stdev = 0.595
[info]   CI (99.9%): [47.169, 51.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   939.890 ±(99.9%) 1414.966 MB/sec [Average]
[info]   (min, avg, max) = (670.912, 939.890, 1343.354), stdev = 367.462
[info]   CI (99.9%): [≈ 0, 2354.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   52.355 ±(99.9%) 78.840 B/op [Average]
[info]   (min, avg, max) = (37.221, 52.355, 74.856), stdev = 20.474
[info]   CI (99.9%): [≈ 0, 131.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10136499.162 ops/s
[info] # Warmup Iteration   2: 31156012.242 ops/s
[info] # Warmup Iteration   3: 32369449.600 ops/s
[info] # Warmup Iteration   4: 33290747.768 ops/s
[info] # Warmup Iteration   5: 32663835.828 ops/s
[info] Iteration   1: 33323479.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33325752.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33329096.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 33300947.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33321237.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   33320102.637 ±(99.9%) 42723.976 ops/s [Average]
[info]   (min, avg, max) = (33300947.489, 33320102.637, 33329096.707), stdev = 11095.281
[info]   CI (99.9%): [33277378.661, 33362826.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70595.849 ops/s
[info] # Warmup Iteration   2: 1698664.540 ops/s
[info] # Warmup Iteration   3: 1809755.951 ops/s
[info] # Warmup Iteration   4: 1753085.237 ops/s
[info] # Warmup Iteration   5: 1817577.389 ops/s
[info] Iteration   1: 1787700.063 ops/s
[info]                  ·gc.alloc.rate:               2938.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          2587.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3331.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2932.864 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1771635.672 ops/s
[info]                  ·gc.alloc.rate:                   2915.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              2589.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2369.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1786661.210 ops/s
[info]                  ·gc.alloc.rate:                   2938.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2588.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2357.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1817121.670 ops/s
[info]                  ·gc.alloc.rate:               2989.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          2588.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2325.165 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1850396.871 ops/s
[info]                  ·gc.alloc.rate:               3066.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          2608.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2865.471 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1802703.097 ±(99.9%) 120701.095 ops/s [Average]
[info]   (min, avg, max) = (1771635.672, 1802703.097, 1850396.871), stdev = 31345.691
[info]   CI (99.9%): [1682002.002, 1923404.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2969.791 ±(99.9%) 232.899 MB/sec [Average]
[info]   (min, avg, max) = (2915.617, 2969.791, 3066.659), stdev = 60.483
[info]   CI (99.9%): [2736.891, 3202.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2592.496 ±(99.9%) 34.235 B/op [Average]
[info]   (min, avg, max) = (2587.452, 2592.496, 2608.336), stdev = 8.891
[info]   CI (99.9%): [2558.261, 2626.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2945.804 ±(99.9%) 1422.372 MB/sec [Average]
[info]   (min, avg, max) = (2667.632, 2945.804, 3368.977), stdev = 369.385
[info]   CI (99.9%): [1523.432, 4368.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2570.040 ±(99.9%) 1162.233 B/op [Average]
[info]   (min, avg, max) = (2325.165, 2570.040, 2932.864), stdev = 301.828
[info]   CI (99.9%): [1407.807, 3732.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106780.336 ops/s
[info] # Warmup Iteration   2: 277399.665 ops/s
[info] # Warmup Iteration   3: 314430.537 ops/s
[info] # Warmup Iteration   4: 308737.389 ops/s
[info] # Warmup Iteration   5: 309710.297 ops/s
[info] Iteration   1: 313162.574 ops/s
[info]                  ·gc.alloc.rate:                   1915.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              9626.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10133.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 315341.686 ops/s
[info]                  ·gc.alloc.rate:                   1911.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              9541.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6702.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 315209.789 ops/s
[info]                  ·gc.alloc.rate:               1938.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          9676.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10035.095 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 314005.876 ops/s
[info]                  ·gc.alloc.rate:               1932.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          9680.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10068.207 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 315194.224 ops/s
[info]                  ·gc.alloc.rate:               1952.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          9749.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10036.950 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   314582.830 ±(99.9%) 3699.798 ops/s [Average]
[info]   (min, avg, max) = (313162.574, 314582.830, 315341.686), stdev = 960.826
[info]   CI (99.9%): [310883.032, 318282.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1930.082 ±(99.9%) 64.867 MB/sec [Average]
[info]   (min, avg, max) = (1911.814, 1930.082, 1952.499), stdev = 16.846
[info]   CI (99.9%): [1865.216, 1994.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9654.956 ±(99.9%) 297.422 B/op [Average]
[info]   (min, avg, max) = (9541.436, 9654.956, 9749.811), stdev = 77.239
[info]   CI (99.9%): [9357.534, 9952.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.867 ±(99.9%) 1151.236 MB/sec [Average]
[info]   (min, avg, max) = (1343.072, 1877.867, 2016.329), stdev = 298.972
[info]   CI (99.9%): [726.630, 3029.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9395.412 ±(99.9%) 5797.724 B/op [Average]
[info]   (min, avg, max) = (6702.971, 9395.412, 10133.838), stdev = 1505.650
[info]   CI (99.9%): [3597.689, 15193.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 4.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 2.977), stdev = 1.291
[info]   CI (99.9%): [≈ 0, 5.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.574 ±(99.9%) 24.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.574, 14.961), stdev = 6.489
[info]   CI (99.9%): [≈ 0, 28.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70151.327 ops/s
[info] # Warmup Iteration   2: 441847.894 ops/s
[info] # Warmup Iteration   3: 489760.445 ops/s
[info] # Warmup Iteration   4: 503383.754 ops/s
[info] # Warmup Iteration   5: 502758.519 ops/s
[info] Iteration   1: 502710.040 ops/s
[info]                  ·gc.alloc.rate:               663.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          2078.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2084.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 503834.959 ops/s
[info]                  ·gc.alloc.rate:               662.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          2069.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2079.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 502946.764 ops/s
[info]                  ·gc.alloc.rate:               657.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          2058.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2085.649 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 504432.412 ops/s
[info]                  ·gc.alloc.rate:                   665.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              2077.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2079.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 503599.252 ops/s
[info]                  ·gc.alloc.rate:                   662.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              2070.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2084.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   503504.685 ±(99.9%) 2668.803 ops/s [Average]
[info]   (min, avg, max) = (502710.040, 503504.685, 504432.412), stdev = 693.080
[info]   CI (99.9%): [500835.882, 506173.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   662.542 ±(99.9%) 11.569 MB/sec [Average]
[info]   (min, avg, max) = (657.796, 662.542, 665.961), stdev = 3.004
[info]   CI (99.9%): [650.973, 674.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2070.902 ±(99.9%) 31.406 B/op [Average]
[info]   (min, avg, max) = (2058.401, 2070.902, 2078.562), stdev = 8.156
[info]   CI (99.9%): [2039.497, 2102.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.368 ±(99.9%) 2.075 MB/sec [Average]
[info]   (min, avg, max) = (665.814, 666.368, 667.144), stdev = 0.539
[info]   CI (99.9%): [664.293, 668.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2082.865 ±(99.9%) 11.480 B/op [Average]
[info]   (min, avg, max) = (2079.452, 2082.865, 2085.649), stdev = 2.981
[info]   CI (99.9%): [2071.385, 2094.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.065), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 728238.595 ops/s
[info] # Warmup Iteration   2: 1258935.295 ops/s
[info] # Warmup Iteration   3: 1267564.261 ops/s
[info] # Warmup Iteration   4: 1322200.173 ops/s
[info] # Warmup Iteration   5: 1336160.831 ops/s
[info] Iteration   1: 1338090.475 ops/s
[info]                  ·gc.alloc.rate:               916.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1333178.915 ops/s
[info]                  ·gc.alloc.rate:                   925.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1092.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1336065.862 ops/s
[info]                  ·gc.alloc.rate:               906.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          1067.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 791.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1339692.722 ops/s
[info]                  ·gc.alloc.rate:                   908.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1329976.240 ops/s
[info]                  ·gc.alloc.rate:                   922.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1091.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1335400.843 ±(99.9%) 14970.524 ops/s [Average]
[info]   (min, avg, max) = (1329976.240, 1335400.843, 1339692.722), stdev = 3887.797
[info]   CI (99.9%): [1320430.319, 1350371.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   915.789 ±(99.9%) 32.087 MB/sec [Average]
[info]   (min, avg, max) = (906.177, 915.789, 925.544), stdev = 8.333
[info]   CI (99.9%): [883.702, 947.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1079.121 ±(99.9%) 47.686 B/op [Average]
[info]   (min, avg, max) = (1067.224, 1079.121, 1092.582), stdev = 12.384
[info]   CI (99.9%): [1031.435, 1126.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.157 ±(99.9%) 1417.837 MB/sec [Average]
[info]   (min, avg, max) = (671.740, 941.157, 1345.378), stdev = 368.208
[info]   CI (99.9%): [≈ 0, 2358.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1109.952 ±(99.9%) 1684.150 B/op [Average]
[info]   (min, avg, max) = (789.809, 1109.952, 1591.988), stdev = 437.368
[info]   CI (99.9%): [≈ 0, 2794.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.049), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12304.166 ops/s
[info] # Warmup Iteration   2: 114316.362 ops/s
[info] # Warmup Iteration   3: 113956.130 ops/s
[info] # Warmup Iteration   4: 119050.083 ops/s
[info] # Warmup Iteration   5: 115520.257 ops/s
[info] Iteration   1: 114857.792 ops/s
[info]                  ·gc.alloc.rate:               3475.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          47607.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3341.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45775.594 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 118836.743 ops/s
[info]                  ·gc.alloc.rate:                   3619.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              47922.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44383.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 119114.385 ops/s
[info]                  ·gc.alloc.rate:                   3655.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              48293.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4038.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53351.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.550 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 118462.140 ops/s
[info]                  ·gc.alloc.rate:                   3610.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              47954.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44867.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 115618.075 ops/s
[info]                  ·gc.alloc.rate:               3527.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          48005.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46101.217 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   117377.827 ±(99.9%) 7645.033 ops/s [Average]
[info]   (min, avg, max) = (114857.792, 117377.827, 119114.385), stdev = 1985.391
[info]   CI (99.9%): [109732.794, 125022.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3577.673 ±(99.9%) 284.006 MB/sec [Average]
[info]   (min, avg, max) = (3475.477, 3577.673, 3655.276), stdev = 73.755
[info]   CI (99.9%): [3293.667, 3861.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   47956.797 ±(99.9%) 940.645 B/op [Average]
[info]   (min, avg, max) = (47607.928, 47956.797, 48293.569), stdev = 244.282
[info]   CI (99.9%): [47016.152, 48897.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3499.560 ±(99.9%) 1161.540 MB/sec [Average]
[info]   (min, avg, max) = (3341.713, 3499.560, 4038.116), stdev = 301.648
[info]   CI (99.9%): [2338.020, 4661.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46895.888 ±(99.9%) 14146.824 B/op [Average]
[info]   (min, avg, max) = (44383.936, 46895.888, 53351.661), stdev = 3673.885
[info]   CI (99.9%): [32749.064, 61042.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.220 ±(99.9%) 0.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.220, 0.550), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123232.405 ops/s
[info] # Warmup Iteration   2: 345036.921 ops/s
[info] # Warmup Iteration   3: 330663.145 ops/s
[info] # Warmup Iteration   4: 325262.317 ops/s
[info] # Warmup Iteration   5: 342681.331 ops/s
[info] Iteration   1: 341135.175 ops/s
[info]                  ·gc.alloc.rate:                   1161.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              5358.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3093.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 347841.156 ops/s
[info]                  ·gc.alloc.rate:               1196.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          5415.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6068.650 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 348105.263 ops/s
[info]                  ·gc.alloc.rate:                   1195.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              5406.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6068.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 346908.600 ops/s
[info]                  ·gc.alloc.rate:               1189.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          5398.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3046.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 346691.523 ops/s
[info]                  ·gc.alloc.rate:                   1203.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              5462.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6096.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   346136.343 ±(99.9%) 11009.630 ops/s [Average]
[info]   (min, avg, max) = (341135.175, 346136.343, 348105.263), stdev = 2859.166
[info]   CI (99.9%): [335126.713, 357145.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1189.559 ±(99.9%) 62.887 MB/sec [Average]
[info]   (min, avg, max) = (1161.613, 1189.559, 1203.403), stdev = 16.332
[info]   CI (99.9%): [1126.672, 1252.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5408.451 ±(99.9%) 142.673 B/op [Average]
[info]   (min, avg, max) = (5358.980, 5408.451, 5462.298), stdev = 37.052
[info]   CI (99.9%): [5265.778, 5551.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.735 ±(99.9%) 1415.726 MB/sec [Average]
[info]   (min, avg, max) = (670.477, 1073.735, 1343.139), stdev = 367.660
[info]   CI (99.9%): [≈ 0, 2489.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4874.707 ±(99.9%) 6344.949 B/op [Average]
[info]   (min, avg, max) = (3046.438, 4874.707, 6096.565), stdev = 1647.763
[info]   CI (99.9%): [≈ 0, 11219.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.818 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.394), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.138 ±(99.9%) 26.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.138, 15.404), stdev = 6.858
[info]   CI (99.9%): [≈ 0, 29.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282620.403 ops/s
[info] # Warmup Iteration   2: 824154.017 ops/s
[info] # Warmup Iteration   3: 845855.160 ops/s
[info] # Warmup Iteration   4: 851806.597 ops/s
[info] # Warmup Iteration   5: 872368.598 ops/s
[info] Iteration   1: 904209.824 ops/s
[info]                  ·gc.alloc.rate:               670.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          1166.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1160.095 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 900627.043 ops/s
[info]                  ·gc.alloc.rate:               664.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1164.686 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 893515.493 ops/s
[info]                  ·gc.alloc.rate:               665.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1171.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1175.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 902307.726 ops/s
[info]                  ·gc.alloc.rate:                   669.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1163.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 905789.271 ops/s
[info]                  ·gc.alloc.rate:               670.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          1165.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1160.370 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   901289.871 ±(99.9%) 18334.792 ops/s [Average]
[info]   (min, avg, max) = (893515.493, 901289.871, 905789.271), stdev = 4761.487
[info]   CI (99.9%): [882955.079, 919624.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   668.091 ±(99.9%) 11.489 MB/sec [Average]
[info]   (min, avg, max) = (664.138, 668.091, 670.849), stdev = 2.984
[info]   CI (99.9%): [656.602, 679.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1166.549 ±(99.9%) 15.931 B/op [Average]
[info]   (min, avg, max) = (1160.590, 1166.549, 1171.986), stdev = 4.137
[info]   CI (99.9%): [1150.617, 1182.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.068 ±(99.9%) 2.221 MB/sec [Average]
[info]   (min, avg, max) = (666.481, 667.068, 667.786), stdev = 0.577
[info]   CI (99.9%): [664.848, 669.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1164.780 ±(99.9%) 23.487 B/op [Average]
[info]   (min, avg, max) = (1160.095, 1164.780, 1175.084), stdev = 6.100
[info]   CI (99.9%): [1141.292, 1188.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1380843.592 ops/s
[info] # Warmup Iteration   2: 2309950.196 ops/s
[info] # Warmup Iteration   3: 2513898.303 ops/s
[info] # Warmup Iteration   4: 2546523.894 ops/s
[info] # Warmup Iteration   5: 2540038.878 ops/s
[info] Iteration   1: 2420595.255 ops/s
[info]                  ·gc.alloc.rate:               1152.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 873.641 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2421970.856 ops/s
[info]                  ·gc.alloc.rate:               1135.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          737.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 436.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2424053.216 ops/s
[info]                  ·gc.alloc.rate:                   1162.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2529088.722 ops/s
[info]                  ·gc.alloc.rate:                   1207.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     837.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2526515.004 ops/s
[info]                  ·gc.alloc.rate:                   1194.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2464444.610 ±(99.9%) 222787.668 ops/s [Average]
[info]   (min, avg, max) = (2420595.255, 2464444.610, 2529088.722), stdev = 57857.250
[info]   CI (99.9%): [2241656.943, 2687232.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1170.609 ±(99.9%) 114.681 MB/sec [Average]
[info]   (min, avg, max) = (1135.537, 1170.609, 1207.182), stdev = 29.782
[info]   CI (99.9%): [1055.928, 1285.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.587 ±(99.9%) 25.474 B/op [Average]
[info]   (min, avg, max) = (737.913, 747.587, 754.997), stdev = 6.615
[info]   CI (99.9%): [722.113, 773.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.695 ±(99.9%) 1417.365 MB/sec [Average]
[info]   (min, avg, max) = (672.152, 1075.695, 1345.371), stdev = 368.085
[info]   CI (99.9%): [≈ 0, 2493.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   687.949 ±(99.9%) 915.984 B/op [Average]
[info]   (min, avg, max) = (419.126, 687.949, 873.641), stdev = 237.878
[info]   CI (99.9%): [≈ 0, 1603.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.748), stdev = 1.203
[info]   CI (99.9%): [≈ 0, 5.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 2.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.710), stdev = 0.749
[info]   CI (99.9%): [≈ 0, 3.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1683502.648 ops/s
[info] # Warmup Iteration   2: 2828533.655 ops/s
[info] # Warmup Iteration   3: 2832356.476 ops/s
[info] # Warmup Iteration   4: 2760522.684 ops/s
[info] # Warmup Iteration   5: 2837071.361 ops/s
[info] Iteration   1: 2839373.599 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2560247.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2836670.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2848197.829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2829878.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2782873.365 ±(99.9%) 479886.540 ops/s [Average]
[info]   (min, avg, max) = (2560247.072, 2782873.365, 2848197.829), stdev = 124625.010
[info]   CI (99.9%): [2302986.825, 3262759.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143253.281 ops/s
[info] # Warmup Iteration   2: 428431.025 ops/s
[info] # Warmup Iteration   3: 469942.079 ops/s
[info] # Warmup Iteration   4: 454105.986 ops/s
[info] # Warmup Iteration   5: 453669.213 ops/s
[info] Iteration   1: 453987.482 ops/s
[info]                  ·gc.alloc.rate:               677.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          2349.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2315.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 453682.497 ops/s
[info]                  ·gc.alloc.rate:               670.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          2326.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2316.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 449377.937 ops/s
[info]                  ·gc.alloc.rate:               675.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          2366.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2341.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 455795.368 ops/s
[info]                  ·gc.alloc.rate:                   675.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              2333.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2308.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 457109.613 ops/s
[info]                  ·gc.alloc.rate:               678.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2302.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   453990.579 ±(99.9%) 11285.250 ops/s [Average]
[info]   (min, avg, max) = (449377.937, 453990.579, 457109.613), stdev = 2930.744
[info]   CI (99.9%): [442705.329, 465275.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   675.778 ±(99.9%) 11.599 MB/sec [Average]
[info]   (min, avg, max) = (670.875, 675.778, 678.763), stdev = 3.012
[info]   CI (99.9%): [664.180, 687.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2342.522 ±(99.9%) 61.146 B/op [Average]
[info]   (min, avg, max) = (2326.829, 2342.522, 2366.966), stdev = 15.880
[info]   CI (99.9%): [2281.376, 2403.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.348 ±(99.9%) 1.901 MB/sec [Average]
[info]   (min, avg, max) = (667.792, 668.348, 669.051), stdev = 0.494
[info]   CI (99.9%): [666.447, 670.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2316.780 ±(99.9%) 56.689 B/op [Average]
[info]   (min, avg, max) = (2302.708, 2316.780, 2341.123), stdev = 14.722
[info]   CI (99.9%): [2260.090, 2373.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4965.570 ops/s
[info] # Warmup Iteration   2: 15355.466 ops/s
[info] # Warmup Iteration   3: 16979.047 ops/s
[info] # Warmup Iteration   4: 16931.053 ops/s
[info] # Warmup Iteration   5: 17189.275 ops/s
[info] Iteration   1: 17120.115 ops/s
[info]                  ·gc.alloc.rate:                   1375.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              126448.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123455.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16522.045 ops/s
[info]                  ·gc.alloc.rate:                   1351.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              128761.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127954.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17040.478 ops/s
[info]                  ·gc.alloc.rate:                   1367.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              126267.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124054.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17258.946 ops/s
[info]                  ·gc.alloc.rate:                   1382.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              126081.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122461.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17327.548 ops/s
[info]                  ·gc.alloc.rate:                   1401.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              127277.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121731.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17053.826 ±(99.9%) 1224.301 ops/s [Average]
[info]   (min, avg, max) = (16522.045, 17053.826, 17327.548), stdev = 317.947
[info]   CI (99.9%): [15829.525, 18278.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1375.906 ±(99.9%) 70.940 MB/sec [Average]
[info]   (min, avg, max) = (1351.925, 1375.906, 1401.682), stdev = 18.423
[info]   CI (99.9%): [1304.966, 1446.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126967.239 ±(99.9%) 4243.361 B/op [Average]
[info]   (min, avg, max) = (126081.921, 126967.239, 128761.240), stdev = 1101.987
[info]   CI (99.9%): [122723.878, 131210.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.752 ±(99.9%) 4.669 MB/sec [Average]
[info]   (min, avg, max) = (1340.611, 1342.752, 1343.490), stdev = 1.213
[info]   CI (99.9%): [1338.083, 1347.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   123931.640 ±(99.9%) 9319.103 B/op [Average]
[info]   (min, avg, max) = (121731.863, 123931.640, 127954.826), stdev = 2420.141
[info]   CI (99.9%): [114612.537, 133250.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.753 ±(99.9%) 4.906 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.753, 2.976), stdev = 1.274
[info]   CI (99.9%): [≈ 0, 5.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69.421 ±(99.9%) 453.026 B/op [Average]
[info]   (min, avg, max) = (1.891, 69.421, 274.780), stdev = 117.649
[info]   CI (99.9%): [≈ 0, 522.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9250.433 ops/s
[info] # Warmup Iteration   2: 30829.622 ops/s
[info] # Warmup Iteration   3: 35714.107 ops/s
[info] # Warmup Iteration   4: 35250.307 ops/s
[info] # Warmup Iteration   5: 36088.948 ops/s
[info] Iteration   1: 35171.869 ops/s
[info]                  ·gc.alloc.rate:                   980.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              43864.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59706.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 35286.771 ops/s
[info]                  ·gc.alloc.rate:               963.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          42954.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29784.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 35391.470 ops/s
[info]                  ·gc.alloc.rate:                   965.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              42938.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29696.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36914.751 ops/s
[info]                  ·gc.alloc.rate:               1020.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          43503.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57002.953 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 35392.538 ops/s
[info]                  ·gc.alloc.rate:               963.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          42824.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29718.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   35631.480 ±(99.9%) 2784.437 ops/s [Average]
[info]   (min, avg, max) = (35171.869, 35631.480, 36914.751), stdev = 723.109
[info]   CI (99.9%): [32847.043, 38415.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   978.632 ±(99.9%) 94.009 MB/sec [Average]
[info]   (min, avg, max) = (963.261, 978.632, 1020.406), stdev = 24.414
[info]   CI (99.9%): [884.623, 1072.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43217.175 ±(99.9%) 1723.728 B/op [Average]
[info]   (min, avg, max) = (42824.447, 43217.175, 43864.418), stdev = 447.647
[info]   CI (99.9%): [41493.447, 44940.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.180 ±(99.9%) 1408.158 MB/sec [Average]
[info]   (min, avg, max) = (667.815, 935.180, 1337.045), stdev = 365.694
[info]   CI (99.9%): [≈ 0, 2343.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   41181.839 ±(99.9%) 60477.470 B/op [Average]
[info]   (min, avg, max) = (29696.521, 41181.839, 59706.562), stdev = 15705.807
[info]   CI (99.9%): [≈ 0, 101659.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.743 ±(99.9%) 3.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.743, 1.863), stdev = 1.017
[info]   CI (99.9%): [≈ 0, 4.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21174.465 ops/s
[info] # Warmup Iteration   2: 42674.653 ops/s
[info] # Warmup Iteration   3: 43213.280 ops/s
[info] # Warmup Iteration   4: 42953.137 ops/s
[info] # Warmup Iteration   5: 45303.206 ops/s
[info] Iteration   1: 45000.282 ops/s
[info]                  ·gc.alloc.rate:               634.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          22189.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23461.672 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 45243.228 ops/s
[info]                  ·gc.alloc.rate:               630.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          21936.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23334.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 45455.827 ops/s
[info]                  ·gc.alloc.rate:               631.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          21877.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23248.386 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 42914.406 ops/s
[info]                  ·gc.alloc.rate:               595.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          21852.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24625.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 45235.879 ops/s
[info]                  ·gc.alloc.rate:               625.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          21770.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23385.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   44769.925 ±(99.9%) 4042.079 ops/s [Average]
[info]   (min, avg, max) = (42914.406, 44769.925, 45455.827), stdev = 1049.715
[info]   CI (99.9%): [40727.846, 48812.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   623.761 ±(99.9%) 61.250 MB/sec [Average]
[info]   (min, avg, max) = (595.877, 623.761, 634.446), stdev = 15.907
[info]   CI (99.9%): [562.511, 685.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21925.458 ±(99.9%) 612.648 B/op [Average]
[info]   (min, avg, max) = (21770.974, 21925.458, 22189.531), stdev = 159.103
[info]   CI (99.9%): [21312.811, 22538.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.398 ±(99.9%) 2.024 MB/sec [Average]
[info]   (min, avg, max) = (670.819, 671.398, 672.159), stdev = 0.526
[info]   CI (99.9%): [669.374, 673.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23611.117 ±(99.9%) 2203.322 B/op [Average]
[info]   (min, avg, max) = (23248.386, 23611.117, 24625.241), stdev = 572.196
[info]   CI (99.9%): [21407.795, 25814.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4780.327 ops/s
[info] # Warmup Iteration   2: 24046.506 ops/s
[info] # Warmup Iteration   3: 29745.396 ops/s
[info] # Warmup Iteration   4: 29919.799 ops/s
[info] # Warmup Iteration   5: 29420.330 ops/s
[info] Iteration   1: 30113.732 ops/s
[info]                  ·gc.alloc.rate:                   1515.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              79217.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69942.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 29872.204 ops/s
[info]                  ·gc.alloc.rate:                   1511.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              79626.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105812.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 30150.430 ops/s
[info]                  ·gc.alloc.rate:                   1508.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              78736.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69960.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30086.481 ops/s
[info]                  ·gc.alloc.rate:                   1518.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              79443.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69902.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30222.520 ops/s
[info]                  ·gc.alloc.rate:               1535.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          79975.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69447.173 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30089.073 ±(99.9%) 506.546 ops/s [Average]
[info]   (min, avg, max) = (29872.204, 30089.073, 30222.520), stdev = 131.548
[info]   CI (99.9%): [29582.527, 30595.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1518.150 ±(99.9%) 40.915 MB/sec [Average]
[info]   (min, avg, max) = (1508.698, 1518.150, 1535.896), stdev = 10.626
[info]   CI (99.9%): [1477.235, 1559.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79399.834 ±(99.9%) 1783.887 B/op [Average]
[info]   (min, avg, max) = (78736.242, 79399.834, 79975.734), stdev = 463.270
[info]   CI (99.9%): [77615.948, 81183.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.538 ±(99.9%) 1156.683 MB/sec [Average]
[info]   (min, avg, max) = (1333.700, 1471.538, 2008.867), stdev = 300.387
[info]   CI (99.9%): [314.855, 2628.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77013.002 ±(99.9%) 61997.818 B/op [Average]
[info]   (min, avg, max) = (69447.173, 77013.002, 105812.191), stdev = 16100.636
[info]   CI (99.9%): [15015.184, 139010.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 7.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.456), stdev = 1.971
[info]   CI (99.9%): [≈ 0, 8.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48.685 ±(99.9%) 395.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.685, 232.536), stdev = 102.835
[info]   CI (99.9%): [≈ 0, 444.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9779.234 ops/s
[info] # Warmup Iteration   2: 23589.482 ops/s
[info] # Warmup Iteration   3: 25023.912 ops/s
[info] # Warmup Iteration   4: 25183.865 ops/s
[info] # Warmup Iteration   5: 24924.494 ops/s
[info] Iteration   1: 24880.056 ops/s
[info]                  ·gc.alloc.rate:                   1787.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              113057.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84424.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24849.323 ops/s
[info]                  ·gc.alloc.rate:               1807.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          114454.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126969.078 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 25191.636 ops/s
[info]                  ·gc.alloc.rate:                   1815.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              113371.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83691.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25223.501 ops/s
[info]                  ·gc.alloc.rate:                   1830.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              114224.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125668.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24871.123 ops/s
[info]                  ·gc.alloc.rate:                   1806.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              114255.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127704.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   25003.128 ±(99.9%) 721.232 ops/s [Average]
[info]   (min, avg, max) = (24849.323, 25003.128, 25223.501), stdev = 187.302
[info]   CI (99.9%): [24281.896, 25724.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1809.280 ±(99.9%) 60.886 MB/sec [Average]
[info]   (min, avg, max) = (1787.183, 1809.280, 1830.834), stdev = 15.812
[info]   CI (99.9%): [1748.393, 1870.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   113872.716 ±(99.9%) 2377.331 B/op [Average]
[info]   (min, avg, max) = (113057.489, 113872.716, 114454.416), stdev = 617.385
[info]   CI (99.9%): [111495.386, 116250.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.449 ±(99.9%) 1424.605 MB/sec [Average]
[info]   (min, avg, max) = (1334.562, 1742.449, 2018.856), stdev = 369.965
[info]   CI (99.9%): [317.845, 3167.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   109691.730 ±(99.9%) 90155.560 B/op [Average]
[info]   (min, avg, max) = (83691.314, 109691.730, 127704.965), stdev = 23413.113
[info]   CI (99.9%): [19536.170, 199847.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.830 ±(99.9%) 4.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.830, 2.635), stdev = 1.167
[info]   CI (99.9%): [≈ 0, 6.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4027.407 ops/s
[info] # Warmup Iteration   2: 23432.211 ops/s
[info] # Warmup Iteration   3: 25188.702 ops/s
[info] # Warmup Iteration   4: 25213.107 ops/s
[info] # Warmup Iteration   5: 25122.774 ops/s
[info] Iteration   1: 25231.409 ops/s
[info]                  ·gc.alloc.rate:                   1572.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              98022.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83309.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 25218.280 ops/s
[info]                  ·gc.alloc.rate:                   1558.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              97255.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83435.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25278.170 ops/s
[info]                  ·gc.alloc.rate:                   1587.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              98845.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124840.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25404.736 ops/s
[info]                  ·gc.alloc.rate:                   1582.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              98047.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82621.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24977.968 ops/s
[info]                  ·gc.alloc.rate:               1553.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          97865.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83946.521 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   25222.113 ±(99.9%) 597.165 ops/s [Average]
[info]   (min, avg, max) = (24977.968, 25222.113, 25404.736), stdev = 155.082
[info]   CI (99.9%): [24624.947, 25819.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1570.978 ±(99.9%) 57.814 MB/sec [Average]
[info]   (min, avg, max) = (1553.222, 1570.978, 1587.949), stdev = 15.014
[info]   CI (99.9%): [1513.164, 1628.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98007.392 ±(99.9%) 2187.199 B/op [Average]
[info]   (min, avg, max) = (97255.585, 98007.392, 98845.949), stdev = 568.009
[info]   CI (99.9%): [95820.193, 100194.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.014 ±(99.9%) 1154.950 MB/sec [Average]
[info]   (min, avg, max) = (1332.321, 1469.014, 2005.547), stdev = 299.937
[info]   CI (99.9%): [314.064, 2623.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91630.649 ±(99.9%) 71509.549 B/op [Average]
[info]   (min, avg, max) = (82621.582, 91630.649, 124840.351), stdev = 18570.803
[info]   CI (99.9%): [20121.100, 163140.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.850 ±(99.9%) 7.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.850, 4.164), stdev = 1.853
[info]   CI (99.9%): [≈ 0, 7.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52.881 ±(99.9%) 444.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.881, 259.220), stdev = 115.351
[info]   CI (99.9%): [≈ 0, 497.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12827.677 ops/s
[info] # Warmup Iteration   2: 24979.404 ops/s
[info] # Warmup Iteration   3: 26324.479 ops/s
[info] # Warmup Iteration   4: 27308.467 ops/s
[info] # Warmup Iteration   5: 27255.959 ops/s
[info] Iteration   1: 27390.088 ops/s
[info]                  ·gc.alloc.rate:                   1640.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              94250.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115885.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 27336.967 ops/s
[info]                  ·gc.alloc.rate:                   1612.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              92840.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77451.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 27266.937 ops/s
[info]                  ·gc.alloc.rate:                   1608.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              92843.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77592.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26991.961 ops/s
[info]                  ·gc.alloc.rate:                   1619.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              94430.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117302.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 26682.277 ops/s
[info]                  ·gc.alloc.rate:                   1575.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              92896.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79054.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27133.646 ±(99.9%) 1136.881 ops/s [Average]
[info]   (min, avg, max) = (26682.277, 27133.646, 27390.088), stdev = 295.244
[info]   CI (99.9%): [25996.765, 28270.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1611.363 ±(99.9%) 90.646 MB/sec [Average]
[info]   (min, avg, max) = (1575.302, 1611.363, 1640.375), stdev = 23.541
[info]   CI (99.9%): [1520.717, 1702.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93452.513 ±(99.9%) 3132.532 B/op [Average]
[info]   (min, avg, max) = (92840.676, 93452.513, 94430.872), stdev = 813.509
[info]   CI (99.9%): [90319.980, 96585.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.858 ±(99.9%) 1414.928 MB/sec [Average]
[info]   (min, avg, max) = (1340.573, 1611.858, 2016.921), stdev = 367.452
[info]   CI (99.9%): [196.930, 3026.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   93457.332 ±(99.9%) 81387.285 B/op [Average]
[info]   (min, avg, max) = (77451.418, 93457.332, 117302.546), stdev = 21136.019
[info]   CI (99.9%): [12070.047, 174844.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 4.093 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.725, 2.477), stdev = 1.063
[info]   CI (99.9%): [≈ 0, 4.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.760 ±(99.9%) 235.589 B/op [Average]
[info]   (min, avg, max) = (2.392, 41.760, 142.621), stdev = 61.182
[info]   CI (99.9%): [≈ 0, 277.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:43:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11150.848 ops/s
[info] # Warmup Iteration   2: 25776.444 ops/s
[info] # Warmup Iteration   3: 27514.114 ops/s
[info] # Warmup Iteration   4: 27593.376 ops/s
[info] # Warmup Iteration   5: 27413.541 ops/s
[info] Iteration   1: 26702.145 ops/s
[info]                  ·gc.alloc.rate:                   1524.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              89884.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78740.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27629.370 ops/s
[info]                  ·gc.alloc.rate:                   1564.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              89100.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76158.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27495.581 ops/s
[info]                  ·gc.alloc.rate:               1581.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          90516.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114962.060 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 27595.606 ops/s
[info]                  ·gc.alloc.rate:               1586.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          90494.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76515.654 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27366.828 ops/s
[info]                  ·gc.alloc.rate:                   1588.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              91369.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77270.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27357.906 ±(99.9%) 1465.334 ops/s [Average]
[info]   (min, avg, max) = (26702.145, 27357.906, 27629.370), stdev = 380.543
[info]   CI (99.9%): [25892.572, 28823.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1569.348 ±(99.9%) 102.401 MB/sec [Average]
[info]   (min, avg, max) = (1524.989, 1569.348, 1588.936), stdev = 26.593
[info]   CI (99.9%): [1466.947, 1671.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   90273.159 ±(99.9%) 3242.202 B/op [Average]
[info]   (min, avg, max) = (89100.856, 90273.159, 91369.449), stdev = 841.990
[info]   CI (99.9%): [87030.957, 93515.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1473.440 ±(99.9%) 1151.857 MB/sec [Average]
[info]   (min, avg, max) = (1335.921, 1473.440, 2008.516), stdev = 299.134
[info]   CI (99.9%): [321.583, 2625.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   84729.499 ±(99.9%) 65189.619 B/op [Average]
[info]   (min, avg, max) = (76158.652, 84729.499, 114962.060), stdev = 16929.537
[info]   CI (99.9%): [19539.880, 149919.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.722 ±(99.9%) 2.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 1.227), stdev = 0.659
[info]   CI (99.9%): [≈ 0, 3.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2381.933 ops/s
[info] # Warmup Iteration   2: 7249.152 ops/s
[info] # Warmup Iteration   3: 7825.700 ops/s
[info] # Warmup Iteration   4: 7854.010 ops/s
[info] # Warmup Iteration   5: 7846.279 ops/s
[info] Iteration   1: 7891.454 ops/s
[info]                  ·gc.alloc.rate:               1161.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          231582.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133496.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 7815.392 ops/s
[info]                  ·gc.alloc.rate:                   1170.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              235540.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269689.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7834.674 ops/s
[info]                  ·gc.alloc.rate:                   1167.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              234525.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269134.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7876.270 ops/s
[info]                  ·gc.alloc.rate:               1167.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          233240.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133900.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 7845.538 ops/s
[info]                  ·gc.alloc.rate:                   1187.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              238188.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269126.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7852.666 ±(99.9%) 119.082 ops/s [Average]
[info]   (min, avg, max) = (7815.392, 7852.666, 7891.454), stdev = 30.925
[info]   CI (99.9%): [7733.584, 7971.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1170.787 ±(99.9%) 38.232 MB/sec [Average]
[info]   (min, avg, max) = (1161.278, 1170.787, 1187.583), stdev = 9.929
[info]   CI (99.9%): [1132.556, 1209.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234615.479 ±(99.9%) 9573.229 B/op [Average]
[info]   (min, avg, max) = (231582.197, 234615.479, 238188.825), stdev = 2486.137
[info]   CI (99.9%): [225042.250, 244188.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.204 ±(99.9%) 1414.406 MB/sec [Average]
[info]   (min, avg, max) = (669.422, 1072.204, 1341.833), stdev = 367.317
[info]   CI (99.9%): [≈ 0, 2486.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   215069.399 ±(99.9%) 286032.761 B/op [Average]
[info]   (min, avg, max) = (133496.184, 215069.399, 269689.401), stdev = 74281.800
[info]   CI (99.9%): [≈ 0, 501102.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.768), stdev = 1.674
[info]   CI (99.9%): [≈ 0, 7.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   155.354 ±(99.9%) 1292.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 155.354, 755.831), stdev = 335.721
[info]   CI (99.9%): [≈ 0, 1448.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3743.615 ops/s
[info] # Warmup Iteration   2: 16158.201 ops/s
[info] # Warmup Iteration   3: 18058.162 ops/s
[info] # Warmup Iteration   4: 17700.153 ops/s
[info] # Warmup Iteration   5: 17369.860 ops/s
[info] Iteration   1: 17356.607 ops/s
[info]                  ·gc.alloc.rate:               1573.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          142683.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121770.116 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17209.768 ops/s
[info]                  ·gc.alloc.rate:                   1610.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              147301.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184286.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 17984.891 ops/s
[info]                  ·gc.alloc.rate:                   1639.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              143372.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117460.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18089.426 ops/s
[info]                  ·gc.alloc.rate:                   1662.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              144638.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116547.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18222.879 ops/s
[info]                  ·gc.alloc.rate:                   1672.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              144413.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173458.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17772.714 ±(99.9%) 1762.512 ops/s [Average]
[info]   (min, avg, max) = (17209.768, 17772.714, 18222.879), stdev = 457.719
[info]   CI (99.9%): [16010.202, 19535.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1631.576 ±(99.9%) 154.878 MB/sec [Average]
[info]   (min, avg, max) = (1573.450, 1631.576, 1672.120), stdev = 40.221
[info]   CI (99.9%): [1476.698, 1786.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144481.781 ±(99.9%) 6791.849 B/op [Average]
[info]   (min, avg, max) = (142683.340, 144481.781, 147301.365), stdev = 1763.822
[info]   CI (99.9%): [137689.932, 151273.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.771 ±(99.9%) 1413.108 MB/sec [Average]
[info]   (min, avg, max) = (1339.603, 1609.771, 2015.112), stdev = 366.980
[info]   CI (99.9%): [196.664, 3022.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   142704.611 ±(99.9%) 128212.690 B/op [Average]
[info]   (min, avg, max) = (116547.081, 142704.611, 184286.684), stdev = 33296.428
[info]   CI (99.9%): [14491.921, 270917.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.894), stdev = 1.241
[info]   CI (99.9%): [≈ 0, 5.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.852 ±(99.9%) 437.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.852, 264.627), stdev = 113.560
[info]   CI (99.9%): [≈ 0, 505.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16009.117 ops/s
[info] # Warmup Iteration   2: 38112.903 ops/s
[info] # Warmup Iteration   3: 43307.682 ops/s
[info] # Warmup Iteration   4: 40987.344 ops/s
[info] # Warmup Iteration   5: 43030.427 ops/s
[info] Iteration   1: 43357.413 ops/s
[info]                  ·gc.alloc.rate:               1236.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          44860.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48603.398 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 43695.773 ops/s
[info]                  ·gc.alloc.rate:               1225.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          44134.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24125.742 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43381.807 ops/s
[info]                  ·gc.alloc.rate:                   1249.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              45331.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48615.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 43447.485 ops/s
[info]                  ·gc.alloc.rate:                   1225.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              44389.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48575.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 43563.623 ops/s
[info]                  ·gc.alloc.rate:                   1242.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              44863.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48397.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   43489.220 ±(99.9%) 540.644 ops/s [Average]
[info]   (min, avg, max) = (43357.413, 43489.220, 43695.773), stdev = 140.403
[info]   CI (99.9%): [42948.577, 44029.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1235.930 ±(99.9%) 39.954 MB/sec [Average]
[info]   (min, avg, max) = (1225.697, 1235.930, 1249.588), stdev = 10.376
[info]   CI (99.9%): [1195.976, 1275.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44715.816 ±(99.9%) 1791.972 B/op [Average]
[info]   (min, avg, max) = (44134.661, 44715.816, 45331.798), stdev = 465.370
[info]   CI (99.9%): [42923.843, 46507.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1206.219 ±(99.9%) 1154.224 MB/sec [Average]
[info]   (min, avg, max) = (670.014, 1206.219, 1341.574), stdev = 299.748
[info]   CI (99.9%): [51.994, 2360.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43663.387 ±(99.9%) 42057.617 B/op [Average]
[info]   (min, avg, max) = (24125.742, 43663.387, 48615.005), stdev = 10922.230
[info]   CI (99.9%): [1605.771, 85721.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.124), stdev = 1.351
[info]   CI (99.9%): [≈ 0, 6.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.241 ±(99.9%) 188.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.241, 113.113), stdev = 48.902
[info]   CI (99.9%): [≈ 0, 217.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28021.776 ops/s
[info] # Warmup Iteration   2: 63408.364 ops/s
[info] # Warmup Iteration   3: 63312.101 ops/s
[info] # Warmup Iteration   4: 66329.116 ops/s
[info] # Warmup Iteration   5: 67677.829 ops/s
[info] Iteration   1: 67785.278 ops/s
[info]                  ·gc.alloc.rate:               772.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          17944.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15583.095 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 67200.280 ops/s
[info]                  ·gc.alloc.rate:               763.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          17876.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15726.534 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 67383.421 ops/s
[info]                  ·gc.alloc.rate:               766.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          17902.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15682.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 67770.074 ops/s
[info]                  ·gc.alloc.rate:                   772.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              17947.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15609.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 64571.345 ops/s
[info]                  ·gc.alloc.rate:               765.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          18661.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32766.985 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   66942.080 ±(99.9%) 5194.228 ops/s [Average]
[info]   (min, avg, max) = (64571.345, 66942.080, 67785.278), stdev = 1348.925
[info]   CI (99.9%): [61747.852, 72136.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   768.347 ±(99.9%) 16.697 MB/sec [Average]
[info]   (min, avg, max) = (763.462, 768.347, 772.963), stdev = 4.336
[info]   CI (99.9%): [751.650, 785.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18066.534 ±(99.9%) 1286.075 B/op [Average]
[info]   (min, avg, max) = (17876.673, 18066.534, 18661.634), stdev = 333.990
[info]   CI (99.9%): [16780.459, 19352.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.232 ±(99.9%) 1158.355 MB/sec [Average]
[info]   (min, avg, max) = (671.260, 806.232, 1344.356), stdev = 300.821
[info]   CI (99.9%): [≈ 0, 1964.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19073.806 ±(99.9%) 29476.420 B/op [Average]
[info]   (min, avg, max) = (15583.095, 19073.806, 32766.985), stdev = 7654.933
[info]   CI (99.9%): [≈ 0, 48550.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.483), stdev = 0.216
[info]   CI (99.9%): [≈ 0, 0.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2348.133 ops/s
[info] # Warmup Iteration   2: 28072.817 ops/s
[info] # Warmup Iteration   3: 33191.666 ops/s
[info] # Warmup Iteration   4: 33301.996 ops/s
[info] # Warmup Iteration   5: 33117.289 ops/s
[info] Iteration   1: 33361.402 ops/s
[info]                  ·gc.alloc.rate:                   2199.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              103766.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94745.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33532.742 ops/s
[info]                  ·gc.alloc.rate:                   2208.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              103629.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94480.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33480.669 ops/s
[info]                  ·gc.alloc.rate:               2220.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          104361.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126386.523 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 33420.650 ops/s
[info]                  ·gc.alloc.rate:               2216.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          104381.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95148.272 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 33183.112 ops/s
[info]                  ·gc.alloc.rate:               2200.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          104373.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96001.512 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33395.715 ±(99.9%) 520.168 ops/s [Average]
[info]   (min, avg, max) = (33183.112, 33395.715, 33532.742), stdev = 135.086
[info]   CI (99.9%): [32875.547, 33915.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2209.135 ±(99.9%) 35.158 MB/sec [Average]
[info]   (min, avg, max) = (2199.998, 2209.135, 2220.139), stdev = 9.130
[info]   CI (99.9%): [2173.977, 2244.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   104102.733 ±(99.9%) 1434.072 B/op [Average]
[info]   (min, avg, max) = (103629.872, 104102.733, 104381.792), stdev = 372.424
[info]   CI (99.9%): [102668.661, 105536.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2151.079 ±(99.9%) 1157.457 MB/sec [Average]
[info]   (min, avg, max) = (2008.729, 2151.079, 2688.681), stdev = 300.588
[info]   CI (99.9%): [993.622, 3308.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   101352.485 ±(99.9%) 53933.175 B/op [Average]
[info]   (min, avg, max) = (94480.953, 101352.485, 126386.523), stdev = 14006.274
[info]   CI (99.9%): [47419.309, 155285.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.225 ±(99.9%) 1.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.979), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.599 ±(99.9%) 77.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.599, 46.155), stdev = 20.096
[info]   CI (99.9%): [≈ 0, 87.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9407.450 ops/s
[info] # Warmup Iteration   2: 26936.174 ops/s
[info] # Warmup Iteration   3: 27307.132 ops/s
[info] # Warmup Iteration   4: 27926.814 ops/s
[info] # Warmup Iteration   5: 27990.519 ops/s
[info] Iteration   1: 27838.885 ops/s
[info]                  ·gc.alloc.rate:                   1784.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              100894.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113522.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.354 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 27901.536 ops/s
[info]                  ·gc.alloc.rate:                   1801.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              101608.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113327.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28056.101 ops/s
[info]                  ·gc.alloc.rate:               1795.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          100724.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74959.676 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 27996.539 ops/s
[info]                  ·gc.alloc.rate:               1794.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          100868.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112568.103 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 28107.535 ops/s
[info]                  ·gc.alloc.rate:               1801.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          100836.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74783.726 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27980.119 ±(99.9%) 423.571 ops/s [Average]
[info]   (min, avg, max) = (27838.885, 27980.119, 28107.535), stdev = 110.000
[info]   CI (99.9%): [27556.548, 28403.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1795.523 ±(99.9%) 26.471 MB/sec [Average]
[info]   (min, avg, max) = (1784.657, 1795.523, 1801.511), stdev = 6.874
[info]   CI (99.9%): [1769.052, 1821.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100986.717 ±(99.9%) 1362.371 B/op [Average]
[info]   (min, avg, max) = (100724.608, 100986.717, 101608.925), stdev = 353.803
[info]   CI (99.9%): [99624.346, 102349.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.411 ±(99.9%) 1413.771 MB/sec [Average]
[info]   (min, avg, max) = (1336.055, 1738.411, 2009.072), stdev = 367.152
[info]   CI (99.9%): [324.640, 3152.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   97832.300 ±(99.9%) 80721.779 B/op [Average]
[info]   (min, avg, max) = (74783.726, 97832.300, 113522.926), stdev = 20963.190
[info]   CI (99.9%): [17110.522, 178554.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.976), stdev = 1.774
[info]   CI (99.9%): [≈ 0, 7.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.326 ±(99.9%) 385.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.326, 224.278), stdev = 100.042
[info]   CI (99.9%): [≈ 0, 430.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16605.501 ops/s
[info] # Warmup Iteration   2: 30795.601 ops/s
[info] # Warmup Iteration   3: 33301.389 ops/s
[info] # Warmup Iteration   4: 32821.486 ops/s
[info] # Warmup Iteration   5: 33373.195 ops/s
[info] Iteration   1: 34422.257 ops/s
[info]                  ·gc.alloc.rate:               1542.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          70501.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61525.068 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 34387.999 ops/s
[info]                  ·gc.alloc.rate:                   1546.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              70775.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61585.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34090.781 ops/s
[info]                  ·gc.alloc.rate:                   1559.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              71998.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93217.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34523.405 ops/s
[info]                  ·gc.alloc.rate:               1566.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          71406.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61253.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 34556.531 ops/s
[info]                  ·gc.alloc.rate:                   1553.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              70728.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61133.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34396.195 ±(99.9%) 709.800 ops/s [Average]
[info]   (min, avg, max) = (34090.781, 34396.195, 34556.531), stdev = 184.333
[info]   CI (99.9%): [33686.395, 35105.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1553.643 ±(99.9%) 37.143 MB/sec [Average]
[info]   (min, avg, max) = (1542.413, 1553.643, 1566.319), stdev = 9.646
[info]   CI (99.9%): [1516.500, 1590.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   71082.191 ±(99.9%) 2359.081 B/op [Average]
[info]   (min, avg, max) = (70501.487, 71082.191, 71998.472), stdev = 612.646
[info]   CI (99.9%): [68723.110, 73441.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.448 ±(99.9%) 1162.111 MB/sec [Average]
[info]   (min, avg, max) = (1342.450, 1479.448, 2019.311), stdev = 301.797
[info]   CI (99.9%): [317.336, 2641.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67743.002 ±(99.9%) 54839.454 B/op [Average]
[info]   (min, avg, max) = (61133.055, 67743.002, 93217.007), stdev = 14241.632
[info]   CI (99.9%): [12903.548, 122582.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.144), stdev = 1.397
[info]   CI (99.9%): [≈ 0, 6.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.786 ±(99.9%) 248.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.786, 145.123), stdev = 64.486
[info]   CI (99.9%): [≈ 0, 278.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14354.350 ops/s
[info] # Warmup Iteration   2: 33787.630 ops/s
[info] # Warmup Iteration   3: 34251.408 ops/s
[info] # Warmup Iteration   4: 34725.987 ops/s
[info] # Warmup Iteration   5: 35249.719 ops/s
[info] Iteration   1: 35192.555 ops/s
[info]                  ·gc.alloc.rate:                   1521.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              68036.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60147.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 35327.409 ops/s
[info]                  ·gc.alloc.rate:               1526.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          67999.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59947.458 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 35267.319 ops/s
[info]                  ·gc.alloc.rate:                   1524.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              68005.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60049.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35247.142 ops/s
[info]                  ·gc.alloc.rate:                   1548.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              69134.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89919.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35178.088 ops/s
[info]                  ·gc.alloc.rate:                   1520.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              68021.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59992.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   35242.502 ±(99.9%) 231.763 ops/s [Average]
[info]   (min, avg, max) = (35178.088, 35242.502, 35327.409), stdev = 60.188
[info]   CI (99.9%): [35010.739, 35474.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1528.194 ±(99.9%) 44.204 MB/sec [Average]
[info]   (min, avg, max) = (1520.426, 1528.194, 1548.243), stdev = 11.480
[info]   CI (99.9%): [1483.990, 1572.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68239.584 ±(99.9%) 1927.924 B/op [Average]
[info]   (min, avg, max) = (67999.556, 68239.584, 69134.855), stdev = 500.676
[info]   CI (99.9%): [66311.660, 70167.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.292 ±(99.9%) 1152.547 MB/sec [Average]
[info]   (min, avg, max) = (1340.965, 1478.292, 2013.707), stdev = 299.313
[info]   CI (99.9%): [325.745, 2630.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66011.355 ±(99.9%) 51465.075 B/op [Average]
[info]   (min, avg, max) = (59947.458, 66011.355, 89919.586), stdev = 13365.316
[info]   CI (99.9%): [14546.280, 117476.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.636 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.332), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   31.962 ±(99.9%) 251.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.962, 148.637), stdev = 65.287
[info]   CI (99.9%): [≈ 0, 283.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88052.145 ops/s
[info] # Warmup Iteration   2: 314044.255 ops/s
[info] # Warmup Iteration   3: 333859.667 ops/s
[info] # Warmup Iteration   4: 328359.625 ops/s
[info] # Warmup Iteration   5: 325316.770 ops/s
[info] Iteration   1: 318891.480 ops/s
[info]                  ·gc.alloc.rate:               1791.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          8844.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6627.984 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 319965.606 ops/s
[info]                  ·gc.alloc.rate:                   1810.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              8903.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9908.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 330707.181 ops/s
[info]                  ·gc.alloc.rate:                   1895.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              9021.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9561.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 335002.614 ops/s
[info]                  ·gc.alloc.rate:               1880.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          8834.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6284.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 334650.742 ops/s
[info]                  ·gc.alloc.rate:               1918.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          9022.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9444.020 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   327843.524 ±(99.9%) 30319.512 ops/s [Average]
[info]   (min, avg, max) = (318891.480, 327843.524, 335002.614), stdev = 7873.881
[info]   CI (99.9%): [297524.013, 358163.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1859.447 ±(99.9%) 213.178 MB/sec [Average]
[info]   (min, avg, max) = (1791.966, 1859.447, 1918.819), stdev = 55.362
[info]   CI (99.9%): [1646.269, 2072.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8925.186 ±(99.9%) 355.586 B/op [Average]
[info]   (min, avg, max) = (8834.272, 8925.186, 9022.519), stdev = 92.345
[info]   CI (99.9%): [8569.600, 9280.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.566 ±(99.9%) 1414.167 MB/sec [Average]
[info]   (min, avg, max) = (1337.599, 1742.566, 2014.628), stdev = 367.255
[info]   CI (99.9%): [328.400, 3156.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8365.196 ±(99.9%) 6759.010 B/op [Average]
[info]   (min, avg, max) = (6284.277, 8365.196, 9908.517), stdev = 1755.293
[info]   CI (99.9%): [1606.187, 15124.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.789), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.747 ±(99.9%) 32.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.747, 18.636), stdev = 8.323
[info]   CI (99.9%): [≈ 0, 35.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.679 ops/s
[info] # Warmup Iteration   2: 1449568.049 ops/s
[info] # Warmup Iteration   3: 1495566.096 ops/s
[info] # Warmup Iteration   4: 1519846.674 ops/s
[info] # Warmup Iteration   5: 1517978.504 ops/s
[info] Iteration   1: 1519675.722 ops/s
[info]                  ·gc.alloc.rate:               493.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          510.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 689.230 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1524666.907 ops/s
[info]                  ·gc.alloc.rate:      480.592 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1522209.877 ops/s
[info]                  ·gc.alloc.rate:               497.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          514.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 688.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1521427.466 ops/s
[info]                  ·gc.alloc.rate:                   497.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              514.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     688.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1526775.591 ops/s
[info]                  ·gc.alloc.rate:      481.210 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1522951.113 ±(99.9%) 10749.039 ops/s [Average]
[info]   (min, avg, max) = (1519675.722, 1522951.113, 1526775.591), stdev = 2791.491
[info]   CI (99.9%): [1512202.073, 1533700.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   490.022 ±(99.9%) 32.775 MB/sec [Average]
[info]   (min, avg, max) = (480.592, 490.022, 497.578), stdev = 8.512
[info]   CI (99.9%): [457.247, 522.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   506.335 ±(99.9%) 36.771 B/op [Average]
[info]   (min, avg, max) = (496.000, 506.335, 514.541), stdev = 9.549
[info]   CI (99.9%): [469.564, 543.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.429 ±(99.9%) 1404.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.429, 666.069), stdev = 364.627
[info]   CI (99.9%): [≈ 0, 1803.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   413.216 ±(99.9%) 1452.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 413.216, 689.230), stdev = 377.213
[info]   CI (99.9%): [≈ 0, 1865.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206015.180 ops/s
[info] # Warmup Iteration   2: 649779.596 ops/s
[info] # Warmup Iteration   3: 681237.424 ops/s
[info] # Warmup Iteration   4: 676715.318 ops/s
[info] # Warmup Iteration   5: 680522.854 ops/s
[info] Iteration   1: 684861.288 ops/s
[info]                  ·gc.alloc.rate:      529.131 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 682542.512 ops/s
[info]                  ·gc.alloc.rate:               542.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1536.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 683110.401 ops/s
[info]                  ·gc.alloc.rate:               541.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1535.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 681983.042 ops/s
[info]                  ·gc.alloc.rate:                   548.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1265.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1539.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 684673.033 ops/s
[info]                  ·gc.alloc.rate:               551.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          1266.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1533.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   683434.055 ±(99.9%) 4937.653 ops/s [Average]
[info]   (min, avg, max) = (681983.042, 683434.055, 684861.288), stdev = 1282.293
[info]   CI (99.9%): [678496.403, 688371.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   542.452 ±(99.9%) 32.751 MB/sec [Average]
[info]   (min, avg, max) = (529.131, 542.452, 551.054), stdev = 8.505
[info]   CI (99.9%): [509.701, 575.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1249.103 ±(99.9%) 79.002 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1249.103, 1266.533), stdev = 20.517
[info]   CI (99.9%): [1170.100, 1328.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.512 ±(99.9%) 1148.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.512, 667.227), stdev = 298.242
[info]   CI (99.9%): [≈ 0, 1681.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1229.114 ±(99.9%) 2645.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1229.114, 1539.620), stdev = 687.099
[info]   CI (99.9%): [≈ 0, 3874.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978006.335 ops/s
[info] # Warmup Iteration   2: 1741660.694 ops/s
[info] # Warmup Iteration   3: 1877569.440 ops/s
[info] # Warmup Iteration   4: 1884654.565 ops/s
[info] # Warmup Iteration   5: 1875139.412 ops/s
[info] Iteration   1: 1878644.652 ops/s
[info]                  ·gc.alloc.rate:               377.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 428.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1866915.377 ops/s
[info]                  ·gc.alloc.rate:               375.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 431.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1798832.494 ops/s
[info]                  ·gc.alloc.rate:      347.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1877401.319 ops/s
[info]                  ·gc.alloc.rate:                   380.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1884213.421 ops/s
[info]                  ·gc.alloc.rate:      364.405 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.370 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1861201.452 ±(99.9%) 136396.357 ops/s [Average]
[info]   (min, avg, max) = (1798832.494, 1861201.452, 1884213.421), stdev = 35421.701
[info]   CI (99.9%): [1724805.096, 1997597.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   369.143 ±(99.9%) 52.100 MB/sec [Average]
[info]   (min, avg, max) = (347.502, 369.143, 380.157), stdev = 13.530
[info]   CI (99.9%): [317.043, 421.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.049 ±(99.9%) 27.842 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.049, 318.667), stdev = 7.230
[info]   CI (99.9%): [284.207, 339.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.862 ±(99.9%) 1217.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.862, 670.871), stdev = 316.087
[info]   CI (99.9%): [≈ 0, 1556.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   284.449 ±(99.9%) 1021.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 284.449, 562.358), stdev = 265.235
[info]   CI (99.9%): [≈ 0, 1305.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13677.555 ops/s
[info] # Warmup Iteration   2: 82064.343 ops/s
[info] # Warmup Iteration   3: 97058.268 ops/s
[info] # Warmup Iteration   4: 93873.432 ops/s
[info] # Warmup Iteration   5: 96238.874 ops/s
[info] Iteration   1: 97697.205 ops/s
[info]                  ·gc.alloc.rate:               3248.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          52327.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43203.739 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 97910.603 ops/s
[info]                  ·gc.alloc.rate:                   3241.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              52092.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43290.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 97128.421 ops/s
[info]                  ·gc.alloc.rate:               3246.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          52609.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54719.811 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 97415.084 ops/s
[info]                  ·gc.alloc.rate:               3255.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          52588.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54715.800 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 96686.094 ops/s
[info]                  ·gc.alloc.rate:               3244.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          52819.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44172.710 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   97367.481 ±(99.9%) 1854.119 ops/s [Average]
[info]   (min, avg, max) = (96686.094, 97367.481, 97910.603), stdev = 481.509
[info]   CI (99.9%): [95513.362, 99221.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3247.499 ±(99.9%) 20.549 MB/sec [Average]
[info]   (min, avg, max) = (3241.303, 3247.499, 3255.638), stdev = 5.336
[info]   CI (99.9%): [3226.951, 3268.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52487.469 ±(99.9%) 1084.819 B/op [Average]
[info]   (min, avg, max) = (52092.004, 52487.469, 52819.628), stdev = 281.724
[info]   CI (99.9%): [51402.650, 53572.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2970.813 ±(99.9%) 1446.564 MB/sec [Average]
[info]   (min, avg, max) = (2682.442, 2970.813, 3387.347), stdev = 375.668
[info]   CI (99.9%): [1524.250, 4417.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48020.507 ±(99.9%) 23587.169 B/op [Average]
[info]   (min, avg, max) = (43203.739, 48020.507, 54719.811), stdev = 6125.513
[info]   CI (99.9%): [24433.338, 71607.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.335), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144386.276 ops/s
[info] # Warmup Iteration   2: 357844.054 ops/s
[info] # Warmup Iteration   3: 362985.151 ops/s
[info] # Warmup Iteration   4: 362662.860 ops/s
[info] # Warmup Iteration   5: 363923.840 ops/s
[info] Iteration   1: 365576.380 ops/s
[info]                  ·gc.alloc.rate:               1259.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          5419.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5773.067 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 366142.486 ops/s
[info]                  ·gc.alloc.rate:                   1256.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              5402.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5767.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 365574.077 ops/s
[info]                  ·gc.alloc.rate:               1279.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          5507.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5778.787 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 358132.052 ops/s
[info]                  ·gc.alloc.rate:                   1228.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              5397.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2950.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 365511.854 ops/s
[info]                  ·gc.alloc.rate:                   1263.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              5442.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5776.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   364187.370 ±(99.9%) 13071.775 ops/s [Average]
[info]   (min, avg, max) = (358132.052, 364187.370, 366142.486), stdev = 3394.698
[info]   CI (99.9%): [351115.595, 377259.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1257.486 ±(99.9%) 71.479 MB/sec [Average]
[info]   (min, avg, max) = (1228.258, 1257.486, 1279.370), stdev = 18.563
[info]   CI (99.9%): [1186.007, 1328.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5433.859 ±(99.9%) 172.668 B/op [Average]
[info]   (min, avg, max) = (5397.048, 5433.859, 5507.483), stdev = 44.841
[info]   CI (99.9%): [5261.191, 5606.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.661 ±(99.9%) 1154.030 MB/sec [Average]
[info]   (min, avg, max) = (671.546, 1207.661, 1342.393), stdev = 299.698
[info]   CI (99.9%): [53.631, 2361.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5209.344 ±(99.9%) 4861.682 B/op [Average]
[info]   (min, avg, max) = (2950.816, 5209.344, 5778.787), stdev = 1262.563
[info]   CI (99.9%): [347.662, 10071.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.019), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.101 ±(99.9%) 22.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.101, 13.265), stdev = 5.756
[info]   CI (99.9%): [≈ 0, 25.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.669 ops/s
[info] # Warmup Iteration   2: 1450741.955 ops/s
[info] # Warmup Iteration   3: 1501268.946 ops/s
[info] # Warmup Iteration   4: 1511326.067 ops/s
[info] # Warmup Iteration   5: 1598717.603 ops/s
[info] Iteration   1: 1602029.412 ops/s
[info]                  ·gc.alloc.rate:               762.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 653.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1514919.578 ops/s
[info]                  ·gc.alloc.rate:               720.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 691.714 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1503348.366 ops/s
[info]                  ·gc.alloc.rate:                   720.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1509037.839 ops/s
[info]                  ·gc.alloc.rate:                   734.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              765.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1385.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1520895.395 ops/s
[info]                  ·gc.alloc.rate:               728.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 690.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1530046.118 ±(99.9%) 156984.717 ops/s [Average]
[info]   (min, avg, max) = (1503348.366, 1530046.118, 1602029.412), stdev = 40768.432
[info]   CI (99.9%): [1373061.401, 1687030.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   733.296 ±(99.9%) 66.433 MB/sec [Average]
[info]   (min, avg, max) = (720.258, 733.296, 762.309), stdev = 17.252
[info]   CI (99.9%): [666.863, 799.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   754.068 ±(99.9%) 26.240 B/op [Average]
[info]   (min, avg, max) = (747.969, 754.068, 765.098), stdev = 6.814
[info]   CI (99.9%): [727.828, 780.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.907 ±(99.9%) 1143.585 MB/sec [Average]
[info]   (min, avg, max) = (665.468, 798.907, 1330.170), stdev = 296.985
[info]   CI (99.9%): [≈ 0, 1942.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   823.613 ±(99.9%) 1211.241 B/op [Average]
[info]   (min, avg, max) = (653.795, 823.613, 1385.470), stdev = 314.555
[info]   CI (99.9%): [≈ 0, 2034.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471933.872 ops/s
[info] # Warmup Iteration   2: 1018154.601 ops/s
[info] # Warmup Iteration   3: 966650.544 ops/s
[info] # Warmup Iteration   4: 959574.822 ops/s
[info] # Warmup Iteration   5: 963950.918 ops/s
[info] Iteration   1: 1005942.017 ops/s
[info]                  ·gc.alloc.rate:               725.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          1134.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1044.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 988524.015 ops/s
[info]                  ·gc.alloc.rate:               718.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          1143.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1064.332 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1001629.757 ops/s
[info]                  ·gc.alloc.rate:               727.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          1143.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1050.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 968141.960 ops/s
[info]                  ·gc.alloc.rate:               700.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          1138.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1087.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 990565.878 ops/s
[info]                  ·gc.alloc.rate:               715.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          1137.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1063.170 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   990960.725 ±(99.9%) 56627.279 ops/s [Average]
[info]   (min, avg, max) = (968141.960, 990960.725, 1005942.017), stdev = 14705.925
[info]   CI (99.9%): [934333.446, 1047588.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   717.612 ±(99.9%) 41.381 MB/sec [Average]
[info]   (min, avg, max) = (700.548, 717.612, 727.935), stdev = 10.747
[info]   CI (99.9%): [676.231, 758.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1139.618 ±(99.9%) 15.425 B/op [Average]
[info]   (min, avg, max) = (1134.758, 1139.618, 1143.841), stdev = 4.006
[info]   CI (99.9%): [1124.193, 1155.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.682 ±(99.9%) 2.075 MB/sec [Average]
[info]   (min, avg, max) = (667.844, 668.682, 669.180), stdev = 0.539
[info]   CI (99.9%): [666.607, 670.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1062.107 ±(99.9%) 63.915 B/op [Average]
[info]   (min, avg, max) = (1044.829, 1062.107, 1087.804), stdev = 16.598
[info]   CI (99.9%): [998.192, 1126.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1533396.262 ops/s
[info] # Warmup Iteration   2: 2673765.966 ops/s
[info] # Warmup Iteration   3: 2804732.784 ops/s
[info] # Warmup Iteration   4: 2798995.867 ops/s
[info] # Warmup Iteration   5: 2810554.661 ops/s
[info] Iteration   1: 2791314.150 ops/s
[info]                  ·gc.alloc.rate:               1333.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 757.592 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2817348.688 ops/s
[info]                  ·gc.alloc.rate:                   1342.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2812574.495 ops/s
[info]                  ·gc.alloc.rate:                   1354.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2789480.933 ops/s
[info]                  ·gc.alloc.rate:                   1330.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     758.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2791841.781 ops/s
[info]                  ·gc.alloc.rate:               1326.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 378.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2800512.009 ±(99.9%) 51317.521 ops/s [Average]
[info]   (min, avg, max) = (2789480.933, 2800512.009, 2817348.688), stdev = 13326.997
[info]   CI (99.9%): [2749194.489, 2851829.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1337.353 ±(99.9%) 43.609 MB/sec [Average]
[info]   (min, avg, max) = (1326.307, 1337.353, 1354.424), stdev = 11.325
[info]   CI (99.9%): [1293.744, 1380.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.348 ±(99.9%) 14.661 B/op [Average]
[info]   (min, avg, max) = (747.337, 751.348, 757.591), stdev = 3.807
[info]   CI (99.9%): [736.687, 766.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.201 ±(99.9%) 1159.045 MB/sec [Average]
[info]   (min, avg, max) = (671.757, 1210.201, 1345.854), stdev = 301.000
[info]   CI (99.9%): [51.157, 2369.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   679.709 ±(99.9%) 648.448 B/op [Average]
[info]   (min, avg, max) = (378.517, 679.709, 758.470), stdev = 168.400
[info]   CI (99.9%): [31.261, 1328.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 2.687), stdev = 1.164
[info]   CI (99.9%): [≈ 0, 5.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.350 ±(99.9%) 2.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 1.503), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 2.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1727999.557 ops/s
[info] # Warmup Iteration   2: 2925421.813 ops/s
[info] # Warmup Iteration   3: 3155433.885 ops/s
[info] # Warmup Iteration   4: 3158227.175 ops/s
[info] # Warmup Iteration   5: 3143354.408 ops/s
[info] Iteration   1: 3162996.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3169118.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3169990.328 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3228431.615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3228973.652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3191902.096 ±(99.9%) 129776.775 ops/s [Average]
[info]   (min, avg, max) = (3162996.279, 3191902.096, 3228973.652), stdev = 33702.616
[info]   CI (99.9%): [3062125.321, 3321678.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80415.054 ops/s
[info] # Warmup Iteration   2: 473899.716 ops/s
[info] # Warmup Iteration   3: 482619.758 ops/s
[info] # Warmup Iteration   4: 490003.115 ops/s
[info] # Warmup Iteration   5: 487446.083 ops/s
[info] Iteration   1: 466620.841 ops/s
[info]                  ·gc.alloc.rate:      536.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 1808.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 463258.760 ops/s
[info]                  ·gc.alloc.rate:               557.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          1893.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2269.900 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 465390.330 ops/s
[info]                  ·gc.alloc.rate:               560.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          1894.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2259.508 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 464245.914 ops/s
[info]                  ·gc.alloc.rate:               558.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          1892.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2266.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 464601.962 ops/s
[info]                  ·gc.alloc.rate:                   549.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              1860.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2264.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   464823.561 ±(99.9%) 4864.183 ops/s [Average]
[info]   (min, avg, max) = (463258.760, 464823.561, 466620.841), stdev = 1263.213
[info]   CI (99.9%): [459959.379, 469687.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   552.255 ±(99.9%) 38.441 MB/sec [Average]
[info]   (min, avg, max) = (536.045, 552.255, 560.190), stdev = 9.983
[info]   CI (99.9%): [513.814, 590.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1869.684 ±(99.9%) 143.824 B/op [Average]
[info]   (min, avg, max) = (1808.001, 1869.684, 1894.436), stdev = 37.351
[info]   CI (99.9%): [1725.860, 2013.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   534.741 ±(99.9%) 1151.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.741, 668.764), stdev = 298.929
[info]   CI (99.9%): [≈ 0, 1685.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1812.024 ±(99.9%) 3900.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1812.024, 2269.900), stdev = 1012.959
[info]   CI (99.9%): [≈ 0, 5712.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52418.792 ops/s
[info] # Warmup Iteration   2: 145860.380 ops/s
[info] # Warmup Iteration   3: 158430.589 ops/s
[info] # Warmup Iteration   4: 155735.424 ops/s
[info] # Warmup Iteration   5: 159938.875 ops/s
[info] Iteration   1: 160616.567 ops/s
[info]                  ·gc.alloc.rate:                   2035.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              19943.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19758.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 161290.883 ops/s
[info]                  ·gc.alloc.rate:                   2033.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              19825.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19593.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 155586.789 ops/s
[info]                  ·gc.alloc.rate:               1945.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          19679.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13544.272 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 160081.025 ops/s
[info]                  ·gc.alloc.rate:               2014.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          19809.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19745.776 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 159731.664 ops/s
[info]                  ·gc.alloc.rate:               2039.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          20085.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19816.033 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   159461.386 ±(99.9%) 8642.747 ops/s [Average]
[info]   (min, avg, max) = (155586.789, 159461.386, 161290.883), stdev = 2244.494
[info]   CI (99.9%): [150818.639, 168104.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2013.631 ±(99.9%) 150.824 MB/sec [Average]
[info]   (min, avg, max) = (1945.590, 2013.631, 2039.222), stdev = 39.168
[info]   CI (99.9%): [1862.807, 2164.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19868.586 ±(99.9%) 588.702 B/op [Average]
[info]   (min, avg, max) = (19679.691, 19868.586, 20085.178), stdev = 152.884
[info]   CI (99.9%): [19279.883, 20457.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.026 ±(99.9%) 1158.150 MB/sec [Average]
[info]   (min, avg, max) = (1339.025, 1877.026, 2016.431), stdev = 300.768
[info]   CI (99.9%): [718.877, 3035.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18491.570 ±(99.9%) 10654.146 B/op [Average]
[info]   (min, avg, max) = (13544.272, 18491.570, 19816.033), stdev = 2766.848
[info]   CI (99.9%): [7837.424, 29145.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.643), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 6.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.302 ±(99.9%) 61.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.302, 35.697), stdev = 15.877
[info]   CI (99.9%): [≈ 0, 68.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133875.121 ops/s
[info] # Warmup Iteration   2: 430267.115 ops/s
[info] # Warmup Iteration   3: 454589.623 ops/s
[info] # Warmup Iteration   4: 456277.530 ops/s
[info] # Warmup Iteration   5: 451676.543 ops/s
[info] Iteration   1: 450326.121 ops/s
[info]                  ·gc.alloc.rate:               375.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          1312.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1787.976 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 448862.191 ops/s
[info]                  ·gc.alloc.rate:                   376.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              1319.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1793.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 432782.779 ops/s
[info]                  ·gc.alloc.rate:      347.582 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 454632.469 ops/s
[info]                  ·gc.alloc.rate:               390.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          1350.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2307.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 454927.609 ops/s
[info]                  ·gc.alloc.rate:      368.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 1274.389 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   448306.234 ±(99.9%) 34934.411 ops/s [Average]
[info]   (min, avg, max) = (432782.779, 448306.234, 454927.609), stdev = 9072.356
[info]   CI (99.9%): [413371.822, 483240.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.662 ±(99.9%) 60.143 MB/sec [Average]
[info]   (min, avg, max) = (347.582, 371.662, 390.322), stdev = 15.619
[info]   CI (99.9%): [311.519, 431.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.209 ±(99.9%) 135.640 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1304.209, 1350.679), stdev = 35.225
[info]   CI (99.9%): [1168.569, 1439.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   338.016 ±(99.9%) 1212.936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.016, 666.766), stdev = 314.996
[info]   CI (99.9%): [≈ 0, 1550.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1177.817 ±(99.9%) 4219.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1177.817, 2307.292), stdev = 1095.670
[info]   CI (99.9%): [≈ 0, 5396.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530897.371 ops/s
[info] # Warmup Iteration   2: 1136804.456 ops/s
[info] # Warmup Iteration   3: 1200800.096 ops/s
[info] # Warmup Iteration   4: 1216751.823 ops/s
[info] # Warmup Iteration   5: 1210620.652 ops/s
[info] Iteration   1: 1218063.855 ops/s
[info]                  ·gc.alloc.rate:      235.275 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1215993.489 ops/s
[info]                  ·gc.alloc.rate:                   246.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1220809.621 ops/s
[info]                  ·gc.alloc.rate:      235.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1275168.172 ops/s
[info]                  ·gc.alloc.rate:               259.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          319.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631.447 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1276525.276 ops/s
[info]                  ·gc.alloc.rate:      246.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1241312.083 ±(99.9%) 121586.270 ops/s [Average]
[info]   (min, avg, max) = (1215993.489, 1241312.083, 1276525.276), stdev = 31575.568
[info]   CI (99.9%): [1119725.813, 1362898.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   244.596 ±(99.9%) 37.788 MB/sec [Average]
[info]   (min, avg, max) = (235.275, 244.596, 259.275), stdev = 9.813
[info]   CI (99.9%): [206.808, 282.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.081 ±(99.9%) 32.127 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.081, 319.965), stdev = 8.343
[info]   CI (99.9%): [277.954, 342.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.660 ±(99.9%) 1079.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.660, 511.676), stdev = 280.242
[info]   CI (99.9%): [≈ 0, 1283.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   258.721 ±(99.9%) 1364.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 258.721, 662.157), stdev = 354.434
[info]   CI (99.9%): [≈ 0, 1623.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9663.718 ops/s
[info] # Warmup Iteration   2: 70310.906 ops/s
[info] # Warmup Iteration   3: 77648.695 ops/s
[info] # Warmup Iteration   4: 81118.699 ops/s
[info] # Warmup Iteration   5: 80555.733 ops/s
[info] Iteration   1: 79223.548 ops/s
[info]                  ·gc.alloc.rate:               3137.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          62335.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2667.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52988.595 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 77973.765 ops/s
[info]                  ·gc.alloc.rate:                   3149.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              63568.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67405.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.101 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 78779.605 ops/s
[info]                  ·gc.alloc.rate:                   3178.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              63490.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3353.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66997.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 81657.213 ops/s
[info]                  ·gc.alloc.rate:                   3264.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              62917.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51890.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 81464.911 ops/s
[info]                  ·gc.alloc.rate:                   3283.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              63436.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65219.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.609 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   79819.808 ±(99.9%) 6364.592 ops/s [Average]
[info]   (min, avg, max) = (77973.765, 79819.808, 81657.213), stdev = 1652.864
[info]   CI (99.9%): [73455.216, 86184.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3202.648 ±(99.9%) 257.968 MB/sec [Average]
[info]   (min, avg, max) = (3137.734, 3202.648, 3283.444), stdev = 66.994
[info]   CI (99.9%): [2944.679, 3460.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63149.729 ±(99.9%) 2011.061 B/op [Average]
[info]   (min, avg, max) = (62335.390, 63149.729, 63568.463), stdev = 522.266
[info]   CI (99.9%): [61138.668, 65160.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3085.721 ±(99.9%) 1428.480 MB/sec [Average]
[info]   (min, avg, max) = (2667.250, 3085.721, 3375.745), stdev = 370.972
[info]   CI (99.9%): [1657.241, 4514.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60900.334 ±(99.9%) 29945.399 B/op [Average]
[info]   (min, avg, max) = (51890.825, 60900.334, 67405.000), stdev = 7776.725
[info]   CI (99.9%): [30954.936, 90845.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.149 ±(99.9%) 3.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.149, 2.101), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 4.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81569.694 ops/s
[info] # Warmup Iteration   2: 283543.468 ops/s
[info] # Warmup Iteration   3: 305137.830 ops/s
[info] # Warmup Iteration   4: 306589.057 ops/s
[info] # Warmup Iteration   5: 304821.837 ops/s
[info] Iteration   1: 299693.530 ops/s
[info]                  ·gc.alloc.rate:                   1677.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              8809.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7045.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 306187.457 ops/s
[info]                  ·gc.alloc.rate:                   1738.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              8935.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10351.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 300018.280 ops/s
[info]                  ·gc.alloc.rate:               1679.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          8808.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7031.184 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 307793.639 ops/s
[info]                  ·gc.alloc.rate:                   1750.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              8947.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10266.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 309617.248 ops/s
[info]                  ·gc.alloc.rate:               1739.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          8839.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6803.152 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   304662.031 ±(99.9%) 17534.018 ops/s [Average]
[info]   (min, avg, max) = (299693.530, 304662.031, 309617.248), stdev = 4553.529
[info]   CI (99.9%): [287128.013, 322196.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1716.948 ±(99.9%) 136.571 MB/sec [Average]
[info]   (min, avg, max) = (1677.692, 1716.948, 1750.185), stdev = 35.467
[info]   CI (99.9%): [1580.377, 1853.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8868.164 ±(99.9%) 263.258 B/op [Average]
[info]   (min, avg, max) = (8808.143, 8868.164, 8947.278), stdev = 68.367
[info]   CI (99.9%): [8604.906, 9131.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.562 ±(99.9%) 1415.031 MB/sec [Average]
[info]   (min, avg, max) = (1338.379, 1608.562, 2014.001), stdev = 367.479
[info]   CI (99.9%): [193.531, 3023.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8299.564 ±(99.9%) 7073.623 B/op [Average]
[info]   (min, avg, max) = (6803.152, 8299.564, 10351.360), stdev = 1836.998
[info]   CI (99.9%): [1225.940, 15373.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 6.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.498), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.639 ±(99.9%) 30.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.639, 17.977), stdev = 8.016
[info]   CI (99.9%): [≈ 0, 34.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643220.219 ops/s
[info] # Warmup Iteration   2: 1765222.622 ops/s
[info] # Warmup Iteration   3: 1843510.834 ops/s
[info] # Warmup Iteration   4: 1916732.993 ops/s
[info] # Warmup Iteration   5: 1845101.976 ops/s
[info] Iteration   1: 1932209.167 ops/s
[info]                  ·gc.alloc.rate:               1034.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          842.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1089.014 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1949770.068 ops/s
[info]                  ·gc.alloc.rate:               1025.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          827.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 539.867 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1927055.091 ops/s
[info]                  ·gc.alloc.rate:                   1019.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1092.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1909850.111 ops/s
[info]                  ·gc.alloc.rate:                   994.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              819.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1919229.025 ops/s
[info]                  ·gc.alloc.rate:                   1013.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              830.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1927622.693 ±(99.9%) 57701.307 ops/s [Average]
[info]   (min, avg, max) = (1909850.111, 1927622.693, 1949770.068), stdev = 14984.846
[info]   CI (99.9%): [1869921.385, 1985324.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1017.419 ±(99.9%) 58.349 MB/sec [Average]
[info]   (min, avg, max) = (994.234, 1017.419, 1034.377), stdev = 15.153
[info]   CI (99.9%): [959.070, 1075.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   830.566 ±(99.9%) 32.109 B/op [Average]
[info]   (min, avg, max) = (819.327, 830.566, 842.375), stdev = 8.339
[info]   CI (99.9%): [798.457, 862.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.888 ±(99.9%) 1411.787 MB/sec [Average]
[info]   (min, avg, max) = (669.036, 1070.888, 1340.287), stdev = 366.637
[info]   CI (99.9%): [≈ 0, 2482.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   874.525 ±(99.9%) 1155.755 B/op [Average]
[info]   (min, avg, max) = (539.867, 874.525, 1099.098), stdev = 300.146
[info]   CI (99.9%): [≈ 0, 2030.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1800781.311 ops/s
[info] # Warmup Iteration   2: 2612964.979 ops/s
[info] # Warmup Iteration   3: 2732057.506 ops/s
[info] # Warmup Iteration   4: 2885571.301 ops/s
[info] # Warmup Iteration   5: 2838002.111 ops/s
[info] Iteration   1: 2891794.169 ops/s
[info]                  ·gc.alloc.rate:                   804.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2851141.346 ops/s
[info]                  ·gc.alloc.rate:                   806.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2892697.902 ops/s
[info]                  ·gc.alloc.rate:               796.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2849055.807 ops/s
[info]                  ·gc.alloc.rate:                   783.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2748852.326 ops/s
[info]                  ·gc.alloc.rate:               755.651 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2846708.310 ±(99.9%) 225753.613 ops/s [Average]
[info]   (min, avg, max) = (2748852.326, 2846708.310, 2892697.902), stdev = 58627.496
[info]   CI (99.9%): [2620954.697, 3072461.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   789.346 ±(99.9%) 80.304 MB/sec [Average]
[info]   (min, avg, max) = (755.651, 789.346, 806.007), stdev = 20.855
[info]   CI (99.9%): [709.043, 869.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.343 ±(99.9%) 20.269 B/op [Average]
[info]   (min, avg, max) = (432.633, 436.343, 444.915), stdev = 5.264
[info]   CI (99.9%): [416.074, 456.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.974 ±(99.9%) 1156.043 MB/sec [Average]
[info]   (min, avg, max) = (670.865, 805.974, 1343.024), stdev = 300.221
[info]   CI (99.9%): [≈ 0, 1962.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   445.580 ±(99.9%) 637.404 B/op [Average]
[info]   (min, avg, max) = (365.107, 445.580, 741.348), stdev = 165.532
[info]   CI (99.9%): [≈ 0, 1082.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.011), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720540.535 ops/s
[info] # Warmup Iteration   2: 3043932.353 ops/s
[info] # Warmup Iteration   3: 2998423.826 ops/s
[info] # Warmup Iteration   4: 3097349.133 ops/s
[info] # Warmup Iteration   5: 3095190.187 ops/s
[info] Iteration   1: 3094805.349 ops/s
[info]                  ·gc.alloc.rate:      0.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.145 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3094847.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3096823.194 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3094712.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3094673.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3095172.398 ±(99.9%) 3563.616 ops/s [Average]
[info]   (min, avg, max) = (3094673.688, 3095172.398, 3096823.194), stdev = 925.460
[info]   CI (99.9%): [3091608.782, 3098736.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.057 ±(99.9%) 0.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.057, 0.285), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.029 ±(99.9%) 0.249 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11671.917 ops/s
[info] # Warmup Iteration   2: 43684.704 ops/s
[info] # Warmup Iteration   3: 48499.255 ops/s
[info] # Warmup Iteration   4: 48405.071 ops/s
[info] # Warmup Iteration   5: 47856.614 ops/s
[info] Iteration   1: 47559.708 ops/s
[info]                  ·gc.alloc.rate:                   2175.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              71967.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66639.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.821 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 48625.433 ops/s
[info]                  ·gc.alloc.rate:                   2210.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              71527.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86632.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.674 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 48898.906 ops/s
[info]                  ·gc.alloc.rate:                   2194.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              70629.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64526.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 49034.976 ops/s
[info]                  ·gc.alloc.rate:                   2214.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              71059.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64408.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 48981.335 ops/s
[info]                  ·gc.alloc.rate:               2225.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          71495.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64603.651 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   48620.072 ±(99.9%) 2361.801 ops/s [Average]
[info]   (min, avg, max) = (47559.708, 48620.072, 49034.976), stdev = 613.352
[info]   CI (99.9%): [46258.270, 50981.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2203.917 ±(99.9%) 74.618 MB/sec [Average]
[info]   (min, avg, max) = (2175.148, 2203.917, 2225.150), stdev = 19.378
[info]   CI (99.9%): [2129.300, 2278.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71335.772 ±(99.9%) 1959.679 B/op [Average]
[info]   (min, avg, max) = (70629.555, 71335.772, 71967.058), stdev = 508.922
[info]   CI (99.9%): [69376.093, 73295.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2142.779 ±(99.9%) 1149.702 MB/sec [Average]
[info]   (min, avg, max) = (2005.335, 2142.779, 2676.849), stdev = 298.574
[info]   CI (99.9%): [993.077, 3292.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69362.089 ±(99.9%) 37344.673 B/op [Average]
[info]   (min, avg, max) = (64408.189, 69362.089, 86632.089), stdev = 9698.293
[info]   CI (99.9%): [32017.416, 106706.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.894), stdev = 1.732
[info]   CI (99.9%): [≈ 0, 7.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.300 ±(99.9%) 220.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.300, 128.821), stdev = 57.313
[info]   CI (99.9%): [≈ 0, 246.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69419.065 ops/s
[info] # Warmup Iteration   2: 219757.975 ops/s
[info] # Warmup Iteration   3: 237070.832 ops/s
[info] # Warmup Iteration   4: 242529.325 ops/s
[info] # Warmup Iteration   5: 241417.106 ops/s
[info] Iteration   1: 243149.660 ops/s
[info]                  ·gc.alloc.rate:                   2655.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              17183.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17359.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.886 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 243626.062 ops/s
[info]                  ·gc.alloc.rate:                   2673.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              17270.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17316.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 245105.919 ops/s
[info]                  ·gc.alloc.rate:               2703.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          17357.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17229.389 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 241707.325 ops/s
[info]                  ·gc.alloc.rate:               2666.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          17364.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17510.823 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 245422.361 ops/s
[info]                  ·gc.alloc.rate:               2680.277 MB/sec
[info]                  ·gc.alloc.rate.norm:          17187.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12966.715 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   243802.265 ±(99.9%) 5830.243 ops/s [Average]
[info]   (min, avg, max) = (241707.325, 243802.265, 245422.361), stdev = 1514.095
[info]   CI (99.9%): [237972.023, 249632.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2675.957 ±(99.9%) 69.158 MB/sec [Average]
[info]   (min, avg, max) = (2655.492, 2675.957, 2703.567), stdev = 17.960
[info]   CI (99.9%): [2606.800, 2745.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17272.762 ±(99.9%) 339.046 B/op [Average]
[info]   (min, avg, max) = (17183.094, 17272.762, 17364.868), stdev = 88.049
[info]   CI (99.9%): [16933.716, 17611.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2551.686 ±(99.9%) 1140.156 MB/sec [Average]
[info]   (min, avg, max) = (2022.044, 2551.686, 2689.120), stdev = 296.095
[info]   CI (99.9%): [1411.530, 3691.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16476.648 ±(99.9%) 7565.575 B/op [Average]
[info]   (min, avg, max) = (12966.715, 16476.648, 17510.823), stdev = 1964.756
[info]   CI (99.9%): [8911.073, 24042.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.292), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.566 ±(99.9%) 3.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 1.886), stdev = 0.843
[info]   CI (99.9%): [≈ 0, 3.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118134.797 ops/s
[info] # Warmup Iteration   2: 357845.439 ops/s
[info] # Warmup Iteration   3: 383631.370 ops/s
[info] # Warmup Iteration   4: 384395.036 ops/s
[info] # Warmup Iteration   5: 382480.178 ops/s
[info] Iteration   1: 376736.046 ops/s
[info]                  ·gc.alloc.rate:                   1934.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              8079.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8391.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 384004.507 ops/s
[info]                  ·gc.alloc.rate:                   1967.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              8065.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8222.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.560 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 381043.140 ops/s
[info]                  ·gc.alloc.rate:               1970.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          8137.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8270.846 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 385524.603 ops/s
[info]                  ·gc.alloc.rate:               2004.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          8182.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8174.600 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 372159.597 ops/s
[info]                  ·gc.alloc.rate:               1939.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          8201.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8483.451 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   379893.579 ±(99.9%) 21065.710 ops/s [Average]
[info]   (min, avg, max) = (372159.597, 379893.579, 385524.603), stdev = 5470.698
[info]   CI (99.9%): [358827.869, 400959.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1963.464 ±(99.9%) 108.311 MB/sec [Average]
[info]   (min, avg, max) = (1934.266, 1963.464, 2004.523), stdev = 28.128
[info]   CI (99.9%): [1855.153, 2071.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8133.581 ±(99.9%) 232.904 B/op [Average]
[info]   (min, avg, max) = (8065.534, 8133.581, 8201.813), stdev = 60.484
[info]   CI (99.9%): [7900.677, 8366.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2005.400 ±(99.9%) 10.371 MB/sec [Average]
[info]   (min, avg, max) = (2002.473, 2005.400, 2008.911), stdev = 2.693
[info]   CI (99.9%): [1995.029, 2015.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8308.562 ±(99.9%) 488.201 B/op [Average]
[info]   (min, avg, max) = (8174.600, 8308.562, 8483.451), stdev = 126.784
[info]   CI (99.9%): [7820.361, 8796.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 5.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.435), stdev = 1.491
[info]   CI (99.9%): [≈ 0, 6.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.382 ±(99.9%) 23.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.382, 14.349), stdev = 6.230
[info]   CI (99.9%): [≈ 0, 27.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1165305.027 ops/s
[info] # Warmup Iteration   2: 2143511.415 ops/s
[info] # Warmup Iteration   3: 2254047.182 ops/s
[info] # Warmup Iteration   4: 2176424.235 ops/s
[info] # Warmup Iteration   5: 2176308.762 ops/s
[info] Iteration   1: 2180974.784 ops/s
[info]                  ·gc.alloc.rate:               770.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 484.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2186705.649 ops/s
[info]                  ·gc.alloc.rate:               777.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2296121.618 ops/s
[info]                  ·gc.alloc.rate:                   828.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              567.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2301159.284 ops/s
[info]                  ·gc.alloc.rate:               810.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 459.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2296441.584 ops/s
[info]                  ·gc.alloc.rate:                   809.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2252280.584 ±(99.9%) 240826.508 ops/s [Average]
[info]   (min, avg, max) = (2180974.784, 2252280.584, 2301159.284), stdev = 62541.879
[info]   CI (99.9%): [2011454.076, 2493107.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   799.327 ±(99.9%) 93.852 MB/sec [Average]
[info]   (min, avg, max) = (770.437, 799.327, 828.275), stdev = 24.373
[info]   CI (99.9%): [705.475, 893.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   558.462 ±(99.9%) 21.344 B/op [Average]
[info]   (min, avg, max) = (554.350, 558.462, 567.677), stdev = 5.543
[info]   CI (99.9%): [537.118, 579.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.307 ±(99.9%) 1156.990 MB/sec [Average]
[info]   (min, avg, max) = (671.171, 806.307, 1343.798), stdev = 300.467
[info]   CI (99.9%): [≈ 0, 1963.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   561.850 ±(99.9%) 774.432 B/op [Average]
[info]   (min, avg, max) = (459.717, 561.850, 921.003), stdev = 201.118
[info]   CI (99.9%): [≈ 0, 1336.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2235.158 ops/s
[info] # Warmup Iteration   2: 72881.469 ops/s
[info] # Warmup Iteration   3: 84838.195 ops/s
[info] # Warmup Iteration   4: 86117.436 ops/s
[info] # Warmup Iteration   5: 85511.574 ops/s
[info] Iteration   1: 86484.430 ops/s
[info]                  ·gc.alloc.rate:                   3356.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              61076.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48984.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.515 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 85538.527 ops/s
[info]                  ·gc.alloc.rate:                   3387.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              62336.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62085.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 86359.200 ops/s
[info]                  ·gc.alloc.rate:               3419.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          62322.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61652.734 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 86027.945 ops/s
[info]                  ·gc.alloc.rate:               3408.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          62348.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62018.587 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 83838.798 ops/s
[info]                  ·gc.alloc.rate:                   3324.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              62406.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63739.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   85649.780 ±(99.9%) 4145.018 ops/s [Average]
[info]   (min, avg, max) = (83838.798, 85649.780, 86484.430), stdev = 1076.448
[info]   CI (99.9%): [81504.762, 89794.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3379.502 ±(99.9%) 150.602 MB/sec [Average]
[info]   (min, avg, max) = (3324.310, 3379.502, 3419.796), stdev = 39.111
[info]   CI (99.9%): [3228.900, 3530.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62098.326 ±(99.9%) 2202.805 B/op [Average]
[info]   (min, avg, max) = (61076.597, 62098.326, 62406.896), stdev = 572.062
[info]   CI (99.9%): [59895.520, 64301.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3247.105 ±(99.9%) 1194.987 MB/sec [Average]
[info]   (min, avg, max) = (2692.146, 3247.105, 3395.318), stdev = 310.334
[info]   CI (99.9%): [2052.118, 4442.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59696.390 ±(99.9%) 23264.884 B/op [Average]
[info]   (min, avg, max) = (48984.944, 59696.390, 63739.915), stdev = 6041.816
[info]   CI (99.9%): [36431.506, 82961.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.458 ±(99.9%) 2.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 1.515), stdev = 0.622
[info]   CI (99.9%): [≈ 0, 2.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54191.406 ops/s
[info] # Warmup Iteration   2: 244338.086 ops/s
[info] # Warmup Iteration   3: 255559.003 ops/s
[info] # Warmup Iteration   4: 254439.369 ops/s
[info] # Warmup Iteration   5: 254201.766 ops/s
[info] Iteration   1: 255393.208 ops/s
[info]                  ·gc.alloc.rate:                   2052.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              12646.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12411.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 256918.557 ops/s
[info]                  ·gc.alloc.rate:                   2088.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12311.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 257627.240 ops/s
[info]                  ·gc.alloc.rate:               2068.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          12632.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12261.500 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 258649.399 ops/s
[info]                  ·gc.alloc.rate:               2103.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          12802.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12223.712 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 258503.400 ops/s
[info]                  ·gc.alloc.rate:               2103.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          12806.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12246.649 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   257418.361 ±(99.9%) 5125.640 ops/s [Average]
[info]   (min, avg, max) = (255393.208, 257418.361, 258649.399), stdev = 1331.113
[info]   CI (99.9%): [252292.721, 262544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2083.209 ±(99.9%) 87.248 MB/sec [Average]
[info]   (min, avg, max) = (2052.154, 2083.209, 2103.952), stdev = 22.658
[info]   CI (99.9%): [1995.961, 2170.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12736.014 ±(99.9%) 340.513 B/op [Average]
[info]   (min, avg, max) = (12632.438, 12736.014, 12806.335), stdev = 88.430
[info]   CI (99.9%): [12395.502, 13076.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2010.322 ±(99.9%) 9.756 MB/sec [Average]
[info]   (min, avg, max) = (2007.472, 2010.322, 2014.042), stdev = 2.534
[info]   CI (99.9%): [2000.566, 2020.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12290.928 ±(99.9%) 287.618 B/op [Average]
[info]   (min, avg, max) = (12223.712, 12290.928, 12411.600), stdev = 74.693
[info]   CI (99.9%): [12003.310, 12578.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.456), stdev = 1.530
[info]   CI (99.9%): [≈ 0, 6.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.438 ±(99.9%) 36.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.438, 21.295), stdev = 9.431
[info]   CI (99.9%): [≈ 0, 40.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579913.616 ops/s
[info] # Warmup Iteration   2: 1322358.871 ops/s
[info] # Warmup Iteration   3: 1471738.333 ops/s
[info] # Warmup Iteration   4: 1478498.545 ops/s
[info] # Warmup Iteration   5: 1486153.057 ops/s
[info] Iteration   1: 1484168.894 ops/s
[info]                  ·gc.alloc.rate:               891.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 708.909 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1500371.640 ops/s
[info]                  ·gc.alloc.rate:               897.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1504827.614 ops/s
[info]                  ·gc.alloc.rate:                   912.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              954.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1399.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1424527.006 ops/s
[info]                  ·gc.alloc.rate:               858.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          947.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 739.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1441425.869 ops/s
[info]                  ·gc.alloc.rate:               865.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 730.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1471064.205 ±(99.9%) 139033.954 ops/s [Average]
[info]   (min, avg, max) = (1424527.006, 1471064.205, 1504827.614), stdev = 36106.676
[info]   CI (99.9%): [1332030.251, 1610098.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   885.101 ±(99.9%) 87.098 MB/sec [Average]
[info]   (min, avg, max) = (858.155, 885.101, 912.467), stdev = 22.619
[info]   CI (99.9%): [798.003, 972.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   946.766 ±(99.9%) 18.772 B/op [Average]
[info]   (min, avg, max) = (941.112, 946.766, 954.318), stdev = 4.875
[info]   CI (99.9%): [927.995, 965.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.938 ±(99.9%) 1152.216 MB/sec [Average]
[info]   (min, avg, max) = (668.646, 802.938, 1338.211), stdev = 299.227
[info]   CI (99.9%): [≈ 0, 1955.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   856.056 ±(99.9%) 1171.546 B/op [Average]
[info]   (min, avg, max) = (701.221, 856.056, 1399.588), stdev = 304.247
[info]   CI (99.9%): [≈ 0, 2027.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1679139.796 ops/s
[info] # Warmup Iteration   2: 2747677.745 ops/s
[info] # Warmup Iteration   3: 2753330.301 ops/s
[info] # Warmup Iteration   4: 2731304.686 ops/s
[info] # Warmup Iteration   5: 2752006.757 ops/s
[info] Iteration   1: 2745124.348 ops/s
[info]                  ·gc.alloc.rate:               950.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2819220.715 ops/s
[info]                  ·gc.alloc.rate:               976.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 374.869 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2839174.827 ops/s
[info]                  ·gc.alloc.rate:                   998.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2852755.236 ops/s
[info]                  ·gc.alloc.rate:               997.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.828 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2832697.308 ops/s
[info]                  ·gc.alloc.rate:                   992.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2817794.487 ±(99.9%) 163192.477 ops/s [Average]
[info]   (min, avg, max) = (2745124.348, 2817794.487, 2852755.236), stdev = 42380.568
[info]   CI (99.9%): [2654602.009, 2980986.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   983.291 ±(99.9%) 77.581 MB/sec [Average]
[info]   (min, avg, max) = (950.845, 983.291, 998.441), stdev = 20.148
[info]   CI (99.9%): [905.710, 1060.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   549.121 ±(99.9%) 14.568 B/op [Average]
[info]   (min, avg, max) = (545.082, 549.121, 553.441), stdev = 3.783
[info]   CI (99.9%): [534.554, 563.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.777 ±(99.9%) 1418.914 MB/sec [Average]
[info]   (min, avg, max) = (671.225, 940.777, 1345.098), stdev = 368.487
[info]   CI (99.9%): [≈ 0, 2359.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   524.518 ±(99.9%) 778.978 B/op [Average]
[info]   (min, avg, max) = (370.828, 524.518, 747.247), stdev = 202.298
[info]   CI (99.9%): [≈ 0, 1303.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1657477.832 ops/s
[info] # Warmup Iteration   2: 3171984.445 ops/s
[info] # Warmup Iteration   3: 2937201.237 ops/s
[info] # Warmup Iteration   4: 3179465.321 ops/s
[info] # Warmup Iteration   5: 3172190.108 ops/s
[info] Iteration   1: 3188369.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3179043.175 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3179316.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3180265.322 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3171923.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3179783.701 ±(99.9%) 22494.515 ops/s [Average]
[info]   (min, avg, max) = (3171923.310, 3179783.701, 3188369.760), stdev = 5841.754
[info]   CI (99.9%): [3157289.186, 3202278.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93232.461 ops/s
[info] # Warmup Iteration   2: 361095.534 ops/s
[info] # Warmup Iteration   3: 370488.420 ops/s
[info] # Warmup Iteration   4: 392418.387 ops/s
[info] # Warmup Iteration   5: 392753.354 ops/s
[info] Iteration   1: 395133.293 ops/s
[info]                  ·gc.alloc.rate:                   2561.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              10204.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10637.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 397629.956 ops/s
[info]                  ·gc.alloc.rate:                   2526.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              9999.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7950.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 396583.992 ops/s
[info]                  ·gc.alloc.rate:               2574.495 MB/sec
[info]                  ·gc.alloc.rate.norm:          10215.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10656.486 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 396023.189 ops/s
[info]                  ·gc.alloc.rate:               2569.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          10212.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10703.510 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 397551.615 ops/s
[info]                  ·gc.alloc.rate:               2553.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          10111.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8015.781 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   396584.409 ±(99.9%) 4061.180 ops/s [Average]
[info]   (min, avg, max) = (395133.293, 396584.409, 397629.956), stdev = 1054.676
[info]   CI (99.9%): [392523.229, 400645.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2557.329 ±(99.9%) 72.683 MB/sec [Average]
[info]   (min, avg, max) = (2526.574, 2557.329, 2574.495), stdev = 18.876
[info]   CI (99.9%): [2484.646, 2630.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10148.557 ±(99.9%) 361.687 B/op [Average]
[info]   (min, avg, max) = (9999.442, 10148.557, 10215.056), stdev = 93.929
[info]   CI (99.9%): [9786.870, 10510.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2416.643 ±(99.9%) 1405.906 MB/sec [Average]
[info]   (min, avg, max) = (2008.963, 2416.643, 2693.182), stdev = 365.109
[info]   CI (99.9%): [1010.737, 3822.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9592.813 ±(99.9%) 5658.991 B/op [Average]
[info]   (min, avg, max) = (7950.889, 9592.813, 10703.510), stdev = 1469.622
[info]   CI (99.9%): [3933.822, 15251.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.090 ±(99.9%) 0.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.396), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.355 ±(99.9%) 2.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.355, 1.566), stdev = 0.683
[info]   CI (99.9%): [≈ 0, 2.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6584.452 ops/s
[info] # Warmup Iteration   2: 21866.452 ops/s
[info] # Warmup Iteration   3: 26276.790 ops/s
[info] # Warmup Iteration   4: 26066.494 ops/s
[info] # Warmup Iteration   5: 26057.359 ops/s
[info] Iteration   1: 26096.787 ops/s
[info]                  ·gc.alloc.rate:                   1701.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              102563.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121570.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 26401.140 ops/s
[info]                  ·gc.alloc.rate:                   1687.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              100561.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80137.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26431.515 ops/s
[info]                  ·gc.alloc.rate:                   1702.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              101394.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119910.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25607.137 ops/s
[info]                  ·gc.alloc.rate:               1648.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          101283.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82291.026 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 25646.380 ops/s
[info]                  ·gc.alloc.rate:                   1639.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              100601.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82162.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26036.592 ±(99.9%) 1527.181 ops/s [Average]
[info]   (min, avg, max) = (25607.137, 26036.592, 26431.515), stdev = 396.604
[info]   CI (99.9%): [24509.410, 27563.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1675.949 ±(99.9%) 114.337 MB/sec [Average]
[info]   (min, avg, max) = (1639.984, 1675.949, 1702.911), stdev = 29.693
[info]   CI (99.9%): [1561.612, 1790.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101281.173 ±(99.9%) 3125.927 B/op [Average]
[info]   (min, avg, max) = (100561.939, 101281.173, 102563.351), stdev = 811.793
[info]   CI (99.9%): [98155.246, 104407.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.714 ±(99.9%) 1421.581 MB/sec [Average]
[info]   (min, avg, max) = (1339.397, 1610.714, 2016.363), stdev = 369.180
[info]   CI (99.9%): [189.133, 3032.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97214.506 ±(99.9%) 82794.220 B/op [Average]
[info]   (min, avg, max) = (80137.336, 97214.506, 121570.535), stdev = 21501.396
[info]   CI (99.9%): [14420.285, 180008.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 4.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 2.665), stdev = 1.162
[info]   CI (99.9%): [≈ 0, 5.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.661 ±(99.9%) 266.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.661, 158.845), stdev = 69.246
[info]   CI (99.9%): [≈ 0, 313.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.578
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.770 ops/s
[info] # Warmup Iteration   2: 86397.520 ops/s
[info] # Warmup Iteration   3: 99281.771 ops/s
[info] # Warmup Iteration   4: 98193.300 ops/s
[info] # Warmup Iteration   5: 97351.034 ops/s
[info] Iteration   1: 97039.020 ops/s
[info]                  ·gc.alloc.rate:               950.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          15413.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21521.884 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 99999.375 ops/s
[info]                  ·gc.alloc.rate:               960.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          15115.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10431.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 99963.226 ops/s
[info]                  ·gc.alloc.rate:                   961.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              15137.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10435.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 99824.511 ops/s
[info]                  ·gc.alloc.rate:               984.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          15519.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20905.773 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 99989.261 ops/s
[info]                  ·gc.alloc.rate:                   965.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              15201.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10438.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99363.079 ±(99.9%) 5010.028 ops/s [Average]
[info]   (min, avg, max) = (97039.020, 99363.079, 99999.375), stdev = 1301.088
[info]   CI (99.9%): [94353.050, 104373.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   964.581 ±(99.9%) 47.718 MB/sec [Average]
[info]   (min, avg, max) = (950.617, 964.581, 984.383), stdev = 12.392
[info]   CI (99.9%): [916.863, 1012.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15277.655 ±(99.9%) 690.719 B/op [Average]
[info]   (min, avg, max) = (15115.689, 15277.655, 15519.678), stdev = 179.378
[info]   CI (99.9%): [14586.936, 15968.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   928.460 ±(99.9%) 1399.781 MB/sec [Average]
[info]   (min, avg, max) = (662.837, 928.460, 1327.337), stdev = 363.519
[info]   CI (99.9%): [≈ 0, 2328.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14746.662 ±(99.9%) 22748.471 B/op [Average]
[info]   (min, avg, max) = (10431.871, 14746.662, 21521.884), stdev = 5907.706
[info]   CI (99.9%): [≈ 0, 37495.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.131 ±(99.9%) 0.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.328), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20681.805 ops/s
[info] # Warmup Iteration   2: 61756.852 ops/s
[info] # Warmup Iteration   3: 66856.901 ops/s
[info] # Warmup Iteration   4: 69495.384 ops/s
[info] # Warmup Iteration   5: 69476.580 ops/s
[info] Iteration   1: 69465.060 ops/s
[info]                  ·gc.alloc.rate:                   1247.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              28255.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30335.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69873.560 ops/s
[info]                  ·gc.alloc.rate:               1237.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          27871.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15086.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 69285.934 ops/s
[info]                  ·gc.alloc.rate:                   1241.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              28189.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30437.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69364.877 ops/s
[info]                  ·gc.alloc.rate:                   1241.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              28169.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30417.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 69748.431 ops/s
[info]                  ·gc.alloc.rate:                   1260.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              28431.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30220.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   69547.573 ±(99.9%) 972.720 ops/s [Average]
[info]   (min, avg, max) = (69285.934, 69547.573, 69873.560), stdev = 252.612
[info]   CI (99.9%): [68574.852, 70520.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1245.413 ±(99.9%) 34.125 MB/sec [Average]
[info]   (min, avg, max) = (1237.439, 1245.413, 1260.016), stdev = 8.862
[info]   CI (99.9%): [1211.288, 1279.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28183.426 ±(99.9%) 780.776 B/op [Average]
[info]   (min, avg, max) = (27871.152, 28183.426, 28431.421), stdev = 202.765
[info]   CI (99.9%): [27402.650, 28964.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.713 ±(99.9%) 1153.565 MB/sec [Average]
[info]   (min, avg, max) = (669.815, 1205.713, 1340.612), stdev = 299.577
[info]   CI (99.9%): [52.148, 2359.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27299.469 ±(99.9%) 26291.613 B/op [Average]
[info]   (min, avg, max) = (15086.399, 27299.469, 30437.257), stdev = 6827.848
[info]   CI (99.9%): [1007.856, 53591.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.185), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 6.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.870 ±(99.9%) 119.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.870, 72.266), stdev = 31.105
[info]   CI (99.9%): [≈ 0, 138.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53503.106 ops/s
[info] # Warmup Iteration   2: 124902.912 ops/s
[info] # Warmup Iteration   3: 129809.450 ops/s
[info] # Warmup Iteration   4: 134214.941 ops/s
[info] # Warmup Iteration   5: 134563.254 ops/s
[info] Iteration   1: 134766.533 ops/s
[info]                  ·gc.alloc.rate:               929.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          10847.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7842.089 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 129767.873 ops/s
[info]                  ·gc.alloc.rate:                   915.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              11097.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16296.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 135251.035 ops/s
[info]                  ·gc.alloc.rate:               928.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          10800.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7821.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 134796.041 ops/s
[info]                  ·gc.alloc.rate:                   922.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              10767.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7851.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 134855.251 ops/s
[info]                  ·gc.alloc.rate:               946.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          11049.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15700.225 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   133887.346 ±(99.9%) 8899.329 ops/s [Average]
[info]   (min, avg, max) = (129767.873, 133887.346, 135251.035), stdev = 2311.127
[info]   CI (99.9%): [124988.017, 142786.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   928.346 ±(99.9%) 44.901 MB/sec [Average]
[info]   (min, avg, max) = (915.428, 928.346, 946.753), stdev = 11.661
[info]   CI (99.9%): [883.445, 973.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10912.589 ±(99.9%) 579.694 B/op [Average]
[info]   (min, avg, max) = (10767.710, 10912.589, 11097.046), stdev = 150.545
[info]   CI (99.9%): [10332.895, 11492.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.182 ±(99.9%) 1418.677 MB/sec [Average]
[info]   (min, avg, max) = (671.701, 941.182, 1345.187), stdev = 368.426
[info]   CI (99.9%): [≈ 0, 2359.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11102.479 ±(99.9%) 17229.158 B/op [Average]
[info]   (min, avg, max) = (7821.781, 11102.479, 16296.639), stdev = 4474.358
[info]   CI (99.9%): [≈ 0, 28331.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.505), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 1.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 2.049
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4895.854 ops/s
[info] # Warmup Iteration   2: 30615.580 ops/s
[info] # Warmup Iteration   3: 35914.902 ops/s
[info] # Warmup Iteration   4: 36111.264 ops/s
[info] # Warmup Iteration   5: 35798.215 ops/s
[info] Iteration   1: 36484.157 ops/s
[info]                  ·gc.alloc.rate:                   1773.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              76477.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57744.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 35858.473 ops/s
[info]                  ·gc.alloc.rate:                   1779.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              78110.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88209.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 36760.329 ops/s
[info]                  ·gc.alloc.rate:                   1796.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              76929.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57208.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36834.252 ops/s
[info]                  ·gc.alloc.rate:                   1813.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              77487.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85471.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36815.456 ops/s
[info]                  ·gc.alloc.rate:               1812.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          77469.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85516.097 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   36550.533 ±(99.9%) 1585.380 ops/s [Average]
[info]   (min, avg, max) = (35858.473, 36550.533, 36834.252), stdev = 411.718
[info]   CI (99.9%): [34965.154, 38135.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1795.124 ±(99.9%) 71.155 MB/sec [Average]
[info]   (min, avg, max) = (1773.116, 1795.124, 1813.887), stdev = 18.479
[info]   CI (99.9%): [1723.969, 1866.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77294.760 ±(99.9%) 2385.181 B/op [Average]
[info]   (min, avg, max) = (76477.311, 77294.760, 78110.361), stdev = 619.424
[info]   CI (99.9%): [74909.579, 79679.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1737.190 ±(99.9%) 1405.067 MB/sec [Average]
[info]   (min, avg, max) = (1336.180, 1737.190, 2009.818), stdev = 364.891
[info]   CI (99.9%): [332.123, 3142.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74830.263 ±(99.9%) 61153.651 B/op [Average]
[info]   (min, avg, max) = (57208.536, 74830.263, 88209.731), stdev = 15881.409
[info]   CI (99.9%): [13676.612, 135983.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.916 ±(99.9%) 7.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 4.413), stdev = 1.955
[info]   CI (99.9%): [≈ 0, 8.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40.169 ±(99.9%) 330.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.169, 193.699), stdev = 85.837
[info]   CI (99.9%): [≈ 0, 370.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11523.601 ops/s
[info] # Warmup Iteration   2: 30472.781 ops/s
[info] # Warmup Iteration   3: 31456.319 ops/s
[info] # Warmup Iteration   4: 31517.457 ops/s
[info] # Warmup Iteration   5: 32230.523 ops/s
[info] Iteration   1: 32125.844 ops/s
[info]                  ·gc.alloc.rate:               527.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          25839.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25062.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 32323.953 ops/s
[info]                  ·gc.alloc.rate:               541.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          26366.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32578.472 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32468.055 ops/s
[info]                  ·gc.alloc.rate:                   535.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              25952.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32435.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32398.534 ops/s
[info]                  ·gc.alloc.rate:               542.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          26351.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32538.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 32499.462 ops/s
[info]                  ·gc.alloc.rate:      518.403 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32363.170 ±(99.9%) 573.373 ops/s [Average]
[info]   (min, avg, max) = (32125.844, 32363.170, 32499.462), stdev = 148.903
[info]   CI (99.9%): [31789.797, 32936.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   533.055 ±(99.9%) 39.075 MB/sec [Average]
[info]   (min, avg, max) = (518.403, 533.055, 542.452), stdev = 10.148
[info]   CI (99.9%): [493.980, 572.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25922.953 ±(99.9%) 1981.307 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25922.953, 26366.431), stdev = 514.539
[info]   CI (99.9%): [23941.646, 27904.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   503.937 ±(99.9%) 1116.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.937, 669.806), stdev = 289.876
[info]   CI (99.9%): [≈ 0, 1620.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24522.874 ±(99.9%) 54231.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24522.874, 32578.472), stdev = 14083.736
[info]   CI (99.9%): [≈ 0, 78754.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.202 ±(99.9%) 1.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 1.009), stdev = 0.451
[info]   CI (99.9%): [≈ 0, 1.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11001.189 ops/s
[info] # Warmup Iteration   2: 31719.577 ops/s
[info] # Warmup Iteration   3: 32367.208 ops/s
[info] # Warmup Iteration   4: 32452.878 ops/s
[info] # Warmup Iteration   5: 32737.987 ops/s
[info] Iteration   1: 32110.254 ops/s
[info]                  ·gc.alloc.rate:               405.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          19895.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25074.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 32552.075 ops/s
[info]                  ·gc.alloc.rate:               411.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          19879.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24734.516 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32650.671 ops/s
[info]                  ·gc.alloc.rate:               412.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          19876.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32173.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 32752.096 ops/s
[info]                  ·gc.alloc.rate:      399.963 MB/sec
[info]                  ·gc.alloc.rate.norm: 19212.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32621.810 ops/s
[info]                  ·gc.alloc.rate:                   412.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              19906.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32199.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32537.381 ±(99.9%) 960.190 ops/s [Average]
[info]   (min, avg, max) = (32110.254, 32537.381, 32752.096), stdev = 249.358
[info]   CI (99.9%): [31577.191, 33497.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   408.418 ±(99.9%) 20.997 MB/sec [Average]
[info]   (min, avg, max) = (399.963, 408.418, 412.675), stdev = 5.453
[info]   CI (99.9%): [387.421, 429.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19753.925 ±(99.9%) 1167.370 B/op [Average]
[info]   (min, avg, max) = (19212.033, 19753.925, 19906.101), stdev = 303.162
[info]   CI (99.9%): [18586.555, 20921.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.640 ±(99.9%) 1058.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.640, 667.533), stdev = 274.940
[info]   CI (99.9%): [≈ 0, 1530.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22836.604 ±(99.9%) 51119.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22836.604, 32199.606), stdev = 13275.681
[info]   CI (99.9%): [≈ 0, 73956.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.402 ±(99.9%) 3.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 2.008), stdev = 0.898
[info]   CI (99.9%): [≈ 0, 3.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18592.838 ops/s
[info] # Warmup Iteration   2: 32484.409 ops/s
[info] # Warmup Iteration   3: 33276.125 ops/s
[info] # Warmup Iteration   4: 33586.098 ops/s
[info] # Warmup Iteration   5: 33838.070 ops/s
[info] Iteration   1: 34187.378 ops/s
[info]                  ·gc.alloc.rate:      410.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33947.858 ops/s
[info]                  ·gc.alloc.rate:               420.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          19509.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23718.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 33370.948 ops/s
[info]                  ·gc.alloc.rate:                   425.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              20068.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31637.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34305.133 ops/s
[info]                  ·gc.alloc.rate:      411.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34032.249 ops/s
[info]                  ·gc.alloc.rate:               428.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          19802.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31022.594 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   33968.713 ±(99.9%) 1392.086 ops/s [Average]
[info]   (min, avg, max) = (33370.948, 33968.713, 34305.133), stdev = 361.520
[info]   CI (99.9%): [32576.627, 35360.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   419.421 ±(99.9%) 30.709 MB/sec [Average]
[info]   (min, avg, max) = (410.483, 419.421, 428.218), stdev = 7.975
[info]   CI (99.9%): [388.712, 450.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19434.438 ±(99.9%) 2040.156 B/op [Average]
[info]   (min, avg, max) = (18896.017, 19434.438, 20068.359), stdev = 529.822
[info]   CI (99.9%): [17394.282, 21474.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.705 ±(99.9%) 1326.935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.705, 671.066), stdev = 344.601
[info]   CI (99.9%): [≈ 0, 1697.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17275.899 ±(99.9%) 61900.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17275.899, 31637.934), stdev = 16075.339
[info]   CI (99.9%): [≈ 0, 79176.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.196 ±(99.9%) 1.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.982), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19281.410 ops/s
[info] # Warmup Iteration   2: 33471.684 ops/s
[info] # Warmup Iteration   3: 34460.029 ops/s
[info] # Warmup Iteration   4: 34474.870 ops/s
[info] # Warmup Iteration   5: 35065.557 ops/s
[info] Iteration   1: 34982.501 ops/s
[info]                  ·gc.alloc.rate:                   391.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              17628.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23016.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34826.219 ops/s
[info]                  ·gc.alloc.rate:               395.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          17873.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23119.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 35077.065 ops/s
[info]                  ·gc.alloc.rate:      381.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34971.507 ops/s
[info]                  ·gc.alloc.rate:                   396.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              17862.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30173.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34823.651 ops/s
[info]                  ·gc.alloc.rate:               398.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          18010.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30302.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34936.189 ±(99.9%) 421.801 ops/s [Average]
[info]   (min, avg, max) = (34823.651, 34936.189, 35077.065), stdev = 109.540
[info]   CI (99.9%): [34514.388, 35357.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   392.797 ±(99.9%) 26.958 MB/sec [Average]
[info]   (min, avg, max) = (381.063, 392.797, 398.560), stdev = 7.001
[info]   CI (99.9%): [365.839, 419.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17694.012 ±(99.9%) 1391.626 B/op [Average]
[info]   (min, avg, max) = (17096.012, 17694.012, 18010.162), stdev = 361.401
[info]   CI (99.9%): [16302.385, 19085.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.884 ±(99.9%) 1062.868 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.884, 670.596), stdev = 276.023
[info]   CI (99.9%): [≈ 0, 1535.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   21322.644 ±(99.9%) 47930.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21322.644, 30302.967), stdev = 12447.338
[info]   CI (99.9%): [≈ 0, 69252.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.375 ±(99.9%) 1.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 0.937), stdev = 0.513
[info]   CI (99.9%): [≈ 0, 2.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1401.440 ops/s
[info] # Warmup Iteration   2: 14086.176 ops/s
[info] # Warmup Iteration   3: 15496.830 ops/s
[info] # Warmup Iteration   4: 15558.207 ops/s
[info] # Warmup Iteration   5: 15367.226 ops/s
[info] Iteration   1: 15321.151 ops/s
[info]                  ·gc.alloc.rate:                   1137.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              116828.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137709.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15400.640 ops/s
[info]                  ·gc.alloc.rate:               1118.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          114263.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68518.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15281.867 ops/s
[info]                  ·gc.alloc.rate:                   1135.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              116873.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138163.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14805.814 ops/s
[info]                  ·gc.alloc.rate:               1098.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          116728.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142685.078 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 15582.471 ops/s
[info]                  ·gc.alloc.rate:                   1126.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              113740.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67810.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15278.389 ±(99.9%) 1110.327 ops/s [Average]
[info]   (min, avg, max) = (14805.814, 15278.389, 15582.471), stdev = 288.348
[info]   CI (99.9%): [14168.061, 16388.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1123.076 ±(99.9%) 60.562 MB/sec [Average]
[info]   (min, avg, max) = (1098.321, 1123.076, 1137.324), stdev = 15.728
[info]   CI (99.9%): [1062.514, 1183.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   115686.934 ±(99.9%) 5969.184 B/op [Average]
[info]   (min, avg, max) = (113740.312, 115686.934, 116873.779), stdev = 1550.178
[info]   CI (99.9%): [109717.750, 121656.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1073.416 ±(99.9%) 1414.300 MB/sec [Average]
[info]   (min, avg, max) = (670.711, 1073.416, 1342.547), stdev = 367.289
[info]   CI (99.9%): [≈ 0, 2487.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110977.486 ±(99.9%) 150682.638 B/op [Average]
[info]   (min, avg, max) = (67810.650, 110977.486, 142685.078), stdev = 39131.802
[info]   CI (99.9%): [≈ 0, 261660.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 6.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.497), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   71.493 ±(99.9%) 606.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.493, 353.180), stdev = 157.472
[info]   CI (99.9%): [≈ 0, 677.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2399.145 ops/s
[info] # Warmup Iteration   2: 14142.521 ops/s
[info] # Warmup Iteration   3: 15733.471 ops/s
[info] # Warmup Iteration   4: 15732.953 ops/s
[info] # Warmup Iteration   5: 15948.657 ops/s
[info] Iteration   1: 15741.486 ops/s
[info]                  ·gc.alloc.rate:                   1028.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              102823.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133527.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 15061.340 ops/s
[info]                  ·gc.alloc.rate:               970.642 MB/sec
[info]                  ·gc.alloc.rate.norm:          101406.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69842.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15378.027 ops/s
[info]                  ·gc.alloc.rate:               1024.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          104816.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136849.325 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 15424.254 ops/s
[info]                  ·gc.alloc.rate:               990.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          101068.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68237.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 14989.958 ops/s
[info]                  ·gc.alloc.rate:                   975.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              102420.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140565.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15319.013 ±(99.9%) 1167.504 ops/s [Average]
[info]   (min, avg, max) = (14989.958, 15319.013, 15741.486), stdev = 303.197
[info]   CI (99.9%): [14151.509, 16486.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   997.927 ±(99.9%) 104.098 MB/sec [Average]
[info]   (min, avg, max) = (970.642, 997.927, 1028.461), stdev = 27.034
[info]   CI (99.9%): [893.829, 1102.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   102507.037 ±(99.9%) 5686.377 B/op [Average]
[info]   (min, avg, max) = (101068.693, 102507.037, 104816.714), stdev = 1476.734
[info]   CI (99.9%): [96820.660, 108193.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.831 ±(99.9%) 1410.027 MB/sec [Average]
[info]   (min, avg, max) = (668.519, 1069.831, 1338.887), stdev = 366.179
[info]   CI (99.9%): [≈ 0, 2479.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   109804.516 ±(99.9%) 143629.809 B/op [Average]
[info]   (min, avg, max) = (68237.640, 109804.516, 140565.410), stdev = 37300.205
[info]   CI (99.9%): [≈ 0, 253434.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.381 ±(99.9%) 7.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.381, 4.371), stdev = 1.999
[info]   CI (99.9%): [≈ 0, 9.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63337.242 ops/s
[info] # Warmup Iteration   2: 98307.289 ops/s
[info] # Warmup Iteration   3: 107643.170 ops/s
[info] # Warmup Iteration   4: 107176.051 ops/s
[info] # Warmup Iteration   5: 107215.965 ops/s
[info] Iteration   1: 107607.319 ops/s
[info]                  ·gc.alloc.rate:      280.061 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 107345.890 ops/s
[info]                  ·gc.alloc.rate:               289.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          4248.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7501.130 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 107870.953 ops/s
[info]                  ·gc.alloc.rate:      280.754 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107014.634 ops/s
[info]                  ·gc.alloc.rate:               294.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          4331.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7524.188 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 107787.600 ops/s
[info]                  ·gc.alloc.rate:      280.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   107525.279 ±(99.9%) 1344.933 ops/s [Average]
[info]   (min, avg, max) = (107014.634, 107525.279, 107870.953), stdev = 349.275
[info]   CI (99.9%): [106180.346, 108870.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   285.140 ±(99.9%) 25.533 MB/sec [Average]
[info]   (min, avg, max) = (280.061, 285.140, 294.534), stdev = 6.631
[info]   CI (99.9%): [259.606, 310.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4173.668 ±(99.9%) 424.873 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4173.668, 4331.762), stdev = 110.338
[info]   CI (99.9%): [3748.795, 4598.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.649 ±(99.9%) 1079.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.649, 511.642), stdev = 280.227
[info]   CI (99.9%): [≈ 0, 1283.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3005.064 ±(99.9%) 15844.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3005.064, 7524.188), stdev = 4114.861
[info]   CI (99.9%): [≈ 0, 18849.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1813.352 ops/s
[info] # Warmup Iteration   2: 10834.597 ops/s
[info] # Warmup Iteration   3: 13754.764 ops/s
[info] # Warmup Iteration   4: 13717.844 ops/s
[info] # Warmup Iteration   5: 13743.410 ops/s
[info] Iteration   1: 13759.818 ops/s
[info]                  ·gc.alloc.rate:               1352.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          154616.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152757.021 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13779.376 ops/s
[info]                  ·gc.alloc.rate:                   1351.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              154363.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152698.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13616.456 ops/s
[info]                  ·gc.alloc.rate:                   1333.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              154084.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154603.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13318.644 ops/s
[info]                  ·gc.alloc.rate:                   1315.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              155451.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158207.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13686.914 ops/s
[info]                  ·gc.alloc.rate:                   1362.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              156685.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153494.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13632.242 ±(99.9%) 719.117 ops/s [Average]
[info]   (min, avg, max) = (13318.644, 13632.242, 13779.376), stdev = 186.752
[info]   CI (99.9%): [12913.124, 14351.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1343.057 ±(99.9%) 72.049 MB/sec [Average]
[info]   (min, avg, max) = (1315.588, 1343.057, 1362.899), stdev = 18.711
[info]   CI (99.9%): [1271.009, 1415.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155040.106 ±(99.9%) 4050.657 B/op [Average]
[info]   (min, avg, max) = (154084.741, 155040.106, 156685.329), stdev = 1051.943
[info]   CI (99.9%): [150989.449, 159090.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.903 ±(99.9%) 5.670 MB/sec [Average]
[info]   (min, avg, max) = (1335.149, 1336.903, 1338.914), stdev = 1.473
[info]   CI (99.9%): [1331.232, 1342.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   154352.216 ±(99.9%) 8810.042 B/op [Average]
[info]   (min, avg, max) = (152698.595, 154352.216, 158207.308), stdev = 2287.940
[info]   CI (99.9%): [145542.174, 163162.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 6.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 4.080), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   105.035 ±(99.9%) 813.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.035, 482.099), stdev = 211.203
[info]   CI (99.9%): [≈ 0, 918.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17064.361 ops/s
[info] # Warmup Iteration   2: 44593.667 ops/s
[info] # Warmup Iteration   3: 43559.808 ops/s
[info] # Warmup Iteration   4: 45143.471 ops/s
[info] # Warmup Iteration   5: 45481.741 ops/s
[info] Iteration   1: 45623.021 ops/s
[info]                  ·gc.alloc.rate:                   1164.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              40189.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46257.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 45656.597 ops/s
[info]                  ·gc.alloc.rate:                   1160.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              39988.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46258.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45736.211 ops/s
[info]                  ·gc.alloc.rate:                   1157.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              39848.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23095.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45423.880 ops/s
[info]                  ·gc.alloc.rate:               1163.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          40326.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46530.546 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 45035.709 ops/s
[info]                  ·gc.alloc.rate:                   1154.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              40328.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46952.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45495.084 ±(99.9%) 1083.482 ops/s [Average]
[info]   (min, avg, max) = (45035.709, 45495.084, 45736.211), stdev = 281.377
[info]   CI (99.9%): [44411.602, 46578.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1160.294 ±(99.9%) 16.576 MB/sec [Average]
[info]   (min, avg, max) = (1154.473, 1160.294, 1164.966), stdev = 4.305
[info]   CI (99.9%): [1143.718, 1176.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40136.125 ±(99.9%) 818.838 B/op [Average]
[info]   (min, avg, max) = (39848.283, 40136.125, 40328.719), stdev = 212.650
[info]   CI (99.9%): [39317.288, 40954.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.230 ±(99.9%) 1156.090 MB/sec [Average]
[info]   (min, avg, max) = (671.161, 1208.230, 1344.091), stdev = 300.233
[info]   CI (99.9%): [52.140, 2364.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41819.015 ±(99.9%) 40318.334 B/op [Average]
[info]   (min, avg, max) = (23095.630, 41819.015, 46952.554), stdev = 10470.543
[info]   CI (99.9%): [1500.681, 82137.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.415), stdev = 1.516
[info]   CI (99.9%): [≈ 0, 6.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.578 ±(99.9%) 203.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.578, 119.302), stdev = 52.956
[info]   CI (99.9%): [≈ 0, 228.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27443.693 ops/s
[info] # Warmup Iteration   2: 58792.367 ops/s
[info] # Warmup Iteration   3: 62255.878 ops/s
[info] # Warmup Iteration   4: 63628.226 ops/s
[info] # Warmup Iteration   5: 62467.192 ops/s
[info] Iteration   1: 63926.404 ops/s
[info]                  ·gc.alloc.rate:                   1128.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              27775.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32923.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 62538.359 ops/s
[info]                  ·gc.alloc.rate:                   1083.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              27272.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16831.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 62629.763 ops/s
[info]                  ·gc.alloc.rate:                   1112.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              27962.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33646.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 63780.599 ops/s
[info]                  ·gc.alloc.rate:                   1130.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              27904.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33072.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 63720.384 ops/s
[info]                  ·gc.alloc.rate:                   1103.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              27235.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16560.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   63319.102 ±(99.9%) 2602.797 ops/s [Average]
[info]   (min, avg, max) = (62538.359, 63319.102, 63926.404), stdev = 675.938
[info]   CI (99.9%): [60716.305, 65921.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1111.734 ±(99.9%) 74.400 MB/sec [Average]
[info]   (min, avg, max) = (1083.769, 1111.734, 1130.819), stdev = 19.321
[info]   CI (99.9%): [1037.335, 1186.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27630.001 ±(99.9%) 1348.220 B/op [Average]
[info]   (min, avg, max) = (27235.754, 27630.001, 27962.452), stdev = 350.128
[info]   CI (99.9%): [26281.781, 28978.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.228 ±(99.9%) 1411.074 MB/sec [Average]
[info]   (min, avg, max) = (668.886, 1071.228, 1340.275), stdev = 366.452
[info]   CI (99.9%): [≈ 0, 2482.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26606.847 ±(99.9%) 34855.422 B/op [Average]
[info]   (min, avg, max) = (16560.100, 26606.847, 33646.298), stdev = 9051.842
[info]   CI (99.9%): [≈ 0, 61462.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.676 ±(99.9%) 5.677 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.676, 3.313), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.693 ±(99.9%) 140.161 B/op [Average]
[info]   (min, avg, max) = (0.114, 16.693, 81.806), stdev = 36.399
[info]   CI (99.9%): [≈ 0, 156.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94432.529 ops/s
[info] # Warmup Iteration   2: 157466.245 ops/s
[info] # Warmup Iteration   3: 174293.728 ops/s
[info] # Warmup Iteration   4: 172349.861 ops/s
[info] # Warmup Iteration   5: 172023.006 ops/s
[info] Iteration   1: 173860.707 ops/s
[info]                  ·gc.alloc.rate:               291.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          2636.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4631.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 173982.603 ops/s
[info]                  ·gc.alloc.rate:               288.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          2605.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4627.985 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 174758.947 ops/s
[info]                  ·gc.alloc.rate:      277.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 173283.559 ops/s
[info]                  ·gc.alloc.rate:                   294.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              2672.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4646.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 174614.267 ops/s
[info]                  ·gc.alloc.rate:      276.919 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   174100.017 ±(99.9%) 2307.417 ops/s [Average]
[info]   (min, avg, max) = (173283.559, 174100.017, 174758.947), stdev = 599.229
[info]   CI (99.9%): [171792.600, 176407.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   285.534 ±(99.9%) 31.043 MB/sec [Average]
[info]   (min, avg, max) = (276.919, 285.534, 294.254), stdev = 8.062
[info]   CI (99.9%): [254.491, 316.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2581.355 ±(99.9%) 313.685 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2581.355, 2672.571), stdev = 81.463
[info]   CI (99.9%): [2267.670, 2895.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.976 ±(99.9%) 1079.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.976, 511.684), stdev = 280.229
[info]   CI (99.9%): [≈ 0, 1386.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2781.152 ±(99.9%) 9776.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2781.152, 4646.597), stdev = 2538.843
[info]   CI (99.9%): [≈ 0, 12557.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94524.166 ops/s
[info] # Warmup Iteration   2: 174663.887 ops/s
[info] # Warmup Iteration   3: 184917.319 ops/s
[info] # Warmup Iteration   4: 185212.706 ops/s
[info] # Warmup Iteration   5: 184643.733 ops/s
[info] Iteration   1: 185044.003 ops/s
[info]                  ·gc.alloc.rate:      0.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.717 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 185228.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 185225.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 185004.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185023.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   185105.174 ±(99.9%) 430.710 ops/s [Average]
[info]   (min, avg, max) = (185004.659, 185105.174, 185228.058), stdev = 111.854
[info]   CI (99.9%): [184674.465, 185535.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.017 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.084), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.145 ±(99.9%) 1.231 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.145, 0.717), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20147.858 ops/s
[info] # Warmup Iteration   2: 52904.220 ops/s
[info] # Warmup Iteration   3: 56147.129 ops/s
[info] # Warmup Iteration   4: 57955.560 ops/s
[info] # Warmup Iteration   5: 58234.424 ops/s
[info] Iteration   1: 57974.494 ops/s
[info]                  ·gc.alloc.rate:               1133.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          30762.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36393.819 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 58140.958 ops/s
[info]                  ·gc.alloc.rate:               1123.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          30407.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18149.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 58143.045 ops/s
[info]                  ·gc.alloc.rate:                   1125.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              30459.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36313.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 58070.342 ops/s
[info]                  ·gc.alloc.rate:               1121.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          30405.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36380.052 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 58020.088 ops/s
[info]                  ·gc.alloc.rate:                   1112.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              30189.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18214.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   58069.785 ±(99.9%) 285.461 ops/s [Average]
[info]   (min, avg, max) = (57974.494, 58069.785, 58143.045), stdev = 74.133
[info]   CI (99.9%): [57784.324, 58355.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1123.388 ±(99.9%) 28.472 MB/sec [Average]
[info]   (min, avg, max) = (1112.865, 1123.388, 1133.440), stdev = 7.394
[info]   CI (99.9%): [1094.916, 1151.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30444.829 ±(99.9%) 791.701 B/op [Average]
[info]   (min, avg, max) = (30189.617, 30444.829, 30762.237), stdev = 205.602
[info]   CI (99.9%): [29653.128, 31236.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1073.390 ±(99.9%) 1414.659 MB/sec [Average]
[info]   (min, avg, max) = (670.456, 1073.390, 1342.300), stdev = 367.382
[info]   CI (99.9%): [≈ 0, 2488.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29090.323 ±(99.9%) 38344.761 B/op [Average]
[info]   (min, avg, max) = (18149.471, 29090.323, 36393.819), stdev = 9958.013
[info]   CI (99.9%): [≈ 0, 67435.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.102), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 5.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.166 ±(99.9%) 144.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.166, 84.138), stdev = 37.446
[info]   CI (99.9%): [≈ 0, 161.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12385.686 ops/s
[info] # Warmup Iteration   2: 85462.374 ops/s
[info] # Warmup Iteration   3: 92996.717 ops/s
[info] # Warmup Iteration   4: 99054.602 ops/s
[info] # Warmup Iteration   5: 101218.800 ops/s
[info] Iteration   1: 97530.784 ops/s
[info]                  ·gc.alloc.rate:                   2039.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              32909.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32453.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 98850.285 ops/s
[info]                  ·gc.alloc.rate:                   2052.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              32659.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31978.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.932 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 98095.584 ops/s
[info]                  ·gc.alloc.rate:                   2049.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              32879.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32128.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 101155.264 ops/s
[info]                  ·gc.alloc.rate:                   2110.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              32839.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31166.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 101196.347 ops/s
[info]                  ·gc.alloc.rate:               2125.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          33058.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31200.034 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   99365.653 ±(99.9%) 6613.578 ops/s [Average]
[info]   (min, avg, max) = (97530.784, 99365.653, 101196.347), stdev = 1717.525
[info]   CI (99.9%): [92752.075, 105979.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2075.373 ±(99.9%) 152.481 MB/sec [Average]
[info]   (min, avg, max) = (2039.254, 2075.373, 2125.485), stdev = 39.599
[info]   CI (99.9%): [1922.892, 2227.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32869.214 ±(99.9%) 552.555 B/op [Average]
[info]   (min, avg, max) = (32659.550, 32869.214, 33058.526), stdev = 143.497
[info]   CI (99.9%): [32316.659, 33421.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2006.397 ±(99.9%) 14.474 MB/sec [Average]
[info]   (min, avg, max) = (2002.516, 2006.397, 2011.026), stdev = 3.759
[info]   CI (99.9%): [1991.924, 2020.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31785.294 ±(99.9%) 2217.483 B/op [Average]
[info]   (min, avg, max) = (31166.654, 31785.294, 32453.569), stdev = 575.873
[info]   CI (99.9%): [29567.812, 34002.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.331), stdev = 1.426
[info]   CI (99.9%): [≈ 0, 6.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.535 ±(99.9%) 88.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.535, 53.749), stdev = 23.012
[info]   CI (99.9%): [≈ 0, 102.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19559.232 ops/s
[info] # Warmup Iteration   2: 108924.444 ops/s
[info] # Warmup Iteration   3: 121470.474 ops/s
[info] # Warmup Iteration   4: 122262.118 ops/s
[info] # Warmup Iteration   5: 117813.710 ops/s
[info] Iteration   1: 116600.711 ops/s
[info]                  ·gc.alloc.rate:                   1641.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              22150.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27086.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 117423.284 ops/s
[info]                  ·gc.alloc.rate:                   1648.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              22090.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17941.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 117888.561 ops/s
[info]                  ·gc.alloc.rate:                   1668.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              22271.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26759.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.724 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 118389.097 ops/s
[info]                  ·gc.alloc.rate:                   1673.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              22251.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17729.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 121075.754 ops/s
[info]                  ·gc.alloc.rate:               1698.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          22069.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17335.985 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   118275.481 ±(99.9%) 6539.081 ops/s [Average]
[info]   (min, avg, max) = (116600.711, 118275.481, 121075.754), stdev = 1698.179
[info]   CI (99.9%): [111736.400, 124814.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1666.061 ±(99.9%) 86.335 MB/sec [Average]
[info]   (min, avg, max) = (1641.493, 1666.061, 1698.086), stdev = 22.421
[info]   CI (99.9%): [1579.726, 1752.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22166.680 ±(99.9%) 352.644 B/op [Average]
[info]   (min, avg, max) = (22069.872, 22166.680, 22271.067), stdev = 91.580
[info]   CI (99.9%): [21814.037, 22519.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1603.666 ±(99.9%) 1414.142 MB/sec [Average]
[info]   (min, avg, max) = (1333.786, 1603.666, 2007.306), stdev = 367.248
[info]   CI (99.9%): [189.523, 3017.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21370.616 ±(99.9%) 19540.612 B/op [Average]
[info]   (min, avg, max) = (17335.985, 21370.616, 27086.565), stdev = 5074.635
[info]   CI (99.9%): [1830.004, 40911.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 6.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 3.935), stdev = 1.719
[info]   CI (99.9%): [≈ 0, 7.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.658 ±(99.9%) 88.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.658, 52.733), stdev = 23.043
[info]   CI (99.9%): [≈ 0, 100.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 3.962
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72662.781 ops/s
[info] # Warmup Iteration   2: 153798.351 ops/s
[info] # Warmup Iteration   3: 163145.007 ops/s
[info] # Warmup Iteration   4: 164991.699 ops/s
[info] # Warmup Iteration   5: 166712.588 ops/s
[info] Iteration   1: 163935.138 ops/s
[info]                  ·gc.alloc.rate:               1533.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          14722.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12828.926 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 166763.828 ops/s
[info]                  ·gc.alloc.rate:                   1557.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              14700.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12617.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 166659.157 ops/s
[info]                  ·gc.alloc.rate:               1584.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          14962.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18966.881 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 166587.087 ops/s
[info]                  ·gc.alloc.rate:               1567.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          14807.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12674.693 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 163292.201 ops/s
[info]                  ·gc.alloc.rate:               1526.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          14713.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12950.694 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   165447.482 ±(99.9%) 6509.765 ops/s [Average]
[info]   (min, avg, max) = (163292.201, 165447.482, 166763.828), stdev = 1690.565
[info]   CI (99.9%): [158937.717, 171957.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1553.939 ±(99.9%) 91.630 MB/sec [Average]
[info]   (min, avg, max) = (1526.831, 1553.939, 1584.368), stdev = 23.796
[info]   CI (99.9%): [1462.309, 1645.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14781.186 ±(99.9%) 422.240 B/op [Average]
[info]   (min, avg, max) = (14700.082, 14781.186, 14962.441), stdev = 109.654
[info]   CI (99.9%): [14358.946, 15203.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1473.428 ±(99.9%) 1151.624 MB/sec [Average]
[info]   (min, avg, max) = (1336.294, 1473.428, 2008.397), stdev = 299.073
[info]   CI (99.9%): [321.804, 2625.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14007.732 ±(99.9%) 10686.822 B/op [Average]
[info]   (min, avg, max) = (12617.464, 14007.732, 18966.881), stdev = 2775.334
[info]   CI (99.9%): [3320.909, 24694.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1308.142 ops/s
[info] # Warmup Iteration   2: 39962.430 ops/s
[info] # Warmup Iteration   3: 52197.837 ops/s
[info] # Warmup Iteration   4: 49809.981 ops/s
[info] # Warmup Iteration   5: 50227.990 ops/s
[info] Iteration   1: 51153.822 ops/s
[info]                  ·gc.alloc.rate:                   2746.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              84511.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82580.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.843 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 51117.750 ops/s
[info]                  ·gc.alloc.rate:                   2721.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              83792.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82800.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 51071.619 ops/s
[info]                  ·gc.alloc.rate:                   2760.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              85073.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83097.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 51366.542 ops/s
[info]                  ·gc.alloc.rate:               2777.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          85081.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82802.726 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 50595.786 ops/s
[info]                  ·gc.alloc.rate:               2710.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          84310.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2031.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63178.963 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   51061.104 ±(99.9%) 1092.065 ops/s [Average]
[info]   (min, avg, max) = (50595.786, 51061.104, 51366.542), stdev = 283.606
[info]   CI (99.9%): [49969.038, 52153.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2743.409 ±(99.9%) 106.056 MB/sec [Average]
[info]   (min, avg, max) = (2710.407, 2743.409, 2777.389), stdev = 27.542
[info]   CI (99.9%): [2637.353, 2849.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84554.096 ±(99.9%) 2098.803 B/op [Average]
[info]   (min, avg, max) = (83792.868, 84554.096, 85081.553), stdev = 545.052
[info]   CI (99.9%): [82455.292, 86652.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2560.837 ±(99.9%) 1140.712 MB/sec [Average]
[info]   (min, avg, max) = (2031.063, 2560.837, 2702.999), stdev = 296.239
[info]   CI (99.9%): [1420.125, 3701.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78892.041 ±(99.9%) 33831.006 B/op [Average]
[info]   (min, avg, max) = (63178.963, 78892.041, 83097.800), stdev = 8785.805
[info]   CI (99.9%): [45061.035, 112723.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.153 ±(99.9%) 6.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.153, 3.843), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 7.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45017.822 ops/s
[info] # Warmup Iteration   2: 171348.456 ops/s
[info] # Warmup Iteration   3: 179713.404 ops/s
[info] # Warmup Iteration   4: 184658.221 ops/s
[info] # Warmup Iteration   5: 183710.453 ops/s
[info] Iteration   1: 184661.963 ops/s
[info]                  ·gc.alloc.rate:               1223.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          10425.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5711.402 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 184373.296 ops/s
[info]                  ·gc.alloc.rate:                   1226.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              10469.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11447.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 180896.654 ops/s
[info]                  ·gc.alloc.rate:                   1227.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              10677.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11675.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 184538.962 ops/s
[info]                  ·gc.alloc.rate:                   1237.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              10555.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11450.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 185694.511 ops/s
[info]                  ·gc.alloc.rate:                   1230.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              10427.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5691.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   184033.077 ±(99.9%) 7038.541 ops/s [Average]
[info]   (min, avg, max) = (180896.654, 184033.077, 185694.511), stdev = 1827.887
[info]   CI (99.9%): [176994.536, 191071.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1229.067 ±(99.9%) 21.183 MB/sec [Average]
[info]   (min, avg, max) = (1223.205, 1229.067, 1237.780), stdev = 5.501
[info]   CI (99.9%): [1207.884, 1250.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10511.207 ±(99.9%) 411.913 B/op [Average]
[info]   (min, avg, max) = (10425.254, 10511.207, 10677.901), stdev = 106.973
[info]   CI (99.9%): [10099.294, 10923.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.501 ±(99.9%) 1415.508 MB/sec [Average]
[info]   (min, avg, max) = (670.124, 1073.501, 1342.728), stdev = 367.603
[info]   CI (99.9%): [≈ 0, 2489.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9195.106 ±(99.9%) 12286.482 B/op [Average]
[info]   (min, avg, max) = (5691.173, 9195.106, 11675.702), stdev = 3190.760
[info]   CI (99.9%): [≈ 0, 21481.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.310), stdev = 1.467
[info]   CI (99.9%): [≈ 0, 6.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.858 ±(99.9%) 48.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.858, 28.228), stdev = 12.508
[info]   CI (99.9%): [≈ 0, 54.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230340.588 ops/s
[info] # Warmup Iteration   2: 498028.882 ops/s
[info] # Warmup Iteration   3: 518678.581 ops/s
[info] # Warmup Iteration   4: 518629.736 ops/s
[info] # Warmup Iteration   5: 517764.587 ops/s
[info] Iteration   1: 519542.413 ops/s
[info]                  ·gc.alloc.rate:      525.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 519199.376 ops/s
[info]                  ·gc.alloc.rate:               547.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          1658.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2022.294 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 538874.563 ops/s
[info]                  ·gc.alloc.rate:               569.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          1663.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1948.545 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 538534.881 ops/s
[info]                  ·gc.alloc.rate:                   569.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              1663.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1951.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 537660.598 ops/s
[info]                  ·gc.alloc.rate:                   560.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1641.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1954.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   530762.366 ±(99.9%) 40081.643 ops/s [Average]
[info]   (min, avg, max) = (519199.376, 530762.366, 538874.563), stdev = 10409.075
[info]   CI (99.9%): [490680.723, 570844.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   554.410 ±(99.9%) 71.437 MB/sec [Average]
[info]   (min, avg, max) = (525.522, 554.410, 569.543), stdev = 18.552
[info]   CI (99.9%): [482.973, 625.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1643.657 ±(99.9%) 116.617 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1643.657, 1663.461), stdev = 30.285
[info]   CI (99.9%): [1527.040, 1760.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.014 ±(99.9%) 1149.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.014, 667.976), stdev = 298.523
[info]   CI (99.9%): [≈ 0, 1683.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1575.482 ±(99.9%) 3393.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1575.482, 2022.294), stdev = 881.254
[info]   CI (99.9%): [≈ 0, 4968.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.061), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445288.304 ops/s
[info] # Warmup Iteration   2: 709710.823 ops/s
[info] # Warmup Iteration   3: 720187.951 ops/s
[info] # Warmup Iteration   4: 718450.578 ops/s
[info] # Warmup Iteration   5: 720174.586 ops/s
[info] Iteration   1: 704921.207 ops/s
[info]                  ·gc.alloc.rate:               560.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          1250.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1496.939 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 708454.329 ops/s
[info]                  ·gc.alloc.rate:      557.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 1237.084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 705712.588 ops/s
[info]                  ·gc.alloc.rate:               554.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          1235.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1495.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 703911.309 ops/s
[info]                  ·gc.alloc.rate:                   565.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              1265.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1499.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 705529.948 ops/s
[info]                  ·gc.alloc.rate:               566.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          1263.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1496.397 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   705705.876 ±(99.9%) 6506.667 ops/s [Average]
[info]   (min, avg, max) = (703911.309, 705705.876, 708454.329), stdev = 1689.761
[info]   CI (99.9%): [699199.209, 712212.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.745 ±(99.9%) 20.917 MB/sec [Average]
[info]   (min, avg, max) = (554.142, 560.745, 566.557), stdev = 5.432
[info]   CI (99.9%): [539.829, 581.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1250.413 ±(99.9%) 54.117 B/op [Average]
[info]   (min, avg, max) = (1235.811, 1250.413, 1265.216), stdev = 14.054
[info]   CI (99.9%): [1196.296, 1304.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.545 ±(99.9%) 1154.953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.545, 670.844), stdev = 299.938
[info]   CI (99.9%): [≈ 0, 1691.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1197.676 ±(99.9%) 2578.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1197.676, 1499.804), stdev = 669.523
[info]   CI (99.9%): [≈ 0, 3775.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449569.758 ops/s
[info] # Warmup Iteration   2: 763130.135 ops/s
[info] # Warmup Iteration   3: 780606.909 ops/s
[info] # Warmup Iteration   4: 778048.385 ops/s
[info] # Warmup Iteration   5: 781208.419 ops/s
[info] Iteration   1: 780178.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 780337.322 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 780496.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 780156.071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 780125.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   780258.875 ±(99.9%) 601.620 ops/s [Average]
[info]   (min, avg, max) = (780125.827, 780258.875, 780496.998), stdev = 156.239
[info]   CI (99.9%): [779657.255, 780860.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78361.145 ops/s
[info] # Warmup Iteration   2: 305824.289 ops/s
[info] # Warmup Iteration   3: 325198.991 ops/s
[info] # Warmup Iteration   4: 334311.998 ops/s
[info] # Warmup Iteration   5: 332947.444 ops/s
[info] Iteration   1: 320517.358 ops/s
[info]                  ·gc.alloc.rate:               907.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          4456.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3256.183 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 337672.846 ops/s
[info]                  ·gc.alloc.rate:               951.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          4433.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3095.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 335681.022 ops/s
[info]                  ·gc.alloc.rate:                   959.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              4498.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6232.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 335142.385 ops/s
[info]                  ·gc.alloc.rate:               938.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          4406.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3123.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 333401.715 ops/s
[info]                  ·gc.alloc.rate:                   957.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              4517.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6292.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   332483.065 ±(99.9%) 26416.569 ops/s [Average]
[info]   (min, avg, max) = (320517.358, 332483.065, 337672.846), stdev = 6860.299
[info]   CI (99.9%): [306066.497, 358899.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   942.791 ±(99.9%) 81.995 MB/sec [Average]
[info]   (min, avg, max) = (907.667, 942.791, 959.656), stdev = 21.294
[info]   CI (99.9%): [860.796, 1024.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4462.758 ±(99.9%) 176.333 B/op [Average]
[info]   (min, avg, max) = (4406.361, 4462.758, 4517.944), stdev = 45.793
[info]   CI (99.9%): [4286.425, 4639.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.973 ±(99.9%) 1407.002 MB/sec [Average]
[info]   (min, avg, max) = (663.139, 930.973, 1332.981), stdev = 365.394
[info]   CI (99.9%): [≈ 0, 2337.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4400.038 ±(99.9%) 6551.565 B/op [Average]
[info]   (min, avg, max) = (3095.526, 4400.038, 6292.550), stdev = 1701.421
[info]   CI (99.9%): [≈ 0, 10951.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.242), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11097.433 ops/s
[info] # Warmup Iteration   2: 32440.294 ops/s
[info] # Warmup Iteration   3: 36966.969 ops/s
[info] # Warmup Iteration   4: 36492.762 ops/s
[info] # Warmup Iteration   5: 36582.050 ops/s
[info] Iteration   1: 37605.978 ops/s
[info]                  ·gc.alloc.rate:                   1899.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              79454.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56232.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 37867.425 ops/s
[info]                  ·gc.alloc.rate:                   1926.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              80050.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83728.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.880 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 37703.321 ops/s
[info]                  ·gc.alloc.rate:                   1944.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              81170.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83870.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37829.823 ops/s
[info]                  ·gc.alloc.rate:                   1935.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              80511.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83559.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37814.046 ops/s
[info]                  ·gc.alloc.rate:                   1949.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              81138.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83615.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37764.119 ±(99.9%) 413.773 ops/s [Average]
[info]   (min, avg, max) = (37605.978, 37764.119, 37867.425), stdev = 107.456
[info]   CI (99.9%): [37350.345, 38177.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1931.170 ±(99.9%) 76.592 MB/sec [Average]
[info]   (min, avg, max) = (1899.454, 1931.170, 1949.867), stdev = 19.891
[info]   CI (99.9%): [1854.578, 2007.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80465.129 ±(99.9%) 2821.198 B/op [Average]
[info]   (min, avg, max) = (79454.219, 80465.129, 81170.851), stdev = 732.656
[info]   CI (99.9%): [77643.931, 83286.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.339 ±(99.9%) 1147.399 MB/sec [Average]
[info]   (min, avg, max) = (1344.320, 1877.339, 2014.650), stdev = 297.976
[info]   CI (99.9%): [729.940, 3024.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   78201.364 ±(99.9%) 47290.874 B/op [Average]
[info]   (min, avg, max) = (56232.958, 78201.364, 83870.507), stdev = 12281.290
[info]   CI (99.9%): [30910.490, 125492.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.346 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.727), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 7.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32.364 ±(99.9%) 263.736 B/op [Average]
[info]   (min, avg, max) = (0.871, 32.364, 154.880), stdev = 68.491
[info]   CI (99.9%): [≈ 0, 296.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.841 ops/s
[info] # Warmup Iteration   2: 255075.291 ops/s
[info] # Warmup Iteration   3: 277953.771 ops/s
[info] # Warmup Iteration   4: 282792.110 ops/s
[info] # Warmup Iteration   5: 284628.383 ops/s
[info] Iteration   1: 293911.956 ops/s
[info]                  ·gc.alloc.rate:               321.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          1719.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2739.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 296506.677 ops/s
[info]                  ·gc.alloc.rate:               318.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2715.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 297316.102 ops/s
[info]                  ·gc.alloc.rate:      308.361 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 297722.238 ops/s
[info]                  ·gc.alloc.rate:      308.744 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 297073.866 ops/s
[info]                  ·gc.alloc.rate:                   332.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              1760.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3527.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   296506.168 ±(99.9%) 5835.674 ops/s [Average]
[info]   (min, avg, max) = (293911.956, 296506.168, 297722.238), stdev = 1515.506
[info]   CI (99.9%): [290670.494, 302341.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   317.799 ±(99.9%) 38.113 MB/sec [Average]
[info]   (min, avg, max) = (308.361, 317.799, 332.265), stdev = 9.898
[info]   CI (99.9%): [279.686, 355.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1686.869 ±(99.9%) 215.132 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1686.869, 1760.269), stdev = 55.869
[info]   CI (99.9%): [1471.737, 1902.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.812 ±(99.9%) 1211.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.812, 665.821), stdev = 314.738
[info]   CI (99.9%): [≈ 0, 1549.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1796.508 ±(99.9%) 6439.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1796.508, 3527.380), stdev = 1672.190
[info]   CI (99.9%): [≈ 0, 8235.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32047.787 ops/s
[info] # Warmup Iteration   2: 97628.913 ops/s
[info] # Warmup Iteration   3: 109447.720 ops/s
[info] # Warmup Iteration   4: 114283.181 ops/s
[info] # Warmup Iteration   5: 115469.235 ops/s
[info] Iteration   1: 115457.353 ops/s
[info]                  ·gc.alloc.rate:                   1381.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              18827.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18232.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 115377.850 ops/s
[info]                  ·gc.alloc.rate:               1374.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          18744.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18245.586 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 115377.989 ops/s
[info]                  ·gc.alloc.rate:               1371.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          18709.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18264.867 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 115630.310 ops/s
[info]                  ·gc.alloc.rate:                   1373.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              18698.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18233.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 114757.669 ops/s
[info]                  ·gc.alloc.rate:                   1371.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              18814.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27472.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   115320.234 ±(99.9%) 1274.329 ops/s [Average]
[info]   (min, avg, max) = (114757.669, 115320.234, 115630.310), stdev = 330.939
[info]   CI (99.9%): [114045.905, 116594.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1374.528 ±(99.9%) 15.058 MB/sec [Average]
[info]   (min, avg, max) = (1371.578, 1374.528, 1381.215), stdev = 3.910
[info]   CI (99.9%): [1359.471, 1389.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18758.975 ±(99.9%) 227.956 B/op [Average]
[info]   (min, avg, max) = (18698.984, 18758.975, 18827.329), stdev = 59.199
[info]   CI (99.9%): [18531.019, 18986.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.395 ±(99.9%) 1144.699 MB/sec [Average]
[info]   (min, avg, max) = (1337.586, 1471.395, 2003.173), stdev = 297.275
[info]   CI (99.9%): [326.696, 2616.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20089.918 ±(99.9%) 15892.050 B/op [Average]
[info]   (min, avg, max) = (18232.630, 20089.918, 27472.689), stdev = 4127.115
[info]   CI (99.9%): [4197.868, 35981.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.018), stdev = 1.777
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.450 ±(99.9%) 93.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.450, 54.686), stdev = 24.183
[info]   CI (99.9%): [≈ 0, 104.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288313.206 ops/s
[info] # Warmup Iteration   2: 497551.328 ops/s
[info] # Warmup Iteration   3: 538586.297 ops/s
[info] # Warmup Iteration   4: 540282.408 ops/s
[info] # Warmup Iteration   5: 539924.393 ops/s
[info] Iteration   1: 541268.209 ops/s
[info]                  ·gc.alloc.rate:               368.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          1071.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1487.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 542186.436 ops/s
[info]                  ·gc.alloc.rate:      352.938 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.087 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 538595.063 ops/s
[info]                  ·gc.alloc.rate:                   364.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 517742.929 ops/s
[info]                  ·gc.alloc.rate:               350.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2038.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 542212.250 ops/s
[info]                  ·gc.alloc.rate:      352.788 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   536400.977 ±(99.9%) 40563.073 ops/s [Average]
[info]   (min, avg, max) = (517742.929, 536400.977, 542212.250), stdev = 10534.101
[info]   CI (99.9%): [495837.904, 576964.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   357.777 ±(99.9%) 30.950 MB/sec [Average]
[info]   (min, avg, max) = (350.433, 357.777, 368.451), stdev = 8.038
[info]   CI (99.9%): [326.827, 388.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1049.751 ±(99.9%) 90.988 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1049.751, 1071.363), stdev = 23.629
[info]   CI (99.9%): [958.763, 1140.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.779 ±(99.9%) 1216.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.779, 670.563), stdev = 315.992
[info]   CI (99.9%): [≈ 0, 1555.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1004.140 ±(99.9%) 3632.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1004.140, 2038.140), stdev = 943.450
[info]   CI (99.9%): [≈ 0, 4637.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5396.015 ops/s
[info] # Warmup Iteration   2: 34671.107 ops/s
[info] # Warmup Iteration   3: 40654.435 ops/s
[info] # Warmup Iteration   4: 41334.712 ops/s
[info] # Warmup Iteration   5: 41779.896 ops/s
[info] Iteration   1: 40574.764 ops/s
[info]                  ·gc.alloc.rate:                   2005.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              77801.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77915.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.652 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 41672.486 ops/s
[info]                  ·gc.alloc.rate:                   2057.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              77681.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75766.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40127.738 ops/s
[info]                  ·gc.alloc.rate:                   1997.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              78338.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78459.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41612.181 ops/s
[info]                  ·gc.alloc.rate:                   2077.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              78590.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75661.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41871.150 ops/s
[info]                  ·gc.alloc.rate:                   2092.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              78667.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75300.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   41171.664 ±(99.9%) 2970.385 ops/s [Average]
[info]   (min, avg, max) = (40127.738, 41171.664, 41871.150), stdev = 771.400
[info]   CI (99.9%): [38201.278, 44142.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2046.336 ±(99.9%) 164.822 MB/sec [Average]
[info]   (min, avg, max) = (1997.471, 2046.336, 2092.914), stdev = 42.804
[info]   CI (99.9%): [1881.514, 2211.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78215.740 ±(99.9%) 1739.574 B/op [Average]
[info]   (min, avg, max) = (77681.157, 78215.740, 78667.054), stdev = 451.762
[info]   CI (99.9%): [76476.166, 79955.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.994 ±(99.9%) 14.287 MB/sec [Average]
[info]   (min, avg, max) = (2000.499, 2003.994, 2008.712), stdev = 3.710
[info]   CI (99.9%): [1989.708, 2018.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76620.628 ±(99.9%) 5596.582 B/op [Average]
[info]   (min, avg, max) = (75300.676, 76620.628, 78459.006), stdev = 1453.415
[info]   CI (99.9%): [71024.047, 82217.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 5.798 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.908, 3.497), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.998 ±(99.9%) 224.896 B/op [Average]
[info]   (min, avg, max) = (0.782, 34.998, 135.652), stdev = 58.405
[info]   CI (99.9%): [≈ 0, 259.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29419.172 ops/s
[info] # Warmup Iteration   2: 71986.311 ops/s
[info] # Warmup Iteration   3: 74749.052 ops/s
[info] # Warmup Iteration   4: 75113.803 ops/s
[info] # Warmup Iteration   5: 73376.464 ops/s
[info] Iteration   1: 75169.522 ops/s
[info]                  ·gc.alloc.rate:                   609.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              12755.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14003.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 75270.474 ops/s
[info]                  ·gc.alloc.rate:               612.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          12805.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13984.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 75298.888 ops/s
[info]                  ·gc.alloc.rate:                   628.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              13126.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13985.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 75230.111 ops/s
[info]                  ·gc.alloc.rate:               621.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          12998.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13998.386 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 75417.306 ops/s
[info]                  ·gc.alloc.rate:               616.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          12858.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13978.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   75277.260 ±(99.9%) 354.788 ops/s [Average]
[info]   (min, avg, max) = (75169.522, 75277.260, 75417.306), stdev = 92.137
[info]   CI (99.9%): [74922.472, 75632.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   617.535 ±(99.9%) 28.543 MB/sec [Average]
[info]   (min, avg, max) = (609.276, 617.535, 628.087), stdev = 7.413
[info]   CI (99.9%): [588.992, 646.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12909.023 ±(99.9%) 585.097 B/op [Average]
[info]   (min, avg, max) = (12755.657, 12909.023, 13126.831), stdev = 151.948
[info]   CI (99.9%): [12323.926, 13494.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   669.246 ±(99.9%) 1.760 MB/sec [Average]
[info]   (min, avg, max) = (668.880, 669.246, 670.039), stdev = 0.457
[info]   CI (99.9%): [667.486, 671.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13990.029 ±(99.9%) 40.530 B/op [Average]
[info]   (min, avg, max) = (13978.140, 13990.029, 14003.516), stdev = 10.525
[info]   CI (99.9%): [13949.499, 14030.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 1.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.870), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.778 ops/s
[info] # Warmup Iteration   2: 81026.226 ops/s
[info] # Warmup Iteration   3: 83908.146 ops/s
[info] # Warmup Iteration   4: 87752.104 ops/s
[info] # Warmup Iteration   5: 87660.496 ops/s
[info] Iteration   1: 87793.821 ops/s
[info]                  ·gc.alloc.rate:               517.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          9279.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11930.157 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 88137.357 ops/s
[info]                  ·gc.alloc.rate:      498.188 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87843.847 ops/s
[info]                  ·gc.alloc.rate:               514.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          9207.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11922.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 85773.547 ops/s
[info]                  ·gc.alloc.rate:                   502.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              9221.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12223.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87846.245 ops/s
[info]                  ·gc.alloc.rate:                   522.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              9357.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11935.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   87478.963 ±(99.9%) 3707.981 ops/s [Average]
[info]   (min, avg, max) = (85773.547, 87478.963, 88137.357), stdev = 962.951
[info]   CI (99.9%): [83770.983, 91186.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   510.972 ±(99.9%) 39.215 MB/sec [Average]
[info]   (min, avg, max) = (498.188, 510.972, 522.296), stdev = 10.184
[info]   CI (99.9%): [471.757, 550.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9192.515 ±(99.9%) 677.513 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9192.515, 9357.644), stdev = 175.948
[info]   CI (99.9%): [8515.002, 9870.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.716 ±(99.9%) 1146.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.716, 666.282), stdev = 297.797
[info]   CI (99.9%): [≈ 0, 1679.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9602.236 ±(99.9%) 20675.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9602.236, 12223.302), stdev = 5369.324
[info]   CI (99.9%): [≈ 0, 30277.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 0.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.382), stdev = 0.207
[info]   CI (99.9%): [≈ 0, 0.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32321.371 ops/s
[info] # Warmup Iteration   2: 72635.530 ops/s
[info] # Warmup Iteration   3: 77433.008 ops/s
[info] # Warmup Iteration   4: 77693.819 ops/s
[info] # Warmup Iteration   5: 77433.194 ops/s
[info] Iteration   1: 77563.607 ops/s
[info]                  ·gc.alloc.rate:               469.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          9534.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10380.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 77788.581 ops/s
[info]                  ·gc.alloc.rate:               473.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          9576.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13504.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 77912.107 ops/s
[info]                  ·gc.alloc.rate:      460.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 9291.962 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77796.178 ops/s
[info]                  ·gc.alloc.rate:                   481.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              9737.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13503.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.842 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 77961.049 ops/s
[info]                  ·gc.alloc.rate:               485.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          9795.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13488.627 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   77804.304 ±(99.9%) 591.668 ops/s [Average]
[info]   (min, avg, max) = (77563.607, 77804.304, 77961.049), stdev = 153.654
[info]   CI (99.9%): [77212.636, 78395.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   474.042 ±(99.9%) 38.272 MB/sec [Average]
[info]   (min, avg, max) = (460.065, 474.042, 485.308), stdev = 9.939
[info]   CI (99.9%): [435.770, 512.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9587.211 ±(99.9%) 760.632 B/op [Average]
[info]   (min, avg, max) = (9291.962, 9587.211, 9795.875), stdev = 197.534
[info]   CI (99.9%): [8826.579, 10347.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503.053 ±(99.9%) 1113.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.053, 668.255), stdev = 289.251
[info]   CI (99.9%): [≈ 0, 1616.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10175.564 ±(99.9%) 22512.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10175.564, 13504.970), stdev = 5846.415
[info]   CI (99.9%): [≈ 0, 32688.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.168 ±(99.9%) 1.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.842), stdev = 0.377
[info]   CI (99.9%): [≈ 0, 1.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49943.566 ops/s
[info] # Warmup Iteration   2: 83846.240 ops/s
[info] # Warmup Iteration   3: 83684.459 ops/s
[info] # Warmup Iteration   4: 86426.238 ops/s
[info] # Warmup Iteration   5: 87149.299 ops/s
[info] Iteration   1: 86992.828 ops/s
[info]                  ·gc.alloc.rate:                   503.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              9100.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9255.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 86623.374 ops/s
[info]                  ·gc.alloc.rate:               509.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          9265.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12181.486 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 86605.495 ops/s
[info]                  ·gc.alloc.rate:               519.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          9435.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12184.298 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 87597.862 ops/s
[info]                  ·gc.alloc.rate:      495.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87427.161 ops/s
[info]                  ·gc.alloc.rate:               509.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          9166.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12081.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   87049.344 ±(99.9%) 1749.041 ops/s [Average]
[info]   (min, avg, max) = (86605.495, 87049.344, 87597.862), stdev = 454.220
[info]   CI (99.9%): [85300.303, 88798.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   507.297 ±(99.9%) 34.344 MB/sec [Average]
[info]   (min, avg, max) = (495.149, 507.297, 519.200), stdev = 8.919
[info]   CI (99.9%): [472.953, 541.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9172.666 ±(99.9%) 768.208 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9172.666, 9435.122), stdev = 199.501
[info]   CI (99.9%): [8404.458, 9940.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.726 ±(99.9%) 1118.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.726, 671.075), stdev = 290.438
[info]   CI (99.9%): [≈ 0, 1623.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9140.609 ±(99.9%) 20259.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9140.609, 12184.298), stdev = 5261.284
[info]   CI (99.9%): [≈ 0, 29399.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 1.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.753), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38686.721 ops/s
[info] # Warmup Iteration   2: 80859.170 ops/s
[info] # Warmup Iteration   3: 85737.319 ops/s
[info] # Warmup Iteration   4: 87824.417 ops/s
[info] # Warmup Iteration   5: 87805.722 ops/s
[info] Iteration   1: 87097.641 ops/s
[info]                  ·gc.alloc.rate:               444.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          8036.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9244.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 87970.302 ops/s
[info]                  ·gc.alloc.rate:      428.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87713.929 ops/s
[info]                  ·gc.alloc.rate:                   439.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              7892.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12036.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 87947.162 ops/s
[info]                  ·gc.alloc.rate:      427.905 MB/sec
[info]                  ·gc.alloc.rate.norm: 7657.555 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87600.921 ops/s
[info]                  ·gc.alloc.rate:                   440.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              7918.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12051.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   87665.991 ±(99.9%) 1363.063 ops/s [Average]
[info]   (min, avg, max) = (87097.641, 87665.991, 87970.302), stdev = 353.983
[info]   CI (99.9%): [86302.928, 89029.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   436.264 ±(99.9%) 29.976 MB/sec [Average]
[info]   (min, avg, max) = (427.905, 436.264, 444.743), stdev = 7.785
[info]   CI (99.9%): [406.288, 466.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7832.114 ±(99.9%) 651.093 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7832.114, 8036.727), stdev = 169.087
[info]   CI (99.9%): [7181.021, 8483.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.651 ±(99.9%) 1326.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.651, 670.865), stdev = 344.546
[info]   CI (99.9%): [≈ 0, 1697.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6666.469 ±(99.9%) 23843.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6666.469, 12051.360), stdev = 6192.000
[info]   CI (99.9%): [≈ 0, 30509.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.374), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1493.230 ops/s
[info] # Warmup Iteration   2: 8424.328 ops/s
[info] # Warmup Iteration   3: 10009.563 ops/s
[info] # Warmup Iteration   4: 10206.419 ops/s
[info] # Warmup Iteration   5: 10508.451 ops/s
[info] Iteration   1: 10412.351 ops/s
[info]                  ·gc.alloc.rate:               1716.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          259345.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 304504.860 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 10451.158 ops/s
[info]                  ·gc.alloc.rate:                   1707.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              257091.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202382.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 470.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10413.333 ops/s
[info]                  ·gc.alloc.rate:                   1725.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              260811.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304152.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10446.348 ops/s
[info]                  ·gc.alloc.rate:               1718.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          258877.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201506.422 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 10448.953 ops/s
[info]                  ·gc.alloc.rate:                   1721.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              259070.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301711.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10434.429 ±(99.9%) 76.175 ops/s [Average]
[info]   (min, avg, max) = (10412.351, 10434.429, 10451.158), stdev = 19.782
[info]   CI (99.9%): [10358.254, 10510.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1717.751 ±(99.9%) 26.057 MB/sec [Average]
[info]   (min, avg, max) = (1707.509, 1717.751, 1725.714), stdev = 6.767
[info]   CI (99.9%): [1691.695, 1743.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   259039.537 ±(99.9%) 5114.672 B/op [Average]
[info]   (min, avg, max) = (257091.211, 259039.537, 260811.606), stdev = 1328.264
[info]   CI (99.9%): [253924.865, 264154.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.693 ±(99.9%) 1412.729 MB/sec [Average]
[info]   (min, avg, max) = (1337.498, 1742.693, 2014.872), stdev = 366.881
[info]   CI (99.9%): [329.964, 3155.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   262851.414 ±(99.9%) 214140.289 B/op [Average]
[info]   (min, avg, max) = (201506.422, 262851.414, 304504.860), stdev = 55611.553
[info]   CI (99.9%): [48711.125, 476991.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.123), stdev = 1.351
[info]   CI (99.9%): [≈ 0, 6.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   122.986 ±(99.9%) 783.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.986, 470.219), stdev = 203.429
[info]   CI (99.9%): [≈ 0, 906.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 863.615 ops/s
[info] # Warmup Iteration   2: 8397.257 ops/s
[info] # Warmup Iteration   3: 9741.613 ops/s
[info] # Warmup Iteration   4: 9837.435 ops/s
[info] # Warmup Iteration   5: 9487.040 ops/s
[info] Iteration   1: 9729.719 ops/s
[info]                  ·gc.alloc.rate:                   1524.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              246602.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216244.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9860.950 ops/s
[info]                  ·gc.alloc.rate:                   1566.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              250040.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320324.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 9870.346 ops/s
[info]                  ·gc.alloc.rate:                   1553.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              247712.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213496.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 637.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9952.810 ops/s
[info]                  ·gc.alloc.rate:                   1567.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              247808.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211084.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9550.665 ops/s
[info]                  ·gc.alloc.rate:                   1516.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              249924.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219770.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9792.898 ±(99.9%) 605.389 ops/s [Average]
[info]   (min, avg, max) = (9550.665, 9792.898, 9952.810), stdev = 157.218
[info]   CI (99.9%): [9187.509, 10398.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1545.935 ±(99.9%) 91.557 MB/sec [Average]
[info]   (min, avg, max) = (1516.935, 1545.935, 1567.354), stdev = 23.777
[info]   CI (99.9%): [1454.378, 1637.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   248417.838 ±(99.9%) 5797.890 B/op [Average]
[info]   (min, avg, max) = (246602.051, 248417.838, 250040.517), stdev = 1505.693
[info]   CI (99.9%): [242619.948, 254215.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.507 ±(99.9%) 1155.867 MB/sec [Average]
[info]   (min, avg, max) = (1333.912, 1470.507, 2007.465), stdev = 300.175
[info]   CI (99.9%): [314.640, 2626.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   236184.126 ±(99.9%) 181545.622 B/op [Average]
[info]   (min, avg, max) = (211084.511, 236184.126, 320324.393), stdev = 47146.821
[info]   CI (99.9%): [54638.505, 417729.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.918 ±(99.9%) 6.685 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.918, 4.000), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   146.315 ±(99.9%) 1065.725 B/op [Average]
[info]   (min, avg, max) = (0.730, 146.315, 637.653), stdev = 276.765
[info]   CI (99.9%): [≈ 0, 1212.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95197.639 ops/s
[info] # Warmup Iteration   2: 145941.343 ops/s
[info] # Warmup Iteration   3: 154483.343 ops/s
[info] # Warmup Iteration   4: 157637.145 ops/s
[info] # Warmup Iteration   5: 154034.465 ops/s
[info] Iteration   1: 154264.414 ops/s
[info]                  ·gc.alloc.rate:      401.471 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 153824.154 ops/s
[info]                  ·gc.alloc.rate:               413.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          4227.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5233.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 154242.900 ops/s
[info]                  ·gc.alloc.rate:                   415.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              4241.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6848.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 154778.514 ops/s
[info]                  ·gc.alloc.rate:      403.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 4097.265 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 158137.463 ops/s
[info]                  ·gc.alloc.rate:               436.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          4338.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6679.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   155049.489 ±(99.9%) 6773.573 ops/s [Average]
[info]   (min, avg, max) = (153824.154, 155049.489, 158137.463), stdev = 1759.075
[info]   CI (99.9%): [148275.916, 161823.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   413.913 ±(99.9%) 53.324 MB/sec [Average]
[info]   (min, avg, max) = (401.471, 413.913, 436.035), stdev = 13.848
[info]   CI (99.9%): [360.590, 467.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4200.095 ±(99.9%) 399.161 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4200.095, 4338.317), stdev = 103.661
[info]   CI (99.9%): [3800.934, 4599.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.863 ±(99.9%) 1327.585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.863, 671.344), stdev = 344.770
[info]   CI (99.9%): [≈ 0, 1698.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3752.319 ±(99.9%) 13409.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3752.319, 6848.085), stdev = 3482.364
[info]   CI (99.9%): [≈ 0, 17161.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.425), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630.710 ops/s
[info] # Warmup Iteration   2: 5229.941 ops/s
[info] # Warmup Iteration   3: 5591.664 ops/s
[info] # Warmup Iteration   4: 5800.032 ops/s
[info] # Warmup Iteration   5: 5979.681 ops/s
[info] Iteration   1: 5931.310 ops/s
[info]                  ·gc.alloc.rate:               1562.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          414402.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532241.130 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 5959.866 ops/s
[info]                  ·gc.alloc.rate:                   1545.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              408064.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353571.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5993.569 ops/s
[info]                  ·gc.alloc.rate:                   1565.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              410913.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351565.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1142.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5979.907 ops/s
[info]                  ·gc.alloc.rate:                   1577.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              415198.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351278.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5742.577 ops/s
[info]                  ·gc.alloc.rate:                   1523.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              417570.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547654.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5921.446 ±(99.9%) 395.451 ops/s [Average]
[info]   (min, avg, max) = (5742.577, 5921.446, 5993.569), stdev = 102.697
[info]   CI (99.9%): [5525.994, 6316.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1554.942 ±(99.9%) 80.370 MB/sec [Average]
[info]   (min, avg, max) = (1523.849, 1554.942, 1577.687), stdev = 20.872
[info]   CI (99.9%): [1474.572, 1635.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   413229.954 ±(99.9%) 14426.376 B/op [Average]
[info]   (min, avg, max) = (408064.176, 413229.954, 417570.870), stdev = 3746.484
[info]   CI (99.9%): [398803.578, 427656.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.670 ±(99.9%) 1402.360 MB/sec [Average]
[info]   (min, avg, max) = (1334.801, 1603.670, 2006.636), stdev = 364.188
[info]   CI (99.9%): [201.310, 3006.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   427262.210 ±(99.9%) 396675.962 B/op [Average]
[info]   (min, avg, max) = (351278.219, 427262.210, 547654.596), stdev = 103015.488
[info]   CI (99.9%): [30586.248, 823938.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.958 ±(99.9%) 7.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 4.354), stdev = 1.904
[info]   CI (99.9%): [≈ 0, 8.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   251.695 ±(99.9%) 1923.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 251.695, 1142.947), stdev = 499.625
[info]   CI (99.9%): [≈ 0, 2175.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 12.000), stdev = 3.347
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4550.184 ops/s
[info] # Warmup Iteration   2: 18892.648 ops/s
[info] # Warmup Iteration   3: 20079.497 ops/s
[info] # Warmup Iteration   4: 19742.053 ops/s
[info] # Warmup Iteration   5: 19699.096 ops/s
[info] Iteration   1: 19724.229 ops/s
[info]                  ·gc.alloc.rate:                   1521.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              121370.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106999.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 19800.744 ops/s
[info]                  ·gc.alloc.rate:               1542.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          122599.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106636.642 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 19873.659 ops/s
[info]                  ·gc.alloc.rate:                   1552.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              122928.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106303.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20171.354 ops/s
[info]                  ·gc.alloc.rate:               1588.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          123954.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156649.718 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20349.907 ops/s
[info]                  ·gc.alloc.rate:               1576.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          121935.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103394.519 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   19983.979 ±(99.9%) 1022.831 ops/s [Average]
[info]   (min, avg, max) = (19724.229, 19983.979, 20349.907), stdev = 265.626
[info]   CI (99.9%): [18961.148, 21006.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1556.271 ±(99.9%) 103.868 MB/sec [Average]
[info]   (min, avg, max) = (1521.156, 1556.271, 1588.788), stdev = 26.974
[info]   CI (99.9%): [1452.403, 1660.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122557.766 ±(99.9%) 3796.393 B/op [Average]
[info]   (min, avg, max) = (121370.419, 122557.766, 123954.711), stdev = 985.911
[info]   CI (99.9%): [118761.373, 126354.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1473.960 ±(99.9%) 1149.282 MB/sec [Average]
[info]   (min, avg, max) = (1336.872, 1473.960, 2007.856), stdev = 298.465
[info]   CI (99.9%): [324.678, 2623.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115996.742 ±(99.9%) 87681.556 B/op [Average]
[info]   (min, avg, max) = (103394.519, 115996.742, 156649.718), stdev = 22770.622
[info]   CI (99.9%): [28315.186, 203678.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.831), stdev = 1.709
[info]   CI (99.9%): [≈ 0, 7.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61.334 ±(99.9%) 520.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.334, 303.346), stdev = 135.297
[info]   CI (99.9%): [≈ 0, 582.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8761.557 ops/s
[info] # Warmup Iteration   2: 21869.985 ops/s
[info] # Warmup Iteration   3: 23011.006 ops/s
[info] # Warmup Iteration   4: 23287.367 ops/s
[info] # Warmup Iteration   5: 23326.009 ops/s
[info] Iteration   1: 23152.162 ops/s
[info]                  ·gc.alloc.rate:                   1578.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              107278.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91064.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 23266.440 ops/s
[info]                  ·gc.alloc.rate:                   1584.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              107164.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136034.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 23410.593 ops/s
[info]                  ·gc.alloc.rate:                   1578.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              106139.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90057.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23382.507 ops/s
[info]                  ·gc.alloc.rate:               1578.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          106217.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89985.549 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23419.930 ops/s
[info]                  ·gc.alloc.rate:                   1591.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              106944.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134608.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23326.326 ±(99.9%) 442.984 ops/s [Average]
[info]   (min, avg, max) = (23152.162, 23326.326, 23419.930), stdev = 115.042
[info]   CI (99.9%): [22883.342, 23769.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1582.219 ±(99.9%) 22.747 MB/sec [Average]
[info]   (min, avg, max) = (1578.095, 1582.219, 1591.700), stdev = 5.907
[info]   CI (99.9%): [1559.471, 1604.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106748.900 ±(99.9%) 2060.322 B/op [Average]
[info]   (min, avg, max) = (106139.608, 106748.900, 107278.166), stdev = 535.059
[info]   CI (99.9%): [104688.578, 108809.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.146 ±(99.9%) 1410.113 MB/sec [Average]
[info]   (min, avg, max) = (1336.936, 1606.146, 2011.140), stdev = 366.202
[info]   CI (99.9%): [196.033, 3016.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   108349.916 ±(99.9%) 94842.303 B/op [Average]
[info]   (min, avg, max) = (89985.549, 108349.916, 136034.160), stdev = 24630.245
[info]   CI (99.9%): [13507.613, 203192.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.822 ±(99.9%) 5.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.822, 3.233), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 6.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55.500 ±(99.9%) 361.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.500, 218.710), stdev = 93.915
[info]   CI (99.9%): [≈ 0, 417.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74048.295 ops/s
[info] # Warmup Iteration   2: 129692.238 ops/s
[info] # Warmup Iteration   3: 134803.920 ops/s
[info] # Warmup Iteration   4: 133621.989 ops/s
[info] # Warmup Iteration   5: 134490.782 ops/s
[info] Iteration   1: 134843.467 ops/s
[info]                  ·gc.alloc.rate:      298.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134503.893 ops/s
[info]                  ·gc.alloc.rate:               315.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          3686.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5986.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 133688.519 ops/s
[info]                  ·gc.alloc.rate:      299.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 3520.827 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 128740.930 ops/s
[info]                  ·gc.alloc.rate:               302.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          3701.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6254.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 135426.047 ops/s
[info]                  ·gc.alloc.rate:      299.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   133440.571 ±(99.9%) 10401.906 ops/s [Average]
[info]   (min, avg, max) = (128740.930, 133440.571, 135426.047), stdev = 2701.342
[info]   CI (99.9%): [123038.665, 143842.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   302.915 ±(99.9%) 27.037 MB/sec [Average]
[info]   (min, avg, max) = (298.206, 302.915, 315.087), stdev = 7.021
[info]   CI (99.9%): [275.877, 329.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3573.819 ±(99.9%) 428.212 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3573.819, 3701.386), stdev = 111.205
[info]   CI (99.9%): [3145.607, 4002.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.638 ±(99.9%) 1078.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.638, 511.603), stdev = 280.212
[info]   CI (99.9%): [≈ 0, 1283.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2448.113 ±(99.9%) 12913.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2448.113, 6254.224), stdev = 3353.554
[info]   CI (99.9%): [≈ 0, 15361.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94628.215 ops/s
[info] # Warmup Iteration   2: 136276.152 ops/s
[info] # Warmup Iteration   3: 141235.087 ops/s
[info] # Warmup Iteration   4: 141111.045 ops/s
[info] # Warmup Iteration   5: 141273.513 ops/s
[info] Iteration   1: 141356.738 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 141284.981 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 141180.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 141321.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140575.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   141143.677 ±(99.9%) 1249.144 ops/s [Average]
[info]   (min, avg, max) = (140575.546, 141143.677, 141356.738), stdev = 324.399
[info]   CI (99.9%): [139894.533, 142392.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9231.344 ops/s
[info] # Warmup Iteration   2: 21851.715 ops/s
[info] # Warmup Iteration   3: 23484.367 ops/s
[info] # Warmup Iteration   4: 23562.578 ops/s
[info] # Warmup Iteration   5: 23421.315 ops/s
[info] Iteration   1: 22941.287 ops/s
[info]                  ·gc.alloc.rate:                   1580.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              108377.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92061.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 23449.848 ops/s
[info]                  ·gc.alloc.rate:                   1624.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              108990.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90108.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23465.855 ops/s
[info]                  ·gc.alloc.rate:                   1638.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              109859.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134841.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23550.201 ops/s
[info]                  ·gc.alloc.rate:                   1643.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              109807.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89392.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23083.749 ops/s
[info]                  ·gc.alloc.rate:               1612.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          109916.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91109.432 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23298.188 ±(99.9%) 1033.211 ops/s [Average]
[info]   (min, avg, max) = (22941.287, 23298.188, 23550.201), stdev = 268.322
[info]   CI (99.9%): [22264.977, 24331.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619.738 ±(99.9%) 97.191 MB/sec [Average]
[info]   (min, avg, max) = (1580.166, 1619.738, 1643.088), stdev = 25.240
[info]   CI (99.9%): [1522.546, 1716.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109390.413 ±(99.9%) 2622.939 B/op [Average]
[info]   (min, avg, max) = (108377.889, 109390.413, 109916.769), stdev = 681.169
[info]   CI (99.9%): [106767.474, 112013.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.121 ±(99.9%) 1156.108 MB/sec [Average]
[info]   (min, avg, max) = (1336.293, 1474.121, 2011.177), stdev = 300.238
[info]   CI (99.9%): [318.013, 2630.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99502.707 ±(99.9%) 76169.381 B/op [Average]
[info]   (min, avg, max) = (89392.061, 99502.707, 134841.807), stdev = 19780.946
[info]   CI (99.9%): [23333.326, 175672.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.822 ±(99.9%) 5.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.822, 3.105), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 5.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55.128 ±(99.9%) 347.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.128, 208.318), stdev = 90.151
[info]   CI (99.9%): [≈ 0, 402.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34460.403 ops/s
[info] # Warmup Iteration   2: 118077.365 ops/s
[info] # Warmup Iteration   3: 116930.150 ops/s
[info] # Warmup Iteration   4: 124899.738 ops/s
[info] # Warmup Iteration   5: 122718.459 ops/s
[info] Iteration   1: 124096.780 ops/s
[info]                  ·gc.alloc.rate:                   1768.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              22434.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25548.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 124192.545 ops/s
[info]                  ·gc.alloc.rate:                   1754.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              22230.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17035.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 124490.086 ops/s
[info]                  ·gc.alloc.rate:                   1785.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              22562.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25408.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 125757.500 ops/s
[info]                  ·gc.alloc.rate:                   1776.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              22233.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16757.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 123632.803 ops/s
[info]                  ·gc.alloc.rate:               1772.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          22566.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25568.406 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   124433.943 ±(99.9%) 3085.764 ops/s [Average]
[info]   (min, avg, max) = (123632.803, 124433.943, 125757.500), stdev = 801.363
[info]   CI (99.9%): [121348.179, 127519.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1771.581 ±(99.9%) 43.823 MB/sec [Average]
[info]   (min, avg, max) = (1754.245, 1771.581, 1785.001), stdev = 11.381
[info]   CI (99.9%): [1727.758, 1815.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22405.428 ±(99.9%) 642.735 B/op [Average]
[info]   (min, avg, max) = (22230.703, 22405.428, 22566.379), stdev = 166.916
[info]   CI (99.9%): [21762.694, 23048.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.358 ±(99.9%) 1411.653 MB/sec [Average]
[info]   (min, avg, max) = (1339.249, 1743.358, 2014.358), stdev = 366.602
[info]   CI (99.9%): [331.706, 3155.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22063.497 ±(99.9%) 18168.561 B/op [Average]
[info]   (min, avg, max) = (16757.074, 22063.497, 25568.406), stdev = 4718.318
[info]   CI (99.9%): [3894.936, 40232.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.414), stdev = 1.491
[info]   CI (99.9%): [≈ 0, 6.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.547 ±(99.9%) 72.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.547, 43.265), stdev = 18.897
[info]   CI (99.9%): [≈ 0, 82.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.836 ops/s
[info] # Warmup Iteration   2: 488182.636 ops/s
[info] # Warmup Iteration   3: 531683.011 ops/s
[info] # Warmup Iteration   4: 538490.995 ops/s
[info] # Warmup Iteration   5: 540190.742 ops/s
[info] Iteration   1: 558990.229 ops/s
[info]                  ·gc.alloc.rate:               595.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          1677.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1873.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 563898.961 ops/s
[info]                  ·gc.alloc.rate:               600.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          1674.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1857.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 556790.967 ops/s
[info]                  ·gc.alloc.rate:                   594.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              1679.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1882.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 563281.606 ops/s
[info]                  ·gc.alloc.rate:                   605.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              1692.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1861.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 564827.853 ops/s
[info]                  ·gc.alloc.rate:               606.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1858.098 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   561557.923 ±(99.9%) 13402.910 ops/s [Average]
[info]   (min, avg, max) = (556790.967, 561557.923, 564827.853), stdev = 3480.693
[info]   CI (99.9%): [548155.013, 574960.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   600.563 ±(99.9%) 21.263 MB/sec [Average]
[info]   (min, avg, max) = (594.475, 600.563, 606.541), stdev = 5.522
[info]   CI (99.9%): [579.299, 621.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1682.993 ±(99.9%) 30.530 B/op [Average]
[info]   (min, avg, max) = (1674.384, 1682.993, 1692.604), stdev = 7.928
[info]   CI (99.9%): [1652.463, 1713.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.074 ±(99.9%) 2.209 MB/sec [Average]
[info]   (min, avg, max) = (665.441, 666.074, 666.838), stdev = 0.574
[info]   CI (99.9%): [663.865, 668.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1866.654 ±(99.9%) 43.125 B/op [Average]
[info]   (min, avg, max) = (1857.282, 1866.654, 1882.911), stdev = 11.199
[info]   CI (99.9%): [1823.528, 1909.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.025), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.072), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106487.835 ops/s
[info] # Warmup Iteration   2: 300427.618 ops/s
[info] # Warmup Iteration   3: 310614.530 ops/s
[info] # Warmup Iteration   4: 320136.742 ops/s
[info] # Warmup Iteration   5: 326810.589 ops/s
[info] Iteration   1: 326306.465 ops/s
[info]                  ·gc.alloc.rate:               461.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          2223.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2467.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 328868.110 ops/s
[info]                  ·gc.alloc.rate:      446.328 MB/sec
[info]                  ·gc.alloc.rate.norm: 2136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 327197.434 ops/s
[info]                  ·gc.alloc.rate:               457.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          2200.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3205.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 326932.423 ops/s
[info]                  ·gc.alloc.rate:                   460.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              2215.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3208.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 328585.675 ops/s
[info]                  ·gc.alloc.rate:      445.945 MB/sec
[info]                  ·gc.alloc.rate.norm: 2136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   327578.022 ±(99.9%) 4243.663 ops/s [Average]
[info]   (min, avg, max) = (326306.465, 327578.022, 328868.110), stdev = 1102.066
[info]   CI (99.9%): [323334.359, 331821.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   454.200 ±(99.9%) 28.838 MB/sec [Average]
[info]   (min, avg, max) = (445.945, 454.200, 461.072), stdev = 7.489
[info]   CI (99.9%): [425.362, 483.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2182.318 ±(99.9%) 166.106 B/op [Average]
[info]   (min, avg, max) = (2136.001, 2182.318, 2223.821), stdev = 43.137
[info]   CI (99.9%): [2016.212, 2348.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.914 ±(99.9%) 1319.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.914, 666.499), stdev = 342.655
[info]   CI (99.9%): [≈ 0, 1688.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1776.356 ±(99.9%) 6351.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1776.356, 3208.493), stdev = 1649.451
[info]   CI (99.9%): [≈ 0, 8127.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 325124.999 ops/s
[info] # Warmup Iteration   2: 757771.337 ops/s
[info] # Warmup Iteration   3: 754002.054 ops/s
[info] # Warmup Iteration   4: 762113.107 ops/s
[info] # Warmup Iteration   5: 759524.417 ops/s
[info] Iteration   1: 755798.283 ops/s
[info]                  ·gc.alloc.rate:               508.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          1058.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1065.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 760821.037 ops/s
[info]                  ·gc.alloc.rate:               514.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1386.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 744193.394 ops/s
[info]                  ·gc.alloc.rate:                   505.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1069.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1417.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 761445.659 ops/s
[info]                  ·gc.alloc.rate:      495.405 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 759956.266 ops/s
[info]                  ·gc.alloc.rate:               524.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          1085.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1389.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   756442.928 ±(99.9%) 27700.918 ops/s [Average]
[info]   (min, avg, max) = (744193.394, 756442.928, 761445.659), stdev = 7193.840
[info]   CI (99.9%): [728742.010, 784143.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   509.718 ±(99.9%) 41.419 MB/sec [Average]
[info]   (min, avg, max) = (495.405, 509.718, 524.468), stdev = 10.756
[info]   CI (99.9%): [468.300, 551.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1060.450 ±(99.9%) 87.980 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1060.450, 1085.999), stdev = 22.848
[info]   CI (99.9%): [972.470, 1148.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.822 ±(99.9%) 1118.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.822, 671.240), stdev = 290.502
[info]   CI (99.9%): [≈ 0, 1623.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1052.044 ±(99.9%) 2332.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1052.044, 1417.952), stdev = 605.641
[info]   CI (99.9%): [≈ 0, 3384.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6282.799 ops/s
[info] # Warmup Iteration   2: 64181.425 ops/s
[info] # Warmup Iteration   3: 77076.957 ops/s
[info] # Warmup Iteration   4: 77292.671 ops/s
[info] # Warmup Iteration   5: 77358.902 ops/s
[info] Iteration   1: 77422.554 ops/s
[info]                  ·gc.alloc.rate:                   3192.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              64901.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67783.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.270 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 77300.674 ops/s
[info]                  ·gc.alloc.rate:                   3216.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              65478.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67995.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.424 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77424.515 ops/s
[info]                  ·gc.alloc.rate:               3194.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          64925.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54502.607 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 76075.008 ops/s
[info]                  ·gc.alloc.rate:                   3168.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              65551.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69591.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 77709.052 ops/s
[info]                  ·gc.alloc.rate:               3206.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          64929.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54680.509 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   77186.361 ±(99.9%) 2461.014 ops/s [Average]
[info]   (min, avg, max) = (76075.008, 77186.361, 77709.052), stdev = 639.117
[info]   CI (99.9%): [74725.347, 79647.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3195.528 ±(99.9%) 68.657 MB/sec [Average]
[info]   (min, avg, max) = (3168.608, 3195.528, 3216.032), stdev = 17.830
[info]   CI (99.9%): [3126.870, 3264.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65157.377 ±(99.9%) 1261.603 B/op [Average]
[info]   (min, avg, max) = (64901.919, 65157.377, 65551.425), stdev = 327.634
[info]   CI (99.9%): [63895.773, 66418.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3083.891 ±(99.9%) 1382.828 MB/sec [Average]
[info]   (min, avg, max) = (2681.311, 3083.891, 3363.887), stdev = 359.116
[info]   CI (99.9%): [1701.064, 4466.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62910.856 ±(99.9%) 29367.974 B/op [Average]
[info]   (min, avg, max) = (54502.607, 62910.856, 69591.301), stdev = 7626.770
[info]   CI (99.9%): [33542.882, 92278.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 2.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 1.270), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44864.002 ops/s
[info] # Warmup Iteration   2: 189901.450 ops/s
[info] # Warmup Iteration   3: 196057.055 ops/s
[info] # Warmup Iteration   4: 195934.935 ops/s
[info] # Warmup Iteration   5: 193877.016 ops/s
[info] Iteration   1: 200713.154 ops/s
[info]                  ·gc.alloc.rate:               1456.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          11418.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10515.012 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 200893.592 ops/s
[info]                  ·gc.alloc.rate:                   1479.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              11592.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10511.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 201525.443 ops/s
[info]                  ·gc.alloc.rate:                   1473.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              11507.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10483.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 201600.784 ops/s
[info]                  ·gc.alloc.rate:                   1486.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              11601.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10468.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 199425.063 ops/s
[info]                  ·gc.alloc.rate:               1484.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          11717.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15839.723 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   200831.607 ±(99.9%) 3373.040 ops/s [Average]
[info]   (min, avg, max) = (199425.063, 200831.607, 201600.784), stdev = 875.968
[info]   CI (99.9%): [197458.567, 204204.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1475.980 ±(99.9%) 46.807 MB/sec [Average]
[info]   (min, avg, max) = (1456.115, 1475.980, 1486.040), stdev = 12.156
[info]   CI (99.9%): [1429.172, 1522.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11567.189 ±(99.9%) 430.860 B/op [Average]
[info]   (min, avg, max) = (11418.043, 11567.189, 11717.014), stdev = 111.893
[info]   CI (99.9%): [11136.328, 11998.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.568 ±(99.9%) 1146.174 MB/sec [Average]
[info]   (min, avg, max) = (1340.878, 1474.568, 2007.034), stdev = 297.658
[info]   CI (99.9%): [328.394, 2620.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11563.440 ±(99.9%) 9205.328 B/op [Average]
[info]   (min, avg, max) = (10468.131, 11563.440, 15839.723), stdev = 2390.594
[info]   CI (99.9%): [2358.113, 20768.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.478 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.268), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.788 ±(99.9%) 42.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.788, 25.525), stdev = 11.109
[info]   CI (99.9%): [≈ 0, 48.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.692 ops/s
[info] # Warmup Iteration   2: 637215.612 ops/s
[info] # Warmup Iteration   3: 647770.059 ops/s
[info] # Warmup Iteration   4: 659120.697 ops/s
[info] # Warmup Iteration   5: 655977.135 ops/s
[info] Iteration   1: 655184.316 ops/s
[info]                  ·gc.alloc.rate:               368.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1228.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 658004.375 ops/s
[info]                  ·gc.alloc.rate:      358.042 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 655848.208 ops/s
[info]                  ·gc.alloc.rate:               380.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          913.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1597.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 654353.599 ops/s
[info]                  ·gc.alloc.rate:      355.887 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 649625.612 ops/s
[info]                  ·gc.alloc.rate:                   372.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1613.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   654603.222 ±(99.9%) 11914.370 ops/s [Average]
[info]   (min, avg, max) = (649625.612, 654603.222, 658004.375), stdev = 3094.124
[info]   CI (99.9%): [642688.852, 666517.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   366.996 ±(99.9%) 39.374 MB/sec [Average]
[info]   (min, avg, max) = (355.887, 366.996, 380.630), stdev = 10.225
[info]   CI (99.9%): [327.623, 406.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   882.290 ±(99.9%) 100.533 B/op [Average]
[info]   (min, avg, max) = (856.001, 882.290, 913.380), stdev = 26.108
[info]   CI (99.9%): [781.757, 982.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.677 ±(99.9%) 1318.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.677, 665.925), stdev = 342.398
[info]   CI (99.9%): [≈ 0, 1687.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   887.957 ±(99.9%) 3176.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 887.957, 1613.015), stdev = 825.049
[info]   CI (99.9%): [≈ 0, 4064.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194385.888 ops/s
[info] # Warmup Iteration   2: 625430.369 ops/s
[info] # Warmup Iteration   3: 656045.035 ops/s
[info] # Warmup Iteration   4: 661246.298 ops/s
[info] # Warmup Iteration   5: 658513.326 ops/s
[info] Iteration   1: 656933.680 ops/s
[info]                  ·gc.alloc.rate:                   509.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              1221.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1599.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 663423.519 ops/s
[info]                  ·gc.alloc.rate:      492.334 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 662159.674 ops/s
[info]                  ·gc.alloc.rate:                   508.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              1209.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 661840.578 ops/s
[info]                  ·gc.alloc.rate:                   504.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1585.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 646350.841 ops/s
[info]                  ·gc.alloc.rate:               501.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          1221.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1623.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   658141.658 ±(99.9%) 27105.845 ops/s [Average]
[info]   (min, avg, max) = (646350.841, 658141.658, 663423.519), stdev = 7039.302
[info]   CI (99.9%): [631035.813, 685247.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   503.572 ±(99.9%) 27.220 MB/sec [Average]
[info]   (min, avg, max) = (492.334, 503.572, 509.974), stdev = 7.069
[info]   CI (99.9%): [476.352, 530.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1204.361 ±(99.9%) 85.394 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1204.361, 1221.821), stdev = 22.177
[info]   CI (99.9%): [1118.967, 1289.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.705 ±(99.9%) 1148.842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.705, 667.474), stdev = 298.351
[info]   CI (99.9%): [≈ 0, 1682.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1278.978 ±(99.9%) 2753.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1278.978, 1623.680), stdev = 715.135
[info]   CI (99.9%): [≈ 0, 4032.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.372), stdev = 1.495
[info]   CI (99.9%): [≈ 0, 6.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.663 ±(99.9%) 13.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.663, 8.015), stdev = 3.552
[info]   CI (99.9%): [≈ 0, 15.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.581
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605213.656 ops/s
[info] # Warmup Iteration   2: 1132913.205 ops/s
[info] # Warmup Iteration   3: 1146350.628 ops/s
[info] # Warmup Iteration   4: 1163200.824 ops/s
[info] # Warmup Iteration   5: 1163323.635 ops/s
[info] Iteration   1: 1117164.330 ops/s
[info]                  ·gc.alloc.rate:               631.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          889.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1103454.362 ops/s
[info]                  ·gc.alloc.rate:               621.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 956.303 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1111094.654 ops/s
[info]                  ·gc.alloc.rate:                   621.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1111340.505 ops/s
[info]                  ·gc.alloc.rate:               629.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          891.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 950.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1158178.367 ops/s
[info]                  ·gc.alloc.rate:               653.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 912.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1120246.443 ±(99.9%) 83776.403 ops/s [Average]
[info]   (min, avg, max) = (1103454.362, 1120246.443, 1158178.367), stdev = 21756.466
[info]   CI (99.9%): [1036470.040, 1204022.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   631.379 ±(99.9%) 50.053 MB/sec [Average]
[info]   (min, avg, max) = (621.243, 631.379, 653.180), stdev = 12.999
[info]   CI (99.9%): [581.326, 681.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   886.993 ±(99.9%) 15.931 B/op [Average]
[info]   (min, avg, max) = (880.528, 886.993, 891.485), stdev = 4.137
[info]   CI (99.9%): [871.061, 902.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.972 ±(99.9%) 1.882 MB/sec [Average]
[info]   (min, avg, max) = (670.446, 670.972, 671.536), stdev = 0.489
[info]   CI (99.9%): [669.089, 672.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   942.896 ±(99.9%) 67.362 B/op [Average]
[info]   (min, avg, max) = (912.500, 942.896, 956.303), stdev = 17.494
[info]   CI (99.9%): [875.534, 1010.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682866.650 ops/s
[info] # Warmup Iteration   2: 1186813.457 ops/s
[info] # Warmup Iteration   3: 1195735.853 ops/s
[info] # Warmup Iteration   4: 1194920.251 ops/s
[info] # Warmup Iteration   5: 1195991.425 ops/s
[info] Iteration   1: 1195148.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1194661.166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1195812.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1196338.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1195401.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1195472.464 ±(99.9%) 2460.829 ops/s [Average]
[info]   (min, avg, max) = (1194661.166, 1195472.464, 1196338.182), stdev = 639.069
[info]   CI (99.9%): [1193011.636, 1197933.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8274.233 ops/s
[info] # Warmup Iteration   2: 29489.114 ops/s
[info] # Warmup Iteration   3: 33975.271 ops/s
[info] # Warmup Iteration   4: 32756.805 ops/s
[info] # Warmup Iteration   5: 33167.745 ops/s
[info] Iteration   1: 34175.356 ops/s
[info]                  ·gc.alloc.rate:                   1924.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              88611.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61818.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 34304.722 ops/s
[info]                  ·gc.alloc.rate:                   1960.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              89898.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92327.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33291.919 ops/s
[info]                  ·gc.alloc.rate:                   1903.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              89966.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94821.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33773.954 ops/s
[info]                  ·gc.alloc.rate:                   1929.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              89915.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93408.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33184.366 ops/s
[info]                  ·gc.alloc.rate:                   1911.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              90628.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95126.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33746.064 ±(99.9%) 1943.451 ops/s [Average]
[info]   (min, avg, max) = (33184.366, 33746.064, 34304.722), stdev = 504.708
[info]   CI (99.9%): [31802.612, 35689.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1925.703 ±(99.9%) 84.534 MB/sec [Average]
[info]   (min, avg, max) = (1903.241, 1925.703, 1960.292), stdev = 21.953
[info]   CI (99.9%): [1841.168, 2010.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89804.287 ±(99.9%) 2822.762 B/op [Average]
[info]   (min, avg, max) = (88611.741, 89804.287, 90628.739), stdev = 733.062
[info]   CI (99.9%): [86981.525, 92627.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.437 ±(99.9%) 1145.438 MB/sec [Average]
[info]   (min, avg, max) = (1342.347, 1874.437, 2013.247), stdev = 297.467
[info]   CI (99.9%): [728.999, 3019.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87500.474 ±(99.9%) 55452.873 B/op [Average]
[info]   (min, avg, max) = (61818.094, 87500.474, 95126.916), stdev = 14400.935
[info]   CI (99.9%): [32047.601, 142953.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.038 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.854, 4.123), stdev = 1.828
[info]   CI (99.9%): [≈ 0, 7.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39.189 ±(99.9%) 322.703 B/op [Average]
[info]   (min, avg, max) = (0.959, 39.189, 189.101), stdev = 83.805
[info]   CI (99.9%): [≈ 0, 361.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26428.851 ops/s
[info] # Warmup Iteration   2: 121814.244 ops/s
[info] # Warmup Iteration   3: 123937.742 ops/s
[info] # Warmup Iteration   4: 129496.630 ops/s
[info] # Warmup Iteration   5: 131259.914 ops/s
[info] Iteration   1: 131001.659 ops/s
[info]                  ·gc.alloc.rate:               1670.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          20069.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24169.220 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 131265.539 ops/s
[info]                  ·gc.alloc.rate:                   1683.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              20185.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16089.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 129265.577 ops/s
[info]                  ·gc.alloc.rate:                   1684.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              20512.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24473.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 127338.843 ops/s
[info]                  ·gc.alloc.rate:                   1634.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              20204.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16532.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 127452.036 ops/s
[info]                  ·gc.alloc.rate:               1636.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          20203.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16501.608 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   129264.731 ±(99.9%) 7207.769 ops/s [Average]
[info]   (min, avg, max) = (127338.843, 129264.731, 131265.539), stdev = 1871.835
[info]   CI (99.9%): [122056.961, 136472.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1661.918 ±(99.9%) 95.712 MB/sec [Average]
[info]   (min, avg, max) = (1634.782, 1661.918, 1684.750), stdev = 24.856
[info]   CI (99.9%): [1566.206, 1757.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20235.244 ±(99.9%) 635.315 B/op [Average]
[info]   (min, avg, max) = (20069.529, 20235.244, 20512.794), stdev = 164.989
[info]   CI (99.9%): [19599.929, 20870.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.520 ±(99.9%) 1417.999 MB/sec [Average]
[info]   (min, avg, max) = (1336.244, 1607.520, 2011.743), stdev = 368.250
[info]   CI (99.9%): [189.522, 3025.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19553.249 ±(99.9%) 16779.857 B/op [Average]
[info]   (min, avg, max) = (16089.363, 19553.249, 24473.857), stdev = 4357.675
[info]   CI (99.9%): [2773.392, 36333.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.143), stdev = 1.355
[info]   CI (99.9%): [≈ 0, 6.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.617 ±(99.9%) 62.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.617, 37.688), stdev = 16.247
[info]   CI (99.9%): [≈ 0, 72.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59984.529 ops/s
[info] # Warmup Iteration   2: 185134.856 ops/s
[info] # Warmup Iteration   3: 197463.857 ops/s
[info] # Warmup Iteration   4: 194470.168 ops/s
[info] # Warmup Iteration   5: 193294.204 ops/s
[info] Iteration   1: 195063.650 ops/s
[info]                  ·gc.alloc.rate:               1167.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          9419.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5390.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 194443.390 ops/s
[info]                  ·gc.alloc.rate:               1178.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          9538.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10821.680 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 196365.372 ops/s
[info]                  ·gc.alloc.rate:               1205.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          9660.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10723.945 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 193753.476 ops/s
[info]                  ·gc.alloc.rate:                   1169.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              9486.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10832.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 195744.040 ops/s
[info]                  ·gc.alloc.rate:                   1165.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              9373.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5385.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   195073.986 ±(99.9%) 3972.959 ops/s [Average]
[info]   (min, avg, max) = (193753.476, 195073.986, 196365.372), stdev = 1031.765
[info]   CI (99.9%): [191101.027, 199046.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1177.337 ±(99.9%) 62.971 MB/sec [Average]
[info]   (min, avg, max) = (1165.980, 1177.337, 1205.282), stdev = 16.353
[info]   CI (99.9%): [1114.366, 1240.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9495.797 ±(99.9%) 429.170 B/op [Average]
[info]   (min, avg, max) = (9373.319, 9495.797, 9660.115), stdev = 111.454
[info]   CI (99.9%): [9066.627, 9924.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.664 ±(99.9%) 1408.269 MB/sec [Average]
[info]   (min, avg, max) = (668.167, 1069.664, 1338.015), stdev = 365.723
[info]   CI (99.9%): [≈ 0, 2477.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8630.826 ±(99.9%) 11399.570 B/op [Average]
[info]   (min, avg, max) = (5385.374, 8630.826, 10832.174), stdev = 2960.432
[info]   CI (99.9%): [≈ 0, 20030.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.835 ±(99.9%) 6.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 3.591), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 6.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.764 ±(99.9%) 48.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.764, 29.135), stdev = 12.669
[info]   CI (99.9%): [≈ 0, 55.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123831.009 ops/s
[info] # Warmup Iteration   2: 235448.669 ops/s
[info] # Warmup Iteration   3: 254466.051 ops/s
[info] # Warmup Iteration   4: 256231.121 ops/s
[info] # Warmup Iteration   5: 256373.317 ops/s
[info] Iteration   1: 256809.232 ops/s
[info]                  ·gc.alloc.rate:                   1379.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              8452.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8240.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 254785.324 ops/s
[info]                  ·gc.alloc.rate:                   1364.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              8425.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8310.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 255896.768 ops/s
[info]                  ·gc.alloc.rate:                   1372.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              8441.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8277.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 254502.631 ops/s
[info]                  ·gc.alloc.rate:                   1365.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              8440.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8319.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 244279.567 ops/s
[info]                  ·gc.alloc.rate:                   1311.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              8450.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8656.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   253254.704 ±(99.9%) 19640.962 ops/s [Average]
[info]   (min, avg, max) = (244279.567, 253254.704, 256809.232), stdev = 5100.695
[info]   CI (99.9%): [233613.743, 272895.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1358.546 ±(99.9%) 103.754 MB/sec [Average]
[info]   (min, avg, max) = (1311.607, 1358.546, 1379.308), stdev = 26.945
[info]   CI (99.9%): [1254.792, 1462.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8442.193 ±(99.9%) 41.246 B/op [Average]
[info]   (min, avg, max) = (8425.955, 8442.193, 8452.962), stdev = 10.711
[info]   CI (99.9%): [8400.947, 8483.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.022 ±(99.9%) 3.555 MB/sec [Average]
[info]   (min, avg, max) = (1343.610, 1345.022, 1345.883), stdev = 0.923
[info]   CI (99.9%): [1341.467, 1348.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8360.817 ±(99.9%) 648.619 B/op [Average]
[info]   (min, avg, max) = (8240.191, 8360.817, 8656.979), stdev = 168.444
[info]   CI (99.9%): [7712.198, 9009.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.284 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.641, 2.602), stdev = 1.112
[info]   CI (99.9%): [≈ 0, 4.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.948 ±(99.9%) 26.340 B/op [Average]
[info]   (min, avg, max) = (0.134, 3.948, 16.003), stdev = 6.841
[info]   CI (99.9%): [≈ 0, 30.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4732.364 ops/s
[info] # Warmup Iteration   2: 59776.002 ops/s
[info] # Warmup Iteration   3: 69351.064 ops/s
[info] # Warmup Iteration   4: 70242.322 ops/s
[info] # Warmup Iteration   5: 69849.383 ops/s
[info] Iteration   1: 70518.669 ops/s
[info]                  ·gc.alloc.rate:                   2826.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              63054.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59857.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 70325.093 ops/s
[info]                  ·gc.alloc.rate:                   2832.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              63381.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60170.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.932 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 70525.818 ops/s
[info]                  ·gc.alloc.rate:                   2854.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              63686.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60147.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 70118.202 ops/s
[info]                  ·gc.alloc.rate:               2838.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          63711.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60639.117 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 67219.452 ops/s
[info]                  ·gc.alloc.rate:               2726.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          63827.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63383.699 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   69741.447 ±(99.9%) 5466.816 ops/s [Average]
[info]   (min, avg, max) = (67219.452, 69741.447, 70525.818), stdev = 1419.715
[info]   CI (99.9%): [64274.631, 75208.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2815.417 ±(99.9%) 196.495 MB/sec [Average]
[info]   (min, avg, max) = (2726.098, 2815.417, 2854.375), stdev = 51.029
[info]   CI (99.9%): [2618.923, 3011.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63532.509 ±(99.9%) 1209.211 B/op [Average]
[info]   (min, avg, max) = (63054.453, 63532.509, 63827.660), stdev = 314.028
[info]   CI (99.9%): [62323.298, 64741.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2695.172 ±(99.9%) 37.407 MB/sec [Average]
[info]   (min, avg, max) = (2682.807, 2695.172, 2707.137), stdev = 9.715
[info]   CI (99.9%): [2657.764, 2732.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60839.812 ±(99.9%) 5581.063 B/op [Average]
[info]   (min, avg, max) = (59857.459, 60839.812, 63383.699), stdev = 1449.384
[info]   CI (99.9%): [55258.749, 66420.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.465 ±(99.9%) 1.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 0.932), stdev = 0.465
[info]   CI (99.9%): [≈ 0, 2.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67433.031 ops/s
[info] # Warmup Iteration   2: 161759.945 ops/s
[info] # Warmup Iteration   3: 179434.675 ops/s
[info] # Warmup Iteration   4: 178413.273 ops/s
[info] # Warmup Iteration   5: 178082.053 ops/s
[info] Iteration   1: 184690.265 ops/s
[info]                  ·gc.alloc.rate:                   1213.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              10341.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5713.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 183561.655 ops/s
[info]                  ·gc.alloc.rate:                   1220.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              10458.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11499.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 179184.372 ops/s
[info]                  ·gc.alloc.rate:                   1190.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              10453.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11789.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 179611.941 ops/s
[info]                  ·gc.alloc.rate:                   1208.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              10591.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11770.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184806.783 ops/s
[info]                  ·gc.alloc.rate:                   1220.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              10391.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5721.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   182371.003 ±(99.9%) 10632.362 ops/s [Average]
[info]   (min, avg, max) = (179184.372, 182371.003, 184806.783), stdev = 2761.191
[info]   CI (99.9%): [171738.641, 193003.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1210.634 ±(99.9%) 47.158 MB/sec [Average]
[info]   (min, avg, max) = (1190.399, 1210.634, 1220.130), stdev = 12.247
[info]   CI (99.9%): [1163.476, 1257.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10447.390 ±(99.9%) 362.297 B/op [Average]
[info]   (min, avg, max) = (10341.697, 10447.390, 10591.949), stdev = 94.087
[info]   CI (99.9%): [10085.092, 10809.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.986 ±(99.9%) 1416.131 MB/sec [Average]
[info]   (min, avg, max) = (670.480, 1073.986, 1343.548), stdev = 367.765
[info]   CI (99.9%): [≈ 0, 2490.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9299.027 ±(99.9%) 12597.574 B/op [Average]
[info]   (min, avg, max) = (5713.560, 9299.027, 11789.642), stdev = 3271.550
[info]   CI (99.9%): [≈ 0, 21896.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.180 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.683, 3.082), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.968 ±(99.9%) 45.405 B/op [Average]
[info]   (min, avg, max) = (0.177, 5.968, 26.997), stdev = 11.792
[info]   CI (99.9%): [≈ 0, 51.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292630.648 ops/s
[info] # Warmup Iteration   2: 699380.657 ops/s
[info] # Warmup Iteration   3: 727332.486 ops/s
[info] # Warmup Iteration   4: 678436.535 ops/s
[info] # Warmup Iteration   5: 677057.614 ops/s
[info] Iteration   1: 664315.842 ops/s
[info]                  ·gc.alloc.rate:               687.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1578.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 705043.506 ops/s
[info]                  ·gc.alloc.rate:                   737.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1645.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1489.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 721749.329 ops/s
[info]                  ·gc.alloc.rate:               749.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          1634.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1454.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 645920.902 ops/s
[info]                  ·gc.alloc.rate:               671.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          1635.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1628.009 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 664139.082 ops/s
[info]                  ·gc.alloc.rate:                   687.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1629.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1583.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   680233.732 ±(99.9%) 122206.495 ops/s [Average]
[info]   (min, avg, max) = (645920.902, 680233.732, 721749.329), stdev = 31736.639
[info]   CI (99.9%): [558027.237, 802440.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   706.773 ±(99.9%) 132.898 MB/sec [Average]
[info]   (min, avg, max) = (671.395, 706.773, 749.620), stdev = 34.513
[info]   CI (99.9%): [573.875, 839.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1634.964 ±(99.9%) 25.880 B/op [Average]
[info]   (min, avg, max) = (1629.243, 1634.964, 1645.797), stdev = 6.721
[info]   CI (99.9%): [1609.084, 1660.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.485 ±(99.9%) 2.891 MB/sec [Average]
[info]   (min, avg, max) = (666.473, 667.485, 668.260), stdev = 0.751
[info]   CI (99.9%): [664.593, 670.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1546.881 ±(99.9%) 277.370 B/op [Average]
[info]   (min, avg, max) = (1454.752, 1546.881, 1628.009), stdev = 72.032
[info]   CI (99.9%): [1269.512, 1824.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432466.884 ops/s
[info] # Warmup Iteration   2: 680600.326 ops/s
[info] # Warmup Iteration   3: 683372.988 ops/s
[info] # Warmup Iteration   4: 682641.742 ops/s
[info] # Warmup Iteration   5: 684544.622 ops/s
[info] Iteration   1: 686322.477 ops/s
[info]                  ·gc.alloc.rate:      526.783 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 671347.212 ops/s
[info]                  ·gc.alloc.rate:      525.996 MB/sec
[info]                  ·gc.alloc.rate.norm: 1233.071 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 683789.977 ops/s
[info]                  ·gc.alloc.rate:               544.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1543.219 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 667160.501 ops/s
[info]                  ·gc.alloc.rate:               539.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          1273.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1583.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 673775.791 ops/s
[info]                  ·gc.alloc.rate:                   535.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              1250.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1567.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   676479.191 ±(99.9%) 31684.355 ops/s [Average]
[info]   (min, avg, max) = (667160.501, 676479.191, 686322.477), stdev = 8228.326
[info]   CI (99.9%): [644794.837, 708163.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   534.607 ±(99.9%) 31.643 MB/sec [Average]
[info]   (min, avg, max) = (525.996, 534.607, 544.896), stdev = 8.218
[info]   CI (99.9%): [502.964, 566.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1243.842 ±(99.9%) 94.811 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1243.842, 1273.371), stdev = 24.622
[info]   CI (99.9%): [1149.031, 1338.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402.604 ±(99.9%) 1415.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.604, 671.305), stdev = 367.525
[info]   CI (99.9%): [≈ 0, 1817.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   938.844 ±(99.9%) 3300.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 938.844, 1583.242), stdev = 857.162
[info]   CI (99.9%): [≈ 0, 4239.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 481806.285 ops/s
[info] # Warmup Iteration   2: 759309.144 ops/s
[info] # Warmup Iteration   3: 780422.585 ops/s
[info] # Warmup Iteration   4: 781277.781 ops/s
[info] # Warmup Iteration   5: 782197.564 ops/s
[info] Iteration   1: 764295.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 781374.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 781917.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 781786.784 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 781763.450 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   778227.564 ±(99.9%) 30000.219 ops/s [Average]
[info]   (min, avg, max) = (764295.381, 778227.564, 781917.451), stdev = 7790.962
[info]   CI (99.9%): [748227.344, 808227.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105416.283 ops/s
[info] # Warmup Iteration   2: 339106.218 ops/s
[info] # Warmup Iteration   3: 347716.807 ops/s
[info] # Warmup Iteration   4: 332840.309 ops/s
[info] # Warmup Iteration   5: 340103.880 ops/s
[info] Iteration   1: 333077.925 ops/s
[info]                  ·gc.alloc.rate:                   959.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              4533.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6301.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 345132.670 ops/s
[info]                  ·gc.alloc.rate:               975.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          4447.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3043.903 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 346344.679 ops/s
[info]                  ·gc.alloc.rate:                   968.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              4400.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3033.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 344431.731 ops/s
[info]                  ·gc.alloc.rate:                   984.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              4497.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6106.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 327103.860 ops/s
[info]                  ·gc.alloc.rate:               934.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          4496.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3217.985 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   339218.173 ±(99.9%) 33203.224 ops/s [Average]
[info]   (min, avg, max) = (327103.860, 339218.173, 346344.679), stdev = 8622.772
[info]   CI (99.9%): [306014.949, 372421.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   964.533 ±(99.9%) 73.790 MB/sec [Average]
[info]   (min, avg, max) = (934.519, 964.533, 984.725), stdev = 19.163
[info]   CI (99.9%): [890.743, 1038.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4474.927 ±(99.9%) 199.386 B/op [Average]
[info]   (min, avg, max) = (4400.064, 4474.927, 4533.072), stdev = 51.780
[info]   CI (99.9%): [4275.541, 4674.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934.967 ±(99.9%) 1407.546 MB/sec [Average]
[info]   (min, avg, max) = (667.553, 934.967, 1336.858), stdev = 365.535
[info]   CI (99.9%): [≈ 0, 2342.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4340.607 ±(99.9%) 6561.296 B/op [Average]
[info]   (min, avg, max) = (3033.305, 4340.607, 6301.667), stdev = 1703.948
[info]   CI (99.9%): [≈ 0, 10901.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.197), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2106.051 ops/s
[info] # Warmup Iteration   2: 9821.329 ops/s
[info] # Warmup Iteration   3: 11173.690 ops/s
[info] # Warmup Iteration   4: 11483.487 ops/s
[info] # Warmup Iteration   5: 11517.960 ops/s
[info] Iteration   1: 11442.972 ops/s
[info]                  ·gc.alloc.rate:                   1451.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              199683.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184703.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11081.044 ops/s
[info]                  ·gc.alloc.rate:                   1430.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              203110.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190830.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11405.516 ops/s
[info]                  ·gc.alloc.rate:                   1433.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              197782.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185486.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 422.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11511.299 ops/s
[info]                  ·gc.alloc.rate:                   1457.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              199234.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183505.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11442.023 ops/s
[info]                  ·gc.alloc.rate:               1457.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          200469.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184245.202 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11376.571 ±(99.9%) 652.962 ops/s [Average]
[info]   (min, avg, max) = (11081.044, 11376.571, 11511.299), stdev = 169.572
[info]   CI (99.9%): [10723.608, 12029.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1446.125 ±(99.9%) 50.520 MB/sec [Average]
[info]   (min, avg, max) = (1430.281, 1446.125, 1457.467), stdev = 13.120
[info]   CI (99.9%): [1395.605, 1496.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   200056.035 ±(99.9%) 7575.591 B/op [Average]
[info]   (min, avg, max) = (197782.403, 200056.035, 203110.229), stdev = 1967.357
[info]   CI (99.9%): [192480.444, 207631.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.619 ±(99.9%) 7.568 MB/sec [Average]
[info]   (min, avg, max) = (1339.512, 1342.619, 1344.635), stdev = 1.965
[info]   CI (99.9%): [1335.051, 1350.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   185754.167 ±(99.9%) 11273.006 B/op [Average]
[info]   (min, avg, max) = (183505.353, 185754.167, 190830.803), stdev = 2927.564
[info]   CI (99.9%): [174481.161, 197027.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 5.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.061), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   109.528 ±(99.9%) 696.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.528, 422.238), stdev = 180.806
[info]   CI (99.9%): [≈ 0, 805.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1903.387 ops/s
[info] # Warmup Iteration   2: 9608.503 ops/s
[info] # Warmup Iteration   3: 10356.307 ops/s
[info] # Warmup Iteration   4: 9939.696 ops/s
[info] # Warmup Iteration   5: 10441.171 ops/s
[info] Iteration   1: 10494.511 ops/s
[info]                  ·gc.alloc.rate:               1206.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          180910.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100292.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 10411.068 ops/s
[info]                  ·gc.alloc.rate:               1227.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          185594.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 202253.423 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 10410.902 ops/s
[info]                  ·gc.alloc.rate:                   1217.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              184116.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202373.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 10336.104 ops/s
[info]                  ·gc.alloc.rate:                   1224.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              186424.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203954.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 10438.982 ops/s
[info]                  ·gc.alloc.rate:                   1196.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              180360.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101021.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10418.313 ±(99.9%) 220.356 ops/s [Average]
[info]   (min, avg, max) = (10336.104, 10418.313, 10494.511), stdev = 57.226
[info]   CI (99.9%): [10197.958, 10638.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1214.644 ±(99.9%) 50.557 MB/sec [Average]
[info]   (min, avg, max) = (1196.336, 1214.644, 1227.954), stdev = 13.129
[info]   CI (99.9%): [1164.087, 1265.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   183481.425 ±(99.9%) 10524.212 B/op [Average]
[info]   (min, avg, max) = (180360.433, 183481.425, 186424.632), stdev = 2733.105
[info]   CI (99.9%): [172957.212, 194005.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.100 ±(99.9%) 1411.887 MB/sec [Average]
[info]   (min, avg, max) = (668.804, 1071.100, 1339.714), stdev = 366.663
[info]   CI (99.9%): [≈ 0, 2482.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   161979.128 ±(99.9%) 215573.555 B/op [Average]
[info]   (min, avg, max) = (100292.493, 161979.128, 203954.574), stdev = 55983.768
[info]   CI (99.9%): [≈ 0, 377552.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.817 ±(99.9%) 6.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 3.858), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   124.378 ±(99.9%) 997.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.378, 587.353), stdev = 259.071
[info]   CI (99.9%): [≈ 0, 1121.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175720.452 ops/s
[info] # Warmup Iteration   2: 272594.497 ops/s
[info] # Warmup Iteration   3: 271835.078 ops/s
[info] # Warmup Iteration   4: 270747.506 ops/s
[info] # Warmup Iteration   5: 272868.549 ops/s
[info] Iteration   1: 270115.601 ops/s
[info]                  ·gc.alloc.rate:                   1821.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              10615.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11768.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 283350.930 ops/s
[info]                  ·gc.alloc.rate:                   1896.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              10533.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11207.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 283824.192 ops/s
[info]                  ·gc.alloc.rate:                   1916.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11170.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 283597.324 ops/s
[info]                  ·gc.alloc.rate:               1895.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          10518.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7453.018 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 283099.604 ops/s
[info]                  ·gc.alloc.rate:                   1922.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              10686.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11202.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   280797.530 ±(99.9%) 23017.266 ops/s [Average]
[info]   (min, avg, max) = (270115.601, 280797.530, 283824.192), stdev = 5977.511
[info]   CI (99.9%): [257780.265, 303814.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1890.567 ±(99.9%) 154.940 MB/sec [Average]
[info]   (min, avg, max) = (1821.838, 1890.567, 1922.653), stdev = 40.237
[info]   CI (99.9%): [1735.627, 2045.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10595.630 ±(99.9%) 267.765 B/op [Average]
[info]   (min, avg, max) = (10518.474, 10595.630, 10686.773), stdev = 69.538
[info]   CI (99.9%): [10327.865, 10863.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1882.220 ±(99.9%) 1160.857 MB/sec [Average]
[info]   (min, avg, max) = (1342.944, 1882.220, 2019.732), stdev = 301.471
[info]   CI (99.9%): [721.362, 3043.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10560.400 ±(99.9%) 6757.419 B/op [Average]
[info]   (min, avg, max) = (7453.018, 10560.400, 11768.364), stdev = 1754.880
[info]   CI (99.9%): [3802.981, 17317.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 4.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.498), stdev = 1.059
[info]   CI (99.9%): [≈ 0, 4.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.743 ±(99.9%) 23.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.743, 14.555), stdev = 6.179
[info]   CI (99.9%): [≈ 0, 27.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972.349 ops/s
[info] # Warmup Iteration   2: 7414.051 ops/s
[info] # Warmup Iteration   3: 8181.517 ops/s
[info] # Warmup Iteration   4: 8405.377 ops/s
[info] # Warmup Iteration   5: 8514.733 ops/s
[info] Iteration   1: 8522.553 ops/s
[info]                  ·gc.alloc.rate:               1523.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          281327.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 246828.689 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 8460.348 ops/s
[info]                  ·gc.alloc.rate:               1543.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          287142.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373128.515 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   3: 8468.346 ops/s
[info]                  ·gc.alloc.rate:                   1530.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              284504.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248835.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8522.869 ops/s
[info]                  ·gc.alloc.rate:                   1540.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              284369.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246492.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8551.752 ops/s
[info]                  ·gc.alloc.rate:               1542.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          283829.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 245166.238 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8505.173 ±(99.9%) 150.992 ops/s [Average]
[info]   (min, avg, max) = (8460.348, 8505.173, 8551.752), stdev = 39.212
[info]   CI (99.9%): [8354.181, 8656.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1536.178 ±(99.9%) 33.642 MB/sec [Average]
[info]   (min, avg, max) = (1523.475, 1536.178, 1543.896), stdev = 8.737
[info]   CI (99.9%): [1502.536, 1569.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284234.842 ±(99.9%) 7975.494 B/op [Average]
[info]   (min, avg, max) = (281327.762, 284234.842, 287142.285), stdev = 2071.210
[info]   CI (99.9%): [276259.348, 292210.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.840 ±(99.9%) 1154.644 MB/sec [Average]
[info]   (min, avg, max) = (1332.265, 1469.840, 2006.224), stdev = 299.857
[info]   CI (99.9%): [315.196, 2624.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   272090.261 ±(99.9%) 217551.293 B/op [Average]
[info]   (min, avg, max) = (245166.238, 272090.261, 373128.515), stdev = 56497.380
[info]   CI (99.9%): [54538.968, 489641.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.946 ±(99.9%) 7.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.946, 4.311), stdev = 1.890
[info]   CI (99.9%): [≈ 0, 8.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   175.621 ±(99.9%) 1352.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 175.621, 801.232), stdev = 351.307
[info]   CI (99.9%): [≈ 0, 1528.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10435.699 ops/s
[info] # Warmup Iteration   2: 25549.861 ops/s
[info] # Warmup Iteration   3: 25338.312 ops/s
[info] # Warmup Iteration   4: 26071.376 ops/s
[info] # Warmup Iteration   5: 25690.508 ops/s
[info] Iteration   1: 26548.334 ops/s
[info]                  ·gc.alloc.rate:                   1391.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              82453.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79509.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 26444.422 ops/s
[info]                  ·gc.alloc.rate:                   1387.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              82537.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79882.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26482.059 ops/s
[info]                  ·gc.alloc.rate:                   1392.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              82749.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79810.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 26404.987 ops/s
[info]                  ·gc.alloc.rate:                   1389.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              82800.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79966.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25322.514 ops/s
[info]                  ·gc.alloc.rate:               1353.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          84135.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83261.721 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26240.463 ±(99.9%) 1986.398 ops/s [Average]
[info]   (min, avg, max) = (25322.514, 26240.463, 26548.334), stdev = 515.861
[info]   CI (99.9%): [24254.065, 28226.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1382.869 ±(99.9%) 63.274 MB/sec [Average]
[info]   (min, avg, max) = (1353.695, 1382.869, 1392.722), stdev = 16.432
[info]   CI (99.9%): [1319.595, 1446.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82935.263 ±(99.9%) 2642.043 B/op [Average]
[info]   (min, avg, max) = (82453.737, 82935.263, 84135.341), stdev = 686.130
[info]   CI (99.9%): [80293.220, 85577.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.792 ±(99.9%) 5.326 MB/sec [Average]
[info]   (min, avg, max) = (1339.639, 1341.792, 1343.244), stdev = 1.383
[info]   CI (99.9%): [1336.466, 1347.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80486.040 ±(99.9%) 6011.473 B/op [Average]
[info]   (min, avg, max) = (79509.971, 80486.040, 83261.721), stdev = 1561.160
[info]   CI (99.9%): [74474.567, 86497.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.019), stdev = 1.305
[info]   CI (99.9%): [≈ 0, 5.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   42.327 ±(99.9%) 298.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.327, 179.385), stdev = 77.529
[info]   CI (99.9%): [≈ 0, 340.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11111.611 ops/s
[info] # Warmup Iteration   2: 25511.474 ops/s
[info] # Warmup Iteration   3: 27165.075 ops/s
[info] # Warmup Iteration   4: 27052.579 ops/s
[info] # Warmup Iteration   5: 29111.636 ops/s
[info] Iteration   1: 28865.239 ops/s
[info]                  ·gc.alloc.rate:               1213.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          66182.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72949.944 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 29031.739 ops/s
[info]                  ·gc.alloc.rate:                   1203.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              65226.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72564.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 29003.848 ops/s
[info]                  ·gc.alloc.rate:               1226.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          66529.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72690.763 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 27725.340 ops/s
[info]                  ·gc.alloc.rate:                   1134.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              64390.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38039.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27278.762 ops/s
[info]                  ·gc.alloc.rate:                   1171.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              67596.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77360.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   28380.986 ±(99.9%) 3158.177 ops/s [Average]
[info]   (min, avg, max) = (27278.762, 28380.986, 29031.739), stdev = 820.169
[info]   CI (99.9%): [25222.809, 31539.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1189.843 ±(99.9%) 142.477 MB/sec [Average]
[info]   (min, avg, max) = (1134.355, 1189.843, 1226.009), stdev = 37.001
[info]   CI (99.9%): [1047.366, 1332.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65985.121 ±(99.9%) 4735.586 B/op [Average]
[info]   (min, avg, max) = (64390.130, 65985.121, 67596.166), stdev = 1229.817
[info]   CI (99.9%): [61249.536, 70720.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.451 ±(99.9%) 1152.316 MB/sec [Average]
[info]   (min, avg, max) = (670.135, 1205.451, 1340.895), stdev = 299.253
[info]   CI (99.9%): [53.135, 2357.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   66720.915 ±(99.9%) 62221.565 B/op [Average]
[info]   (min, avg, max) = (38039.287, 66720.915, 77360.582), stdev = 16158.743
[info]   CI (99.9%): [4499.351, 128942.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.957), stdev = 1.763
[info]   CI (99.9%): [≈ 0, 7.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.349 ±(99.9%) 391.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.349, 228.308), stdev = 101.722
[info]   CI (99.9%): [≈ 0, 438.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382669.698 ops/s
[info] # Warmup Iteration   2: 604447.873 ops/s
[info] # Warmup Iteration   3: 627837.187 ops/s
[info] # Warmup Iteration   4: 622390.163 ops/s
[info] # Warmup Iteration   5: 605753.580 ops/s
[info] Iteration   1: 622533.083 ops/s
[info]                  ·gc.alloc.rate:               1140.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          2882.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1699.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 625137.393 ops/s
[info]                  ·gc.alloc.rate:                   1170.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              2946.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3385.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 625184.066 ops/s
[info]                  ·gc.alloc.rate:               1156.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          2910.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3386.669 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 628863.408 ops/s
[info]                  ·gc.alloc.rate:               1148.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          2874.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1683.833 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 623526.723 ops/s
[info]                  ·gc.alloc.rate:                   1165.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              2940.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3396.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   625048.935 ±(99.9%) 9278.161 ops/s [Average]
[info]   (min, avg, max) = (622533.083, 625048.935, 628863.408), stdev = 2409.509
[info]   CI (99.9%): [615770.774, 634327.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1156.126 ±(99.9%) 47.776 MB/sec [Average]
[info]   (min, avg, max) = (1140.064, 1156.126, 1170.866), stdev = 12.407
[info]   CI (99.9%): [1108.350, 1203.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2910.996 ±(99.9%) 127.333 B/op [Average]
[info]   (min, avg, max) = (2874.083, 2910.996, 2946.998), stdev = 33.068
[info]   CI (99.9%): [2783.662, 3038.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.146 ±(99.9%) 1418.973 MB/sec [Average]
[info]   (min, avg, max) = (672.143, 1076.146, 1345.579), stdev = 368.503
[info]   CI (99.9%): [≈ 0, 2495.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2710.268 ±(99.9%) 3580.967 B/op [Average]
[info]   (min, avg, max) = (1683.833, 2710.268, 3396.415), stdev = 929.966
[info]   CI (99.9%): [≈ 0, 6291.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 5.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.083), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 5.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.577 ±(99.9%) 13.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.577, 7.782), stdev = 3.469
[info]   CI (99.9%): [≈ 0, 14.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426782.260 ops/s
[info] # Warmup Iteration   2: 767271.328 ops/s
[info] # Warmup Iteration   3: 786664.797 ops/s
[info] # Warmup Iteration   4: 786564.349 ops/s
[info] # Warmup Iteration   5: 787130.005 ops/s
[info] Iteration   1: 786700.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 786031.486 ops/s
[info]                  ·gc.alloc.rate:      0.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.361 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 786950.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 786382.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 786364.219 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   786485.696 ±(99.9%) 1352.553 ops/s [Average]
[info]   (min, avg, max) = (786031.486, 786485.696, 786950.114), stdev = 351.254
[info]   CI (99.9%): [785133.143, 787838.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.036 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.180), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.073 ±(99.9%) 0.621 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.073, 0.361), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11027.785 ops/s
[info] # Warmup Iteration   2: 28108.932 ops/s
[info] # Warmup Iteration   3: 29875.444 ops/s
[info] # Warmup Iteration   4: 29263.890 ops/s
[info] # Warmup Iteration   5: 29561.002 ops/s
[info] Iteration   1: 30042.980 ops/s
[info]                  ·gc.alloc.rate:               1368.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          71700.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70194.709 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 29981.708 ops/s
[info]                  ·gc.alloc.rate:               1377.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          72274.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70389.952 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 28581.743 ops/s
[info]                  ·gc.alloc.rate:                   1302.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              71701.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73868.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 29524.064 ops/s
[info]                  ·gc.alloc.rate:                   1356.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              72327.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71408.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29718.542 ops/s
[info]                  ·gc.alloc.rate:               1338.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          70865.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35418.191 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   29569.808 ±(99.9%) 2273.217 ops/s [Average]
[info]   (min, avg, max) = (28581.743, 29569.808, 30042.980), stdev = 590.347
[info]   CI (99.9%): [27296.590, 31843.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1348.706 ±(99.9%) 114.612 MB/sec [Average]
[info]   (min, avg, max) = (1302.209, 1348.706, 1377.291), stdev = 29.764
[info]   CI (99.9%): [1234.093, 1463.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71773.842 ±(99.9%) 2271.822 B/op [Average]
[info]   (min, avg, max) = (70865.614, 71773.842, 72327.279), stdev = 589.985
[info]   CI (99.9%): [69502.020, 74045.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206.287 ±(99.9%) 1156.532 MB/sec [Average]
[info]   (min, avg, max) = (669.011, 1206.287, 1341.575), stdev = 300.348
[info]   CI (99.9%): [49.755, 2362.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64255.964 ±(99.9%) 62330.251 B/op [Average]
[info]   (min, avg, max) = (35418.191, 64255.964, 73868.693), stdev = 16186.968
[info]   CI (99.9%): [1925.713, 126586.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.821 ±(99.9%) 5.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.821, 3.291), stdev = 1.425
[info]   CI (99.9%): [≈ 0, 6.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44.899 ±(99.9%) 302.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.899, 181.217), stdev = 78.474
[info]   CI (99.9%): [≈ 0, 347.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3933.666 ops/s
[info] # Warmup Iteration   2: 29259.380 ops/s
[info] # Warmup Iteration   3: 32738.727 ops/s
[info] # Warmup Iteration   4: 32947.127 ops/s
[info] # Warmup Iteration   5: 32419.732 ops/s
[info] Iteration   1: 33460.762 ops/s
[info]                  ·gc.alloc.rate:                   1764.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              82977.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94746.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 33588.397 ops/s
[info]                  ·gc.alloc.rate:                   1781.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              83467.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94419.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 33607.890 ops/s
[info]                  ·gc.alloc.rate:                   1783.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              83494.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62765.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33784.766 ops/s
[info]                  ·gc.alloc.rate:               1800.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          83856.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93468.805 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 33952.896 ops/s
[info]                  ·gc.alloc.rate:                   1785.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              82773.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62002.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   33678.942 ±(99.9%) 738.427 ops/s [Average]
[info]   (min, avg, max) = (33460.762, 33678.942, 33952.896), stdev = 191.767
[info]   CI (99.9%): [32940.515, 34417.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1783.010 ±(99.9%) 49.952 MB/sec [Average]
[info]   (min, avg, max) = (1764.132, 1783.010, 1800.527), stdev = 12.972
[info]   CI (99.9%): [1733.058, 1832.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83313.988 ±(99.9%) 1673.488 B/op [Average]
[info]   (min, avg, max) = (82773.595, 83313.988, 83856.290), stdev = 434.600
[info]   CI (99.9%): [81640.500, 84987.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.914 ±(99.9%) 1419.614 MB/sec [Average]
[info]   (min, avg, max) = (1337.608, 1742.914, 2015.150), stdev = 368.669
[info]   CI (99.9%): [323.300, 3162.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81480.694 ±(99.9%) 67160.158 B/op [Average]
[info]   (min, avg, max) = (62002.433, 81480.694, 94746.880), stdev = 17441.280
[info]   CI (99.9%): [14320.536, 148640.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.018), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   38.235 ±(99.9%) 322.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.235, 188.255), stdev = 83.865
[info]   CI (99.9%): [≈ 0, 361.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.742
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4337.241 ops/s
[info] # Warmup Iteration   2: 29866.224 ops/s
[info] # Warmup Iteration   3: 33419.645 ops/s
[info] # Warmup Iteration   4: 32941.222 ops/s
[info] # Warmup Iteration   5: 32172.039 ops/s
[info] Iteration   1: 33130.328 ops/s
[info]                  ·gc.alloc.rate:                   1462.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              69473.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63494.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 33045.719 ops/s
[info]                  ·gc.alloc.rate:               1464.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          69735.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63703.879 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 33011.331 ops/s
[info]                  ·gc.alloc.rate:                   1460.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              69623.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63819.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 34061.536 ops/s
[info]                  ·gc.alloc.rate:                   1492.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              68958.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61769.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34835.408 ops/s
[info]                  ·gc.alloc.rate:                   1563.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              70625.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90400.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   33616.864 ±(99.9%) 3111.750 ops/s [Average]
[info]   (min, avg, max) = (33011.331, 33616.864, 34835.408), stdev = 808.112
[info]   CI (99.9%): [30505.115, 36728.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1488.614 ±(99.9%) 168.761 MB/sec [Average]
[info]   (min, avg, max) = (1460.453, 1488.614, 1563.444), stdev = 43.827
[info]   CI (99.9%): [1319.853, 1657.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69683.218 ±(99.9%) 2329.936 B/op [Average]
[info]   (min, avg, max) = (68958.286, 69683.218, 70625.956), stdev = 605.077
[info]   CI (99.9%): [67353.282, 72013.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.199 ±(99.9%) 1143.017 MB/sec [Average]
[info]   (min, avg, max) = (1336.613, 1470.199, 2001.197), stdev = 296.838
[info]   CI (99.9%): [327.182, 2613.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68637.642 ±(99.9%) 46956.105 B/op [Average]
[info]   (min, avg, max) = (61769.652, 68637.642, 90400.709), stdev = 12194.351
[info]   CI (99.9%): [21681.537, 115593.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.871 ±(99.9%) 6.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 3.708), stdev = 1.605
[info]   CI (99.9%): [≈ 0, 7.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.322 ±(99.9%) 294.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.322, 176.762), stdev = 76.546
[info]   CI (99.9%): [≈ 0, 336.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249780.267 ops/s
[info] # Warmup Iteration   2: 466066.229 ops/s
[info] # Warmup Iteration   3: 475871.398 ops/s
[info] # Warmup Iteration   4: 480612.219 ops/s
[info] # Warmup Iteration   5: 482755.719 ops/s
[info] Iteration   1: 472151.528 ops/s
[info]                  ·gc.alloc.rate:                   1260.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4481.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 465864.987 ops/s
[info]                  ·gc.alloc.rate:                   1253.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              4234.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4545.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 477733.560 ops/s
[info]                  ·gc.alloc.rate:               1298.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          4275.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4433.048 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 468939.723 ops/s
[info]                  ·gc.alloc.rate:                   1271.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              4266.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4520.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 481183.738 ops/s
[info]                  ·gc.alloc.rate:                   1292.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4227.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4397.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   473174.707 ±(99.9%) 24150.454 ops/s [Average]
[info]   (min, avg, max) = (465864.987, 473174.707, 481183.738), stdev = 6271.796
[info]   CI (99.9%): [449024.254, 497325.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1275.246 ±(99.9%) 74.690 MB/sec [Average]
[info]   (min, avg, max) = (1253.707, 1275.246, 1298.035), stdev = 19.397
[info]   CI (99.9%): [1200.556, 1349.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4241.136 ±(99.9%) 117.193 B/op [Average]
[info]   (min, avg, max) = (4200.899, 4241.136, 4275.768), stdev = 30.435
[info]   CI (99.9%): [4123.943, 4358.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.544 ±(99.9%) 3.932 MB/sec [Average]
[info]   (min, avg, max) = (1344.255, 1345.544, 1346.928), stdev = 1.021
[info]   CI (99.9%): [1341.612, 1349.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4475.585 ±(99.9%) 235.746 B/op [Average]
[info]   (min, avg, max) = (4397.029, 4475.585, 4545.895), stdev = 61.222
[info]   CI (99.9%): [4239.839, 4711.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.748), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.928 ±(99.9%) 15.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.928, 9.223), stdev = 4.079
[info]   CI (99.9%): [≈ 0, 17.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1675.144 ops/s
[info] # Warmup Iteration   2: 16517.153 ops/s
[info] # Warmup Iteration   3: 19389.205 ops/s
[info] # Warmup Iteration   4: 19434.697 ops/s
[info] # Warmup Iteration   5: 19435.545 ops/s
[info] Iteration   1: 19407.304 ops/s
[info]                  ·gc.alloc.rate:                   1863.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              151118.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162761.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 19264.353 ops/s
[info]                  ·gc.alloc.rate:                   1899.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              155199.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163914.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 19503.337 ops/s
[info]                  ·gc.alloc.rate:                   1881.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              151851.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107615.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18877.766 ops/s
[info]                  ·gc.alloc.rate:                   1824.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              152041.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166608.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18523.654 ops/s
[info]                  ·gc.alloc.rate:                   1804.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              153283.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169867.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   19115.283 ±(99.9%) 1569.490 ops/s [Average]
[info]   (min, avg, max) = (18523.654, 19115.283, 19503.337), stdev = 407.592
[info]   CI (99.9%): [17545.793, 20684.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1854.652 ±(99.9%) 153.109 MB/sec [Average]
[info]   (min, avg, max) = (1804.171, 1854.652, 1899.705), stdev = 39.762
[info]   CI (99.9%): [1701.544, 2007.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   152698.781 ±(99.9%) 6162.384 B/op [Average]
[info]   (min, avg, max) = (151118.220, 152698.781, 155199.634), stdev = 1600.352
[info]   CI (99.9%): [146536.397, 158861.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.055 ±(99.9%) 1152.657 MB/sec [Average]
[info]   (min, avg, max) = (1333.620, 1869.055, 2007.004), stdev = 299.341
[info]   CI (99.9%): [716.398, 3021.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   154153.339 ±(99.9%) 100730.116 B/op [Average]
[info]   (min, avg, max) = (107615.172, 154153.339, 169867.275), stdev = 26159.291
[info]   CI (99.9%): [53423.223, 254883.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 7.837 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.941, 4.582), stdev = 2.035
[info]   CI (99.9%): [≈ 0, 8.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76.912 ±(99.9%) 640.202 B/op [Average]
[info]   (min, avg, max) = (1.736, 76.912, 374.321), stdev = 166.259
[info]   CI (99.9%): [≈ 0, 717.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11826.346 ops/s
[info] # Warmup Iteration   2: 50219.095 ops/s
[info] # Warmup Iteration   3: 52837.841 ops/s
[info] # Warmup Iteration   4: 54843.164 ops/s
[info] # Warmup Iteration   5: 55258.830 ops/s
[info] Iteration   1: 54159.205 ops/s
[info]                  ·gc.alloc.rate:               1656.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          48146.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58462.865 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 55445.749 ops/s
[info]                  ·gc.alloc.rate:                   1690.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              47963.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38091.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 55492.410 ops/s
[info]                  ·gc.alloc.rate:                   1719.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              48758.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57009.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 55910.605 ops/s
[info]                  ·gc.alloc.rate:                   1717.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              48334.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37652.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55754.216 ops/s
[info]                  ·gc.alloc.rate:               1713.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          48382.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56638.110 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   55352.437 ±(99.9%) 2671.332 ops/s [Average]
[info]   (min, avg, max) = (54159.205, 55352.437, 55910.605), stdev = 693.736
[info]   CI (99.9%): [52681.105, 58023.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1699.656 ±(99.9%) 102.286 MB/sec [Average]
[info]   (min, avg, max) = (1656.959, 1699.656, 1719.844), stdev = 26.563
[info]   CI (99.9%): [1597.369, 1801.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48316.909 ±(99.9%) 1144.044 B/op [Average]
[info]   (min, avg, max) = (47963.415, 48316.909, 48758.061), stdev = 297.105
[info]   CI (99.9%): [47172.864, 49460.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741.880 ±(99.9%) 1412.496 MB/sec [Average]
[info]   (min, avg, max) = (1337.593, 1741.880, 2011.987), stdev = 366.821
[info]   CI (99.9%): [329.384, 3154.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49570.756 ±(99.9%) 41211.889 B/op [Average]
[info]   (min, avg, max) = (37652.056, 49570.756, 58462.865), stdev = 10702.597
[info]   CI (99.9%): [8358.867, 90782.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.332), stdev = 1.451
[info]   CI (99.9%): [≈ 0, 6.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.505 ±(99.9%) 158.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.505, 94.543), stdev = 41.170
[info]   CI (99.9%): [≈ 0, 180.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64386.462 ops/s
[info] # Warmup Iteration   2: 147846.562 ops/s
[info] # Warmup Iteration   3: 153894.703 ops/s
[info] # Warmup Iteration   4: 160010.532 ops/s
[info] # Warmup Iteration   5: 159627.925 ops/s
[info] Iteration   1: 151768.910 ops/s
[info]                  ·gc.alloc.rate:                   1857.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              19265.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20841.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 160290.121 ops/s
[info]                  ·gc.alloc.rate:                   1932.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              18972.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19713.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 154786.679 ops/s
[info]                  ·gc.alloc.rate:                   1868.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              18993.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13586.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 160263.884 ops/s
[info]                  ·gc.alloc.rate:                   1946.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              19109.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19690.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 160209.234 ops/s
[info]                  ·gc.alloc.rate:                   1958.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              19242.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19716.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   157463.766 ±(99.9%) 15277.489 ops/s [Average]
[info]   (min, avg, max) = (151768.910, 157463.766, 160290.121), stdev = 3967.515
[info]   CI (99.9%): [142186.276, 172741.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1912.624 ±(99.9%) 178.647 MB/sec [Average]
[info]   (min, avg, max) = (1857.856, 1912.624, 1958.734), stdev = 46.394
[info]   CI (99.9%): [1733.977, 2091.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19116.634 ±(99.9%) 524.158 B/op [Average]
[info]   (min, avg, max) = (18972.621, 19116.634, 19265.876), stdev = 136.122
[info]   CI (99.9%): [18592.476, 19640.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.256 ±(99.9%) 1155.615 MB/sec [Average]
[info]   (min, avg, max) = (1336.412, 1873.256, 2009.758), stdev = 300.110
[info]   CI (99.9%): [717.641, 3028.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18709.879 ±(99.9%) 11188.390 B/op [Average]
[info]   (min, avg, max) = (13586.995, 18709.879, 20841.099), stdev = 2905.589
[info]   CI (99.9%): [7521.489, 29898.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.074 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.733, 3.062), stdev = 1.318
[info]   CI (99.9%): [≈ 0, 5.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.538 ±(99.9%) 52.686 B/op [Average]
[info]   (min, avg, max) = (0.204, 7.538, 31.756), stdev = 13.682
[info]   CI (99.9%): [≈ 0, 60.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 543893.121 ops/s
[info] # Warmup Iteration   2: 1034473.541 ops/s
[info] # Warmup Iteration   3: 1155439.914 ops/s
[info] # Warmup Iteration   4: 1137372.841 ops/s
[info] # Warmup Iteration   5: 1138153.779 ops/s
[info] Iteration   1: 1145245.691 ops/s
[info]                  ·gc.alloc.rate:               1260.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          1732.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1847.380 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1141114.782 ops/s
[info]                  ·gc.alloc.rate:                   1264.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1182320.262 ops/s
[info]                  ·gc.alloc.rate:               1306.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          1739.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1791.236 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1187365.463 ops/s
[info]                  ·gc.alloc.rate:                   1325.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1756.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1783.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1203706.038 ops/s
[info]                  ·gc.alloc.rate:                   1317.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1722.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     877.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1171950.447 ±(99.9%) 105762.328 ops/s [Average]
[info]   (min, avg, max) = (1141114.782, 1171950.447, 1203706.038), stdev = 27466.141
[info]   CI (99.9%): [1066188.119, 1277712.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1295.116 ±(99.9%) 116.360 MB/sec [Average]
[info]   (min, avg, max) = (1260.934, 1295.116, 1325.092), stdev = 30.218
[info]   CI (99.9%): [1178.756, 1411.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1739.060 ±(99.9%) 48.556 B/op [Average]
[info]   (min, avg, max) = (1722.850, 1739.060, 1756.320), stdev = 12.610
[info]   CI (99.9%): [1690.504, 1787.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.407 ±(99.9%) 1159.836 MB/sec [Average]
[info]   (min, avg, max) = (671.595, 1210.407, 1345.714), stdev = 301.206
[info]   CI (99.9%): [50.571, 2370.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1630.840 ±(99.9%) 1625.259 B/op [Average]
[info]   (min, avg, max) = (877.959, 1630.840, 1853.974), stdev = 422.075
[info]   CI (99.9%): [5.581, 3256.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 5.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 3.187), stdev = 1.419
[info]   CI (99.9%): [≈ 0, 6.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.862 ±(99.9%) 7.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 4.225), stdev = 1.880
[info]   CI (99.9%): [≈ 0, 8.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.200, 6.000), stdev = 1.924
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 771236.765 ops/s
[info] # Warmup Iteration   2: 1316562.809 ops/s
[info] # Warmup Iteration   3: 1371468.148 ops/s
[info] # Warmup Iteration   4: 1369769.849 ops/s
[info] # Warmup Iteration   5: 1371884.710 ops/s
[info] Iteration   1: 1373975.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1386529.777 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1386452.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1386944.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1374119.502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1381604.463 ±(99.9%) 26573.737 ops/s [Average]
[info]   (min, avg, max) = (1373975.816, 1381604.463, 1386944.862), stdev = 6901.115
[info]   CI (99.9%): [1355030.726, 1408178.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14304.372 ops/s
[info] # Warmup Iteration   2: 63784.267 ops/s
[info] # Warmup Iteration   3: 66471.582 ops/s
[info] # Warmup Iteration   4: 65240.779 ops/s
[info] # Warmup Iteration   5: 66316.335 ops/s
[info] Iteration   1: 64309.776 ops/s
[info]                  ·gc.alloc.rate:                   1633.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              39967.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49216.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 67514.405 ops/s
[info]                  ·gc.alloc.rate:                   1695.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              39528.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31282.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68351.545 ops/s
[info]                  ·gc.alloc.rate:                   1730.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              39841.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46282.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 65818.439 ops/s
[info]                  ·gc.alloc.rate:                   1666.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              39854.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31985.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 64546.990 ops/s
[info]                  ·gc.alloc.rate:                   1638.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              39928.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48806.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   66108.231 ±(99.9%) 6879.000 ops/s [Average]
[info]   (min, avg, max) = (64309.776, 66108.231, 68351.545), stdev = 1786.454
[info]   CI (99.9%): [59229.231, 72987.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1672.987 ±(99.9%) 156.335 MB/sec [Average]
[info]   (min, avg, max) = (1633.371, 1672.987, 1730.397), stdev = 40.600
[info]   CI (99.9%): [1516.651, 1829.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39824.276 ±(99.9%) 666.437 B/op [Average]
[info]   (min, avg, max) = (39528.917, 39824.276, 39967.642), stdev = 173.072
[info]   CI (99.9%): [39157.839, 40490.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1740.828 ±(99.9%) 1409.797 MB/sec [Average]
[info]   (min, avg, max) = (1337.616, 1740.828, 2011.345), stdev = 366.120
[info]   CI (99.9%): [331.031, 3150.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41514.517 ±(99.9%) 35013.658 B/op [Average]
[info]   (min, avg, max) = (31282.582, 41514.517, 49216.445), stdev = 9092.936
[info]   CI (99.9%): [6500.859, 76528.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.466 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.820, 3.331), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.127 ±(99.9%) 127.354 B/op [Average]
[info]   (min, avg, max) = (1.493, 19.127, 77.644), stdev = 33.074
[info]   CI (99.9%): [≈ 0, 146.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1816.194 ops/s
[info] # Warmup Iteration   2: 15387.132 ops/s
[info] # Warmup Iteration   3: 17143.400 ops/s
[info] # Warmup Iteration   4: 16922.777 ops/s
[info] # Warmup Iteration   5: 17109.613 ops/s
[info] Iteration   1: 17552.924 ops/s
[info]                  ·gc.alloc.rate:                   1524.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              136649.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120231.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17372.659 ops/s
[info]                  ·gc.alloc.rate:               1539.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          139481.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121537.297 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 17076.783 ops/s
[info]                  ·gc.alloc.rate:                   1502.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              138394.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185598.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 364.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 17409.639 ops/s
[info]                  ·gc.alloc.rate:                   1515.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              137023.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121038.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17566.098 ops/s
[info]                  ·gc.alloc.rate:                   1521.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              136305.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119837.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17395.621 ±(99.9%) 760.899 ops/s [Average]
[info]   (min, avg, max) = (17076.783, 17395.621, 17566.098), stdev = 197.603
[info]   CI (99.9%): [16634.722, 18156.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1520.639 ±(99.9%) 52.455 MB/sec [Average]
[info]   (min, avg, max) = (1502.066, 1520.639, 1539.616), stdev = 13.623
[info]   CI (99.9%): [1468.183, 1573.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   137571.053 ±(99.9%) 5122.614 B/op [Average]
[info]   (min, avg, max) = (136305.744, 137571.053, 139481.599), stdev = 1330.327
[info]   CI (99.9%): [132448.439, 142693.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.732 ±(99.9%) 1161.683 MB/sec [Average]
[info]   (min, avg, max) = (1337.607, 1474.732, 2014.395), stdev = 301.685
[info]   CI (99.9%): [313.049, 2636.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133648.637 ±(99.9%) 111856.450 B/op [Average]
[info]   (min, avg, max) = (119837.257, 133648.637, 185598.996), stdev = 29048.765
[info]   CI (99.9%): [21792.187, 245505.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.769 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.956), stdev = 1.758
[info]   CI (99.9%): [≈ 0, 7.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   74.783 ±(99.9%) 623.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.783, 364.537), stdev = 161.990
[info]   CI (99.9%): [≈ 0, 698.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.449
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2424.114 ops/s
[info] # Warmup Iteration   2: 15038.451 ops/s
[info] # Warmup Iteration   3: 16609.492 ops/s
[info] # Warmup Iteration   4: 17275.971 ops/s
[info] # Warmup Iteration   5: 17232.723 ops/s
[info] Iteration   1: 16576.579 ops/s
[info]                  ·gc.alloc.rate:               1360.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          129160.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127024.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17245.994 ops/s
[info]                  ·gc.alloc.rate:               1449.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          132272.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122165.670 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 17343.783 ops/s
[info]                  ·gc.alloc.rate:                   1422.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              129038.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121559.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 16685.662 ops/s
[info]                  ·gc.alloc.rate:                   1367.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              128939.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126226.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17105.037 ops/s
[info]                  ·gc.alloc.rate:                   1412.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              129897.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122828.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   16991.411 ±(99.9%) 1316.360 ops/s [Average]
[info]   (min, avg, max) = (16576.579, 16991.411, 17343.783), stdev = 341.854
[info]   CI (99.9%): [15675.051, 18307.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1402.352 ±(99.9%) 145.482 MB/sec [Average]
[info]   (min, avg, max) = (1360.581, 1402.352, 1449.634), stdev = 37.781
[info]   CI (99.9%): [1256.870, 1547.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   129861.510 ±(99.9%) 5388.145 B/op [Average]
[info]   (min, avg, max) = (128939.051, 129861.510, 132272.077), stdev = 1399.284
[info]   CI (99.9%): [124473.365, 135249.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.089 ±(99.9%) 6.078 MB/sec [Average]
[info]   (min, avg, max) = (1335.475, 1338.089, 1339.650), stdev = 1.578
[info]   CI (99.9%): [1332.012, 1344.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   123960.744 ±(99.9%) 9586.270 B/op [Average]
[info]   (min, avg, max) = (121559.136, 123960.744, 127024.421), stdev = 2489.524
[info]   CI (99.9%): [114374.474, 133547.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.921 ±(99.9%) 6.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.921, 3.874), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   84.044 ±(99.9%) 586.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 84.044, 351.548), stdev = 152.257
[info]   CI (99.9%): [≈ 0, 670.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269385.917 ops/s
[info] # Warmup Iteration   2: 623583.701 ops/s
[info] # Warmup Iteration   3: 676049.705 ops/s
[info] # Warmup Iteration   4: 669279.302 ops/s
[info] # Warmup Iteration   5: 661863.652 ops/s
[info] Iteration   1: 680214.794 ops/s
[info]                  ·gc.alloc.rate:                   1824.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              4221.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4671.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 686064.217 ops/s
[info]                  ·gc.alloc.rate:                   1851.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              4247.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4631.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.686 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 683089.511 ops/s
[info]                  ·gc.alloc.rate:               1819.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          4192.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3095.662 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 674998.786 ops/s
[info]                  ·gc.alloc.rate:               1806.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4696.904 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 663430.220 ops/s
[info]                  ·gc.alloc.rate:                   1794.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              4254.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4776.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   677559.506 ±(99.9%) 34233.699 ops/s [Average]
[info]   (min, avg, max) = (663430.220, 677559.506, 686064.217), stdev = 8890.383
[info]   CI (99.9%): [643325.807, 711793.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1819.293 ±(99.9%) 82.385 MB/sec [Average]
[info]   (min, avg, max) = (1794.319, 1819.293, 1851.280), stdev = 21.395
[info]   CI (99.9%): [1736.907, 1901.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4225.724 ±(99.9%) 97.688 B/op [Average]
[info]   (min, avg, max) = (4192.858, 4225.724, 4254.759), stdev = 25.369
[info]   CI (99.9%): [4128.036, 4323.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1882.064 ±(99.9%) 1159.152 MB/sec [Average]
[info]   (min, avg, max) = (1343.585, 1882.064, 2019.101), stdev = 301.028
[info]   CI (99.9%): [722.912, 3041.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4374.504 ±(99.9%) 2760.271 B/op [Average]
[info]   (min, avg, max) = (3095.662, 4374.504, 4776.161), stdev = 716.834
[info]   CI (99.9%): [1614.233, 7134.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 4.960 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.914), stdev = 1.288
[info]   CI (99.9%): [≈ 0, 5.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.406 ±(99.9%) 11.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.406, 6.686), stdev = 2.954
[info]   CI (99.9%): [≈ 0, 12.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1370.437 ops/s
[info] # Warmup Iteration   2: 11655.902 ops/s
[info] # Warmup Iteration   3: 13171.541 ops/s
[info] # Warmup Iteration   4: 13308.248 ops/s
[info] # Warmup Iteration   5: 12875.107 ops/s
[info] Iteration   1: 13255.635 ops/s
[info]                  ·gc.alloc.rate:               1790.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          212552.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158733.748 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 13402.543 ops/s
[info]                  ·gc.alloc.rate:                   1816.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              213281.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157149.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13119.898 ops/s
[info]                  ·gc.alloc.rate:                   1798.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              215722.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240030.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13321.156 ops/s
[info]                  ·gc.alloc.rate:               1818.689 MB/sec
[info]                  ·gc.alloc.rate.norm:          214874.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157317.879 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13369.061 ops/s
[info]                  ·gc.alloc.rate:               1830.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          215483.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 235168.967 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13293.659 ±(99.9%) 430.240 ops/s [Average]
[info]   (min, avg, max) = (13119.898, 13293.659, 13402.543), stdev = 111.732
[info]   CI (99.9%): [12863.419, 13723.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1810.977 ±(99.9%) 61.797 MB/sec [Average]
[info]   (min, avg, max) = (1790.904, 1810.977, 1830.528), stdev = 16.048
[info]   CI (99.9%): [1749.180, 1872.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   214382.826 ±(99.9%) 5380.822 B/op [Average]
[info]   (min, avg, max) = (212552.033, 214382.826, 215722.087), stdev = 1397.382
[info]   CI (99.9%): [209002.004, 219763.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.226 ±(99.9%) 1399.784 MB/sec [Average]
[info]   (min, avg, max) = (1331.533, 1601.226, 2001.103), stdev = 363.519
[info]   CI (99.9%): [201.442, 3001.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   189680.152 ±(99.9%) 168590.989 B/op [Average]
[info]   (min, avg, max) = (157149.510, 189680.152, 240030.656), stdev = 43782.545
[info]   CI (99.9%): [21089.163, 358271.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 7.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.937, 4.163), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 7.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   110.263 ±(99.9%) 821.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.263, 488.892), stdev = 213.379
[info]   CI (99.9%): [≈ 0, 931.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9764.276 ops/s
[info] # Warmup Iteration   2: 42522.966 ops/s
[info] # Warmup Iteration   3: 42881.512 ops/s
[info] # Warmup Iteration   4: 43280.222 ops/s
[info] # Warmup Iteration   5: 42791.909 ops/s
[info] Iteration   1: 44609.844 ops/s
[info]                  ·gc.alloc.rate:                   1746.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              61614.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71010.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 44881.111 ops/s
[info]                  ·gc.alloc.rate:                   1767.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              61997.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70628.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 43927.405 ops/s
[info]                  ·gc.alloc.rate:                   1705.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              61104.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47971.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43261.176 ops/s
[info]                  ·gc.alloc.rate:                   1692.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              61568.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48661.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 43927.600 ops/s
[info]                  ·gc.alloc.rate:               1719.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          61597.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71899.558 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44121.427 ±(99.9%) 2458.778 ops/s [Average]
[info]   (min, avg, max) = (43261.176, 44121.427, 44881.111), stdev = 638.537
[info]   CI (99.9%): [41662.650, 46580.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.393 ±(99.9%) 117.874 MB/sec [Average]
[info]   (min, avg, max) = (1692.389, 1726.393, 1767.875), stdev = 30.611
[info]   CI (99.9%): [1608.519, 1844.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61576.336 ±(99.9%) 1219.673 B/op [Average]
[info]   (min, avg, max) = (61104.778, 61576.336, 61997.030), stdev = 316.745
[info]   CI (99.9%): [60356.662, 62796.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.124 ±(99.9%) 1419.241 MB/sec [Average]
[info]   (min, avg, max) = (1337.618, 1742.124, 2014.004), stdev = 368.572
[info]   CI (99.9%): [322.883, 3161.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   62034.360 ±(99.9%) 48261.393 B/op [Average]
[info]   (min, avg, max) = (47971.726, 62034.360, 71899.558), stdev = 12533.331
[info]   CI (99.9%): [13772.967, 110295.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.684), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.436 ±(99.9%) 221.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.436, 129.209), stdev = 57.454
[info]   CI (99.9%): [≈ 0, 247.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21341.461 ops/s
[info] # Warmup Iteration   2: 55044.767 ops/s
[info] # Warmup Iteration   3: 57676.499 ops/s
[info] # Warmup Iteration   4: 57885.731 ops/s
[info] # Warmup Iteration   5: 57950.550 ops/s
[info] Iteration   1: 57867.697 ops/s
[info]                  ·gc.alloc.rate:                   1778.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              48361.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54669.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 57812.184 ops/s
[info]                  ·gc.alloc.rate:                   1774.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              48317.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36523.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 58078.918 ops/s
[info]                  ·gc.alloc.rate:                   1783.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              48322.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54390.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58125.491 ops/s
[info]                  ·gc.alloc.rate:               1796.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          48648.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54272.141 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 57958.155 ops/s
[info]                  ·gc.alloc.rate:               1780.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          48347.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36305.628 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   57968.489 ±(99.9%) 514.970 ops/s [Average]
[info]   (min, avg, max) = (57812.184, 57968.489, 58125.491), stdev = 133.736
[info]   CI (99.9%): [57453.519, 58483.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1782.647 ±(99.9%) 32.488 MB/sec [Average]
[info]   (min, avg, max) = (1774.795, 1782.647, 1796.686), stdev = 8.437
[info]   CI (99.9%): [1750.159, 1815.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48399.575 ±(99.9%) 539.999 B/op [Average]
[info]   (min, avg, max) = (48317.429, 48399.575, 48648.297), stdev = 140.236
[info]   CI (99.9%): [47859.576, 48939.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1740.015 ±(99.9%) 1408.709 MB/sec [Average]
[info]   (min, avg, max) = (1336.956, 1740.015, 2009.995), stdev = 365.837
[info]   CI (99.9%): [331.306, 3148.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47232.104 ±(99.9%) 38030.180 B/op [Average]
[info]   (min, avg, max) = (36305.628, 47232.104, 54669.006), stdev = 9876.317
[info]   CI (99.9%): [9201.925, 85262.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.768 ±(99.9%) 6.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.768, 3.691), stdev = 1.635
[info]   CI (99.9%): [≈ 0, 7.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20.913 ±(99.9%) 171.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.913, 100.491), stdev = 44.507
[info]   CI (99.9%): [≈ 0, 192.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 764146.032 ops/s
[info] # Warmup Iteration   2: 1211938.369 ops/s
[info] # Warmup Iteration   3: 1324342.681 ops/s
[info] # Warmup Iteration   4: 1356766.865 ops/s
[info] # Warmup Iteration   5: 1357797.299 ops/s
[info] Iteration   1: 1358646.805 ops/s
[info]                  ·gc.alloc.rate:               1267.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          1468.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1557.174 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1345812.587 ops/s
[info]                  ·gc.alloc.rate:               1261.023 MB/sec
[info]                  ·gc.alloc.rate.norm:          1474.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1572.070 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1326734.638 ops/s
[info]                  ·gc.alloc.rate:                   1247.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1330737.578 ops/s
[info]                  ·gc.alloc.rate:                   1262.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1492.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1364679.539 ops/s
[info]                  ·gc.alloc.rate:               1267.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          1461.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 774.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1345322.229 ±(99.9%) 64165.548 ops/s [Average]
[info]   (min, avg, max) = (1326734.638, 1345322.229, 1364679.539), stdev = 16663.589
[info]   CI (99.9%): [1281156.681, 1409487.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1261.362 ±(99.9%) 30.990 MB/sec [Average]
[info]   (min, avg, max) = (1247.927, 1261.362, 1267.795), stdev = 8.048
[info]   CI (99.9%): [1230.372, 1292.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1475.488 ±(99.9%) 46.454 B/op [Average]
[info]   (min, avg, max) = (1461.139, 1475.488, 1492.949), stdev = 12.064
[info]   CI (99.9%): [1429.034, 1521.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.442 ±(99.9%) 1159.734 MB/sec [Average]
[info]   (min, avg, max) = (671.678, 1210.442, 1346.095), stdev = 301.179
[info]   CI (99.9%): [50.708, 2370.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1418.273 ±(99.9%) 1387.242 B/op [Average]
[info]   (min, avg, max) = (774.423, 1418.273, 1596.244), stdev = 360.262
[info]   CI (99.9%): [31.031, 2805.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.230), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 6.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.774 ±(99.9%) 6.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.819), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 911106.659 ops/s
[info] # Warmup Iteration   2: 1541683.676 ops/s
[info] # Warmup Iteration   3: 1582132.016 ops/s
[info] # Warmup Iteration   4: 1582586.896 ops/s
[info] # Warmup Iteration   5: 1581692.629 ops/s
[info] Iteration   1: 1582456.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1582166.665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1582078.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1582513.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1582399.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1582322.835 ±(99.9%) 730.907 ops/s [Average]
[info]   (min, avg, max) = (1582078.385, 1582322.835, 1582513.420), stdev = 189.814
[info]   CI (99.9%): [1581591.927, 1583053.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1553.046 ops/s
[info] # Warmup Iteration   2: 3599.232 ops/s
[info] # Warmup Iteration   3: 3710.097 ops/s
[info] # Warmup Iteration   4: 3929.387 ops/s
[info] # Warmup Iteration   5: 3986.362 ops/s
[info] Iteration   1: 3843.963 ops/s
[info]                  ·gc.alloc.rate:      518.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432.121 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3825.026 ops/s
[info]                  ·gc.alloc.rate:               522.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          214854.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 275162.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3753.010 ops/s
[info]                  ·gc.alloc.rate:               519.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          217777.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 280439.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3754.994 ops/s
[info]                  ·gc.alloc.rate:                   511.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              214520.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280569.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3765.225 ops/s
[info]                  ·gc.alloc.rate:      508.273 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432.123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3788.444 ±(99.9%) 164.885 ops/s [Average]
[info]   (min, avg, max) = (3753.010, 3788.444, 3843.963), stdev = 42.820
[info]   CI (99.9%): [3623.558, 3953.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   516.132 ±(99.9%) 22.375 MB/sec [Average]
[info]   (min, avg, max) = (508.273, 516.132, 522.188), stdev = 5.811
[info]   CI (99.9%): [493.757, 538.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214403.435 ±(99.9%) 8474.310 B/op [Average]
[info]   (min, avg, max) = (212432.121, 214403.435, 217777.421), stdev = 2200.751
[info]   CI (99.9%): [205929.125, 222877.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   401.431 ±(99.9%) 1411.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.431, 669.478), stdev = 366.455
[info]   CI (99.9%): [≈ 0, 1812.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   167234.240 ±(99.9%) 587911.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167234.240, 280569.457), stdev = 152678.861
[info]   CI (99.9%): [≈ 0, 755146.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.745 ±(99.9%) 15.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.745, 8.724), stdev = 3.902
[info]   CI (99.9%): [≈ 0, 16.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32771.888 ops/s
[info] # Warmup Iteration   2: 110057.222 ops/s
[info] # Warmup Iteration   3: 120166.064 ops/s
[info] # Warmup Iteration   4: 122327.837 ops/s
[info] # Warmup Iteration   5: 121627.096 ops/s
[info] Iteration   1: 124287.772 ops/s
[info]                  ·gc.alloc.rate:                   1962.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              24855.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25534.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 125161.917 ops/s
[info]                  ·gc.alloc.rate:                   2001.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              25161.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25322.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 124387.207 ops/s
[info]                  ·gc.alloc.rate:                   1976.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              25006.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25413.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 125245.147 ops/s
[info]                  ·gc.alloc.rate:               1962.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          24666.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16825.701 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 125632.327 ops/s
[info]                  ·gc.alloc.rate:                   2009.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              25170.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25168.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   124942.874 ±(99.9%) 2239.191 ops/s [Average]
[info]   (min, avg, max) = (124287.772, 124942.874, 125632.327), stdev = 581.511
[info]   CI (99.9%): [122703.683, 127182.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1982.462 ±(99.9%) 83.218 MB/sec [Average]
[info]   (min, avg, max) = (1962.845, 1982.462, 2009.232), stdev = 21.611
[info]   CI (99.9%): [1899.244, 2065.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24972.052 ±(99.9%) 824.335 B/op [Average]
[info]   (min, avg, max) = (24666.631, 24972.052, 25170.363), stdev = 214.077
[info]   CI (99.9%): [24147.717, 25796.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.352 ±(99.9%) 1159.047 MB/sec [Average]
[info]   (min, avg, max) = (1338.939, 1877.352, 2016.442), stdev = 301.001
[info]   CI (99.9%): [718.305, 3036.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23652.814 ±(99.9%) 14704.845 B/op [Average]
[info]   (min, avg, max) = (16825.701, 23652.814, 25534.082), stdev = 3818.802
[info]   CI (99.9%): [8947.969, 38357.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 4.625 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.831), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.738 ±(99.9%) 58.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.738, 35.851), stdev = 15.209
[info]   CI (99.9%): [≈ 0, 68.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.841 ops/s
[info] # Warmup Iteration   2: 365755.164 ops/s
[info] # Warmup Iteration   3: 366480.590 ops/s
[info] # Warmup Iteration   4: 381413.661 ops/s
[info] # Warmup Iteration   5: 382117.454 ops/s
[info] Iteration   1: 380650.205 ops/s
[info]                  ·gc.alloc.rate:               793.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          3279.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5507.137 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 380613.739 ops/s
[info]                  ·gc.alloc.rate:               782.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          3234.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2754.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 381483.337 ops/s
[info]                  ·gc.alloc.rate:                   783.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              3231.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2751.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 382338.150 ops/s
[info]                  ·gc.alloc.rate:               781.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          3217.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2744.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 381541.492 ops/s
[info]                  ·gc.alloc.rate:                   780.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              3219.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   381325.385 ±(99.9%) 2763.123 ops/s [Average]
[info]   (min, avg, max) = (380613.739, 381325.385, 382338.150), stdev = 717.574
[info]   CI (99.9%): [378562.261, 384088.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   784.110 ±(99.9%) 19.777 MB/sec [Average]
[info]   (min, avg, max) = (780.434, 784.110, 793.113), stdev = 5.136
[info]   CI (99.9%): [764.333, 803.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3236.328 ±(99.9%) 96.919 B/op [Average]
[info]   (min, avg, max) = (3217.246, 3236.328, 3279.378), stdev = 25.170
[info]   CI (99.9%): [3139.409, 3333.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.822 ±(99.9%) 1145.326 MB/sec [Average]
[info]   (min, avg, max) = (666.128, 799.822, 1331.894), stdev = 297.438
[info]   CI (99.9%): [≈ 0, 1945.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3302.149 ±(99.9%) 4746.425 B/op [Average]
[info]   (min, avg, max) = (2744.877, 3302.149, 5507.137), stdev = 1232.631
[info]   CI (99.9%): [≈ 0, 8048.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.153), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55228.607 ops/s
[info] # Warmup Iteration   2: 239935.009 ops/s
[info] # Warmup Iteration   3: 245439.004 ops/s
[info] # Warmup Iteration   4: 249359.734 ops/s
[info] # Warmup Iteration   5: 247702.360 ops/s
[info] Iteration   1: 250515.468 ops/s
[info]                  ·gc.alloc.rate:      536.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 3368.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 250057.953 ops/s
[info]                  ·gc.alloc.rate:               557.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          3509.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4190.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 250117.300 ops/s
[info]                  ·gc.alloc.rate:               556.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          3499.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4189.425 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 249895.693 ops/s
[info]                  ·gc.alloc.rate:               548.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          3453.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4197.459 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 258774.759 ops/s
[info]                  ·gc.alloc.rate:                   573.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              3489.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4053.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   251872.235 ±(99.9%) 14884.094 ops/s [Average]
[info]   (min, avg, max) = (249895.693, 251872.235, 258774.759), stdev = 3865.352
[info]   CI (99.9%): [236988.141, 266756.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   554.436 ±(99.9%) 52.896 MB/sec [Average]
[info]   (min, avg, max) = (536.222, 554.436, 573.757), stdev = 13.737
[info]   CI (99.9%): [501.540, 607.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3464.140 ±(99.9%) 222.239 B/op [Average]
[info]   (min, avg, max) = (3368.002, 3464.140, 3509.485), stdev = 57.715
[info]   CI (99.9%): [3241.900, 3686.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.913 ±(99.9%) 1147.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.913, 666.477), stdev = 297.907
[info]   CI (99.9%): [≈ 0, 1680.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3326.194 ±(99.9%) 7163.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3326.194, 4197.459), stdev = 1860.375
[info]   CI (99.9%): [≈ 0, 10489.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.253), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297758.628 ops/s
[info] # Warmup Iteration   2: 496011.379 ops/s
[info] # Warmup Iteration   3: 512783.039 ops/s
[info] # Warmup Iteration   4: 516837.452 ops/s
[info] # Warmup Iteration   5: 518574.447 ops/s
[info] Iteration   1: 505527.548 ops/s
[info]                  ·gc.alloc.rate:                   663.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              2066.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2085.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.527 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 502133.620 ops/s
[info]                  ·gc.alloc.rate:               657.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          2061.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2098.434 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 519588.870 ops/s
[info]                  ·gc.alloc.rate:                   675.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              2046.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 520297.320 ops/s
[info]                  ·gc.alloc.rate:               674.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2023.018 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 519475.924 ops/s
[info]                  ·gc.alloc.rate:               672.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          2036.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2026.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   513404.657 ±(99.9%) 33991.541 ops/s [Average]
[info]   (min, avg, max) = (502133.620, 513404.657, 520297.320), stdev = 8827.495
[info]   CI (99.9%): [479413.115, 547396.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   668.791 ±(99.9%) 29.443 MB/sec [Average]
[info]   (min, avg, max) = (657.877, 668.791, 675.811), stdev = 7.646
[info]   CI (99.9%): [639.347, 698.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2050.115 ±(99.9%) 52.228 B/op [Average]
[info]   (min, avg, max) = (2036.221, 2050.115, 2066.729), stdev = 13.564
[info]   CI (99.9%): [1997.887, 2102.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.358 ±(99.9%) 1.579 MB/sec [Average]
[info]   (min, avg, max) = (668.791, 669.358, 669.807), stdev = 0.410
[info]   CI (99.9%): [667.779, 670.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2052.186 ±(99.9%) 140.902 B/op [Average]
[info]   (min, avg, max) = (2023.018, 2052.186, 2098.434), stdev = 36.592
[info]   CI (99.9%): [1911.284, 2193.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 5.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 3.060), stdev = 1.366
[info]   CI (99.9%): [≈ 0, 5.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.918 ±(99.9%) 16.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.918, 9.527), stdev = 4.254
[info]   CI (99.9%): [≈ 0, 18.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4953.943 ops/s
[info] # Warmup Iteration   2: 67684.053 ops/s
[info] # Warmup Iteration   3: 69609.293 ops/s
[info] # Warmup Iteration   4: 71525.808 ops/s
[info] # Warmup Iteration   5: 71652.417 ops/s
[info] Iteration   1: 72845.233 ops/s
[info]                  ·gc.alloc.rate:                   3042.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              65722.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57628.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 74607.806 ops/s
[info]                  ·gc.alloc.rate:                   3154.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              66523.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70423.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.878 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 74854.717 ops/s
[info]                  ·gc.alloc.rate:               3152.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          66282.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56333.788 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 73626.414 ops/s
[info]                  ·gc.alloc.rate:               3129.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          66905.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71845.925 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 73934.309 ops/s
[info]                  ·gc.alloc.rate:               3116.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          66340.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57441.263 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   73973.696 ±(99.9%) 3088.853 ops/s [Average]
[info]   (min, avg, max) = (72845.233, 73973.696, 74854.717), stdev = 802.165
[info]   CI (99.9%): [70884.843, 77062.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3119.419 ±(99.9%) 175.574 MB/sec [Average]
[info]   (min, avg, max) = (3042.987, 3119.419, 3154.526), stdev = 45.596
[info]   CI (99.9%): [2943.845, 3294.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66354.823 ±(99.9%) 1652.995 B/op [Average]
[info]   (min, avg, max) = (65722.104, 66354.823, 66905.165), stdev = 429.278
[info]   CI (99.9%): [64701.827, 68007.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2949.408 ±(99.9%) 1409.741 MB/sec [Average]
[info]   (min, avg, max) = (2668.230, 2949.408, 3360.923), stdev = 366.105
[info]   CI (99.9%): [1539.666, 4359.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62734.543 ±(99.9%) 29652.627 B/op [Average]
[info]   (min, avg, max) = (56333.788, 62734.543, 71845.925), stdev = 7700.693
[info]   CI (99.9%): [33081.917, 92387.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.266 ±(99.9%) 1.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.878), stdev = 0.394
[info]   CI (99.9%): [≈ 0, 1.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53429.395 ops/s
[info] # Warmup Iteration   2: 132860.003 ops/s
[info] # Warmup Iteration   3: 132843.629 ops/s
[info] # Warmup Iteration   4: 135767.632 ops/s
[info] # Warmup Iteration   5: 135859.444 ops/s
[info] Iteration   1: 136384.973 ops/s
[info]                  ·gc.alloc.rate:                   1181.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              13629.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7736.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 135708.624 ops/s
[info]                  ·gc.alloc.rate:                   1190.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              13808.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15554.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 135913.852 ops/s
[info]                  ·gc.alloc.rate:                   1211.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              14030.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15539.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 130818.868 ops/s
[info]                  ·gc.alloc.rate:                   1143.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              13761.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16152.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 136612.554 ops/s
[info]                  ·gc.alloc.rate:                   1194.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              13754.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7735.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   135087.774 ±(99.9%) 9293.364 ops/s [Average]
[info]   (min, avg, max) = (130818.868, 135087.774, 136612.554), stdev = 2413.457
[info]   CI (99.9%): [125794.410, 144381.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1184.387 ±(99.9%) 97.071 MB/sec [Average]
[info]   (min, avg, max) = (1143.849, 1184.387, 1211.668), stdev = 25.209
[info]   CI (99.9%): [1087.316, 1281.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13796.883 ±(99.9%) 563.420 B/op [Average]
[info]   (min, avg, max) = (13629.595, 13796.883, 14030.297), stdev = 146.318
[info]   CI (99.9%): [13233.463, 14360.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.643 ±(99.9%) 1415.062 MB/sec [Average]
[info]   (min, avg, max) = (670.425, 1073.643, 1342.579), stdev = 367.487
[info]   CI (99.9%): [≈ 0, 2488.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12543.714 ±(99.9%) 16926.918 B/op [Average]
[info]   (min, avg, max) = (7735.227, 12543.714, 16152.343), stdev = 4395.867
[info]   CI (99.9%): [≈ 0, 29470.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.155 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.754, 3.122), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 5.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.001 ±(99.9%) 62.099 B/op [Average]
[info]   (min, avg, max) = (0.241, 9.001, 37.566), stdev = 16.127
[info]   CI (99.9%): [≈ 0, 71.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.600, 7.000), stdev = 2.510
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.849 ops/s
[info] # Warmup Iteration   2: 199372.313 ops/s
[info] # Warmup Iteration   3: 201464.841 ops/s
[info] # Warmup Iteration   4: 208708.769 ops/s
[info] # Warmup Iteration   5: 208654.291 ops/s
[info] Iteration   1: 207705.107 ops/s
[info]                  ·gc.alloc.rate:                   170.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1294.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3876.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 207971.522 ops/s
[info]                  ·gc.alloc.rate:      163.623 MB/sec
[info]                  ·gc.alloc.rate.norm: 1237.844 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 208285.060 ops/s
[info]                  ·gc.alloc.rate:      163.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207298.660 ops/s
[info]                  ·gc.alloc.rate:               175.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          1332.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3884.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 209011.809 ops/s
[info]                  ·gc.alloc.rate:      163.635 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   208054.432 ±(99.9%) 2487.955 ops/s [Average]
[info]   (min, avg, max) = (207298.660, 208054.432, 209011.809), stdev = 646.114
[info]   CI (99.9%): [205566.477, 210542.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   167.346 ±(99.9%) 21.598 MB/sec [Average]
[info]   (min, avg, max) = (163.044, 167.346, 175.544), stdev = 5.609
[info]   CI (99.9%): [145.747, 188.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1265.873 ±(99.9%) 176.297 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1265.873, 1332.710), stdev = 45.784
[info]   CI (99.9%): [1089.576, 1442.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.655 ±(99.9%) 1079.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.655, 511.649), stdev = 280.236
[info]   CI (99.9%): [≈ 0, 1283.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1552.216 ±(99.9%) 8184.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1552.216, 3884.383), stdev = 2125.461
[info]   CI (99.9%): [≈ 0, 9736.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.376 ±(99.9%) 3.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.882), stdev = 0.842
[info]   CI (99.9%): [≈ 0, 3.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.853 ±(99.9%) 24.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.853, 14.263), stdev = 6.379
[info]   CI (99.9%): [≈ 0, 27.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206118.764 ops/s
[info] # Warmup Iteration   2: 417466.158 ops/s
[info] # Warmup Iteration   3: 406793.269 ops/s
[info] # Warmup Iteration   4: 411300.759 ops/s
[info] # Warmup Iteration   5: 424555.349 ops/s
[info] Iteration   1: 425259.725 ops/s
[info]                  ·gc.alloc.rate:               429.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          1588.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1893.310 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 426664.046 ops/s
[info]                  ·gc.alloc.rate:      418.569 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 426001.420 ops/s
[info]                  ·gc.alloc.rate:               435.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          1609.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2464.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 427499.137 ops/s
[info]                  ·gc.alloc.rate:      419.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 424251.395 ops/s
[info]                  ·gc.alloc.rate:                   430.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1595.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2474.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   425935.145 ±(99.9%) 4822.141 ops/s [Average]
[info]   (min, avg, max) = (424251.395, 425935.145, 427499.137), stdev = 1252.295
[info]   CI (99.9%): [421113.004, 430757.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   426.623 ±(99.9%) 28.523 MB/sec [Average]
[info]   (min, avg, max) = (418.569, 426.623, 435.719), stdev = 7.407
[info]   CI (99.9%): [398.100, 455.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1576.387 ±(99.9%) 117.488 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1576.387, 1609.731), stdev = 30.511
[info]   CI (99.9%): [1458.899, 1693.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.194 ±(99.9%) 1320.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.194, 667.260), stdev = 342.961
[info]   CI (99.9%): [≈ 0, 1689.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1366.572 ±(99.9%) 4888.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1366.572, 2474.922), stdev = 1269.514
[info]   CI (99.9%): [≈ 0, 6255.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268268.124 ops/s
[info] # Warmup Iteration   2: 431067.169 ops/s
[info] # Warmup Iteration   3: 453757.259 ops/s
[info] # Warmup Iteration   4: 457772.408 ops/s
[info] # Warmup Iteration   5: 430898.205 ops/s
[info] Iteration   1: 452119.634 ops/s
[info]                  ·gc.alloc.rate:               378.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          1315.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1780.863 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 464452.658 ops/s
[info]                  ·gc.alloc.rate:      363.669 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 458174.033 ops/s
[info]                  ·gc.alloc.rate:               373.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          1281.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2299.694 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 456948.729 ops/s
[info]                  ·gc.alloc.rate:      357.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 450792.556 ops/s
[info]                  ·gc.alloc.rate:                   374.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              1308.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2337.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   456497.522 ±(99.9%) 20915.325 ops/s [Average]
[info]   (min, avg, max) = (450792.556, 456497.522, 464452.658), stdev = 5431.644
[info]   CI (99.9%): [435582.197, 477412.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   369.450 ±(99.9%) 32.494 MB/sec [Average]
[info]   (min, avg, max) = (357.755, 369.450, 378.016), stdev = 8.439
[info]   CI (99.9%): [336.956, 401.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1273.973 ±(99.9%) 155.666 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1273.973, 1315.980), stdev = 40.426
[info]   CI (99.9%): [1118.308, 1429.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.094 ±(99.9%) 1324.403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.094, 669.462), stdev = 343.943
[info]   CI (99.9%): [≈ 0, 1694.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1283.567 ±(99.9%) 4590.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1283.567, 2337.275), stdev = 1192.184
[info]   CI (99.9%): [≈ 0, 5874.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 5.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 3.060), stdev = 1.368
[info]   CI (99.9%): [≈ 0, 5.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.137 ±(99.9%) 18.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.137, 10.683), stdev = 4.778
[info]   CI (99.9%): [≈ 0, 20.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309904.309 ops/s
[info] # Warmup Iteration   2: 496249.562 ops/s
[info] # Warmup Iteration   3: 493228.245 ops/s
[info] # Warmup Iteration   4: 494375.392 ops/s
[info] # Warmup Iteration   5: 497195.411 ops/s
[info] Iteration   1: 494446.860 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 497206.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 496947.527 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 497153.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 497222.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   496595.264 ±(99.9%) 4643.854 ops/s [Average]
[info]   (min, avg, max) = (494446.860, 496595.264, 497222.091), stdev = 1205.994
[info]   CI (99.9%): [491951.410, 501239.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8522.595 ops/s
[info] # Warmup Iteration   2: 26325.428 ops/s
[info] # Warmup Iteration   3: 28207.625 ops/s
[info] # Warmup Iteration   4: 27773.640 ops/s
[info] # Warmup Iteration   5: 28138.924 ops/s
[info] Iteration   1: 28830.759 ops/s
[info]                  ·gc.alloc.rate:                   1614.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              88098.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73163.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 27786.144 ops/s
[info]                  ·gc.alloc.rate:                   1581.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              89531.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113984.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 28765.590 ops/s
[info]                  ·gc.alloc.rate:                   1620.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              88646.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73331.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27936.612 ops/s
[info]                  ·gc.alloc.rate:               1577.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          88811.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75353.969 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 28031.155 ops/s
[info]                  ·gc.alloc.rate:               1590.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          89270.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112535.763 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28270.052 ±(99.9%) 1888.751 ops/s [Average]
[info]   (min, avg, max) = (27786.144, 28270.052, 28830.759), stdev = 490.503
[info]   CI (99.9%): [26381.301, 30158.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1596.547 ±(99.9%) 75.189 MB/sec [Average]
[info]   (min, avg, max) = (1577.100, 1596.547, 1620.212), stdev = 19.526
[info]   CI (99.9%): [1521.358, 1671.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88871.724 ±(99.9%) 2148.455 B/op [Average]
[info]   (min, avg, max) = (88098.950, 88871.724, 89531.255), stdev = 557.947
[info]   CI (99.9%): [86723.269, 91020.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.297 ±(99.9%) 1411.467 MB/sec [Average]
[info]   (min, avg, max) = (1338.126, 1607.297, 2012.825), stdev = 366.553
[info]   CI (99.9%): [195.831, 3018.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89673.742 ±(99.9%) 82999.673 B/op [Average]
[info]   (min, avg, max) = (73163.230, 89673.742, 113984.675), stdev = 21554.751
[info]   CI (99.9%): [6674.069, 172673.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.123), stdev = 1.351
[info]   CI (99.9%): [≈ 0, 6.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45.851 ±(99.9%) 294.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.851, 176.863), stdev = 76.481
[info]   CI (99.9%): [≈ 0, 340.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1119.359 ops/s
[info] # Warmup Iteration   2: 7030.566 ops/s
[info] # Warmup Iteration   3: 8322.908 ops/s
[info] # Warmup Iteration   4: 8323.165 ops/s
[info] # Warmup Iteration   5: 8334.030 ops/s
[info] Iteration   1: 8258.612 ops/s
[info]                  ·gc.alloc.rate:               1186.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          226106.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 255606.268 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 8039.936 ops/s
[info]                  ·gc.alloc.rate:                   1147.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              224593.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262698.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8365.956 ops/s
[info]                  ·gc.alloc.rate:                   1170.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              220142.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126247.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8264.173 ops/s
[info]                  ·gc.alloc.rate:               1182.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          225219.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 255737.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 8313.432 ops/s
[info]                  ·gc.alloc.rate:                   1189.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              225197.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254230.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 697.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8248.422 ±(99.9%) 478.855 ops/s [Average]
[info]   (min, avg, max) = (8039.936, 8248.422, 8365.956), stdev = 124.357
[info]   CI (99.9%): [7769.567, 8727.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1175.376 ±(99.9%) 66.380 MB/sec [Average]
[info]   (min, avg, max) = (1147.588, 1175.376, 1189.759), stdev = 17.239
[info]   CI (99.9%): [1108.996, 1241.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   224251.821 ±(99.9%) 9087.414 B/op [Average]
[info]   (min, avg, max) = (220142.014, 224251.821, 226106.491), stdev = 2359.973
[info]   CI (99.9%): [215164.407, 233339.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.194 ±(99.9%) 1156.237 MB/sec [Average]
[info]   (min, avg, max) = (671.054, 1208.194, 1343.148), stdev = 300.271
[info]   CI (99.9%): [51.957, 2364.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   230904.163 ±(99.9%) 225639.910 B/op [Average]
[info]   (min, avg, max) = (126247.648, 230904.163, 262698.216), stdev = 58597.968
[info]   CI (99.9%): [5264.253, 456544.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.685), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141.104 ±(99.9%) 1197.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.104, 697.527), stdev = 311.057
[info]   CI (99.9%): [≈ 0, 1338.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1438.305 ops/s
[info] # Warmup Iteration   2: 6887.683 ops/s
[info] # Warmup Iteration   3: 8258.528 ops/s
[info] # Warmup Iteration   4: 8467.385 ops/s
[info] # Warmup Iteration   5: 8190.511 ops/s
[info] Iteration   1: 8354.708 ops/s
[info]                  ·gc.alloc.rate:               1083.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          204104.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125801.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 8492.827 ops/s
[info]                  ·gc.alloc.rate:               1120.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          207517.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 247638.740 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 8478.828 ops/s
[info]                  ·gc.alloc.rate:                   1110.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              206198.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248294.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8436.846 ops/s
[info]                  ·gc.alloc.rate:               1112.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          207487.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124827.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 8420.728 ops/s
[info]                  ·gc.alloc.rate:                   1101.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              205784.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250191.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 720.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8436.787 ±(99.9%) 210.052 ops/s [Average]
[info]   (min, avg, max) = (8354.708, 8436.787, 8492.827), stdev = 54.550
[info]   CI (99.9%): [8226.735, 8646.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1105.639 ±(99.9%) 54.463 MB/sec [Average]
[info]   (min, avg, max) = (1083.527, 1105.639, 1120.411), stdev = 14.144
[info]   CI (99.9%): [1051.176, 1160.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   206218.472 ±(99.9%) 5430.269 B/op [Average]
[info]   (min, avg, max) = (204104.452, 206218.472, 207517.697), stdev = 1410.224
[info]   CI (99.9%): [200788.203, 211648.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.080 ±(99.9%) 1411.581 MB/sec [Average]
[info]   (min, avg, max) = (667.841, 1070.080, 1338.659), stdev = 366.583
[info]   CI (99.9%): [≈ 0, 2481.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   199350.846 ±(99.9%) 260276.545 B/op [Average]
[info]   (min, avg, max) = (124827.517, 199350.846, 250191.578), stdev = 67592.992
[info]   CI (99.9%): [≈ 0, 459627.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.627 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.853), stdev = 1.721
[info]   CI (99.9%): [≈ 0, 7.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   144.813 ±(99.9%) 1238.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 144.813, 720.201), stdev = 321.656
[info]   CI (99.9%): [≈ 0, 1383.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87924.284 ops/s
[info] # Warmup Iteration   2: 181957.448 ops/s
[info] # Warmup Iteration   3: 177054.927 ops/s
[info] # Warmup Iteration   4: 186057.823 ops/s
[info] # Warmup Iteration   5: 182932.515 ops/s
[info] Iteration   1: 182390.780 ops/s
[info]                  ·gc.alloc.rate:                   1833.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              15805.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17406.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 186608.292 ops/s
[info]                  ·gc.alloc.rate:                   1860.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              15690.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11348.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 184034.336 ops/s
[info]                  ·gc.alloc.rate:               1849.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          15814.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17233.011 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 184035.209 ops/s
[info]                  ·gc.alloc.rate:               1862.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          15930.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17213.352 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 186025.244 ops/s
[info]                  ·gc.alloc.rate:               1855.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          15699.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11362.156 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   184618.772 ±(99.9%) 6552.438 ops/s [Average]
[info]   (min, avg, max) = (182390.780, 184618.772, 186608.292), stdev = 1701.647
[info]   CI (99.9%): [178066.334, 191171.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1852.464 ±(99.9%) 45.770 MB/sec [Average]
[info]   (min, avg, max) = (1833.200, 1852.464, 1862.738), stdev = 11.886
[info]   CI (99.9%): [1806.693, 1898.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15788.067 ±(99.9%) 378.420 B/op [Average]
[info]   (min, avg, max) = (15690.426, 15788.067, 15930.434), stdev = 98.274
[info]   CI (99.9%): [15409.647, 16166.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.257 ±(99.9%) 1415.771 MB/sec [Average]
[info]   (min, avg, max) = (1343.160, 1747.257, 2018.875), stdev = 367.671
[info]   CI (99.9%): [331.486, 3163.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14912.707 ±(99.9%) 12508.218 B/op [Average]
[info]   (min, avg, max) = (11348.408, 14912.707, 17406.610), stdev = 3248.344
[info]   CI (99.9%): [2404.489, 27420.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.580), stdev = 1.117
[info]   CI (99.9%): [≈ 0, 4.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.503 ±(99.9%) 37.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.503, 22.246), stdev = 9.634
[info]   CI (99.9%): [≈ 0, 42.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 9.000), stdev = 2.702
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395.615 ops/s
[info] # Warmup Iteration   2: 6414.046 ops/s
[info] # Warmup Iteration   3: 7921.392 ops/s
[info] # Warmup Iteration   4: 7991.014 ops/s
[info] # Warmup Iteration   5: 7927.068 ops/s
[info] Iteration   1: 8004.528 ops/s
[info]                  ·gc.alloc.rate:               1312.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          258144.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 262471.434 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 8005.266 ops/s
[info]                  ·gc.alloc.rate:               1304.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          256319.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 262569.612 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 7998.211 ops/s
[info]                  ·gc.alloc.rate:                   1309.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              257538.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263061.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7718.042 ops/s
[info]                  ·gc.alloc.rate:                   1239.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              252698.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136369.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8030.960 ops/s
[info]                  ·gc.alloc.rate:                   1325.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              259739.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261719.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7951.401 ±(99.9%) 504.645 ops/s [Average]
[info]   (min, avg, max) = (7718.042, 7951.401, 8030.960), stdev = 131.055
[info]   CI (99.9%): [7446.757, 8456.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1298.217 ±(99.9%) 130.364 MB/sec [Average]
[info]   (min, avg, max) = (1239.310, 1298.217, 1325.471), stdev = 33.855
[info]   CI (99.9%): [1167.853, 1428.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   256887.979 ±(99.9%) 10189.292 B/op [Average]
[info]   (min, avg, max) = (252698.294, 256887.979, 259739.038), stdev = 2646.127
[info]   CI (99.9%): [246698.687, 267077.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.512 ±(99.9%) 1148.869 MB/sec [Average]
[info]   (min, avg, max) = (668.796, 1202.512, 1337.193), stdev = 298.358
[info]   CI (99.9%): [53.644, 2351.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   237238.305 ±(99.9%) 217136.200 B/op [Average]
[info]   (min, avg, max) = (136369.210, 237238.305, 263061.504), stdev = 56389.582
[info]   CI (99.9%): [20102.105, 454374.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.946 ±(99.9%) 7.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.946, 4.228), stdev = 1.845
[info]   CI (99.9%): [≈ 0, 8.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   192.005 ±(99.9%) 1449.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 192.005, 862.093), stdev = 376.495
[info]   CI (99.9%): [≈ 0, 1641.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6643.331 ops/s
[info] # Warmup Iteration   2: 19947.135 ops/s
[info] # Warmup Iteration   3: 20935.770 ops/s
[info] # Warmup Iteration   4: 20968.968 ops/s
[info] # Warmup Iteration   5: 20805.357 ops/s
[info] Iteration   1: 21536.630 ops/s
[info]                  ·gc.alloc.rate:                   1208.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              88332.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49018.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21746.657 ops/s
[info]                  ·gc.alloc.rate:                   1236.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              89510.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97091.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 21563.383 ops/s
[info]                  ·gc.alloc.rate:                   1229.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              89708.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97968.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 21630.419 ops/s
[info]                  ·gc.alloc.rate:                   1233.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              89714.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97713.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 21186.862 ops/s
[info]                  ·gc.alloc.rate:                   1194.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              88705.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49877.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.575 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21532.790 ±(99.9%) 807.459 ops/s [Average]
[info]   (min, avg, max) = (21186.862, 21532.790, 21746.657), stdev = 209.695
[info]   CI (99.9%): [20725.331, 22340.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1220.490 ±(99.9%) 70.120 MB/sec [Average]
[info]   (min, avg, max) = (1194.390, 1220.490, 1236.830), stdev = 18.210
[info]   CI (99.9%): [1150.370, 1290.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89194.166 ±(99.9%) 2447.872 B/op [Average]
[info]   (min, avg, max) = (88332.276, 89194.166, 89714.245), stdev = 635.705
[info]   CI (99.9%): [86746.294, 91642.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.917 ±(99.9%) 1415.695 MB/sec [Average]
[info]   (min, avg, max) = (670.761, 1073.917, 1343.173), stdev = 367.651
[info]   CI (99.9%): [≈ 0, 2489.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   78333.932 ±(99.9%) 101550.720 B/op [Average]
[info]   (min, avg, max) = (49018.896, 78333.932, 97968.222), stdev = 26372.399
[info]   CI (99.9%): [≈ 0, 179884.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 5.048 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.775, 3.061), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56.558 ±(99.9%) 367.177 B/op [Average]
[info]   (min, avg, max) = (1.519, 56.558, 222.654), stdev = 95.355
[info]   CI (99.9%): [≈ 0, 423.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7701.361 ops/s
[info] # Warmup Iteration   2: 22434.710 ops/s
[info] # Warmup Iteration   3: 24804.541 ops/s
[info] # Warmup Iteration   4: 25012.083 ops/s
[info] # Warmup Iteration   5: 24940.910 ops/s
[info] Iteration   1: 26092.346 ops/s
[info]                  ·gc.alloc.rate:                   1160.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              70004.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80721.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 26179.290 ops/s
[info]                  ·gc.alloc.rate:               1144.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          68815.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40245.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 26004.422 ops/s
[info]                  ·gc.alloc.rate:                   1162.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              70344.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81075.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 26181.059 ops/s
[info]                  ·gc.alloc.rate:                   1156.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              69504.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80564.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 26173.312 ops/s
[info]                  ·gc.alloc.rate:                   1155.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              69450.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40332.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   26126.086 ±(99.9%) 298.415 ops/s [Average]
[info]   (min, avg, max) = (26004.422, 26126.086, 26181.059), stdev = 77.497
[info]   CI (99.9%): [25827.671, 26424.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1155.799 ±(99.9%) 26.621 MB/sec [Average]
[info]   (min, avg, max) = (1144.712, 1155.799, 1162.492), stdev = 6.913
[info]   CI (99.9%): [1129.178, 1182.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69623.804 ±(99.9%) 2246.399 B/op [Average]
[info]   (min, avg, max) = (68815.633, 69623.804, 70344.239), stdev = 583.383
[info]   CI (99.9%): [67377.405, 71870.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.698 ±(99.9%) 1411.646 MB/sec [Average]
[info]   (min, avg, max) = (669.457, 1071.698, 1340.212), stdev = 366.600
[info]   CI (99.9%): [≈ 0, 2483.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64587.807 ±(99.9%) 85416.676 B/op [Average]
[info]   (min, avg, max) = (40245.136, 64587.807, 81075.256), stdev = 22182.440
[info]   CI (99.9%): [≈ 0, 150004.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.667 ±(99.9%) 5.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.229), stdev = 1.432
[info]   CI (99.9%): [≈ 0, 6.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.083 ±(99.9%) 331.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.083, 194.137), stdev = 86.129
[info]   CI (99.9%): [≈ 0, 371.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181212.997 ops/s
[info] # Warmup Iteration   2: 357192.860 ops/s
[info] # Warmup Iteration   3: 354507.608 ops/s
[info] # Warmup Iteration   4: 371907.589 ops/s
[info] # Warmup Iteration   5: 368484.834 ops/s
[info] Iteration   1: 379427.630 ops/s
[info]                  ·gc.alloc.rate:                   909.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              3773.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5559.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 378183.336 ops/s
[info]                  ·gc.alloc.rate:               876.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          3646.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2786.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 380115.410 ops/s
[info]                  ·gc.alloc.rate:                   877.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              3631.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2771.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 378974.211 ops/s
[info]                  ·gc.alloc.rate:               887.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          3684.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5554.901 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 370813.054 ops/s
[info]                  ·gc.alloc.rate:                   854.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              3627.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2840.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   377502.728 ±(99.9%) 14651.634 ops/s [Average]
[info]   (min, avg, max) = (370813.054, 377502.728, 380115.410), stdev = 3804.983
[info]   CI (99.9%): [362851.094, 392154.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   881.059 ±(99.9%) 76.703 MB/sec [Average]
[info]   (min, avg, max) = (854.845, 881.059, 909.701), stdev = 19.919
[info]   CI (99.9%): [804.356, 957.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3672.773 ±(99.9%) 233.609 B/op [Average]
[info]   (min, avg, max) = (3627.648, 3672.773, 3773.539), stdev = 60.668
[info]   CI (99.9%): [3439.164, 3906.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.275 ±(99.9%) 1412.477 MB/sec [Average]
[info]   (min, avg, max) = (669.241, 937.275, 1340.277), stdev = 366.816
[info]   CI (99.9%): [≈ 0, 2349.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3902.512 ±(99.9%) 5817.489 B/op [Average]
[info]   (min, avg, max) = (2771.924, 3902.512, 5559.615), stdev = 1510.784
[info]   CI (99.9%): [≈ 0, 9720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.088), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218386.450 ops/s
[info] # Warmup Iteration   2: 427379.818 ops/s
[info] # Warmup Iteration   3: 433004.335 ops/s
[info] # Warmup Iteration   4: 425933.260 ops/s
[info] # Warmup Iteration   5: 432877.914 ops/s
[info] Iteration   1: 432787.001 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 432875.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 433531.022 ops/s
[info]                  ·gc.alloc.rate:      0.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 434193.671 ops/s
[info]                  ·gc.alloc.rate:      0.169 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.612 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 433784.431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   433434.258 ±(99.9%) 2310.564 ops/s [Average]
[info]   (min, avg, max) = (432787.001, 433434.258, 434193.671), stdev = 600.046
[info]   CI (99.9%): [431123.693, 435744.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.124 ±(99.9%) 1.051 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.124, 0.612), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4812.095 ops/s
[info] # Warmup Iteration   2: 23263.606 ops/s
[info] # Warmup Iteration   3: 24498.693 ops/s
[info] # Warmup Iteration   4: 23955.010 ops/s
[info] # Warmup Iteration   5: 23950.549 ops/s
[info] Iteration   1: 23807.226 ops/s
[info]                  ·gc.alloc.rate:                   1148.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              75948.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88423.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 23986.971 ops/s
[info]                  ·gc.alloc.rate:                   1154.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              75708.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87832.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23978.444 ops/s
[info]                  ·gc.alloc.rate:               1147.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          75289.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43942.077 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 24798.427 ops/s
[info]                  ·gc.alloc.rate:               1201.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          76239.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85063.096 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 24638.390 ops/s
[info]                  ·gc.alloc.rate:                   1206.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              77057.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85657.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 258.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24241.892 ±(99.9%) 1711.552 ops/s [Average]
[info]   (min, avg, max) = (23807.226, 24241.892, 24798.427), stdev = 444.485
[info]   CI (99.9%): [22530.340, 25953.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1171.730 ±(99.9%) 114.815 MB/sec [Average]
[info]   (min, avg, max) = (1147.116, 1171.730, 1206.810), stdev = 29.817
[info]   CI (99.9%): [1056.915, 1286.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76048.547 ±(99.9%) 2551.832 B/op [Average]
[info]   (min, avg, max) = (75289.022, 76048.547, 77057.207), stdev = 662.703
[info]   CI (99.9%): [73496.715, 78600.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1205.673 ±(99.9%) 1154.148 MB/sec [Average]
[info]   (min, avg, max) = (669.509, 1205.673, 1341.509), stdev = 299.728
[info]   CI (99.9%): [51.525, 2359.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78183.927 ±(99.9%) 73909.346 B/op [Average]
[info]   (min, avg, max) = (43942.077, 78183.927, 88423.509), stdev = 19194.022
[info]   CI (99.9%): [4274.581, 152093.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.825 ±(99.9%) 6.926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.825, 4.042), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   52.719 ±(99.9%) 442.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.719, 258.114), stdev = 114.828
[info]   CI (99.9%): [≈ 0, 494.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1693.414 ops/s
[info] # Warmup Iteration   2: 11432.636 ops/s
[info] # Warmup Iteration   3: 13795.947 ops/s
[info] # Warmup Iteration   4: 13866.568 ops/s
[info] # Warmup Iteration   5: 13860.774 ops/s
[info] Iteration   1: 13753.695 ops/s
[info]                  ·gc.alloc.rate:               1350.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          154499.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152747.423 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 13795.690 ops/s
[info]                  ·gc.alloc.rate:                   1336.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              152473.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152282.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13787.066 ops/s
[info]                  ·gc.alloc.rate:               1335.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          152404.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152457.932 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13017.080 ops/s
[info]                  ·gc.alloc.rate:               1298.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          157017.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161688.019 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13707.335 ops/s
[info]                  ·gc.alloc.rate:               1340.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          153927.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153756.987 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13612.173 ±(99.9%) 1287.933 ops/s [Average]
[info]   (min, avg, max) = (13017.080, 13612.173, 13795.690), stdev = 334.472
[info]   CI (99.9%): [12324.240, 14900.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1332.349 ±(99.9%) 75.819 MB/sec [Average]
[info]   (min, avg, max) = (1298.680, 1332.349, 1350.194), stdev = 19.690
[info]   CI (99.9%): [1256.529, 1408.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154064.563 ±(99.9%) 7258.790 B/op [Average]
[info]   (min, avg, max) = (152404.382, 154064.563, 157017.269), stdev = 1885.085
[info]   CI (99.9%): [146805.773, 161323.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.473 ±(99.9%) 6.865 MB/sec [Average]
[info]   (min, avg, max) = (1334.878, 1336.473, 1339.192), stdev = 1.783
[info]   CI (99.9%): [1329.608, 1343.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   154586.574 ±(99.9%) 15443.561 B/op [Average]
[info]   (min, avg, max) = (152282.506, 154586.574, 161688.019), stdev = 4010.644
[info]   CI (99.9%): [139143.012, 170030.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.475 ±(99.9%) 4.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.375), stdev = 1.062
[info]   CI (99.9%): [≈ 0, 4.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1995.030 ops/s
[info] # Warmup Iteration   2: 11516.477 ops/s
[info] # Warmup Iteration   3: 12887.543 ops/s
[info] # Warmup Iteration   4: 13457.673 ops/s
[info] # Warmup Iteration   5: 12924.106 ops/s
[info] Iteration   1: 12845.856 ops/s
[info]                  ·gc.alloc.rate:               1156.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          141646.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163554.351 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 12945.683 ops/s
[info]                  ·gc.alloc.rate:               1159.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          140970.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162412.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 13349.640 ops/s
[info]                  ·gc.alloc.rate:               1176.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          138729.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78762.954 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13366.304 ops/s
[info]                  ·gc.alloc.rate:                   1202.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              141548.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157494.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 12822.566 ops/s
[info]                  ·gc.alloc.rate:                   1156.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              141979.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164338.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13066.010 ±(99.9%) 1041.871 ops/s [Average]
[info]   (min, avg, max) = (12822.566, 13066.010, 13366.304), stdev = 270.570
[info]   CI (99.9%): [12024.139, 14107.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1170.194 ±(99.9%) 76.195 MB/sec [Average]
[info]   (min, avg, max) = (1156.134, 1170.194, 1202.150), stdev = 19.787
[info]   CI (99.9%): [1094.000, 1246.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   140975.067 ±(99.9%) 5033.002 B/op [Average]
[info]   (min, avg, max) = (138729.228, 140975.067, 141979.838), stdev = 1307.055
[info]   CI (99.9%): [135942.065, 146008.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.005 ±(99.9%) 1151.442 MB/sec [Average]
[info]   (min, avg, max) = (668.096, 1203.005, 1338.426), stdev = 299.026
[info]   CI (99.9%): [51.562, 2354.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   145312.489 ±(99.9%) 143619.160 B/op [Average]
[info]   (min, avg, max) = (78762.954, 145312.489, 164338.227), stdev = 37297.440
[info]   CI (99.9%): [1693.329, 288931.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.853 ±(99.9%) 7.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 4.245), stdev = 1.896
[info]   CI (99.9%): [≈ 0, 8.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   104.735 ±(99.9%) 896.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.735, 521.222), stdev = 232.826
[info]   CI (99.9%): [≈ 0, 1001.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110163.297 ops/s
[info] # Warmup Iteration   2: 263238.545 ops/s
[info] # Warmup Iteration   3: 261003.819 ops/s
[info] # Warmup Iteration   4: 279241.038 ops/s
[info] # Warmup Iteration   5: 276172.704 ops/s
[info] Iteration   1: 265683.497 ops/s
[info]                  ·gc.alloc.rate:                   1600.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              9483.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11947.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 276840.718 ops/s
[info]                  ·gc.alloc.rate:                   1631.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              9272.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7651.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 279135.109 ops/s
[info]                  ·gc.alloc.rate:                   1667.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              9403.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7584.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 269469.772 ops/s
[info]                  ·gc.alloc.rate:                   1639.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              9569.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11769.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 279457.898 ops/s
[info]                  ·gc.alloc.rate:                   1669.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              9403.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7563.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   274117.399 ±(99.9%) 23880.665 ops/s [Average]
[info]   (min, avg, max) = (265683.497, 274117.399, 279457.898), stdev = 6201.733
[info]   CI (99.9%): [250236.734, 297998.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1641.717 ±(99.9%) 109.735 MB/sec [Average]
[info]   (min, avg, max) = (1600.846, 1641.717, 1669.621), stdev = 28.498
[info]   CI (99.9%): [1531.982, 1751.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9426.616 ±(99.9%) 423.446 B/op [Average]
[info]   (min, avg, max) = (9272.933, 9426.616, 9569.642), stdev = 109.968
[info]   CI (99.9%): [9003.170, 9850.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.378 ±(99.9%) 1416.673 MB/sec [Average]
[info]   (min, avg, max) = (1342.854, 1613.378, 2016.858), stdev = 367.905
[info]   CI (99.9%): [196.705, 3030.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9303.418 ±(99.9%) 8986.099 B/op [Average]
[info]   (min, avg, max) = (7563.091, 9303.418, 11947.920), stdev = 2333.662
[info]   CI (99.9%): [317.318, 18289.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.500 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.641, 2.727), stdev = 1.169
[info]   CI (99.9%): [≈ 0, 5.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.651 ±(99.9%) 25.572 B/op [Average]
[info]   (min, avg, max) = (0.234, 3.651, 15.503), stdev = 6.641
[info]   CI (99.9%): [≈ 0, 29.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025.396 ops/s
[info] # Warmup Iteration   2: 10472.105 ops/s
[info] # Warmup Iteration   3: 12707.454 ops/s
[info] # Warmup Iteration   4: 12725.722 ops/s
[info] # Warmup Iteration   5: 12723.202 ops/s
[info] Iteration   1: 12388.041 ops/s
[info]                  ·gc.alloc.rate:                   1487.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              189002.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168994.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12320.685 ops/s
[info]                  ·gc.alloc.rate:                   1499.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              191442.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170267.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12789.957 ops/s
[info]                  ·gc.alloc.rate:                   1543.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              189929.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164352.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12761.675 ops/s
[info]                  ·gc.alloc.rate:                   1551.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              191379.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165041.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.748 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12704.780 ops/s
[info]                  ·gc.alloc.rate:               1572.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          194761.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249230.706 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12593.028 ±(99.9%) 852.163 ops/s [Average]
[info]   (min, avg, max) = (12320.685, 12593.028, 12789.957), stdev = 221.304
[info]   CI (99.9%): [11740.865, 13445.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1530.980 ±(99.9%) 138.662 MB/sec [Average]
[info]   (min, avg, max) = (1487.950, 1530.980, 1572.467), stdev = 36.010
[info]   CI (99.9%): [1392.318, 1669.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   191303.248 ±(99.9%) 8429.580 B/op [Average]
[info]   (min, avg, max) = (189002.083, 191303.248, 194761.875), stdev = 2189.135
[info]   CI (99.9%): [182873.667, 199732.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.980 ±(99.9%) 1167.304 MB/sec [Average]
[info]   (min, avg, max) = (1330.434, 1469.980, 2012.237), stdev = 303.145
[info]   CI (99.9%): [302.675, 2637.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   183577.129 ±(99.9%) 141656.852 B/op [Average]
[info]   (min, avg, max) = (164352.320, 183577.129, 249230.706), stdev = 36787.835
[info]   CI (99.9%): [41920.276, 325233.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.890 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.541), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.964 ±(99.9%) 109.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.964, 66.748), stdev = 28.471
[info]   CI (99.9%): [≈ 0, 125.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6564.489 ops/s
[info] # Warmup Iteration   2: 32025.060 ops/s
[info] # Warmup Iteration   3: 32809.402 ops/s
[info] # Warmup Iteration   4: 32271.879 ops/s
[info] # Warmup Iteration   5: 32195.260 ops/s
[info] Iteration   1: 32133.741 ops/s
[info]                  ·gc.alloc.rate:               1382.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          67704.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65660.388 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 33007.281 ops/s
[info]                  ·gc.alloc.rate:                   1426.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              67995.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63949.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33385.089 ops/s
[info]                  ·gc.alloc.rate:                   1441.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              67961.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63278.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33291.203 ops/s
[info]                  ·gc.alloc.rate:                   1435.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              67884.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63394.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33396.720 ops/s
[info]                  ·gc.alloc.rate:                   1455.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              68566.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63067.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33042.807 ±(99.9%) 2048.252 ops/s [Average]
[info]   (min, avg, max) = (32133.741, 33042.807, 33396.720), stdev = 531.925
[info]   CI (99.9%): [30994.555, 35091.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1428.227 ±(99.9%) 106.605 MB/sec [Average]
[info]   (min, avg, max) = (1382.394, 1428.227, 1455.102), stdev = 27.685
[info]   CI (99.9%): [1321.621, 1534.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68022.504 ±(99.9%) 1248.425 B/op [Average]
[info]   (min, avg, max) = (67704.930, 68022.504, 68566.654), stdev = 324.212
[info]   CI (99.9%): [66774.079, 69270.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340.710 ±(99.9%) 5.479 MB/sec [Average]
[info]   (min, avg, max) = (1338.405, 1340.710, 1342.267), stdev = 1.423
[info]   CI (99.9%): [1335.231, 1346.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63870.290 ±(99.9%) 4052.807 B/op [Average]
[info]   (min, avg, max) = (63067.756, 63870.290, 65660.388), stdev = 1052.501
[info]   CI (99.9%): [59817.483, 67923.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.938 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.497), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 6.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34.943 ±(99.9%) 279.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.943, 164.870), stdev = 72.700
[info]   CI (99.9%): [≈ 0, 314.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33073.008 ops/s
[info] # Warmup Iteration   2: 73732.430 ops/s
[info] # Warmup Iteration   3: 79708.413 ops/s
[info] # Warmup Iteration   4: 80281.964 ops/s
[info] # Warmup Iteration   5: 79084.818 ops/s
[info] Iteration   1: 81151.030 ops/s
[info]                  ·gc.alloc.rate:                   2041.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              39587.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39022.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 81428.789 ops/s
[info]                  ·gc.alloc.rate:                   2046.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              39550.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38806.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.840 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81569.083 ops/s
[info]                  ·gc.alloc.rate:                   2051.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              39588.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38689.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 81219.299 ops/s
[info]                  ·gc.alloc.rate:               2056.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          39839.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38891.126 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 80060.707 ops/s
[info]                  ·gc.alloc.rate:                   2030.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              39904.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39509.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   81085.781 ±(99.9%) 2297.592 ops/s [Average]
[info]   (min, avg, max) = (80060.707, 81085.781, 81569.083), stdev = 596.677
[info]   CI (99.9%): [78788.189, 83383.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2045.388 ±(99.9%) 38.108 MB/sec [Average]
[info]   (min, avg, max) = (2030.766, 2045.388, 2056.218), stdev = 9.897
[info]   CI (99.9%): [2007.280, 2083.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39693.910 ±(99.9%) 634.442 B/op [Average]
[info]   (min, avg, max) = (39550.068, 39693.910, 39904.403), stdev = 164.763
[info]   CI (99.9%): [39059.468, 40328.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2008.736 ±(99.9%) 10.492 MB/sec [Average]
[info]   (min, avg, max) = (2005.187, 2008.736, 2012.084), stdev = 2.725
[info]   CI (99.9%): [1998.243, 2019.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38983.727 ±(99.9%) 1224.638 B/op [Average]
[info]   (min, avg, max) = (38689.047, 38983.727, 39509.358), stdev = 318.035
[info]   CI (99.9%): [37759.088, 40208.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 5.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.352), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.530 ±(99.9%) 109.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.530, 65.000), stdev = 28.357
[info]   CI (99.9%): [≈ 0, 123.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362546.813 ops/s
[info] # Warmup Iteration   2: 596252.507 ops/s
[info] # Warmup Iteration   3: 631656.405 ops/s
[info] # Warmup Iteration   4: 626276.246 ops/s
[info] # Warmup Iteration   5: 632734.842 ops/s
[info] Iteration   1: 632659.498 ops/s
[info]                  ·gc.alloc.rate:               890.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          2214.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1670.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 625771.885 ops/s
[info]                  ·gc.alloc.rate:                   894.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              2247.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3378.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 632214.225 ops/s
[info]                  ·gc.alloc.rate:               893.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          2223.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1672.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 625452.184 ops/s
[info]                  ·gc.alloc.rate:               884.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          2226.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1691.306 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 632463.912 ops/s
[info]                  ·gc.alloc.rate:               881.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          2193.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1672.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   629712.341 ±(99.9%) 14432.524 ops/s [Average]
[info]   (min, avg, max) = (625452.184, 629712.341, 632659.498), stdev = 3748.081
[info]   CI (99.9%): [615279.816, 644144.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   888.823 ±(99.9%) 20.764 MB/sec [Average]
[info]   (min, avg, max) = (881.577, 888.823, 894.033), stdev = 5.392
[info]   CI (99.9%): [868.059, 909.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2221.306 ±(99.9%) 75.536 B/op [Average]
[info]   (min, avg, max) = (2193.722, 2221.306, 2247.872), stdev = 19.617
[info]   CI (99.9%): [2145.769, 2296.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.284 ±(99.9%) 1156.805 MB/sec [Average]
[info]   (min, avg, max) = (671.499, 806.284, 1343.689), stdev = 300.419
[info]   CI (99.9%): [≈ 0, 1963.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2017.060 ±(99.9%) 2930.663 B/op [Average]
[info]   (min, avg, max) = (1670.369, 2017.060, 3378.444), stdev = 761.084
[info]   CI (99.9%): [≈ 0, 4947.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 430451.210 ops/s
[info] # Warmup Iteration   2: 686760.729 ops/s
[info] # Warmup Iteration   3: 714241.357 ops/s
[info] # Warmup Iteration   4: 714211.458 ops/s
[info] # Warmup Iteration   5: 714277.369 ops/s
[info] Iteration   1: 715838.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 715804.077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 716195.704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 717037.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 717505.164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   716476.244 ±(99.9%) 2927.142 ops/s [Average]
[info]   (min, avg, max) = (715804.077, 716476.244, 717505.164), stdev = 760.170
[info]   CI (99.9%): [713549.102, 719403.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17608.900 ops/s
[info] # Warmup Iteration   2: 69681.513 ops/s
[info] # Warmup Iteration   3: 72782.194 ops/s
[info] # Warmup Iteration   4: 71829.254 ops/s
[info] # Warmup Iteration   5: 71764.883 ops/s
[info] Iteration   1: 72295.552 ops/s
[info]                  ·gc.alloc.rate:                   2091.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              45508.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43737.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 72667.882 ops/s
[info]                  ·gc.alloc.rate:                   2116.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              45821.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43396.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 72382.095 ops/s
[info]                  ·gc.alloc.rate:               2094.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          45527.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43512.022 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 74652.325 ops/s
[info]                  ·gc.alloc.rate:                   2172.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              45789.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42209.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 74425.004 ops/s
[info]                  ·gc.alloc.rate:                   2165.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              45800.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42409.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   73284.572 ±(99.9%) 4450.896 ops/s [Average]
[info]   (min, avg, max) = (72295.552, 73284.572, 74652.325), stdev = 1155.884
[info]   CI (99.9%): [68833.676, 77735.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2127.962 ±(99.9%) 149.413 MB/sec [Average]
[info]   (min, avg, max) = (2091.003, 2127.962, 2172.216), stdev = 38.802
[info]   CI (99.9%): [1978.549, 2277.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45689.491 ±(99.9%) 605.978 B/op [Average]
[info]   (min, avg, max) = (45508.216, 45689.491, 45821.793), stdev = 157.371
[info]   CI (99.9%): [45083.513, 46295.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.710 ±(99.9%) 12.299 MB/sec [Average]
[info]   (min, avg, max) = (2001.471, 2004.710, 2009.656), stdev = 3.194
[info]   CI (99.9%): [1992.411, 2017.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   43053.091 ±(99.9%) 2670.190 B/op [Average]
[info]   (min, avg, max) = (42209.597, 43053.091, 43737.798), stdev = 693.440
[info]   CI (99.9%): [40382.901, 45723.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 7.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 4.123), stdev = 1.824
[info]   CI (99.9%): [≈ 0, 7.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.753 ±(99.9%) 152.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.753, 89.731), stdev = 39.697
[info]   CI (99.9%): [≈ 0, 171.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3783.544 ops/s
[info] # Warmup Iteration   2: 15030.883 ops/s
[info] # Warmup Iteration   3: 16880.355 ops/s
[info] # Warmup Iteration   4: 16598.213 ops/s
[info] # Warmup Iteration   5: 16342.266 ops/s
[info] Iteration   1: 16954.087 ops/s
[info]                  ·gc.alloc.rate:                   887.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              82431.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62270.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16135.511 ops/s
[info]                  ·gc.alloc.rate:               859.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          83857.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65426.360 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16764.839 ops/s
[info]                  ·gc.alloc.rate:               941.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          88327.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125944.183 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 17124.543 ops/s
[info]                  ·gc.alloc.rate:                   900.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              82748.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61679.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17150.751 ops/s
[info]                  ·gc.alloc.rate:               896.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          82274.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61585.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16825.946 ±(99.9%) 1601.044 ops/s [Average]
[info]   (min, avg, max) = (16135.511, 16825.946, 17150.751), stdev = 415.786
[info]   CI (99.9%): [15224.902, 18426.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   897.246 ±(99.9%) 112.898 MB/sec [Average]
[info]   (min, avg, max) = (859.797, 897.246, 941.271), stdev = 29.319
[info]   CI (99.9%): [784.348, 1010.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83927.885 ±(99.9%) 9765.850 B/op [Average]
[info]   (min, avg, max) = (82274.296, 83927.885, 88327.626), stdev = 2536.160
[info]   CI (99.9%): [74162.035, 93693.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   805.234 ±(99.9%) 1155.720 MB/sec [Average]
[info]   (min, avg, max) = (670.786, 805.234, 1342.135), stdev = 300.137
[info]   CI (99.9%): [≈ 0, 1960.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75381.111 ±(99.9%) 109009.199 B/op [Average]
[info]   (min, avg, max) = (61585.655, 75381.111, 125944.183), stdev = 28309.343
[info]   CI (99.9%): [≈ 0, 184390.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.769 ±(99.9%) 4.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 1.932), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2273.207 ops/s
[info] # Warmup Iteration   2: 14332.070 ops/s
[info] # Warmup Iteration   3: 17190.028 ops/s
[info] # Warmup Iteration   4: 16578.152 ops/s
[info] # Warmup Iteration   5: 17263.733 ops/s
[info] Iteration   1: 17318.283 ops/s
[info]                  ·gc.alloc.rate:               761.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          69207.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60658.920 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17286.644 ops/s
[info]                  ·gc.alloc.rate:               760.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          69279.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60801.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17002.627 ops/s
[info]                  ·gc.alloc.rate:               765.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          70836.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61813.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 17361.236 ops/s
[info]                  ·gc.alloc.rate:               763.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          69185.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60599.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17376.048 ops/s
[info]                  ·gc.alloc.rate:               759.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          68795.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60546.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17268.967 ±(99.9%) 589.228 ops/s [Average]
[info]   (min, avg, max) = (17002.627, 17268.967, 17376.048), stdev = 153.021
[info]   CI (99.9%): [16679.739, 17858.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   762.169 ±(99.9%) 8.699 MB/sec [Average]
[info]   (min, avg, max) = (759.562, 762.169, 765.469), stdev = 2.259
[info]   CI (99.9%): [753.470, 770.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69460.991 ±(99.9%) 3049.643 B/op [Average]
[info]   (min, avg, max) = (68795.453, 69460.991, 70836.853), stdev = 791.983
[info]   CI (99.9%): [66411.348, 72510.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.069 ±(99.9%) 1.539 MB/sec [Average]
[info]   (min, avg, max) = (667.578, 668.069, 668.491), stdev = 0.400
[info]   CI (99.9%): [666.530, 669.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60884.007 ±(99.9%) 2033.704 B/op [Average]
[info]   (min, avg, max) = (60546.983, 60884.007, 61813.327), stdev = 528.147
[info]   CI (99.9%): [58850.302, 62917.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72122.522 ops/s
[info] # Warmup Iteration   2: 114393.995 ops/s
[info] # Warmup Iteration   3: 122372.301 ops/s
[info] # Warmup Iteration   4: 121944.866 ops/s
[info] # Warmup Iteration   5: 122085.417 ops/s
[info] Iteration   1: 122401.423 ops/s
[info]                  ·gc.alloc.rate:      307.359 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 122154.191 ops/s
[info]                  ·gc.alloc.rate:               318.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          4107.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6591.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 121878.374 ops/s
[info]                  ·gc.alloc.rate:                   319.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              4119.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6606.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 122143.357 ops/s
[info]                  ·gc.alloc.rate:      306.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 121454.678 ops/s
[info]                  ·gc.alloc.rate:               326.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          4224.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8692.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   122006.405 ±(99.9%) 1384.934 ops/s [Average]
[info]   (min, avg, max) = (121454.678, 122006.405, 122401.423), stdev = 359.663
[info]   CI (99.9%): [120621.471, 123391.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   315.614 ±(99.9%) 32.157 MB/sec [Average]
[info]   (min, avg, max) = (306.711, 315.614, 326.052), stdev = 8.351
[info]   CI (99.9%): [283.457, 347.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4071.170 ±(99.9%) 454.366 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4071.170, 4224.977), stdev = 117.997
[info]   CI (99.9%): [3616.803, 4525.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.851 ±(99.9%) 1217.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.851, 670.830), stdev = 316.074
[info]   CI (99.9%): [≈ 0, 1555.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4378.104 ±(99.9%) 15737.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4378.104, 8692.599), stdev = 4087.021
[info]   CI (99.9%): [≈ 0, 20115.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.269), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1638.158 ops/s
[info] # Warmup Iteration   2: 11830.234 ops/s
[info] # Warmup Iteration   3: 14383.752 ops/s
[info] # Warmup Iteration   4: 14501.230 ops/s
[info] # Warmup Iteration   5: 14461.574 ops/s
[info] Iteration   1: 14494.555 ops/s
[info]                  ·gc.alloc.rate:                   1093.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              118689.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72470.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14439.711 ops/s
[info]                  ·gc.alloc.rate:                   1105.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              120530.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145575.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14457.337 ops/s
[info]                  ·gc.alloc.rate:                   1099.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              119635.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145466.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 14274.992 ops/s
[info]                  ·gc.alloc.rate:               1084.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          119552.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73738.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13956.376 ops/s
[info]                  ·gc.alloc.rate:                   1068.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              120471.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150875.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14324.594 ±(99.9%) 856.291 ops/s [Average]
[info]   (min, avg, max) = (13956.376, 14324.594, 14494.555), stdev = 222.376
[info]   CI (99.9%): [13468.304, 15180.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1090.303 ±(99.9%) 55.463 MB/sec [Average]
[info]   (min, avg, max) = (1068.767, 1090.303, 1105.839), stdev = 14.403
[info]   CI (99.9%): [1034.840, 1145.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119775.992 ±(99.9%) 2922.817 B/op [Average]
[info]   (min, avg, max) = (118689.034, 119775.992, 120530.876), stdev = 759.046
[info]   CI (99.9%): [116853.175, 122698.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1069.418 ±(99.9%) 1410.415 MB/sec [Average]
[info]   (min, avg, max) = (667.537, 1069.418, 1338.493), stdev = 366.280
[info]   CI (99.9%): [≈ 0, 2479.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117625.115 ±(99.9%) 156731.813 B/op [Average]
[info]   (min, avg, max) = (72470.213, 117625.115, 150875.055), stdev = 40702.754
[info]   CI (99.9%): [≈ 0, 274356.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.790), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87.714 ±(99.9%) 730.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.714, 427.235), stdev = 189.814
[info]   CI (99.9%): [≈ 0, 818.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15499.901 ops/s
[info] # Warmup Iteration   2: 44266.700 ops/s
[info] # Warmup Iteration   3: 45945.698 ops/s
[info] # Warmup Iteration   4: 46071.454 ops/s
[info] # Warmup Iteration   5: 45867.003 ops/s
[info] Iteration   1: 46561.409 ops/s
[info]                  ·gc.alloc.rate:               1423.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          48132.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45371.943 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 47095.569 ops/s
[info]                  ·gc.alloc.rate:                   1448.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              48397.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44879.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 46462.730 ops/s
[info]                  ·gc.alloc.rate:                   1430.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              48460.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45513.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47378.120 ops/s
[info]                  ·gc.alloc.rate:                   1457.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              48402.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44611.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47399.844 ops/s
[info]                  ·gc.alloc.rate:                   1459.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              48440.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44503.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   46979.534 ±(99.9%) 1712.249 ops/s [Average]
[info]   (min, avg, max) = (46462.730, 46979.534, 47399.844), stdev = 444.666
[info]   CI (99.9%): [45267.285, 48691.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1443.849 ±(99.9%) 61.010 MB/sec [Average]
[info]   (min, avg, max) = (1423.954, 1443.849, 1459.318), stdev = 15.844
[info]   CI (99.9%): [1382.839, 1504.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48366.615 ±(99.9%) 515.084 B/op [Average]
[info]   (min, avg, max) = (48132.012, 48366.615, 48460.634), stdev = 133.766
[info]   CI (99.9%): [47851.532, 48881.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.523 ±(99.9%) 4.300 MB/sec [Average]
[info]   (min, avg, max) = (1340.715, 1342.523, 1343.643), stdev = 1.117
[info]   CI (99.9%): [1338.222, 1346.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44976.164 ±(99.9%) 1733.917 B/op [Average]
[info]   (min, avg, max) = (44503.542, 44976.164, 45513.736), stdev = 450.293
[info]   CI (99.9%): [43242.247, 46710.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 4.847 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.914), stdev = 1.259
[info]   CI (99.9%): [≈ 0, 5.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.341 ±(99.9%) 164.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.341, 98.722), stdev = 42.654
[info]   CI (99.9%): [≈ 0, 187.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17701.315 ops/s
[info] # Warmup Iteration   2: 71167.249 ops/s
[info] # Warmup Iteration   3: 74787.288 ops/s
[info] # Warmup Iteration   4: 76297.564 ops/s
[info] # Warmup Iteration   5: 76516.731 ops/s
[info] Iteration   1: 76673.819 ops/s
[info]                  ·gc.alloc.rate:               1621.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          33285.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27483.997 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 76339.973 ops/s
[info]                  ·gc.alloc.rate:                   1629.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              33585.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41442.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.432 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 76769.594 ops/s
[info]                  ·gc.alloc.rate:                   1622.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              33262.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27457.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 76108.929 ops/s
[info]                  ·gc.alloc.rate:                   1620.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              33503.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27647.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 76314.558 ops/s
[info]                  ·gc.alloc.rate:               1639.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          33805.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41337.471 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   76441.375 ±(99.9%) 1052.155 ops/s [Average]
[info]   (min, avg, max) = (76108.929, 76441.375, 76769.594), stdev = 273.241
[info]   CI (99.9%): [75389.220, 77493.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1626.583 ±(99.9%) 30.294 MB/sec [Average]
[info]   (min, avg, max) = (1620.541, 1626.583, 1639.253), stdev = 7.867
[info]   CI (99.9%): [1596.288, 1656.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33488.280 ±(99.9%) 866.387 B/op [Average]
[info]   (min, avg, max) = (33262.081, 33488.280, 33805.018), stdev = 224.998
[info]   CI (99.9%): [32621.893, 34354.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.060 ±(99.9%) 1410.944 MB/sec [Average]
[info]   (min, avg, max) = (1337.256, 1606.060, 2010.375), stdev = 366.418
[info]   CI (99.9%): [195.117, 3017.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   33073.667 ±(99.9%) 29234.364 B/op [Average]
[info]   (min, avg, max) = (27457.535, 33073.667, 41442.299), stdev = 7592.071
[info]   CI (99.9%): [3839.303, 62308.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.417), stdev = 1.493
[info]   CI (99.9%): [≈ 0, 6.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.624 ±(99.9%) 118.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.624, 70.432), stdev = 30.771
[info]   CI (99.9%): [≈ 0, 134.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151285.493 ops/s
[info] # Warmup Iteration   2: 271776.659 ops/s
[info] # Warmup Iteration   3: 285208.001 ops/s
[info] # Warmup Iteration   4: 283710.742 ops/s
[info] # Warmup Iteration   5: 294077.295 ops/s
[info] Iteration   1: 289940.991 ops/s
[info]                  ·gc.alloc.rate:                   575.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3124.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3641.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 299938.063 ops/s
[info]                  ·gc.alloc.rate:               590.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          3096.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3519.826 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 302547.513 ops/s
[info]                  ·gc.alloc.rate:      579.789 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 301251.711 ops/s
[info]                  ·gc.alloc.rate:                   600.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              3136.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3506.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 283525.455 ops/s
[info]                  ·gc.alloc.rate:               562.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          3123.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3725.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   295440.747 ±(99.9%) 32027.589 ops/s [Average]
[info]   (min, avg, max) = (283525.455, 295440.747, 302547.513), stdev = 8317.463
[info]   CI (99.9%): [263413.158, 327468.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   581.697 ±(99.9%) 55.221 MB/sec [Average]
[info]   (min, avg, max) = (562.620, 581.697, 600.336), stdev = 14.341
[info]   CI (99.9%): [526.475, 636.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3099.349 ±(99.9%) 188.064 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3099.349, 3136.319), stdev = 48.840
[info]   CI (99.9%): [2911.285, 3287.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.771 ±(99.9%) 1155.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.771, 671.157), stdev = 300.064
[info]   CI (99.9%): [≈ 0, 1692.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2878.588 ±(99.9%) 6206.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2878.588, 3725.501), stdev = 1611.714
[info]   CI (99.9%): [≈ 0, 9084.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.241), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.483
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175043.816 ops/s
[info] # Warmup Iteration   2: 350651.714 ops/s
[info] # Warmup Iteration   3: 363712.964 ops/s
[info] # Warmup Iteration   4: 363383.875 ops/s
[info] # Warmup Iteration   5: 363655.906 ops/s
[info] Iteration   1: 362621.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 363462.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 362353.715 ops/s
[info]                  ·gc.alloc.rate:      0.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.272 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 362290.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 362674.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   362680.454 ±(99.9%) 1800.130 ops/s [Average]
[info]   (min, avg, max) = (362290.261, 362680.454, 363462.521), stdev = 467.488
[info]   CI (99.9%): [360880.325, 364480.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.059 ±(99.9%) 0.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.059, 0.293), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.255 ±(99.9%) 2.188 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.255, 1.272), stdev = 0.568
[info]   CI (99.9%): [≈ 0, 2.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24935.673 ops/s
[info] # Warmup Iteration   2: 63641.124 ops/s
[info] # Warmup Iteration   3: 66179.072 ops/s
[info] # Warmup Iteration   4: 66444.957 ops/s
[info] # Warmup Iteration   5: 66598.294 ops/s
[info] Iteration   1: 66724.802 ops/s
[info]                  ·gc.alloc.rate:                   1521.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              35880.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31645.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 67920.081 ops/s
[info]                  ·gc.alloc.rate:                   1570.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              36382.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31086.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 66980.736 ops/s
[info]                  ·gc.alloc.rate:                   1563.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              36737.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47287.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 68542.556 ops/s
[info]                  ·gc.alloc.rate:               1597.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          36660.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30729.799 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 68956.083 ops/s
[info]                  ·gc.alloc.rate:               1569.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          35831.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30529.240 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   67824.852 ±(99.9%) 3716.665 ops/s [Average]
[info]   (min, avg, max) = (66724.802, 67824.852, 68956.083), stdev = 965.206
[info]   CI (99.9%): [64108.187, 71541.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1564.480 ±(99.9%) 105.206 MB/sec [Average]
[info]   (min, avg, max) = (1521.403, 1564.480, 1597.170), stdev = 27.322
[info]   CI (99.9%): [1459.274, 1669.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36298.752 ±(99.9%) 1637.913 B/op [Average]
[info]   (min, avg, max) = (35831.771, 36298.752, 36737.997), stdev = 425.361
[info]   CI (99.9%): [34660.839, 37936.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.528 ±(99.9%) 1158.849 MB/sec [Average]
[info]   (min, avg, max) = (1337.563, 1474.528, 2012.872), stdev = 300.949
[info]   CI (99.9%): [315.679, 2633.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34255.825 ±(99.9%) 28099.304 B/op [Average]
[info]   (min, avg, max) = (30529.240, 34255.825, 47287.586), stdev = 7297.300
[info]   CI (99.9%): [6156.522, 62355.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.790), stdev = 1.686
[info]   CI (99.9%): [≈ 0, 7.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.195 ±(99.9%) 152.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.195, 89.026), stdev = 39.599
[info]   CI (99.9%): [≈ 0, 170.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23858.898 ops/s
[info] # Warmup Iteration   2: 132688.702 ops/s
[info] # Warmup Iteration   3: 135465.469 ops/s
[info] # Warmup Iteration   4: 143325.518 ops/s
[info] # Warmup Iteration   5: 142693.747 ops/s
[info] Iteration   1: 141202.552 ops/s
[info]                  ·gc.alloc.rate:                   1846.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              20581.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22460.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 144739.846 ops/s
[info]                  ·gc.alloc.rate:                   1889.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              20546.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21904.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 143622.817 ops/s
[info]                  ·gc.alloc.rate:                   1872.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              20519.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14680.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 144248.865 ops/s
[info]                  ·gc.alloc.rate:                   1882.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              20537.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21898.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 143622.909 ops/s
[info]                  ·gc.alloc.rate:               1888.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          20690.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22011.855 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   143487.398 ±(99.9%) 5239.452 ops/s [Average]
[info]   (min, avg, max) = (141202.552, 143487.398, 144739.846), stdev = 1360.669
[info]   CI (99.9%): [138247.945, 148726.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1875.910 ±(99.9%) 68.059 MB/sec [Average]
[info]   (min, avg, max) = (1846.700, 1875.910, 1889.651), stdev = 17.675
[info]   CI (99.9%): [1807.851, 1943.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20575.140 ±(99.9%) 262.593 B/op [Average]
[info]   (min, avg, max) = (20519.388, 20575.140, 20690.264), stdev = 68.194
[info]   CI (99.9%): [20312.548, 20837.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.102 ±(99.9%) 1156.948 MB/sec [Average]
[info]   (min, avg, max) = (1339.668, 1877.102, 2015.284), stdev = 300.456
[info]   CI (99.9%): [720.154, 3034.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20591.160 ±(99.9%) 12754.151 B/op [Average]
[info]   (min, avg, max) = (14680.458, 20591.160, 22460.364), stdev = 3312.213
[info]   CI (99.9%): [7837.008, 33345.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 5.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.497), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.337 ±(99.9%) 63.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.337, 38.029), stdev = 16.611
[info]   CI (99.9%): [≈ 0, 72.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.899
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.674 ops/s
[info] # Warmup Iteration   2: 767823.985 ops/s
[info] # Warmup Iteration   3: 842212.630 ops/s
[info] # Warmup Iteration   4: 854528.964 ops/s
[info] # Warmup Iteration   5: 854588.605 ops/s
[info] Iteration   1: 859853.088 ops/s
[info]                  ·gc.alloc.rate:      476.401 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 857298.955 ops/s
[info]                  ·gc.alloc.rate:               487.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1222.915 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 854478.539 ops/s
[info]                  ·gc.alloc.rate:                   495.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 856720.651 ops/s
[info]                  ·gc.alloc.rate:                   494.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              908.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 860681.049 ops/s
[info]                  ·gc.alloc.rate:      476.867 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   857806.457 ±(99.9%) 9619.590 ops/s [Average]
[info]   (min, avg, max) = (854478.539, 857806.457, 860681.049), stdev = 2498.177
[info]   CI (99.9%): [848186.867, 867426.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   486.186 ±(99.9%) 35.540 MB/sec [Average]
[info]   (min, avg, max) = (476.401, 486.186, 495.564), stdev = 9.230
[info]   CI (99.9%): [450.645, 521.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   892.030 ±(99.9%) 74.757 B/op [Average]
[info]   (min, avg, max) = (872.001, 892.030, 912.791), stdev = 19.414
[info]   CI (99.9%): [817.273, 966.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.791 ±(99.9%) 1405.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.791, 666.498), stdev = 364.957
[info]   CI (99.9%): [≈ 0, 1805.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   734.866 ±(99.9%) 2583.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 734.866, 1227.006), stdev = 670.839
[info]   CI (99.9%): [≈ 0, 3318.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.077), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106765.830 ops/s
[info] # Warmup Iteration   2: 361521.856 ops/s
[info] # Warmup Iteration   3: 389833.135 ops/s
[info] # Warmup Iteration   4: 392797.885 ops/s
[info] # Warmup Iteration   5: 394658.324 ops/s
[info] Iteration   1: 392671.973 ops/s
[info]                  ·gc.alloc.rate:                   401.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2050.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 392666.108 ops/s
[info]                  ·gc.alloc.rate:               402.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          1614.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2050.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 394444.659 ops/s
[info]                  ·gc.alloc.rate:      393.325 MB/sec
[info]                  ·gc.alloc.rate.norm: 1569.173 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 392724.372 ops/s
[info]                  ·gc.alloc.rate:                   413.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1657.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2670.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 392615.527 ops/s
[info]                  ·gc.alloc.rate:               409.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          1642.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2671.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   393024.528 ±(99.9%) 3060.539 ops/s [Average]
[info]   (min, avg, max) = (392615.527, 393024.528, 394444.659), stdev = 794.812
[info]   CI (99.9%): [389963.989, 396085.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   404.188 ±(99.9%) 30.304 MB/sec [Average]
[info]   (min, avg, max) = (393.325, 404.188, 413.592), stdev = 7.870
[info]   CI (99.9%): [373.884, 434.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1618.584 ±(99.9%) 131.377 B/op [Average]
[info]   (min, avg, max) = (1569.173, 1618.584, 1657.510), stdev = 34.118
[info]   CI (99.9%): [1487.207, 1749.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.221 ±(99.9%) 1057.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.221, 666.474), stdev = 274.568
[info]   CI (99.9%): [≈ 0, 1528.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1888.732 ±(99.9%) 4237.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1888.732, 2671.689), stdev = 1100.517
[info]   CI (99.9%): [≈ 0, 6126.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.250), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660660.496 ops/s
[info] # Warmup Iteration   2: 1048784.228 ops/s
[info] # Warmup Iteration   3: 1090942.438 ops/s
[info] # Warmup Iteration   4: 1156121.562 ops/s
[info] # Warmup Iteration   5: 1161158.754 ops/s
[info] Iteration   1: 1099966.762 ops/s
[info]                  ·gc.alloc.rate:               391.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 732.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1141506.748 ops/s
[info]                  ·gc.alloc.rate:               408.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 705.378 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1162727.320 ops/s
[info]                  ·gc.alloc.rate:      401.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1161238.820 ops/s
[info]                  ·gc.alloc.rate:                   419.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              568.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     909.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1157513.766 ops/s
[info]                  ·gc.alloc.rate:               415.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 912.097 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1144590.683 ±(99.9%) 101402.691 ops/s [Average]
[info]   (min, avg, max) = (1099966.762, 1144590.683, 1162727.320), stdev = 26333.957
[info]   CI (99.9%): [1043187.992, 1245993.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   407.256 ±(99.9%) 43.106 MB/sec [Average]
[info]   (min, avg, max) = (391.282, 407.256, 419.772), stdev = 11.195
[info]   CI (99.9%): [364.150, 450.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.903 ±(99.9%) 36.429 B/op [Average]
[info]   (min, avg, max) = (544.000, 559.903, 568.713), stdev = 9.460
[info]   CI (99.9%): [523.474, 596.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.066 ±(99.9%) 1063.501 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.066, 671.068), stdev = 276.188
[info]   CI (99.9%): [≈ 0, 1536.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   651.735 ±(99.9%) 1451.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 651.735, 912.097), stdev = 376.877
[info]   CI (99.9%): [≈ 0, 2102.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10105.190 ops/s
[info] # Warmup Iteration   2: 69498.973 ops/s
[info] # Warmup Iteration   3: 76789.460 ops/s
[info] # Warmup Iteration   4: 78400.042 ops/s
[info] # Warmup Iteration   5: 79251.412 ops/s
[info] Iteration   1: 79083.721 ops/s
[info]                  ·gc.alloc.rate:                   3082.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              61335.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66418.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.214 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 78839.392 ops/s
[info]                  ·gc.alloc.rate:                   3074.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              61365.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53351.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 79700.355 ops/s
[info]                  ·gc.alloc.rate:               3122.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          61610.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3348.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66070.442 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 78525.503 ops/s
[info]                  ·gc.alloc.rate:               3063.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          61400.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53912.804 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 79411.022 ops/s
[info]                  ·gc.alloc.rate:               3097.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          61390.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53483.013 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   79111.999 ±(99.9%) 1779.928 ops/s [Average]
[info]   (min, avg, max) = (78525.503, 79111.999, 79700.355), stdev = 462.242
[info]   CI (99.9%): [77332.071, 80891.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3087.975 ±(99.9%) 88.222 MB/sec [Average]
[info]   (min, avg, max) = (3063.372, 3087.975, 3122.345), stdev = 22.911
[info]   CI (99.9%): [2999.753, 3176.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61420.665 ±(99.9%) 420.226 B/op [Average]
[info]   (min, avg, max) = (61335.640, 61420.665, 61610.642), stdev = 109.131
[info]   CI (99.9%): [61000.439, 61840.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2949.459 ±(99.9%) 1384.392 MB/sec [Average]
[info]   (min, avg, max) = (2672.673, 2949.459, 3348.362), stdev = 359.522
[info]   CI (99.9%): [1565.068, 4333.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58647.275 ±(99.9%) 26721.247 B/op [Average]
[info]   (min, avg, max) = (53351.683, 58647.275, 66418.430), stdev = 6939.423
[info]   CI (99.9%): [31926.027, 85368.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.312), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.326 ±(99.9%) 10.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.326, 6.214), stdev = 2.739
[info]   CI (99.9%): [≈ 0, 11.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83513.364 ops/s
[info] # Warmup Iteration   2: 250993.272 ops/s
[info] # Warmup Iteration   3: 258468.210 ops/s
[info] # Warmup Iteration   4: 262188.187 ops/s
[info] # Warmup Iteration   5: 268074.313 ops/s
[info] Iteration   1: 272613.629 ops/s
[info]                  ·gc.alloc.rate:               1659.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          9579.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7745.494 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 262632.450 ops/s
[info]                  ·gc.alloc.rate:                   1601.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              9595.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12067.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 266360.564 ops/s
[info]                  ·gc.alloc.rate:                   1622.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              9584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7927.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 273045.188 ops/s
[info]                  ·gc.alloc.rate:                   1675.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              9655.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11572.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 273621.795 ops/s
[info]                  ·gc.alloc.rate:               1671.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          9610.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7693.749 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   269654.725 ±(99.9%) 18879.138 ops/s [Average]
[info]   (min, avg, max) = (262632.450, 269654.725, 273621.795), stdev = 4902.852
[info]   CI (99.9%): [250775.588, 288533.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1645.856 ±(99.9%) 125.232 MB/sec [Average]
[info]   (min, avg, max) = (1601.301, 1645.856, 1675.186), stdev = 32.522
[info]   CI (99.9%): [1520.624, 1771.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9604.776 ±(99.9%) 117.682 B/op [Average]
[info]   (min, avg, max) = (9579.075, 9604.776, 9655.011), stdev = 30.562
[info]   CI (99.9%): [9487.094, 9722.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.647 ±(99.9%) 1414.039 MB/sec [Average]
[info]   (min, avg, max) = (1338.007, 1608.647, 2013.853), stdev = 367.222
[info]   CI (99.9%): [194.607, 3022.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9401.368 ±(99.9%) 8535.755 B/op [Average]
[info]   (min, avg, max) = (7693.749, 9401.368, 12067.464), stdev = 2216.708
[info]   CI (99.9%): [865.613, 17937.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.081), stdev = 1.326
[info]   CI (99.9%): [≈ 0, 5.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.403 ±(99.9%) 30.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.403, 18.462), stdev = 7.953
[info]   CI (99.9%): [≈ 0, 35.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.721 ops/s
[info] # Warmup Iteration   2: 1178690.638 ops/s
[info] # Warmup Iteration   3: 1219836.677 ops/s
[info] # Warmup Iteration   4: 1250285.464 ops/s
[info] # Warmup Iteration   5: 1256820.883 ops/s
[info] Iteration   1: 1251289.594 ops/s
[info]                  ·gc.alloc.rate:               443.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 643.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1245520.256 ops/s
[info]                  ·gc.alloc.rate:               441.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1237934.652 ops/s
[info]                  ·gc.alloc.rate:      421.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1237342.657 ops/s
[info]                  ·gc.alloc.rate:                   439.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1238595.486 ops/s
[info]                  ·gc.alloc.rate:                   442.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              561.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1242136.529 ±(99.9%) 23454.513 ops/s [Average]
[info]   (min, avg, max) = (1237342.657, 1242136.529, 1251289.594), stdev = 6091.063
[info]   CI (99.9%): [1218682.016, 1265591.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   437.595 ±(99.9%) 34.850 MB/sec [Average]
[info]   (min, avg, max) = (421.611, 437.595, 443.610), stdev = 9.051
[info]   CI (99.9%): [402.745, 472.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   554.411 ±(99.9%) 40.122 B/op [Average]
[info]   (min, avg, max) = (536.000, 554.411, 561.543), stdev = 10.420
[info]   CI (99.9%): [514.289, 594.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501.711 ±(99.9%) 1110.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.711, 666.033), stdev = 288.292
[info]   CI (99.9%): [≈ 0, 1611.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   635.376 ±(99.9%) 1408.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 635.376, 846.424), stdev = 365.700
[info]   CI (99.9%): [≈ 0, 2043.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386245.764 ops/s
[info] # Warmup Iteration   2: 863964.162 ops/s
[info] # Warmup Iteration   3: 882602.326 ops/s
[info] # Warmup Iteration   4: 890233.919 ops/s
[info] # Warmup Iteration   5: 885650.288 ops/s
[info] Iteration   1: 894700.514 ops/s
[info]                  ·gc.alloc.rate:      523.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 893397.049 ops/s
[info]                  ·gc.alloc.rate:               545.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          961.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1175.265 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 891771.103 ops/s
[info]                  ·gc.alloc.rate:               543.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          959.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1177.420 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 890545.356 ops/s
[info]                  ·gc.alloc.rate:               539.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          953.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1180.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 893890.541 ops/s
[info]                  ·gc.alloc.rate:               547.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          963.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1175.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   892860.913 ±(99.9%) 6466.675 ops/s [Average]
[info]   (min, avg, max) = (890545.356, 892860.913, 894700.514), stdev = 1679.375
[info]   CI (99.9%): [886394.238, 899327.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   539.864 ±(99.9%) 37.900 MB/sec [Average]
[info]   (min, avg, max) = (523.000, 539.864, 547.088), stdev = 9.843
[info]   CI (99.9%): [501.964, 577.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   951.632 ±(99.9%) 69.480 B/op [Average]
[info]   (min, avg, max) = (920.001, 951.632, 963.279), stdev = 18.044
[info]   CI (99.9%): [882.152, 1021.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.982 ±(99.9%) 1149.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.982, 667.793), stdev = 298.505
[info]   CI (99.9%): [≈ 0, 1683.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   941.739 ±(99.9%) 2027.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 941.739, 1180.222), stdev = 526.452
[info]   CI (99.9%): [≈ 0, 2968.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022583.307 ops/s
[info] # Warmup Iteration   2: 1871927.658 ops/s
[info] # Warmup Iteration   3: 1921748.061 ops/s
[info] # Warmup Iteration   4: 1871555.246 ops/s
[info] # Warmup Iteration   5: 1853149.051 ops/s
[info] Iteration   1: 1880903.503 ops/s
[info]                  ·gc.alloc.rate:               654.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1898742.012 ops/s
[info]                  ·gc.alloc.rate:               673.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1901110.081 ops/s
[info]                  ·gc.alloc.rate:               668.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1915531.466 ops/s
[info]                  ·gc.alloc.rate:               679.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1914741.464 ops/s
[info]                  ·gc.alloc.rate:                   669.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1902205.705 ±(99.9%) 54514.244 ops/s [Average]
[info]   (min, avg, max) = (1880903.503, 1902205.705, 1915531.466), stdev = 14157.176
[info]   CI (99.9%): [1847691.461, 1956719.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   668.853 ±(99.9%) 35.151 MB/sec [Average]
[info]   (min, avg, max) = (654.262, 668.853, 679.003), stdev = 9.129
[info]   CI (99.9%): [633.702, 704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553.294 ±(99.9%) 17.657 B/op [Average]
[info]   (min, avg, max) = (547.452, 553.294, 557.820), stdev = 4.586
[info]   CI (99.9%): [535.636, 570.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.125 ±(99.9%) 2.041 MB/sec [Average]
[info]   (min, avg, max) = (670.485, 671.125, 671.754), stdev = 0.530
[info]   CI (99.9%): [669.084, 673.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   555.210 ±(99.9%) 14.607 B/op [Average]
[info]   (min, avg, max) = (551.445, 555.210, 561.027), stdev = 3.793
[info]   CI (99.9%): [540.603, 569.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1034610.315 ops/s
[info] # Warmup Iteration   2: 1974847.741 ops/s
[info] # Warmup Iteration   3: 2050690.451 ops/s
[info] # Warmup Iteration   4: 2051431.404 ops/s
[info] # Warmup Iteration   5: 2051785.153 ops/s
[info] Iteration   1: 2041931.071 ops/s
[info]                  ·gc.alloc.rate:      0.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.726 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2053068.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2052628.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2053291.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2052557.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2050695.475 ±(99.9%) 18902.542 ops/s [Average]
[info]   (min, avg, max) = (2041931.071, 2050695.475, 2053291.657), stdev = 4908.930
[info]   CI (99.9%): [2031792.933, 2069598.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.189 ±(99.9%) 1.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.189, 0.942), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.145 ±(99.9%) 1.250 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.145, 0.726), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11686.067 ops/s
[info] # Warmup Iteration   2: 39256.676 ops/s
[info] # Warmup Iteration   3: 41796.109 ops/s
[info] # Warmup Iteration   4: 41538.337 ops/s
[info] # Warmup Iteration   5: 41900.249 ops/s
[info] Iteration   1: 42072.985 ops/s
[info]                  ·gc.alloc.rate:                   2096.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              78408.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75305.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 41108.677 ops/s
[info]                  ·gc.alloc.rate:                   2049.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              78441.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76840.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 42188.760 ops/s
[info]                  ·gc.alloc.rate:                   2100.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              78364.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74774.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41003.176 ops/s
[info]                  ·gc.alloc.rate:                   2058.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              78986.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76960.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41005.414 ops/s
[info]                  ·gc.alloc.rate:               2058.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          78997.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77086.137 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   41475.802 ±(99.9%) 2313.880 ops/s [Average]
[info]   (min, avg, max) = (41003.176, 41475.802, 42188.760), stdev = 600.907
[info]   CI (99.9%): [39161.923, 43789.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2072.597 ±(99.9%) 91.916 MB/sec [Average]
[info]   (min, avg, max) = (2049.046, 2072.597, 2100.655), stdev = 23.870
[info]   CI (99.9%): [1980.681, 2164.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78639.631 ±(99.9%) 1244.099 B/op [Average]
[info]   (min, avg, max) = (78364.185, 78639.631, 78997.618), stdev = 323.089
[info]   CI (99.9%): [77395.532, 79883.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.871 ±(99.9%) 12.733 MB/sec [Average]
[info]   (min, avg, max) = (2004.416, 2007.871, 2013.066), stdev = 3.307
[info]   CI (99.9%): [1995.138, 2020.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76193.277 ±(99.9%) 4131.810 B/op [Average]
[info]   (min, avg, max) = (74774.035, 76193.277, 77086.137), stdev = 1073.018
[info]   CI (99.9%): [72061.467, 80325.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.080), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 7.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.001 ±(99.9%) 261.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.001, 152.630), stdev = 67.994
[info]   CI (99.9%): [≈ 0, 292.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4066.370 ops/s
[info] # Warmup Iteration   2: 13894.667 ops/s
[info] # Warmup Iteration   3: 16010.060 ops/s
[info] # Warmup Iteration   4: 16134.876 ops/s
[info] # Warmup Iteration   5: 15972.569 ops/s
[info] Iteration   1: 15895.944 ops/s
[info]                  ·gc.alloc.rate:               1964.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          194545.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198594.939 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 15698.127 ops/s
[info]                  ·gc.alloc.rate:                   1940.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              194365.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201200.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15563.180 ops/s
[info]                  ·gc.alloc.rate:               1928.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          194981.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135736.904 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16093.412 ops/s
[info]                  ·gc.alloc.rate:                   1969.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              192632.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197279.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15645.262 ops/s
[info]                  ·gc.alloc.rate:                   1948.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              196011.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203430.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   15779.185 ±(99.9%) 824.828 ops/s [Average]
[info]   (min, avg, max) = (15563.180, 15779.185, 16093.412), stdev = 214.205
[info]   CI (99.9%): [14954.357, 16604.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1950.408 ±(99.9%) 65.778 MB/sec [Average]
[info]   (min, avg, max) = (1928.411, 1950.408, 1969.673), stdev = 17.082
[info]   CI (99.9%): [1884.630, 2016.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   194507.419 ±(99.9%) 4724.593 B/op [Average]
[info]   (min, avg, max) = (192632.946, 194507.419, 196011.293), stdev = 1226.962
[info]   CI (99.9%): [189782.826, 199232.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1879.299 ±(99.9%) 1155.849 MB/sec [Average]
[info]   (min, avg, max) = (1342.468, 1879.299, 2022.343), stdev = 300.170
[info]   CI (99.9%): [723.450, 3035.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   187248.418 ±(99.9%) 111258.149 B/op [Average]
[info]   (min, avg, max) = (135736.904, 187248.418, 203430.043), stdev = 28893.388
[info]   CI (99.9%): [75990.269, 298506.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.659 ±(99.9%) 6.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.659, 4.167), stdev = 1.741
[info]   CI (99.9%): [≈ 0, 8.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12926.366 ops/s
[info] # Warmup Iteration   2: 92788.921 ops/s
[info] # Warmup Iteration   3: 93771.267 ops/s
[info] # Warmup Iteration   4: 97361.413 ops/s
[info] # Warmup Iteration   5: 99074.048 ops/s
[info] Iteration   1: 95908.497 ops/s
[info]                  ·gc.alloc.rate:                   1290.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              21173.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21928.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 99194.274 ops/s
[info]                  ·gc.alloc.rate:                   1328.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              21064.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21223.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 100156.138 ops/s
[info]                  ·gc.alloc.rate:               1338.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          21036.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21040.399 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 100028.031 ops/s
[info]                  ·gc.alloc.rate:                   1349.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              21230.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21077.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 95006.700 ops/s
[info]                  ·gc.alloc.rate:                   1288.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              21350.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22136.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   98058.728 ±(99.9%) 9334.361 ops/s [Average]
[info]   (min, avg, max) = (95006.700, 98058.728, 100156.138), stdev = 2424.104
[info]   CI (99.9%): [88724.367, 107393.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1319.141 ±(99.9%) 107.418 MB/sec [Average]
[info]   (min, avg, max) = (1288.817, 1319.141, 1349.356), stdev = 27.896
[info]   CI (99.9%): [1211.723, 1426.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21171.176 ±(99.9%) 490.829 B/op [Average]
[info]   (min, avg, max) = (21036.469, 21171.176, 21350.073), stdev = 127.467
[info]   CI (99.9%): [20680.347, 21662.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.939 ±(99.9%) 5.603 MB/sec [Average]
[info]   (min, avg, max) = (1336.269, 1337.939, 1339.629), stdev = 1.455
[info]   CI (99.9%): [1332.336, 1343.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21481.264 ±(99.9%) 1975.463 B/op [Average]
[info]   (min, avg, max) = (21040.399, 21481.264, 22136.151), stdev = 513.021
[info]   CI (99.9%): [19505.801, 23456.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.851), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.078 ±(99.9%) 102.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.078, 60.595), stdev = 26.606
[info]   CI (99.9%): [≈ 0, 115.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105668.784 ops/s
[info] # Warmup Iteration   2: 238473.482 ops/s
[info] # Warmup Iteration   3: 244663.170 ops/s
[info] # Warmup Iteration   4: 247586.692 ops/s
[info] # Warmup Iteration   5: 247002.258 ops/s
[info] Iteration   1: 241256.604 ops/s
[info]                  ·gc.alloc.rate:                   824.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              5372.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8727.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 249466.855 ops/s
[info]                  ·gc.alloc.rate:               839.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          5295.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4234.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 258224.821 ops/s
[info]                  ·gc.alloc.rate:                   856.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              5220.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4094.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 253475.264 ops/s
[info]                  ·gc.alloc.rate:               839.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          5212.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4171.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 256349.867 ops/s
[info]                  ·gc.alloc.rate:               849.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          5215.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4126.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   251754.682 ±(99.9%) 25929.922 ops/s [Average]
[info]   (min, avg, max) = (241256.604, 251754.682, 258224.821), stdev = 6733.918
[info]   CI (99.9%): [225824.760, 277684.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   841.951 ±(99.9%) 47.141 MB/sec [Average]
[info]   (min, avg, max) = (824.313, 841.951, 856.628), stdev = 12.242
[info]   CI (99.9%): [794.809, 889.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5263.628 ±(99.9%) 269.645 B/op [Average]
[info]   (min, avg, max) = (5212.904, 5263.628, 5372.619), stdev = 70.026
[info]   CI (99.9%): [4993.983, 5533.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.243 ±(99.9%) 1149.190 MB/sec [Average]
[info]   (min, avg, max) = (671.164, 805.243, 1339.110), stdev = 298.441
[info]   CI (99.9%): [≈ 0, 1954.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5070.887 ±(99.9%) 7874.611 B/op [Average]
[info]   (min, avg, max) = (4094.541, 5070.887, 8727.913), stdev = 2045.012
[info]   CI (99.9%): [≈ 0, 12945.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.406), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2171.835 ops/s
[info] # Warmup Iteration   2: 11702.163 ops/s
[info] # Warmup Iteration   3: 13200.372 ops/s
[info] # Warmup Iteration   4: 13072.904 ops/s
[info] # Warmup Iteration   5: 12826.579 ops/s
[info] Iteration   1: 12818.346 ops/s
[info]                  ·gc.alloc.rate:                   1962.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              240934.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246747.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13185.296 ops/s
[info]                  ·gc.alloc.rate:                   2001.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              238787.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239483.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13077.955 ops/s
[info]                  ·gc.alloc.rate:               1997.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          240384.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240739.582 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 13012.947 ops/s
[info]                  ·gc.alloc.rate:               1989.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          240594.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241923.304 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13239.021 ops/s
[info]                  ·gc.alloc.rate:               2035.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          242000.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 238150.757 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13066.713 ±(99.9%) 634.057 ops/s [Average]
[info]   (min, avg, max) = (12818.346, 13066.713, 13239.021), stdev = 164.663
[info]   CI (99.9%): [12432.656, 13700.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1997.331 ±(99.9%) 101.243 MB/sec [Average]
[info]   (min, avg, max) = (1962.341, 1997.331, 2035.566), stdev = 26.293
[info]   CI (99.9%): [1896.087, 2098.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   240540.239 ±(99.9%) 4468.201 B/op [Average]
[info]   (min, avg, max) = (238787.678, 240540.239, 242000.281), stdev = 1160.378
[info]   CI (99.9%): [236072.038, 245008.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.279 ±(99.9%) 15.630 MB/sec [Average]
[info]   (min, avg, max) = (2000.447, 2004.279, 2009.688), stdev = 4.059
[info]   CI (99.9%): [1988.649, 2019.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   241409.031 ±(99.9%) 12704.001 B/op [Average]
[info]   (min, avg, max) = (238150.757, 241409.031, 246747.819), stdev = 3299.189
[info]   CI (99.9%): [228705.029, 254113.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.310), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   110.097 ±(99.9%) 681.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.097, 406.373), stdev = 176.989
[info]   CI (99.9%): [≈ 0, 791.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9383.626 ops/s
[info] # Warmup Iteration   2: 29466.673 ops/s
[info] # Warmup Iteration   3: 33224.875 ops/s
[info] # Warmup Iteration   4: 31663.753 ops/s
[info] # Warmup Iteration   5: 33038.411 ops/s
[info] Iteration   1: 33421.009 ops/s
[info]                  ·gc.alloc.rate:                   2782.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              131016.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126166.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33021.965 ops/s
[info]                  ·gc.alloc.rate:                   2761.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              131627.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127655.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.992 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33502.924 ops/s
[info]                  ·gc.alloc.rate:                   2815.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              132266.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126061.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.867 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33571.997 ops/s
[info]                  ·gc.alloc.rate:                   2821.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              132269.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126118.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.976 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33459.588 ops/s
[info]                  ·gc.alloc.rate:               2813.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          132328.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126881.268 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   33395.497 ±(99.9%) 832.526 ops/s [Average]
[info]   (min, avg, max) = (33021.965, 33395.497, 33571.997), stdev = 216.204
[info]   CI (99.9%): [32562.971, 34228.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2799.118 ±(99.9%) 99.099 MB/sec [Average]
[info]   (min, avg, max) = (2761.911, 2799.118, 2821.731), stdev = 25.736
[info]   CI (99.9%): [2700.019, 2898.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131901.880 ±(99.9%) 2202.621 B/op [Average]
[info]   (min, avg, max) = (131016.885, 131901.880, 132328.806), stdev = 572.014
[info]   CI (99.9%): [129699.259, 134104.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2686.015 ±(99.9%) 31.054 MB/sec [Average]
[info]   (min, avg, max) = (2678.558, 2686.015, 2697.770), stdev = 8.065
[info]   CI (99.9%): [2654.961, 2717.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   126576.549 ±(99.9%) 2653.771 B/op [Average]
[info]   (min, avg, max) = (126061.309, 126576.549, 127655.215), stdev = 689.176
[info]   CI (99.9%): [123922.778, 129230.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.763 ±(99.9%) 8.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.763, 5.867), stdev = 2.333
[info]   CI (99.9%): [≈ 0, 10.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42457.353 ops/s
[info] # Warmup Iteration   2: 96274.766 ops/s
[info] # Warmup Iteration   3: 104466.629 ops/s
[info] # Warmup Iteration   4: 102564.006 ops/s
[info] # Warmup Iteration   5: 103136.051 ops/s
[info] Iteration   1: 105884.164 ops/s
[info]                  ·gc.alloc.rate:               1496.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          22227.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29844.734 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 105179.068 ops/s
[info]                  ·gc.alloc.rate:                   1480.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              22148.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20056.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 105294.881 ops/s
[info]                  ·gc.alloc.rate:                   1495.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              22352.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20043.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 106196.679 ops/s
[info]                  ·gc.alloc.rate:               1507.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          22339.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19824.689 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 106812.102 ops/s
[info]                  ·gc.alloc.rate:               1515.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          22331.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19688.895 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   105873.379 ±(99.9%) 2584.932 ops/s [Average]
[info]   (min, avg, max) = (105179.068, 105873.379, 106812.102), stdev = 671.299
[info]   CI (99.9%): [103288.447, 108458.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1499.034 ±(99.9%) 51.022 MB/sec [Average]
[info]   (min, avg, max) = (1480.639, 1499.034, 1515.563), stdev = 13.250
[info]   CI (99.9%): [1448.012, 1550.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22280.053 ±(99.9%) 340.681 B/op [Average]
[info]   (min, avg, max) = (22148.981, 22280.053, 22352.500), stdev = 88.474
[info]   CI (99.9%): [21939.371, 22620.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.885 ±(99.9%) 1153.585 MB/sec [Average]
[info]   (min, avg, max) = (1336.215, 1472.885, 2008.782), stdev = 299.582
[info]   CI (99.9%): [319.300, 2626.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21891.576 ±(99.9%) 17130.068 B/op [Average]
[info]   (min, avg, max) = (19688.895, 21891.576, 29844.734), stdev = 4448.624
[info]   CI (99.9%): [4761.508, 39021.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.789), stdev = 1.690
[info]   CI (99.9%): [≈ 0, 7.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.451 ±(99.9%) 97.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.451, 56.630), stdev = 25.258
[info]   CI (99.9%): [≈ 0, 108.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101729.606 ops/s
[info] # Warmup Iteration   2: 170833.686 ops/s
[info] # Warmup Iteration   3: 176950.622 ops/s
[info] # Warmup Iteration   4: 178531.198 ops/s
[info] # Warmup Iteration   5: 176815.243 ops/s
[info] Iteration   1: 178840.283 ops/s
[info]                  ·gc.alloc.rate:               590.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          5193.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5903.293 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 178367.874 ops/s
[info]                  ·gc.alloc.rate:                   593.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              5239.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5919.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 178912.035 ops/s
[info]                  ·gc.alloc.rate:      583.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 5132.139 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 177773.871 ops/s
[info]                  ·gc.alloc.rate:                   576.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              5106.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5944.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 176719.761 ops/s
[info]                  ·gc.alloc.rate:               582.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          5190.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5980.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   178122.765 ±(99.9%) 3491.159 ops/s [Average]
[info]   (min, avg, max) = (176719.761, 178122.765, 178912.035), stdev = 906.643
[info]   CI (99.9%): [174631.606, 181613.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.390 ±(99.9%) 25.688 MB/sec [Average]
[info]   (min, avg, max) = (576.821, 585.390, 593.819), stdev = 6.671
[info]   CI (99.9%): [559.702, 611.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5172.412 ±(99.9%) 203.678 B/op [Average]
[info]   (min, avg, max) = (5106.819, 5172.412, 5239.585), stdev = 52.894
[info]   CI (99.9%): [4968.734, 5376.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.912 ±(99.9%) 1155.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.912, 671.466), stdev = 300.143
[info]   CI (99.9%): [≈ 0, 1692.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4749.443 ±(99.9%) 10224.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4749.443, 5980.032), stdev = 2655.178
[info]   CI (99.9%): [≈ 0, 14973.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.184), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84936.749 ops/s
[info] # Warmup Iteration   2: 185842.848 ops/s
[info] # Warmup Iteration   3: 194673.331 ops/s
[info] # Warmup Iteration   4: 194757.840 ops/s
[info] # Warmup Iteration   5: 194766.223 ops/s
[info] Iteration   1: 194845.783 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194609.100 ops/s
[info]                  ·gc.alloc.rate:      0.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.616 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 194840.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 194734.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 194757.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   194757.403 ±(99.9%) 371.658 ops/s [Average]
[info]   (min, avg, max) = (194609.100, 194757.403, 194845.783), stdev = 96.519
[info]   CI (99.9%): [194385.745, 195129.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.189 ±(99.9%) 1.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.189, 0.942), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.525 ±(99.9%) 13.111 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.525, 7.616), stdev = 3.405
[info]   CI (99.9%): [≈ 0, 14.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9184.595 ops/s
[info] # Warmup Iteration   2: 42764.939 ops/s
[info] # Warmup Iteration   3: 46118.816 ops/s
[info] # Warmup Iteration   4: 46889.617 ops/s
[info] # Warmup Iteration   5: 48306.808 ops/s
[info] Iteration   1: 48297.440 ops/s
[info]                  ·gc.alloc.rate:                   3384.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              110261.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108992.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.357 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 47918.744 ops/s
[info]                  ·gc.alloc.rate:                   3398.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              111602.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110095.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.837 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 48041.960 ops/s
[info]                  ·gc.alloc.rate:               3408.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          111624.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3364.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110171.403 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 47520.834 ops/s
[info]                  ·gc.alloc.rate:               3372.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          111703.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3373.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111736.763 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 47148.430 ops/s
[info]                  ·gc.alloc.rate:               3320.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          110842.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90322.025 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   47785.482 ±(99.9%) 1745.062 ops/s [Average]
[info]   (min, avg, max) = (47148.430, 47785.482, 48297.440), stdev = 453.187
[info]   CI (99.9%): [46040.420, 49530.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3376.924 ±(99.9%) 132.211 MB/sec [Average]
[info]   (min, avg, max) = (3320.505, 3376.924, 3408.623), stdev = 34.335
[info]   CI (99.9%): [3244.713, 3509.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111206.955 ±(99.9%) 2439.382 B/op [Average]
[info]   (min, avg, max) = (110261.272, 111206.955, 111703.485), stdev = 633.500
[info]   CI (99.9%): [108767.572, 113646.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3228.337 ±(99.9%) 1125.627 MB/sec [Average]
[info]   (min, avg, max) = (2705.780, 3228.337, 3373.856), stdev = 292.322
[info]   CI (99.9%): [2102.710, 4353.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106263.700 ±(99.9%) 34521.414 B/op [Average]
[info]   (min, avg, max) = (90322.025, 106263.700, 111736.763), stdev = 8965.102
[info]   CI (99.9%): [71742.286, 140785.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.639 ±(99.9%) 11.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.639, 6.837), stdev = 2.965
[info]   CI (99.9%): [≈ 0, 13.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5067.010 ops/s
[info] # Warmup Iteration   2: 24979.824 ops/s
[info] # Warmup Iteration   3: 25302.125 ops/s
[info] # Warmup Iteration   4: 26420.838 ops/s
[info] # Warmup Iteration   5: 25743.983 ops/s
[info] Iteration   1: 26518.821 ops/s
[info]                  ·gc.alloc.rate:                   1431.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              84970.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79642.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 26043.563 ops/s
[info]                  ·gc.alloc.rate:                   1389.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              83967.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81135.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26651.855 ops/s
[info]                  ·gc.alloc.rate:                   1421.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              83903.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79323.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 26749.023 ops/s
[info]                  ·gc.alloc.rate:                   1436.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              84524.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78957.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26361.800 ops/s
[info]                  ·gc.alloc.rate:                   1431.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              85406.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79937.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26465.012 ±(99.9%) 1066.323 ops/s [Average]
[info]   (min, avg, max) = (26043.563, 26465.012, 26749.023), stdev = 276.921
[info]   CI (99.9%): [25398.689, 27531.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1422.086 ±(99.9%) 73.328 MB/sec [Average]
[info]   (min, avg, max) = (1389.599, 1422.086, 1436.847), stdev = 19.043
[info]   CI (99.9%): [1348.758, 1495.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84554.424 ±(99.9%) 2485.869 B/op [Average]
[info]   (min, avg, max) = (83903.582, 84554.424, 85406.058), stdev = 645.572
[info]   CI (99.9%): [82068.555, 87040.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.988 ±(99.9%) 5.722 MB/sec [Average]
[info]   (min, avg, max) = (1339.535, 1341.988, 1343.480), stdev = 1.486
[info]   CI (99.9%): [1336.266, 1347.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79799.328 ±(99.9%) 3199.914 B/op [Average]
[info]   (min, avg, max) = (78957.738, 79799.328, 81135.017), stdev = 831.007
[info]   CI (99.9%): [76599.414, 82999.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 5.168 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.770, 3.123), stdev = 1.342
[info]   CI (99.9%): [≈ 0, 5.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.467 ±(99.9%) 305.124 B/op [Average]
[info]   (min, avg, max) = (1.243, 45.467, 184.394), stdev = 79.240
[info]   CI (99.9%): [≈ 0, 350.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6727.918 ops/s
[info] # Warmup Iteration   2: 27283.819 ops/s
[info] # Warmup Iteration   3: 29267.080 ops/s
[info] # Warmup Iteration   4: 30040.183 ops/s
[info] # Warmup Iteration   5: 29279.790 ops/s
[info] Iteration   1: 30377.051 ops/s
[info]                  ·gc.alloc.rate:                   1229.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              63678.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34633.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 29724.874 ops/s
[info]                  ·gc.alloc.rate:               1217.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          64475.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70824.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 30156.307 ops/s
[info]                  ·gc.alloc.rate:                   1228.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              64109.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69862.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 30151.689 ops/s
[info]                  ·gc.alloc.rate:                   1237.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              64604.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69925.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 30289.207 ops/s
[info]                  ·gc.alloc.rate:                   1230.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              63934.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69535.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   30139.826 ±(99.9%) 964.945 ops/s [Average]
[info]   (min, avg, max) = (29724.874, 30139.826, 30377.051), stdev = 250.593
[info]   CI (99.9%): [29174.881, 31104.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1228.730 ±(99.9%) 27.210 MB/sec [Average]
[info]   (min, avg, max) = (1217.949, 1228.730, 1237.690), stdev = 7.066
[info]   CI (99.9%): [1201.521, 1255.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64160.423 ±(99.9%) 1468.929 B/op [Average]
[info]   (min, avg, max) = (63678.817, 64160.423, 64604.656), stdev = 381.476
[info]   CI (99.9%): [62691.494, 65629.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.582 ±(99.9%) 1153.859 MB/sec [Average]
[info]   (min, avg, max) = (668.546, 1204.582, 1339.635), stdev = 299.654
[info]   CI (99.9%): [50.722, 2358.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62956.464 ±(99.9%) 60994.318 B/op [Average]
[info]   (min, avg, max) = (34633.863, 62956.464, 70824.468), stdev = 15840.031
[info]   CI (99.9%): [1962.145, 123950.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 5.555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 3.352), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.158 ±(99.9%) 289.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.158, 174.945), stdev = 75.300
[info]   CI (99.9%): [≈ 0, 335.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256841.570 ops/s
[info] # Warmup Iteration   2: 619962.580 ops/s
[info] # Warmup Iteration   3: 636945.740 ops/s
[info] # Warmup Iteration   4: 641378.435 ops/s
[info] # Warmup Iteration   5: 639804.172 ops/s
[info] Iteration   1: 638546.823 ops/s
[info]                  ·gc.alloc.rate:                   1710.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3315.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 615396.938 ops/s
[info]                  ·gc.alloc.rate:                   1676.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              4286.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5163.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.667 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 638200.114 ops/s
[info]                  ·gc.alloc.rate:                   1692.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              4174.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3315.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 638507.209 ops/s
[info]                  ·gc.alloc.rate:                   1707.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              4209.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4965.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 647996.658 ops/s
[info]                  ·gc.alloc.rate:               1726.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          4192.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3261.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   635729.548 ±(99.9%) 46593.314 ops/s [Average]
[info]   (min, avg, max) = (615396.938, 635729.548, 647996.658), stdev = 12100.136
[info]   CI (99.9%): [589136.234, 682322.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1702.786 ±(99.9%) 73.243 MB/sec [Average]
[info]   (min, avg, max) = (1676.339, 1702.786, 1726.434), stdev = 19.021
[info]   CI (99.9%): [1629.543, 1776.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4215.755 ±(99.9%) 163.652 B/op [Average]
[info]   (min, avg, max) = (4174.368, 4215.755, 4286.116), stdev = 42.500
[info]   CI (99.9%): [4052.103, 4379.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.389 ±(99.9%) 1419.090 MB/sec [Average]
[info]   (min, avg, max) = (1343.040, 1613.389, 2019.651), stdev = 368.533
[info]   CI (99.9%): [194.299, 3032.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4004.439 ±(99.9%) 3737.833 B/op [Average]
[info]   (min, avg, max) = (3261.783, 4004.439, 5163.905), stdev = 970.703
[info]   CI (99.9%): [266.606, 7742.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.621 ±(99.9%) 5.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 2.998), stdev = 1.330
[info]   CI (99.9%): [≈ 0, 5.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.585 ±(99.9%) 13.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.585, 7.667), stdev = 3.400
[info]   CI (99.9%): [≈ 0, 14.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1764.183 ops/s
[info] # Warmup Iteration   2: 19803.938 ops/s
[info] # Warmup Iteration   3: 24774.628 ops/s
[info] # Warmup Iteration   4: 24808.613 ops/s
[info] # Warmup Iteration   5: 24463.870 ops/s
[info] Iteration   1: 24081.692 ops/s
[info]                  ·gc.alloc.rate:                   1786.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              116732.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130707.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24800.786 ops/s
[info]                  ·gc.alloc.rate:               1809.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          114860.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84841.445 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 23854.218 ops/s
[info]                  ·gc.alloc.rate:                   1784.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              117712.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132665.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24653.211 ops/s
[info]                  ·gc.alloc.rate:                   1801.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              115019.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85747.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23637.151 ops/s
[info]                  ·gc.alloc.rate:               1742.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          116026.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134393.016 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   24205.412 ±(99.9%) 1941.196 ops/s [Average]
[info]   (min, avg, max) = (23637.151, 24205.412, 24800.786), stdev = 504.123
[info]   CI (99.9%): [22264.215, 26146.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1784.959 ±(99.9%) 100.150 MB/sec [Average]
[info]   (min, avg, max) = (1742.565, 1784.959, 1809.977), stdev = 26.009
[info]   CI (99.9%): [1684.809, 1885.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   116070.167 ±(99.9%) 4598.448 B/op [Average]
[info]   (min, avg, max) = (114860.536, 116070.167, 117712.045), stdev = 1194.202
[info]   CI (99.9%): [111471.718, 120668.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.916 ±(99.9%) 1412.816 MB/sec [Average]
[info]   (min, avg, max) = (1336.935, 1741.916, 2018.410), stdev = 366.904
[info]   CI (99.9%): [329.100, 3154.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113670.965 ±(99.9%) 99880.856 B/op [Average]
[info]   (min, avg, max) = (84841.445, 113670.965, 134393.016), stdev = 25938.741
[info]   CI (99.9%): [13790.109, 213551.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.458), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.125 ±(99.9%) 50.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.125, 30.216), stdev = 13.015
[info]   CI (99.9%): [≈ 0, 57.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25999.922 ops/s
[info] # Warmup Iteration   2: 68371.713 ops/s
[info] # Warmup Iteration   3: 71616.759 ops/s
[info] # Warmup Iteration   4: 69799.330 ops/s
[info] # Warmup Iteration   5: 72230.557 ops/s
[info] Iteration   1: 71986.432 ops/s
[info]                  ·gc.alloc.rate:                   1904.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              41645.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44026.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.352 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 72362.191 ops/s
[info]                  ·gc.alloc.rate:                   1912.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              41587.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43754.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 71793.357 ops/s
[info]                  ·gc.alloc.rate:               1899.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          41638.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29324.261 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 72591.664 ops/s
[info]                  ·gc.alloc.rate:               1932.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          41904.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43508.928 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 72538.283 ops/s
[info]                  ·gc.alloc.rate:               1945.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          42211.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43583.472 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   72254.385 ±(99.9%) 1348.170 ops/s [Average]
[info]   (min, avg, max) = (71793.357, 72254.385, 72591.664), stdev = 350.115
[info]   CI (99.9%): [70906.215, 73602.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1918.991 ±(99.9%) 75.303 MB/sec [Average]
[info]   (min, avg, max) = (1899.322, 1918.991, 1945.613), stdev = 19.556
[info]   CI (99.9%): [1843.688, 1994.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41797.352 ±(99.9%) 1009.643 B/op [Average]
[info]   (min, avg, max) = (41587.730, 41797.352, 42211.026), stdev = 262.201
[info]   CI (99.9%): [40787.709, 42806.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1875.819 ±(99.9%) 1158.548 MB/sec [Average]
[info]   (min, avg, max) = (1337.626, 1875.819, 2013.656), stdev = 300.871
[info]   CI (99.9%): [717.271, 3034.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40839.634 ±(99.9%) 24799.560 B/op [Average]
[info]   (min, avg, max) = (29324.261, 40839.634, 44026.851), stdev = 6440.367
[info]   CI (99.9%): [16040.074, 65639.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 4.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 2.852), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.274 ±(99.9%) 104.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.274, 62.352), stdev = 27.043
[info]   CI (99.9%): [≈ 0, 120.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79368.175 ops/s
[info] # Warmup Iteration   2: 178095.842 ops/s
[info] # Warmup Iteration   3: 180847.762 ops/s
[info] # Warmup Iteration   4: 181942.916 ops/s
[info] # Warmup Iteration   5: 179688.498 ops/s
[info] Iteration   1: 181513.796 ops/s
[info]                  ·gc.alloc.rate:                   2033.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              17626.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17437.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 181790.139 ops/s
[info]                  ·gc.alloc.rate:                   2036.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              17626.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17364.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 180250.468 ops/s
[info]                  ·gc.alloc.rate:               2017.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          17615.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17501.665 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 173647.399 ops/s
[info]                  ·gc.alloc.rate:               1960.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          17766.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18182.265 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 181300.076 ops/s
[info]                  ·gc.alloc.rate:                   2043.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              17743.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17438.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   179700.376 ±(99.9%) 13221.197 ops/s [Average]
[info]   (min, avg, max) = (173647.399, 179700.376, 181790.139), stdev = 3433.503
[info]   CI (99.9%): [166479.178, 192921.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2018.263 ±(99.9%) 130.342 MB/sec [Average]
[info]   (min, avg, max) = (1960.212, 2018.263, 2043.912), stdev = 33.849
[info]   CI (99.9%): [1887.920, 2148.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17675.615 ±(99.9%) 280.737 B/op [Average]
[info]   (min, avg, max) = (17615.232, 17675.615, 17766.283), stdev = 72.907
[info]   CI (99.9%): [17394.878, 17956.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.382 ±(99.9%) 11.458 MB/sec [Average]
[info]   (min, avg, max) = (2004.437, 2007.382, 2011.905), stdev = 2.976
[info]   CI (99.9%): [1995.924, 2018.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17584.740 ±(99.9%) 1299.836 B/op [Average]
[info]   (min, avg, max) = (17364.005, 17584.740, 18182.265), stdev = 337.563
[info]   CI (99.9%): [16284.904, 18884.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.270), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.533 ±(99.9%) 47.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.533, 28.338), stdev = 12.318
[info]   CI (99.9%): [≈ 0, 53.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831891.970 ops/s
[info] # Warmup Iteration   2: 1418148.837 ops/s
[info] # Warmup Iteration   3: 1482713.661 ops/s
[info] # Warmup Iteration   4: 1510191.245 ops/s
[info] # Warmup Iteration   5: 1521562.137 ops/s
[info] Iteration   1: 1511713.318 ops/s
[info]                  ·gc.alloc.rate:                   1284.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1337.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1398.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1509413.509 ops/s
[info]                  ·gc.alloc.rate:                   1279.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1333.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1457667.640 ops/s
[info]                  ·gc.alloc.rate:                   1260.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1361.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1452.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1514097.751 ops/s
[info]                  ·gc.alloc.rate:                   1306.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1357.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1398.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1514026.913 ops/s
[info]                  ·gc.alloc.rate:                   1294.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1345.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1396.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1501383.826 ±(99.9%) 94395.194 ops/s [Average]
[info]   (min, avg, max) = (1457667.640, 1501383.826, 1514097.751), stdev = 24514.132
[info]   CI (99.9%): [1406988.632, 1595779.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1285.240 ±(99.9%) 66.241 MB/sec [Average]
[info]   (min, avg, max) = (1260.800, 1285.240, 1306.672), stdev = 17.203
[info]   CI (99.9%): [1218.999, 1351.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1347.271 ±(99.9%) 46.761 B/op [Average]
[info]   (min, avg, max) = (1333.749, 1347.271, 1361.286), stdev = 12.144
[info]   CI (99.9%): [1300.510, 1394.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.387 ±(99.9%) 4.260 MB/sec [Average]
[info]   (min, avg, max) = (1343.103, 1344.387, 1345.879), stdev = 1.106
[info]   CI (99.9%): [1340.127, 1348.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1409.488 ±(99.9%) 92.254 B/op [Average]
[info]   (min, avg, max) = (1396.017, 1409.488, 1452.194), stdev = 23.958
[info]   CI (99.9%): [1317.234, 1501.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.173 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.637, 3.040), stdev = 1.343
[info]   CI (99.9%): [≈ 0, 5.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.662 ±(99.9%) 5.375 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.662, 3.159), stdev = 1.396
[info]   CI (99.9%): [≈ 0, 6.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1026649.364 ops/s
[info] # Warmup Iteration   2: 1694770.465 ops/s
[info] # Warmup Iteration   3: 1762403.556 ops/s
[info] # Warmup Iteration   4: 1761676.462 ops/s
[info] # Warmup Iteration   5: 1762823.559 ops/s
[info] Iteration   1: 1762015.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1758027.643 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1757966.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1757131.027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1761531.332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1759334.393 ±(99.9%) 8705.830 ops/s [Average]
[info]   (min, avg, max) = (1757131.027, 1759334.393, 1762015.218), stdev = 2260.876
[info]   CI (99.9%): [1750628.563, 1768040.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28115.316 ops/s
[info] # Warmup Iteration   2: 142392.673 ops/s
[info] # Warmup Iteration   3: 151958.322 ops/s
[info] # Warmup Iteration   4: 149844.824 ops/s
[info] # Warmup Iteration   5: 149203.268 ops/s
[info] Iteration   1: 154748.830 ops/s
[info]                  ·gc.alloc.rate:                   2009.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              20438.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20388.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 154503.955 ops/s
[info]                  ·gc.alloc.rate:                   2006.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              20441.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20475.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 154702.050 ops/s
[info]                  ·gc.alloc.rate:                   1997.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              20314.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20517.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 154383.071 ops/s
[info]                  ·gc.alloc.rate:               2006.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          20457.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20600.060 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 154791.161 ops/s
[info]                  ·gc.alloc.rate:               2025.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          20596.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20600.355 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   154625.813 ±(99.9%) 672.646 ops/s [Average]
[info]   (min, avg, max) = (154383.071, 154625.813, 154791.161), stdev = 174.684
[info]   CI (99.9%): [153953.167, 155298.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2009.150 ±(99.9%) 39.856 MB/sec [Average]
[info]   (min, avg, max) = (1997.099, 2009.150, 2025.620), stdev = 10.350
[info]   CI (99.9%): [1969.294, 2049.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20449.747 ±(99.9%) 385.373 B/op [Average]
[info]   (min, avg, max) = (20314.364, 20449.747, 20596.342), stdev = 100.080
[info]   CI (99.9%): [20064.374, 20835.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.697 ±(99.9%) 32.540 MB/sec [Average]
[info]   (min, avg, max) = (2004.684, 2015.697, 2026.015), stdev = 8.450
[info]   CI (99.9%): [1983.158, 2048.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20516.424 ±(99.9%) 344.561 B/op [Average]
[info]   (min, avg, max) = (20388.620, 20516.424, 20600.355), stdev = 89.481
[info]   CI (99.9%): [20171.863, 20860.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.167), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 2.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.424, 1.696), stdev = 0.719
[info]   CI (99.9%): [≈ 0, 3.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9304.422 ops/s
[info] # Warmup Iteration   2: 36415.007 ops/s
[info] # Warmup Iteration   3: 41474.737 ops/s
[info] # Warmup Iteration   4: 42127.489 ops/s
[info] # Warmup Iteration   5: 42953.435 ops/s
[info] Iteration   1: 42554.850 ops/s
[info]                  ·gc.alloc.rate:               1555.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          57538.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49471.126 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 43091.209 ops/s
[info]                  ·gc.alloc.rate:                   1586.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              57927.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48904.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 43211.927 ops/s
[info]                  ·gc.alloc.rate:                   1576.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              57430.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48816.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 43043.237 ops/s
[info]                  ·gc.alloc.rate:                   1598.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              58425.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73266.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 42033.749 ops/s
[info]                  ·gc.alloc.rate:                   1544.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              57821.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49957.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   42786.995 ±(99.9%) 1886.466 ops/s [Average]
[info]   (min, avg, max) = (42033.749, 42786.995, 43211.927), stdev = 489.909
[info]   CI (99.9%): [40900.529, 44673.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1572.214 ±(99.9%) 84.638 MB/sec [Average]
[info]   (min, avg, max) = (1544.336, 1572.214, 1598.129), stdev = 21.980
[info]   CI (99.9%): [1487.575, 1656.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57828.907 ±(99.9%) 1500.989 B/op [Average]
[info]   (min, avg, max) = (57430.869, 57828.907, 58425.144), stdev = 389.802
[info]   CI (99.9%): [56327.918, 59329.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.051 ±(99.9%) 1147.433 MB/sec [Average]
[info]   (min, avg, max) = (1334.278, 1471.051, 2004.087), stdev = 297.985
[info]   CI (99.9%): [323.618, 2618.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   54083.048 ±(99.9%) 41331.694 B/op [Average]
[info]   (min, avg, max) = (48816.116, 54083.048, 73266.356), stdev = 10733.710
[info]   CI (99.9%): [12751.354, 95414.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 4.143), stdev = 1.839
[info]   CI (99.9%): [≈ 0, 7.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.093 ±(99.9%) 257.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.093, 150.882), stdev = 66.970
[info]   CI (99.9%): [≈ 0, 288.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433840.776 ops/s
[info] # Warmup Iteration   2: 780799.939 ops/s
[info] # Warmup Iteration   3: 742967.672 ops/s
[info] # Warmup Iteration   4: 790454.862 ops/s
[info] # Warmup Iteration   5: 789431.547 ops/s
[info] Iteration   1: 759436.141 ops/s
[info]                  ·gc.alloc.rate:                   1537.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              3187.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4183.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 774865.797 ops/s
[info]                  ·gc.alloc.rate:                   1553.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              3155.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2735.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 769097.766 ops/s
[info]                  ·gc.alloc.rate:                   1540.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              3151.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 770495.533 ops/s
[info]                  ·gc.alloc.rate:               1556.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          3179.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2744.564 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 788733.698 ops/s
[info]                  ·gc.alloc.rate:                   1592.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              3178.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4019.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   772525.787 ±(99.9%) 41085.852 ops/s [Average]
[info]   (min, avg, max) = (759436.141, 772525.787, 788733.698), stdev = 10669.865
[info]   CI (99.9%): [731439.935, 813611.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1556.250 ±(99.9%) 84.709 MB/sec [Average]
[info]   (min, avg, max) = (1537.853, 1556.250, 1592.904), stdev = 21.999
[info]   CI (99.9%): [1471.541, 1640.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3170.439 ±(99.9%) 60.929 B/op [Average]
[info]   (min, avg, max) = (3151.875, 3170.439, 3187.087), stdev = 15.823
[info]   CI (99.9%): [3109.510, 3231.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.849 ±(99.9%) 1415.635 MB/sec [Average]
[info]   (min, avg, max) = (1343.562, 1613.849, 2018.737), stdev = 367.636
[info]   CI (99.9%): [198.215, 3029.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3287.327 ±(99.9%) 2871.357 B/op [Average]
[info]   (min, avg, max) = (2735.082, 3287.327, 4183.685), stdev = 745.682
[info]   CI (99.9%): [415.970, 6158.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 4.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.602), stdev = 1.106
[info]   CI (99.9%): [≈ 0, 4.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.319 ±(99.9%) 8.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.319, 5.285), stdev = 2.246
[info]   CI (99.9%): [≈ 0, 9.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1986.099 ops/s
[info] # Warmup Iteration   2: 24664.006 ops/s
[info] # Warmup Iteration   3: 32833.189 ops/s
[info] # Warmup Iteration   4: 31763.966 ops/s
[info] # Warmup Iteration   5: 31793.753 ops/s
[info] Iteration   1: 32279.948 ops/s
[info]                  ·gc.alloc.rate:                   2297.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              111997.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97738.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 32792.506 ops/s
[info]                  ·gc.alloc.rate:                   2345.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              112517.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96471.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33191.699 ops/s
[info]                  ·gc.alloc.rate:               2374.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          112554.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127514.574 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 33215.269 ops/s
[info]                  ·gc.alloc.rate:               2390.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          113208.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95827.240 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 33240.728 ops/s
[info]                  ·gc.alloc.rate:               2417.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          114444.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127977.053 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   32944.030 ±(99.9%) 1595.701 ops/s [Average]
[info]   (min, avg, max) = (32279.948, 32944.030, 33240.728), stdev = 414.399
[info]   CI (99.9%): [31348.329, 34539.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2364.775 ±(99.9%) 176.672 MB/sec [Average]
[info]   (min, avg, max) = (2297.303, 2364.775, 2417.195), stdev = 45.881
[info]   CI (99.9%): [2188.103, 2541.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112944.670 ±(99.9%) 3627.809 B/op [Average]
[info]   (min, avg, max) = (111997.899, 112944.670, 114444.827), stdev = 942.131
[info]   CI (99.9%): [109316.861, 116572.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.265 ±(99.9%) 1441.577 MB/sec [Average]
[info]   (min, avg, max) = (2004.818, 2286.265, 2703.010), stdev = 374.373
[info]   CI (99.9%): [844.688, 3727.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109105.849 ±(99.9%) 65578.605 B/op [Average]
[info]   (min, avg, max) = (95827.240, 109105.849, 127977.053), stdev = 17030.555
[info]   CI (99.9%): [43527.245, 174684.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.333), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.447 ±(99.9%) 27.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.447, 16.238), stdev = 7.163
[info]   CI (99.9%): [≈ 0, 31.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134052.354 ops/s
[info] # Warmup Iteration   2: 373631.075 ops/s
[info] # Warmup Iteration   3: 382408.173 ops/s
[info] # Warmup Iteration   4: 385085.654 ops/s
[info] # Warmup Iteration   5: 379164.152 ops/s
[info] Iteration   1: 380441.403 ops/s
[info]                  ·gc.alloc.rate:                   1094.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              4526.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5532.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 383779.658 ops/s
[info]                  ·gc.alloc.rate:               1093.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          4483.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2742.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 382691.303 ops/s
[info]                  ·gc.alloc.rate:                   1094.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              4502.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5506.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 384808.236 ops/s
[info]                  ·gc.alloc.rate:               1109.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          4536.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5481.611 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 385732.306 ops/s
[info]                  ·gc.alloc.rate:                   1086.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              4431.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2735.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   383490.581 ±(99.9%) 7887.112 ops/s [Average]
[info]   (min, avg, max) = (380441.403, 383490.581, 385732.306), stdev = 2048.258
[info]   CI (99.9%): [375603.469, 391377.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1095.544 ±(99.9%) 32.555 MB/sec [Average]
[info]   (min, avg, max) = (1086.049, 1095.544, 1109.282), stdev = 8.455
[info]   CI (99.9%): [1062.989, 1128.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4496.271 ±(99.9%) 160.762 B/op [Average]
[info]   (min, avg, max) = (4431.382, 4496.271, 4536.939), stdev = 41.749
[info]   CI (99.9%): [4335.508, 4657.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.152 ±(99.9%) 1411.405 MB/sec [Average]
[info]   (min, avg, max) = (668.807, 1071.152, 1340.254), stdev = 366.537
[info]   CI (99.9%): [≈ 0, 2482.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4399.769 ±(99.9%) 5837.543 B/op [Average]
[info]   (min, avg, max) = (2735.657, 4399.769, 5532.237), stdev = 1515.991
[info]   CI (99.9%): [≈ 0, 10237.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.143), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.617 ±(99.9%) 21.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.617, 12.826), stdev = 5.707
[info]   CI (99.9%): [≈ 0, 24.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 797804.444 ops/s
[info] # Warmup Iteration   2: 1935328.003 ops/s
[info] # Warmup Iteration   3: 1888749.582 ops/s
[info] # Warmup Iteration   4: 1890893.482 ops/s
[info] # Warmup Iteration   5: 1901136.506 ops/s
[info] Iteration   1: 1890655.348 ops/s
[info]                  ·gc.alloc.rate:                   1149.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1847625.146 ops/s
[info]                  ·gc.alloc.rate:               1138.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          969.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1144.848 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1889002.932 ops/s
[info]                  ·gc.alloc.rate:               1123.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 560.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1874751.872 ops/s
[info]                  ·gc.alloc.rate:                   1141.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1889661.666 ops/s
[info]                  ·gc.alloc.rate:                   1152.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1878339.393 ±(99.9%) 70736.207 ops/s [Average]
[info]   (min, avg, max) = (1847625.146, 1878339.393, 1890655.348), stdev = 18369.968
[info]   CI (99.9%): [1807603.186, 1949075.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1140.935 ±(99.9%) 44.307 MB/sec [Average]
[info]   (min, avg, max) = (1123.125, 1140.935, 1152.327), stdev = 11.507
[info]   CI (99.9%): [1096.628, 1185.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   956.003 ±(99.9%) 47.658 B/op [Average]
[info]   (min, avg, max) = (935.734, 956.003, 969.518), stdev = 12.377
[info]   CI (99.9%): [908.345, 1003.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.200 ±(99.9%) 1158.190 MB/sec [Average]
[info]   (min, avg, max) = (672.154, 1210.200, 1345.867), stdev = 300.778
[info]   CI (99.9%): [52.010, 2368.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1014.693 ±(99.9%) 979.569 B/op [Average]
[info]   (min, avg, max) = (560.007, 1014.693, 1144.848), stdev = 254.391
[info]   CI (99.9%): [35.124, 1994.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.268), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.551 ±(99.9%) 4.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 2.722), stdev = 1.213
[info]   CI (99.9%): [≈ 0, 5.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1469755.584 ops/s
[info] # Warmup Iteration   2: 2201837.226 ops/s
[info] # Warmup Iteration   3: 2247568.575 ops/s
[info] # Warmup Iteration   4: 2250626.540 ops/s
[info] # Warmup Iteration   5: 2251470.992 ops/s
[info] Iteration   1: 2254624.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2253897.529 ops/s
[info]                  ·gc.alloc.rate:      0.079 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.055 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2254515.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2253871.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2254653.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2254312.637 ±(99.9%) 1517.685 ops/s [Average]
[info]   (min, avg, max) = (2253871.879, 2254312.637, 2254653.660), stdev = 394.138
[info]   CI (99.9%): [2252794.952, 2255830.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.011 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76012.628 ops/s
[info] # Warmup Iteration   2: 227651.176 ops/s
[info] # Warmup Iteration   3: 247243.448 ops/s
[info] # Warmup Iteration   4: 249037.288 ops/s
[info] # Warmup Iteration   5: 249694.339 ops/s
[info] Iteration   1: 248449.122 ops/s
[info]                  ·gc.alloc.rate:               1649.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          10445.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12701.675 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 244205.380 ops/s
[info]                  ·gc.alloc.rate:                   1616.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              10416.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8625.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 245660.233 ops/s
[info]                  ·gc.alloc.rate:                   1625.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              10414.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8565.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 248520.547 ops/s
[info]                  ·gc.alloc.rate:                   1640.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              10386.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8445.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 248721.244 ops/s
[info]                  ·gc.alloc.rate:               1649.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          10437.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8439.159 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   247111.305 ±(99.9%) 7919.050 ops/s [Average]
[info]   (min, avg, max) = (244205.380, 247111.305, 248721.244), stdev = 2056.552
[info]   CI (99.9%): [239192.255, 255030.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1636.227 ±(99.9%) 56.312 MB/sec [Average]
[info]   (min, avg, max) = (1616.636, 1636.227, 1649.511), stdev = 14.624
[info]   CI (99.9%): [1579.915, 1692.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10420.229 ±(99.9%) 89.084 B/op [Average]
[info]   (min, avg, max) = (10386.386, 10420.229, 10445.799), stdev = 23.135
[info]   CI (99.9%): [10331.145, 10509.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.688 ±(99.9%) 1153.067 MB/sec [Average]
[info]   (min, avg, max) = (1333.695, 1469.688, 2005.343), stdev = 299.448
[info]   CI (99.9%): [316.621, 2622.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9355.584 ±(99.9%) 7209.192 B/op [Average]
[info]   (min, avg, max) = (8439.159, 9355.584, 12701.675), stdev = 1872.204
[info]   CI (99.9%): [2146.392, 16564.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 5.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.457), stdev = 1.499
[info]   CI (99.9%): [≈ 0, 6.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.228 ±(99.9%) 37.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.228, 22.272), stdev = 9.661
[info]   CI (99.9%): [≈ 0, 42.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 11.000), stdev = 3.674
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16501.991 ops/s
[info] # Warmup Iteration   2: 62555.888 ops/s
[info] # Warmup Iteration   3: 68487.392 ops/s
[info] # Warmup Iteration   4: 68958.885 ops/s
[info] # Warmup Iteration   5: 70097.290 ops/s
[info] Iteration   1: 70625.592 ops/s
[info]                  ·gc.alloc.rate:               1547.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          34484.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29896.544 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 71021.154 ops/s
[info]                  ·gc.alloc.rate:                   1553.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              34429.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29746.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 71299.356 ops/s
[info]                  ·gc.alloc.rate:                   1572.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              34704.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29645.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 70348.899 ops/s
[info]                  ·gc.alloc.rate:                   1577.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              35298.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44948.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 69672.542 ops/s
[info]                  ·gc.alloc.rate:               1537.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          34722.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30214.252 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70593.508 ±(99.9%) 2427.848 ops/s [Average]
[info]   (min, avg, max) = (69672.542, 70593.508, 71299.356), stdev = 630.505
[info]   CI (99.9%): [68165.660, 73021.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1557.696 ±(99.9%) 65.643 MB/sec [Average]
[info]   (min, avg, max) = (1537.143, 1557.696, 1577.779), stdev = 17.047
[info]   CI (99.9%): [1492.053, 1623.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34727.727 ±(99.9%) 1325.684 B/op [Average]
[info]   (min, avg, max) = (34429.462, 34727.727, 35298.124), stdev = 344.276
[info]   CI (99.9%): [33402.043, 36053.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.766 ±(99.9%) 1150.269 MB/sec [Average]
[info]   (min, avg, max) = (1337.568, 1474.766, 2009.121), stdev = 298.721
[info]   CI (99.9%): [324.497, 2625.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32890.140 ±(99.9%) 25968.917 B/op [Average]
[info]   (min, avg, max) = (29645.466, 32890.140, 44948.126), stdev = 6744.045
[info]   CI (99.9%): [6921.224, 58859.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.540), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.207 ±(99.9%) 131.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.207, 78.121), stdev = 34.199
[info]   CI (99.9%): [≈ 0, 148.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28647.615 ops/s
[info] # Warmup Iteration   2: 73744.961 ops/s
[info] # Warmup Iteration   3: 74599.991 ops/s
[info] # Warmup Iteration   4: 75844.295 ops/s
[info] # Warmup Iteration   5: 75692.371 ops/s
[info] Iteration   1: 75848.799 ops/s
[info]                  ·gc.alloc.rate:               986.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          20477.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13842.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 76367.770 ops/s
[info]                  ·gc.alloc.rate:               987.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          20359.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13762.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 75158.754 ops/s
[info]                  ·gc.alloc.rate:                   995.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              20849.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27982.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 77719.288 ops/s
[info]                  ·gc.alloc.rate:               1002.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          20301.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13537.367 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 78856.364 ops/s
[info]                  ·gc.alloc.rate:                   1029.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              20554.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26695.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   76790.195 ±(99.9%) 5730.392 ops/s [Average]
[info]   (min, avg, max) = (75158.754, 76790.195, 78856.364), stdev = 1488.165
[info]   CI (99.9%): [71059.802, 82520.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1000.622 ±(99.9%) 67.788 MB/sec [Average]
[info]   (min, avg, max) = (986.932, 1000.622, 1029.990), stdev = 17.604
[info]   CI (99.9%): [932.834, 1068.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20508.559 ±(99.9%) 827.274 B/op [Average]
[info]   (min, avg, max) = (20301.494, 20508.559, 20849.587), stdev = 214.840
[info]   CI (99.9%): [19681.285, 21335.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.508 ±(99.9%) 1411.352 MB/sec [Average]
[info]   (min, avg, max) = (667.145, 935.508, 1337.698), stdev = 366.524
[info]   CI (99.9%): [≈ 0, 2346.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19164.154 ±(99.9%) 28792.580 B/op [Average]
[info]   (min, avg, max) = (13537.367, 19164.154, 27982.486), stdev = 7477.342
[info]   CI (99.9%): [≈ 0, 47956.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.336 ±(99.9%) 2.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 1.246), stdev = 0.543
[info]   CI (99.9%): [≈ 0, 2.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38235.057 ops/s
[info] # Warmup Iteration   2: 87284.561 ops/s
[info] # Warmup Iteration   3: 90843.366 ops/s
[info] # Warmup Iteration   4: 91532.072 ops/s
[info] # Warmup Iteration   5: 92344.365 ops/s
[info] Iteration   1: 91120.509 ops/s
[info]                  ·gc.alloc.rate:                   1134.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              19587.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23184.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 89401.541 ops/s
[info]                  ·gc.alloc.rate:               1104.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          19443.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23647.637 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 89076.265 ops/s
[info]                  ·gc.alloc.rate:                   1084.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              19165.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11870.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 91513.134 ops/s
[info]                  ·gc.alloc.rate:               1127.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          19394.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23119.654 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 89089.745 ops/s
[info]                  ·gc.alloc.rate:                   1095.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              19349.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11879.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   90040.239 ±(99.9%) 4546.787 ops/s [Average]
[info]   (min, avg, max) = (89076.265, 90040.239, 91513.134), stdev = 1180.786
[info]   CI (99.9%): [85493.452, 94587.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1109.417 ±(99.9%) 81.434 MB/sec [Average]
[info]   (min, avg, max) = (1084.768, 1109.417, 1134.401), stdev = 21.148
[info]   CI (99.9%): [1027.982, 1190.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19388.086 ±(99.9%) 590.080 B/op [Average]
[info]   (min, avg, max) = (19165.400, 19388.086, 19587.571), stdev = 153.242
[info]   CI (99.9%): [18798.005, 19978.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.048 ±(99.9%) 1416.309 MB/sec [Average]
[info]   (min, avg, max) = (671.878, 1075.048, 1344.355), stdev = 367.811
[info]   CI (99.9%): [≈ 0, 2491.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18740.393 ±(99.9%) 24145.398 B/op [Average]
[info]   (min, avg, max) = (11870.561, 18740.393, 23647.637), stdev = 6270.483
[info]   CI (99.9%): [≈ 0, 42885.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.624 ±(99.9%) 5.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.624, 3.039), stdev = 1.350
[info]   CI (99.9%): [≈ 0, 5.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.029 ±(99.9%) 91.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.029, 53.690), stdev = 23.851
[info]   CI (99.9%): [≈ 0, 102.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3804.466 ops/s
[info] # Warmup Iteration   2: 41261.832 ops/s
[info] # Warmup Iteration   3: 44865.022 ops/s
[info] # Warmup Iteration   4: 44169.860 ops/s
[info] # Warmup Iteration   5: 44866.939 ops/s
[info] Iteration   1: 45364.470 ops/s
[info]                  ·gc.alloc.rate:                   2123.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              73669.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69620.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 44371.732 ops/s
[info]                  ·gc.alloc.rate:                   2076.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              73655.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70928.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 44526.496 ops/s
[info]                  ·gc.alloc.rate:                   2071.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              73211.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70641.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 44376.719 ops/s
[info]                  ·gc.alloc.rate:                   2091.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              74179.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70935.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 45203.906 ops/s
[info]                  ·gc.alloc.rate:               2129.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          74125.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69751.224 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44768.665 ±(99.9%) 1840.915 ops/s [Average]
[info]   (min, avg, max) = (44371.732, 44768.665, 45364.470), stdev = 478.080
[info]   CI (99.9%): [42927.749, 46609.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2098.626 ±(99.9%) 101.980 MB/sec [Average]
[info]   (min, avg, max) = (2071.694, 2098.626, 2129.036), stdev = 26.484
[info]   CI (99.9%): [1996.646, 2200.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73768.330 ±(99.9%) 1526.727 B/op [Average]
[info]   (min, avg, max) = (73211.995, 73768.330, 74179.336), stdev = 396.486
[info]   CI (99.9%): [72241.603, 75295.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2001.938 ±(99.9%) 12.895 MB/sec [Average]
[info]   (min, avg, max) = (1998.950, 2001.938, 2007.143), stdev = 3.349
[info]   CI (99.9%): [1989.044, 2014.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70375.636 ±(99.9%) 2473.335 B/op [Average]
[info]   (min, avg, max) = (69620.806, 70375.636, 70935.931), stdev = 642.317
[info]   CI (99.9%): [67902.301, 72848.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.435), stdev = 1.970
[info]   CI (99.9%): [≈ 0, 8.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.651 ±(99.9%) 263.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.651, 153.830), stdev = 68.305
[info]   CI (99.9%): [≈ 0, 294.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48893.382 ops/s
[info] # Warmup Iteration   2: 112662.858 ops/s
[info] # Warmup Iteration   3: 112026.770 ops/s
[info] # Warmup Iteration   4: 113094.802 ops/s
[info] # Warmup Iteration   5: 113602.004 ops/s
[info] Iteration   1: 115392.970 ops/s
[info]                  ·gc.alloc.rate:                   1109.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              15134.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18262.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 115954.256 ops/s
[info]                  ·gc.alloc.rate:               1097.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          14893.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9091.125 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 115619.163 ops/s
[info]                  ·gc.alloc.rate:                   1107.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              15074.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18243.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 115774.928 ops/s
[info]                  ·gc.alloc.rate:               1120.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          15224.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18237.679 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 114195.229 ops/s
[info]                  ·gc.alloc.rate:                   1092.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              15055.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9245.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.479 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   115387.309 ±(99.9%) 2686.166 ops/s [Average]
[info]   (min, avg, max) = (114195.229, 115387.309, 115954.256), stdev = 697.589
[info]   CI (99.9%): [112701.143, 118073.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1105.503 ±(99.9%) 42.240 MB/sec [Average]
[info]   (min, avg, max) = (1092.396, 1105.503, 1120.388), stdev = 10.970
[info]   CI (99.9%): [1063.264, 1147.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15076.289 ±(99.9%) 468.707 B/op [Average]
[info]   (min, avg, max) = (14893.086, 15076.289, 15224.395), stdev = 121.722
[info]   CI (99.9%): [14607.582, 15544.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1072.491 ±(99.9%) 1413.569 MB/sec [Average]
[info]   (min, avg, max) = (669.897, 1072.491, 1342.140), stdev = 367.099
[info]   CI (99.9%): [≈ 0, 2486.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14616.134 ±(99.9%) 19151.522 B/op [Average]
[info]   (min, avg, max) = (9091.125, 14616.134, 18262.651), stdev = 4973.589
[info]   CI (99.9%): [≈ 0, 33767.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.372), stdev = 1.501
[info]   CI (99.9%): [≈ 0, 6.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.466 ±(99.9%) 79.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.466, 46.479), stdev = 20.692
[info]   CI (99.9%): [≈ 0, 89.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144365.140 ops/s
[info] # Warmup Iteration   2: 297616.832 ops/s
[info] # Warmup Iteration   3: 303057.299 ops/s
[info] # Warmup Iteration   4: 304662.937 ops/s
[info] # Warmup Iteration   5: 304523.201 ops/s
[info] Iteration   1: 303144.705 ops/s
[info]                  ·gc.alloc.rate:                   468.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              2430.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2656.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 304750.976 ops/s
[info]                  ·gc.alloc.rate:      452.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 304252.626 ops/s
[info]                  ·gc.alloc.rate:               476.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          2465.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3447.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 302821.365 ops/s
[info]                  ·gc.alloc.rate:               468.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          2435.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3463.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 299939.729 ops/s
[info]                  ·gc.alloc.rate:                   468.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              2460.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3502.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   302981.880 ±(99.9%) 7217.121 ops/s [Average]
[info]   (min, avg, max) = (299939.729, 302981.880, 304750.976), stdev = 1874.263
[info]   CI (99.9%): [295764.759, 310199.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   466.998 ±(99.9%) 34.156 MB/sec [Average]
[info]   (min, avg, max) = (452.492, 466.998, 476.827), stdev = 8.870
[info]   CI (99.9%): [432.841, 501.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2425.630 ±(99.9%) 201.708 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2425.630, 2465.902), stdev = 52.383
[info]   CI (99.9%): [2223.921, 2627.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.457 ±(99.9%) 1112.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.457, 667.608), stdev = 288.821
[info]   CI (99.9%): [≈ 0, 1614.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2613.997 ±(99.9%) 5789.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2613.997, 3502.384), stdev = 1503.421
[info]   CI (99.9%): [≈ 0, 8403.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.218), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419052.151 ops/s
[info] # Warmup Iteration   2: 624656.366 ops/s
[info] # Warmup Iteration   3: 659735.934 ops/s
[info] # Warmup Iteration   4: 658231.091 ops/s
[info] # Warmup Iteration   5: 664938.655 ops/s
[info] Iteration   1: 664247.651 ops/s
[info]                  ·gc.alloc.rate:                   847.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              2008.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 645038.735 ops/s
[info]                  ·gc.alloc.rate:               814.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          1985.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1637.625 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 643723.044 ops/s
[info]                  ·gc.alloc.rate:                   823.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              2014.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1641.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 640132.146 ops/s
[info]                  ·gc.alloc.rate:                   824.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              2027.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3303.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 651297.011 ops/s
[info]                  ·gc.alloc.rate:               822.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          1986.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1624.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   648887.717 ±(99.9%) 36524.367 ops/s [Average]
[info]   (min, avg, max) = (640132.146, 648887.717, 664247.651), stdev = 9485.262
[info]   CI (99.9%): [612363.350, 685412.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   826.441 ±(99.9%) 48.162 MB/sec [Average]
[info]   (min, avg, max) = (814.098, 826.441, 847.532), stdev = 12.507
[info]   CI (99.9%): [778.279, 874.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2004.459 ±(99.9%) 68.861 B/op [Average]
[info]   (min, avg, max) = (1985.960, 2004.459, 2027.025), stdev = 17.883
[info]   CI (99.9%): [1935.598, 2073.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.968 ±(99.9%) 1157.586 MB/sec [Average]
[info]   (min, avg, max) = (671.148, 805.968, 1343.736), stdev = 300.622
[info]   CI (99.9%): [≈ 0, 1963.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1959.493 ±(99.9%) 2894.367 B/op [Average]
[info]   (min, avg, max) = (1590.182, 1959.493, 3303.610), stdev = 751.658
[info]   CI (99.9%): [≈ 0, 4853.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.102), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329978.881 ops/s
[info] # Warmup Iteration   2: 712529.236 ops/s
[info] # Warmup Iteration   3: 744025.038 ops/s
[info] # Warmup Iteration   4: 749995.084 ops/s
[info] # Warmup Iteration   5: 747447.689 ops/s
[info] Iteration   1: 749724.606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 741184.268 ops/s
[info]                  ·gc.alloc.rate:      0.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.109 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 748754.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 748980.147 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 743794.164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   746487.634 ±(99.9%) 14562.864 ops/s [Average]
[info]   (min, avg, max) = (741184.268, 746487.634, 749724.606), stdev = 3781.930
[info]   CI (99.9%): [731924.770, 761050.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.011 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.022 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97811.581 ops/s
[info] # Warmup Iteration   2: 252995.386 ops/s
[info] # Warmup Iteration   3: 262144.393 ops/s
[info] # Warmup Iteration   4: 267765.901 ops/s
[info] # Warmup Iteration   5: 265020.660 ops/s
[info] Iteration   1: 268153.555 ops/s
[info]                  ·gc.alloc.rate:                   883.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              5185.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3921.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 267513.813 ops/s
[info]                  ·gc.alloc.rate:               873.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          5138.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3930.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 266764.798 ops/s
[info]                  ·gc.alloc.rate:                   890.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              5250.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7887.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 266404.416 ops/s
[info]                  ·gc.alloc.rate:               877.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          5185.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3953.230 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 262352.607 ops/s
[info]                  ·gc.alloc.rate:                   854.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5127.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4014.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   266237.838 ±(99.9%) 8759.377 ops/s [Average]
[info]   (min, avg, max) = (262352.607, 266237.838, 268153.555), stdev = 2274.783
[info]   CI (99.9%): [257478.461, 274997.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   875.935 ±(99.9%) 51.458 MB/sec [Average]
[info]   (min, avg, max) = (854.757, 875.935, 890.062), stdev = 13.363
[info]   CI (99.9%): [824.477, 927.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5177.543 ±(99.9%) 187.859 B/op [Average]
[info]   (min, avg, max) = (5127.552, 5177.543, 5250.650), stdev = 48.786
[info]   CI (99.9%): [4989.683, 5365.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.376 ±(99.9%) 1151.033 MB/sec [Average]
[info]   (min, avg, max) = (668.145, 802.376, 1337.099), stdev = 298.920
[info]   CI (99.9%): [≈ 0, 1953.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4741.547 ±(99.9%) 6773.999 B/op [Average]
[info]   (min, avg, max) = (3921.598, 4741.547, 7887.812), stdev = 1759.186
[info]   CI (99.9%): [≈ 0, 11515.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.375), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23813.943 ops/s
[info] # Warmup Iteration   2: 105207.943 ops/s
[info] # Warmup Iteration   3: 121885.968 ops/s
[info] # Warmup Iteration   4: 121797.400 ops/s
[info] # Warmup Iteration   5: 125573.328 ops/s
[info] Iteration   1: 125631.918 ops/s
[info]                  ·gc.alloc.rate:                   1756.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              22007.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16803.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 127138.411 ops/s
[info]                  ·gc.alloc.rate:                   1803.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              22320.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24919.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 124135.003 ops/s
[info]                  ·gc.alloc.rate:                   1735.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              22004.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16975.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 127563.798 ops/s
[info]                  ·gc.alloc.rate:                   1810.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              22331.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24746.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 124556.585 ops/s
[info]                  ·gc.alloc.rate:               1754.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          22162.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16889.165 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   125805.143 ±(99.9%) 5855.239 ops/s [Average]
[info]   (min, avg, max) = (124135.003, 125805.143, 127563.798), stdev = 1520.587
[info]   CI (99.9%): [119949.904, 131660.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1771.951 ±(99.9%) 125.990 MB/sec [Average]
[info]   (min, avg, max) = (1735.608, 1771.951, 1810.006), stdev = 32.719
[info]   CI (99.9%): [1645.961, 1897.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22165.364 ±(99.9%) 616.610 B/op [Average]
[info]   (min, avg, max) = (22004.619, 22165.364, 22331.906), stdev = 160.132
[info]   CI (99.9%): [21548.754, 22781.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.200 ±(99.9%) 1413.858 MB/sec [Average]
[info]   (min, avg, max) = (1336.930, 1607.200, 2013.068), stdev = 367.174
[info]   CI (99.9%): [193.342, 3021.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20067.013 ±(99.9%) 16757.624 B/op [Average]
[info]   (min, avg, max) = (16803.220, 20067.013, 24919.760), stdev = 4351.902
[info]   CI (99.9%): [3309.390, 36824.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.726), stdev = 1.624
[info]   CI (99.9%): [≈ 0, 7.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.214 ±(99.9%) 77.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.214, 46.127), stdev = 20.100
[info]   CI (99.9%): [≈ 0, 87.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55406.214 ops/s
[info] # Warmup Iteration   2: 172388.680 ops/s
[info] # Warmup Iteration   3: 179552.887 ops/s
[info] # Warmup Iteration   4: 178444.341 ops/s
[info] # Warmup Iteration   5: 176093.531 ops/s
[info] Iteration   1: 176405.156 ops/s
[info]                  ·gc.alloc.rate:                   1089.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              9719.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11919.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 182929.337 ops/s
[info]                  ·gc.alloc.rate:                   1100.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              9470.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5748.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 181696.611 ops/s
[info]                  ·gc.alloc.rate:               1106.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          9586.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11586.539 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 177258.032 ops/s
[info]                  ·gc.alloc.rate:               1065.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          9456.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5941.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 176700.305 ops/s
[info]                  ·gc.alloc.rate:                   1087.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              9683.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11926.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   178997.888 ±(99.9%) 11832.141 ops/s [Average]
[info]   (min, avg, max) = (176405.156, 178997.888, 182929.337), stdev = 3072.769
[info]   CI (99.9%): [167165.748, 190830.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1089.852 ±(99.9%) 61.922 MB/sec [Average]
[info]   (min, avg, max) = (1065.000, 1089.852, 1106.756), stdev = 16.081
[info]   CI (99.9%): [1027.930, 1151.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9583.154 ±(99.9%) 461.547 B/op [Average]
[info]   (min, avg, max) = (9456.248, 9583.154, 9719.012), stdev = 119.862
[info]   CI (99.9%): [9121.606, 10044.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.991 ±(99.9%) 1410.567 MB/sec [Average]
[info]   (min, avg, max) = (668.308, 1069.991, 1338.950), stdev = 366.320
[info]   CI (99.9%): [≈ 0, 2480.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9424.296 ±(99.9%) 12596.065 B/op [Average]
[info]   (min, avg, max) = (5748.590, 9424.296, 11926.087), stdev = 3271.158
[info]   CI (99.9%): [≈ 0, 22020.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.601), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 6.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.524 ±(99.9%) 55.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.524, 32.077), stdev = 14.285
[info]   CI (99.9%): [≈ 0, 61.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199635.838 ops/s
[info] # Warmup Iteration   2: 466409.535 ops/s
[info] # Warmup Iteration   3: 446461.183 ops/s
[info] # Warmup Iteration   4: 464802.587 ops/s
[info] # Warmup Iteration   5: 466684.436 ops/s
[info] Iteration   1: 466423.722 ops/s
[info]                  ·gc.alloc.rate:                   927.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              3129.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2265.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 464799.753 ops/s
[info]                  ·gc.alloc.rate:                   938.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              3178.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4549.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 466705.157 ops/s
[info]                  ·gc.alloc.rate:               921.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          3108.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2266.693 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 467388.655 ops/s
[info]                  ·gc.alloc.rate:               923.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          3108.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2263.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 466610.285 ops/s
[info]                  ·gc.alloc.rate:                   957.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              3228.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4536.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   466385.514 ±(99.9%) 3690.940 ops/s [Average]
[info]   (min, avg, max) = (464799.753, 466385.514, 467388.655), stdev = 958.525
[info]   CI (99.9%): [462694.574, 470076.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   933.751 ±(99.9%) 56.691 MB/sec [Average]
[info]   (min, avg, max) = (921.712, 933.751, 957.287), stdev = 14.722
[info]   CI (99.9%): [877.061, 990.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3150.787 ±(99.9%) 200.397 B/op [Average]
[info]   (min, avg, max) = (3108.255, 3150.787, 3228.486), stdev = 52.042
[info]   CI (99.9%): [2950.390, 3351.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.952 ±(99.9%) 1418.092 MB/sec [Average]
[info]   (min, avg, max) = (671.454, 940.952, 1345.117), stdev = 368.274
[info]   CI (99.9%): [≈ 0, 2359.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3176.413 ±(99.9%) 4804.165 B/op [Average]
[info]   (min, avg, max) = (2263.353, 3176.413, 4549.758), stdev = 1247.626
[info]   CI (99.9%): [≈ 0, 7980.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.070), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3593.647 ops/s
[info] # Warmup Iteration   2: 51218.564 ops/s
[info] # Warmup Iteration   3: 67328.527 ops/s
[info] # Warmup Iteration   4: 66061.460 ops/s
[info] # Warmup Iteration   5: 66030.768 ops/s
[info] Iteration   1: 67505.109 ops/s
[info]                  ·gc.alloc.rate:                   2731.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              63669.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62557.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 68474.760 ops/s
[info]                  ·gc.alloc.rate:                   2759.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              63402.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61780.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 67833.319 ops/s
[info]                  ·gc.alloc.rate:                   2748.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              63752.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62502.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68501.457 ops/s
[info]                  ·gc.alloc.rate:                   2774.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              63737.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62019.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 68536.056 ops/s
[info]                  ·gc.alloc.rate:               2776.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          63747.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62131.321 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   68170.140 ±(99.9%) 1818.561 ops/s [Average]
[info]   (min, avg, max) = (67505.109, 68170.140, 68536.056), stdev = 472.275
[info]   CI (99.9%): [66351.579, 69988.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2757.882 ±(99.9%) 71.827 MB/sec [Average]
[info]   (min, avg, max) = (2731.154, 2757.882, 2776.000), stdev = 18.653
[info]   CI (99.9%): [2686.056, 2829.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63661.840 ±(99.9%) 573.876 B/op [Average]
[info]   (min, avg, max) = (63402.040, 63661.840, 63752.117), stdev = 149.034
[info]   CI (99.9%): [63087.964, 64235.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2694.430 ±(99.9%) 33.642 MB/sec [Average]
[info]   (min, avg, max) = (2683.471, 2694.430, 2705.614), stdev = 8.737
[info]   CI (99.9%): [2660.788, 2728.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62198.582 ±(99.9%) 1266.368 B/op [Average]
[info]   (min, avg, max) = (61780.915, 62198.582, 62557.973), stdev = 328.872
[info]   CI (99.9%): [60932.214, 63464.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.300 ±(99.9%) 2.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.291), stdev = 0.556
[info]   CI (99.9%): [≈ 0, 2.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.978 ±(99.9%) 49.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.978, 30.091), stdev = 12.967
[info]   CI (99.9%): [≈ 0, 56.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70823.644 ops/s
[info] # Warmup Iteration   2: 171520.913 ops/s
[info] # Warmup Iteration   3: 181597.695 ops/s
[info] # Warmup Iteration   4: 184150.894 ops/s
[info] # Warmup Iteration   5: 180521.064 ops/s
[info] Iteration   1: 185424.093 ops/s
[info]                  ·gc.alloc.rate:               1191.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          10116.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5690.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 179810.303 ops/s
[info]                  ·gc.alloc.rate:                   1180.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              10331.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11740.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 179577.385 ops/s
[info]                  ·gc.alloc.rate:               1166.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          10224.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11764.762 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 183352.232 ops/s
[info]                  ·gc.alloc.rate:                   1189.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              10210.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11527.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 182437.677 ops/s
[info]                  ·gc.alloc.rate:                   1183.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              10206.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5792.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   182120.338 ±(99.9%) 9497.896 ops/s [Average]
[info]   (min, avg, max) = (179577.385, 182120.338, 185424.093), stdev = 2466.573
[info]   CI (99.9%): [172622.442, 191618.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1182.540 ±(99.9%) 38.232 MB/sec [Average]
[info]   (min, avg, max) = (1166.659, 1182.540, 1191.950), stdev = 9.929
[info]   CI (99.9%): [1144.308, 1220.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10217.968 ±(99.9%) 294.033 B/op [Average]
[info]   (min, avg, max) = (10116.876, 10217.968, 10331.450), stdev = 76.359
[info]   CI (99.9%): [9923.935, 10512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.950 ±(99.9%) 1415.982 MB/sec [Average]
[info]   (min, avg, max) = (670.496, 1073.950, 1343.109), stdev = 367.726
[info]   CI (99.9%): [≈ 0, 2489.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9303.441 ±(99.9%) 12525.058 B/op [Average]
[info]   (min, avg, max) = (5690.947, 9303.441, 11764.762), stdev = 3252.718
[info]   CI (99.9%): [≈ 0, 21828.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.019), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.117 ±(99.9%) 43.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.117, 25.911), stdev = 11.230
[info]   CI (99.9%): [≈ 0, 49.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175129.985 ops/s
[info] # Warmup Iteration   2: 517070.511 ops/s
[info] # Warmup Iteration   3: 533338.839 ops/s
[info] # Warmup Iteration   4: 534644.351 ops/s
[info] # Warmup Iteration   5: 520768.519 ops/s
[info] Iteration   1: 537715.193 ops/s
[info]                  ·gc.alloc.rate:      530.247 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 547564.346 ops/s
[info]                  ·gc.alloc.rate:               565.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          1625.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1916.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 541268.143 ops/s
[info]                  ·gc.alloc.rate:                   559.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              1625.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1939.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 546229.981 ops/s
[info]                  ·gc.alloc.rate:               559.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          1612.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1924.181 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 532563.906 ops/s
[info]                  ·gc.alloc.rate:               546.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          1615.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1973.550 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   541068.314 ±(99.9%) 23772.038 ops/s [Average]
[info]   (min, avg, max) = (532563.906, 541068.314, 547564.346), stdev = 6173.523
[info]   CI (99.9%): [517296.276, 564840.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   552.304 ±(99.9%) 54.294 MB/sec [Average]
[info]   (min, avg, max) = (530.247, 552.304, 565.621), stdev = 14.100
[info]   CI (99.9%): [498.010, 606.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1606.359 ±(99.9%) 118.981 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1606.359, 1625.644), stdev = 30.899
[info]   CI (99.9%): [1487.378, 1725.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.893 ±(99.9%) 1149.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.893, 667.843), stdev = 298.455
[info]   CI (99.9%): [≈ 0, 1683.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1550.672 ±(99.9%) 3339.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1550.672, 1973.550), stdev = 867.128
[info]   CI (99.9%): [≈ 0, 4889.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674625.962 ops/s
[info] # Warmup Iteration   2: 1121515.948 ops/s
[info] # Warmup Iteration   3: 1161746.297 ops/s
[info] # Warmup Iteration   4: 1153835.895 ops/s
[info] # Warmup Iteration   5: 1138923.318 ops/s
[info] Iteration   1: 1154237.619 ops/s
[info]                  ·gc.alloc.rate:               881.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 915.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1137522.884 ops/s
[info]                  ·gc.alloc.rate:               862.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 928.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1158894.374 ops/s
[info]                  ·gc.alloc.rate:                   893.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1152713.312 ops/s
[info]                  ·gc.alloc.rate:               871.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          1189.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1151577.605 ops/s
[info]                  ·gc.alloc.rate:                   881.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1204.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     918.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1150989.159 ±(99.9%) 30907.531 ops/s [Average]
[info]   (min, avg, max) = (1137522.884, 1150989.159, 1158894.374), stdev = 8026.588
[info]   CI (99.9%): [1120081.628, 1181896.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   877.863 ±(99.9%) 45.409 MB/sec [Average]
[info]   (min, avg, max) = (862.128, 877.863, 893.381), stdev = 11.793
[info]   CI (99.9%): [832.454, 923.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1200.219 ±(99.9%) 36.331 B/op [Average]
[info]   (min, avg, max) = (1189.221, 1200.219, 1212.885), stdev = 9.435
[info]   CI (99.9%): [1163.888, 1236.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.152 ±(99.9%) 1157.875 MB/sec [Average]
[info]   (min, avg, max) = (671.116, 806.152, 1344.053), stdev = 300.696
[info]   CI (99.9%): [≈ 0, 1964.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1100.949 ±(99.9%) 1558.124 B/op [Average]
[info]   (min, avg, max) = (915.107, 1100.949, 1824.732), stdev = 404.640
[info]   CI (99.9%): [≈ 0, 2659.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 533731.128 ops/s
[info] # Warmup Iteration   2: 1235461.780 ops/s
[info] # Warmup Iteration   3: 1272384.440 ops/s
[info] # Warmup Iteration   4: 1271032.124 ops/s
[info] # Warmup Iteration   5: 1263444.354 ops/s
[info] Iteration   1: 1272195.200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1268836.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1271413.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1272309.441 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1272011.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1271353.333 ±(99.9%) 5577.956 ops/s [Average]
[info]   (min, avg, max) = (1268836.685, 1271353.333, 1272309.441), stdev = 1448.578
[info]   CI (99.9%): [1265775.377, 1276931.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98352.043 ops/s
[info] # Warmup Iteration   2: 338882.615 ops/s
[info] # Warmup Iteration   3: 332245.256 ops/s
[info] # Warmup Iteration   4: 349243.354 ops/s
[info] # Warmup Iteration   5: 355112.570 ops/s
[info] Iteration   1: 358872.225 ops/s
[info]                  ·gc.alloc.rate:                   998.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              4379.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2909.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 357322.363 ops/s
[info]                  ·gc.alloc.rate:                   1010.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              4448.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5847.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 358532.590 ops/s
[info]                  ·gc.alloc.rate:               989.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          4344.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2916.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 356784.152 ops/s
[info]                  ·gc.alloc.rate:               998.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          4406.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5868.391 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 351585.924 ops/s
[info]                  ·gc.alloc.rate:               982.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          4395.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2980.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   356619.451 ±(99.9%) 11323.888 ops/s [Average]
[info]   (min, avg, max) = (351585.924, 356619.451, 358872.225), stdev = 2940.778
[info]   CI (99.9%): [345295.562, 367943.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   995.943 ±(99.9%) 40.499 MB/sec [Average]
[info]   (min, avg, max) = (982.110, 995.943, 1010.054), stdev = 10.517
[info]   CI (99.9%): [955.445, 1036.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4394.661 ±(99.9%) 145.968 B/op [Average]
[info]   (min, avg, max) = (4344.544, 4394.661, 4448.151), stdev = 37.907
[info]   CI (99.9%): [4248.693, 4540.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.484 ±(99.9%) 1401.131 MB/sec [Average]
[info]   (min, avg, max) = (663.583, 930.484, 1330.336), stdev = 363.869
[info]   CI (99.9%): [≈ 0, 2331.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4104.632 ±(99.9%) 6164.252 B/op [Average]
[info]   (min, avg, max) = (2909.741, 4104.632, 5868.391), stdev = 1600.837
[info]   CI (99.9%): [≈ 0, 10268.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.367), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171.417 ops/s
[info] # Warmup Iteration   2: 509.420 ops/s
[info] # Warmup Iteration   3: 594.549 ops/s
[info] # Warmup Iteration   4: 601.951 ops/s
[info] # Warmup Iteration   5: 598.664 ops/s
[info] Iteration   1: 590.819 ops/s
[info]                  ·gc.alloc.rate:                   1264.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              3367763.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3560900.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 594.185 ops/s
[info]                  ·gc.alloc.rate:               1279.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          3385791.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3540486.024 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 601.763 ops/s
[info]                  ·gc.alloc.rate:               1277.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          3341570.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3501059.402 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 602.845 ops/s
[info]                  ·gc.alloc.rate:                   1282.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              3346040.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3498731.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9564.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 594.958 ops/s
[info]                  ·gc.alloc.rate:                   1275.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              3371670.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1766393.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 659.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   596.914 ±(99.9%) 19.926 ops/s [Average]
[info]   (min, avg, max) = (590.819, 596.914, 602.845), stdev = 5.175
[info]   CI (99.9%): [576.988, 616.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1275.763 ±(99.9%) 26.412 MB/sec [Average]
[info]   (min, avg, max) = (1264.293, 1275.763, 1282.229), stdev = 6.859
[info]   CI (99.9%): [1249.351, 1302.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3362567.286 ±(99.9%) 71086.821 B/op [Average]
[info]   (min, avg, max) = (3341570.538, 3362567.286, 3385791.570), stdev = 18461.022
[info]   CI (99.9%): [3291480.465, 3433654.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1204.399 ±(99.9%) 1154.203 MB/sec [Average]
[info]   (min, avg, max) = (668.210, 1204.399, 1340.742), stdev = 299.743
[info]   CI (99.9%): [50.196, 2358.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3173513.995 ±(99.9%) 3030641.419 B/op [Average]
[info]   (min, avg, max) = (1766393.128, 3173513.995, 3560900.223), stdev = 787047.952
[info]   CI (99.9%): [142872.575, 6204155.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.665), stdev = 1.610
[info]   CI (99.9%): [≈ 0, 6.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2066.955 ±(99.9%) 16172.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2066.955, 9564.126), stdev = 4199.958
[info]   CI (99.9%): [≈ 0, 18239.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103.595 ops/s
[info] # Warmup Iteration   2: 526.849 ops/s
[info] # Warmup Iteration   3: 585.846 ops/s
[info] # Warmup Iteration   4: 576.477 ops/s
[info] # Warmup Iteration   5: 574.331 ops/s
[info] Iteration   1: 587.268 ops/s
[info]                  ·gc.alloc.rate:               1244.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          3335246.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3563018.449 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 565.095 ops/s
[info]                  ·gc.alloc.rate:               1183.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          3294680.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1852607.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 593.387 ops/s
[info]                  ·gc.alloc.rate:                   1254.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              3324874.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3531441.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 594.372 ops/s
[info]                  ·gc.alloc.rate:                   1280.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              3388128.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3527268.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14428.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 589.007 ops/s
[info]                  ·gc.alloc.rate:                   1269.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              3388518.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3550940.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1055.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   585.826 ±(99.9%) 46.054 ops/s [Average]
[info]   (min, avg, max) = (565.095, 585.826, 594.372), stdev = 11.960
[info]   CI (99.9%): [539.772, 631.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1246.393 ±(99.9%) 144.730 MB/sec [Average]
[info]   (min, avg, max) = (1183.673, 1246.393, 1280.184), stdev = 37.586
[info]   CI (99.9%): [1101.663, 1391.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3346289.781 ±(99.9%) 158506.303 B/op [Average]
[info]   (min, avg, max) = (3294680.890, 3346289.781, 3388518.102), stdev = 41163.583
[info]   CI (99.9%): [3187783.478, 3504796.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.042 ±(99.9%) 1146.171 MB/sec [Average]
[info]   (min, avg, max) = (665.582, 1198.042, 1332.757), stdev = 297.657
[info]   CI (99.9%): [51.872, 2344.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3205055.377 ±(99.9%) 2911783.190 B/op [Average]
[info]   (min, avg, max) = (1852607.774, 3205055.377, 3563018.449), stdev = 756180.848
[info]   CI (99.9%): [293272.187, 6116838.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.178 ±(99.9%) 9.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.178, 5.452), stdev = 2.395
[info]   CI (99.9%): [≈ 0, 10.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3118.901 ±(99.9%) 24405.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3118.901, 14428.934), stdev = 6338.023
[info]   CI (99.9%): [≈ 0, 27524.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21681.971 ops/s
[info] # Warmup Iteration   2: 49372.800 ops/s
[info] # Warmup Iteration   3: 49489.075 ops/s
[info] # Warmup Iteration   4: 50349.103 ops/s
[info] # Warmup Iteration   5: 50612.500 ops/s
[info] Iteration   1: 50737.786 ops/s
[info]                  ·gc.alloc.rate:               848.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          26316.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20766.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 50487.418 ops/s
[info]                  ·gc.alloc.rate:               839.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          26160.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20869.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 50654.012 ops/s
[info]                  ·gc.alloc.rate:                   840.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              26115.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20810.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 50659.613 ops/s
[info]                  ·gc.alloc.rate:               838.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          26064.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20808.446 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 51046.166 ops/s
[info]                  ·gc.alloc.rate:                   858.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              26464.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41322.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   50716.999 ±(99.9%) 790.909 ops/s [Average]
[info]   (min, avg, max) = (50487.418, 50716.999, 51046.166), stdev = 205.397
[info]   CI (99.9%): [49926.089, 51507.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   845.120 ±(99.9%) 32.535 MB/sec [Average]
[info]   (min, avg, max) = (838.929, 845.120, 858.549), stdev = 8.449
[info]   CI (99.9%): [812.585, 877.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26224.235 ±(99.9%) 631.744 B/op [Average]
[info]   (min, avg, max) = (26064.200, 26224.235, 26464.535), stdev = 164.062
[info]   CI (99.9%): [25592.491, 26855.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.818 ±(99.9%) 1155.406 MB/sec [Average]
[info]   (min, avg, max) = (669.481, 803.818, 1340.573), stdev = 300.055
[info]   CI (99.9%): [≈ 0, 1959.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24915.690 ±(99.9%) 35317.797 B/op [Average]
[info]   (min, avg, max) = (20766.541, 24915.690, 41322.787), stdev = 9171.920
[info]   CI (99.9%): [≈ 0, 60233.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.387 ±(99.9%) 2.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.294), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156.598 ops/s
[info] # Warmup Iteration   2: 445.354 ops/s
[info] # Warmup Iteration   3: 552.143 ops/s
[info] # Warmup Iteration   4: 579.123 ops/s
[info] # Warmup Iteration   5: 565.787 ops/s
[info] Iteration   1: 564.984 ops/s
[info]                  ·gc.alloc.rate:               1243.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          3461232.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3710773.371 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 577.577 ops/s
[info]                  ·gc.alloc.rate:               1261.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          3437195.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1817773.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 567.034 ops/s
[info]                  ·gc.alloc.rate:                   1247.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              3460069.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3701399.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 590.135 ops/s
[info]                  ·gc.alloc.rate:                   1284.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              3424132.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3560013.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9647.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 588.108 ops/s
[info]                  ·gc.alloc.rate:                   1299.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              3476473.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3568540.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2948.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   577.567 ±(99.9%) 44.672 ops/s [Average]
[info]   (min, avg, max) = (564.984, 577.567, 590.135), stdev = 11.601
[info]   CI (99.9%): [532.896, 622.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1267.382 ±(99.9%) 92.948 MB/sec [Average]
[info]   (min, avg, max) = (1243.392, 1267.382, 1299.531), stdev = 24.138
[info]   CI (99.9%): [1174.434, 1360.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3451820.701 ±(99.9%) 80424.903 B/op [Average]
[info]   (min, avg, max) = (3424132.345, 3451820.701, 3476473.263), stdev = 20886.092
[info]   CI (99.9%): [3371395.798, 3532245.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.896 ±(99.9%) 1148.619 MB/sec [Average]
[info]   (min, avg, max) = (667.296, 1200.896, 1335.615), stdev = 298.293
[info]   CI (99.9%): [52.277, 2349.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3271700.087 ±(99.9%) 3141620.432 B/op [Average]
[info]   (min, avg, max) = (1817773.619, 3271700.087, 3710773.371), stdev = 815868.850
[info]   CI (99.9%): [130079.655, 6413320.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.953 ±(99.9%) 6.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.953, 3.619), stdev = 1.564
[info]   CI (99.9%): [≈ 0, 6.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2542.275 ±(99.9%) 16046.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2542.275, 9647.431), stdev = 4167.267
[info]   CI (99.9%): [≈ 0, 18588.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3355.495 ops/s
[info] # Warmup Iteration   2: 14682.374 ops/s
[info] # Warmup Iteration   3: 14867.536 ops/s
[info] # Warmup Iteration   4: 14708.963 ops/s
[info] # Warmup Iteration   5: 14924.128 ops/s
[info] Iteration   1: 14592.795 ops/s
[info]                  ·gc.alloc.rate:               1154.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          124471.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143905.291 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 14640.123 ops/s
[info]                  ·gc.alloc.rate:                   1152.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              123860.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143505.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14959.855 ops/s
[info]                  ·gc.alloc.rate:               1185.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          124645.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140506.241 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 14900.516 ops/s
[info]                  ·gc.alloc.rate:                   1168.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              123405.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70571.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14595.214 ops/s
[info]                  ·gc.alloc.rate:                   1169.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              126139.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144091.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 583.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14737.701 ±(99.9%) 685.271 ops/s [Average]
[info]   (min, avg, max) = (14592.795, 14737.701, 14959.855), stdev = 177.963
[info]   CI (99.9%): [14052.430, 15422.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1166.070 ±(99.9%) 50.947 MB/sec [Average]
[info]   (min, avg, max) = (1152.433, 1166.070, 1185.002), stdev = 13.231
[info]   CI (99.9%): [1115.123, 1217.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   124504.492 ±(99.9%) 3999.786 B/op [Average]
[info]   (min, avg, max) = (123405.808, 124504.492, 126139.302), stdev = 1038.732
[info]   CI (99.9%): [120504.707, 128504.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1202.053 ±(99.9%) 1148.847 MB/sec [Average]
[info]   (min, avg, max) = (668.346, 1202.053, 1336.233), stdev = 298.352
[info]   CI (99.9%): [53.207, 2350.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128515.812 ±(99.9%) 124856.280 B/op [Average]
[info]   (min, avg, max) = (70571.142, 128515.812, 144091.208), stdev = 32424.779
[info]   CI (99.9%): [3659.532, 253372.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.091 ±(99.9%) 9.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.091, 5.412), stdev = 2.416
[info]   CI (99.9%): [≈ 0, 10.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   117.611 ±(99.9%) 1003.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.611, 583.620), stdev = 260.509
[info]   CI (99.9%): [≈ 0, 1120.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6238.942 ops/s
[info] # Warmup Iteration   2: 16146.397 ops/s
[info] # Warmup Iteration   3: 17562.860 ops/s
[info] # Warmup Iteration   4: 18163.840 ops/s
[info] # Warmup Iteration   5: 17997.646 ops/s
[info] Iteration   1: 17948.199 ops/s
[info]                  ·gc.alloc.rate:                   1102.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              96674.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116884.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 17971.919 ops/s
[info]                  ·gc.alloc.rate:               1083.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          94900.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58393.579 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 18055.019 ops/s
[info]                  ·gc.alloc.rate:                   1089.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              95013.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116308.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 18156.163 ops/s
[info]                  ·gc.alloc.rate:               1092.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          94698.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57859.637 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 18077.425 ops/s
[info]                  ·gc.alloc.rate:                   1089.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              94824.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116247.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18041.745 ±(99.9%) 323.128 ops/s [Average]
[info]   (min, avg, max) = (17948.199, 18041.745, 18156.163), stdev = 83.915
[info]   CI (99.9%): [17718.617, 18364.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1091.587 ±(99.9%) 26.573 MB/sec [Average]
[info]   (min, avg, max) = (1083.677, 1091.587, 1102.461), stdev = 6.901
[info]   CI (99.9%): [1065.015, 1118.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   95222.208 ±(99.9%) 3156.935 B/op [Average]
[info]   (min, avg, max) = (94698.694, 95222.208, 96674.433), stdev = 819.846
[info]   CI (99.9%): [92065.273, 98379.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.369 ±(99.9%) 1406.648 MB/sec [Average]
[info]   (min, avg, max) = (666.800, 1067.369, 1335.208), stdev = 365.302
[info]   CI (99.9%): [≈ 0, 2474.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93138.802 ±(99.9%) 123078.669 B/op [Average]
[info]   (min, avg, max) = (57859.637, 93138.802, 116884.885), stdev = 31963.140
[info]   CI (99.9%): [≈ 0, 216217.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.049 ±(99.9%) 8.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.049, 5.121), stdev = 2.276
[info]   CI (99.9%): [≈ 0, 9.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   91.346 ±(99.9%) 763.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.346, 445.823), stdev = 198.181
[info]   CI (99.9%): [≈ 0, 854.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131851.551 ops/s
[info] # Warmup Iteration   2: 214506.508 ops/s
[info] # Warmup Iteration   3: 213302.798 ops/s
[info] # Warmup Iteration   4: 212030.780 ops/s
[info] # Warmup Iteration   5: 213927.148 ops/s
[info] Iteration   1: 214023.815 ops/s
[info]                  ·gc.alloc.rate:               769.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          5658.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4908.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 217818.315 ops/s
[info]                  ·gc.alloc.rate:               805.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          5816.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9660.103 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 214069.784 ops/s
[info]                  ·gc.alloc.rate:                   772.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              5677.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4919.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 214943.597 ops/s
[info]                  ·gc.alloc.rate:                   774.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              5667.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4899.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 219398.652 ops/s
[info]                  ·gc.alloc.rate:               788.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          5659.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4804.852 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   216050.833 ±(99.9%) 9351.441 ops/s [Average]
[info]   (min, avg, max) = (214023.815, 216050.833, 219398.652), stdev = 2428.540
[info]   CI (99.9%): [206699.391, 225402.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   781.936 ±(99.9%) 57.607 MB/sec [Average]
[info]   (min, avg, max) = (769.421, 781.936, 805.039), stdev = 14.960
[info]   CI (99.9%): [724.330, 839.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5695.818 ±(99.9%) 260.871 B/op [Average]
[info]   (min, avg, max) = (5658.265, 5695.818, 5816.205), stdev = 67.747
[info]   CI (99.9%): [5434.948, 5956.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.526 ±(99.9%) 1150.683 MB/sec [Average]
[info]   (min, avg, max) = (667.450, 802.526, 1337.085), stdev = 298.829
[info]   CI (99.9%): [≈ 0, 1953.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5838.495 ±(99.9%) 8228.184 B/op [Average]
[info]   (min, avg, max) = (4804.852, 5838.495, 9660.103), stdev = 2136.833
[info]   CI (99.9%): [≈ 0, 14066.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.153), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160758.211 ops/s
[info] # Warmup Iteration   2: 236198.325 ops/s
[info] # Warmup Iteration   3: 245734.938 ops/s
[info] # Warmup Iteration   4: 245840.540 ops/s
[info] # Warmup Iteration   5: 244224.733 ops/s
[info] Iteration   1: 245818.698 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 245373.141 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 243949.793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 245951.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 245701.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   245358.954 ±(99.9%) 3143.695 ops/s [Average]
[info]   (min, avg, max) = (243949.793, 245358.954, 245951.988), stdev = 816.408
[info]   CI (99.9%): [242215.258, 248502.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6956.191 ops/s
[info] # Warmup Iteration   2: 16370.580 ops/s
[info] # Warmup Iteration   3: 17840.430 ops/s
[info] # Warmup Iteration   4: 18224.825 ops/s
[info] # Warmup Iteration   5: 18081.869 ops/s
[info] Iteration   1: 18399.009 ops/s
[info]                  ·gc.alloc.rate:                   1167.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              99890.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57092.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17827.843 ops/s
[info]                  ·gc.alloc.rate:               1183.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          104501.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117883.937 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 17390.553 ops/s
[info]                  ·gc.alloc.rate:               1126.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          101882.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120906.064 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 18126.199 ops/s
[info]                  ·gc.alloc.rate:               1145.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          99493.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58013.223 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 17568.230 ops/s
[info]                  ·gc.alloc.rate:                   1149.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              102966.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119823.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17862.367 ±(99.9%) 1573.482 ops/s [Average]
[info]   (min, avg, max) = (17390.553, 17862.367, 18399.009), stdev = 408.628
[info]   CI (99.9%): [16288.885, 19435.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1154.663 ±(99.9%) 84.701 MB/sec [Average]
[info]   (min, avg, max) = (1126.261, 1154.663, 1183.779), stdev = 21.997
[info]   CI (99.9%): [1069.962, 1239.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   101746.786 ±(99.9%) 8081.055 B/op [Average]
[info]   (min, avg, max) = (99493.543, 101746.786, 104501.459), stdev = 2098.624
[info]   CI (99.9%): [93665.731, 109827.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1069.049 ±(99.9%) 1410.272 MB/sec [Average]
[info]   (min, avg, max) = (667.547, 1069.049, 1337.609), stdev = 366.243
[info]   CI (99.9%): [≈ 0, 2479.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   94743.867 ±(99.9%) 130804.104 B/op [Average]
[info]   (min, avg, max) = (57092.493, 94743.867, 120906.064), stdev = 33969.410
[info]   CI (99.9%): [≈ 0, 225547.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.124 ±(99.9%) 9.634 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.124, 5.600), stdev = 2.502
[info]   CI (99.9%): [≈ 0, 10.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   100.682 ±(99.9%) 863.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.682, 501.627), stdev = 224.137
[info]   CI (99.9%): [≈ 0, 963.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661817.510 ops/s
[info] # Warmup Iteration   2: 1539454.699 ops/s
[info] # Warmup Iteration   3: 1525669.622 ops/s
[info] # Warmup Iteration   4: 1556460.857 ops/s
[info] # Warmup Iteration   5: 1563240.782 ops/s
[info] Iteration   1: 1535921.666 ops/s
[info]                  ·gc.alloc.rate:               85.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          87.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 524.249 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1557978.069 ops/s
[info]                  ·gc.alloc.rate:      64.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.708 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1557968.290 ops/s
[info]                  ·gc.alloc.rate:      63.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1534733.713 ops/s
[info]                  ·gc.alloc.rate:      65.731 MB/sec
[info]                  ·gc.alloc.rate.norm: 67.408 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1558826.351 ops/s
[info]                  ·gc.alloc.rate:      63.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1549085.618 ±(99.9%) 48406.678 ops/s [Average]
[info]   (min, avg, max) = (1534733.713, 1549085.618, 1558826.351), stdev = 12571.061
[info]   CI (99.9%): [1500678.940, 1597492.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   68.319 ±(99.9%) 36.194 MB/sec [Average]
[info]   (min, avg, max) = (63.368, 68.319, 85.045), stdev = 9.399
[info]   CI (99.9%): [32.125, 104.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   69.450 ±(99.9%) 38.446 B/op [Average]
[info]   (min, avg, max) = (64.000, 69.450, 87.133), stdev = 9.984
[info]   CI (99.9%): [31.004, 107.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.337 ±(99.9%) 881.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.337, 511.686), stdev = 228.833
[info]   CI (99.9%): [≈ 0, 983.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   104.850 ±(99.9%) 902.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.850, 524.249), stdev = 234.451
[info]   CI (99.9%): [≈ 0, 1007.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6426.388 ops/s
[info] # Warmup Iteration   2: 70038.007 ops/s
[info] # Warmup Iteration   3: 80597.399 ops/s
[info] # Warmup Iteration   4: 83028.238 ops/s
[info] # Warmup Iteration   5: 80872.336 ops/s
[info] Iteration   1: 82760.809 ops/s
[info]                  ·gc.alloc.rate:                   3394.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              64550.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64017.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.771 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 82882.932 ops/s
[info]                  ·gc.alloc.rate:                   3440.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              65334.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64112.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 83183.996 ops/s
[info]                  ·gc.alloc.rate:               3442.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          65081.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63936.487 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 80806.032 ops/s
[info]                  ·gc.alloc.rate:               3332.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          64908.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2712.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52840.103 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 81037.023 ops/s
[info]                  ·gc.alloc.rate:               3367.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          65403.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3396.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65955.662 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   82134.158 ±(99.9%) 4315.100 ops/s [Average]
[info]   (min, avg, max) = (80806.032, 82134.158, 83183.996), stdev = 1120.618
[info]   CI (99.9%): [77819.058, 86449.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3395.556 ±(99.9%) 182.373 MB/sec [Average]
[info]   (min, avg, max) = (3332.560, 3395.556, 3442.212), stdev = 47.362
[info]   CI (99.9%): [3213.183, 3577.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65055.788 ±(99.9%) 1328.480 B/op [Average]
[info]   (min, avg, max) = (64550.730, 65055.788, 65403.326), stdev = 345.002
[info]   CI (99.9%): [63727.307, 66384.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3246.720 ±(99.9%) 1149.745 MB/sec [Average]
[info]   (min, avg, max) = (2712.937, 3246.720, 3396.089), stdev = 298.585
[info]   CI (99.9%): [2096.976, 4396.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62172.373 ±(99.9%) 20346.903 B/op [Average]
[info]   (min, avg, max) = (52840.103, 62172.373, 65955.662), stdev = 5284.026
[info]   CI (99.9%): [41825.469, 82519.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.633 ±(99.9%) 4.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 2.771), stdev = 1.207
[info]   CI (99.9%): [≈ 0, 5.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453593.047 ops/s
[info] # Warmup Iteration   2: 1838017.447 ops/s
[info] # Warmup Iteration   3: 1847911.052 ops/s
[info] # Warmup Iteration   4: 1832672.933 ops/s
[info] # Warmup Iteration   5: 1860553.090 ops/s
[info] Iteration   1: 1855870.794 ops/s
[info]                  ·gc.alloc.rate:                   1014.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1855068.058 ops/s
[info]                  ·gc.alloc.rate:               996.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          844.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 566.589 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1824959.337 ops/s
[info]                  ·gc.alloc.rate:               992.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          855.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1152.461 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1828394.890 ops/s
[info]                  ·gc.alloc.rate:               976.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          840.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 575.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1846478.600 ops/s
[info]                  ·gc.alloc.rate:                   994.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1140.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1842154.336 ±(99.9%) 56415.385 ops/s [Average]
[info]   (min, avg, max) = (1824959.337, 1842154.336, 1855870.794), stdev = 14650.896
[info]   CI (99.9%): [1785738.951, 1898569.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   994.716 ±(99.9%) 52.242 MB/sec [Average]
[info]   (min, avg, max) = (976.080, 994.716, 1014.274), stdev = 13.567
[info]   CI (99.9%): [942.474, 1046.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   849.694 ±(99.9%) 31.335 B/op [Average]
[info]   (min, avg, max) = (840.199, 849.694, 860.011), stdev = 8.138
[info]   CI (99.9%): [818.359, 881.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.201 ±(99.9%) 1409.211 MB/sec [Average]
[info]   (min, avg, max) = (668.136, 1069.201, 1338.405), stdev = 365.968
[info]   CI (99.9%): [≈ 0, 2478.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   913.344 ±(99.9%) 1203.772 B/op [Average]
[info]   (min, avg, max) = (566.589, 913.344, 1152.461), stdev = 312.616
[info]   CI (99.9%): [≈ 0, 2117.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 913256.033 ops/s
[info] # Warmup Iteration   2: 2043530.197 ops/s
[info] # Warmup Iteration   3: 2184222.485 ops/s
[info] # Warmup Iteration   4: 2175834.486 ops/s
[info] # Warmup Iteration   5: 2225619.150 ops/s
[info] Iteration   1: 2239828.303 ops/s
[info]                  ·gc.alloc.rate:                   642.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2246484.295 ops/s
[info]                  ·gc.alloc.rate:               647.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          453.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2246816.648 ops/s
[info]                  ·gc.alloc.rate:                   650.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              455.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2237325.849 ops/s
[info]                  ·gc.alloc.rate:               641.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471.879 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2243630.889 ops/s
[info]                  ·gc.alloc.rate:               643.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2242817.197 ±(99.9%) 16015.359 ops/s [Average]
[info]   (min, avg, max) = (2237325.849, 2242817.197, 2246816.648), stdev = 4159.138
[info]   CI (99.9%): [2226801.838, 2258832.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   645.075 ±(99.9%) 14.166 MB/sec [Average]
[info]   (min, avg, max) = (641.804, 645.075, 650.470), stdev = 3.679
[info]   CI (99.9%): [630.910, 659.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   452.633 ±(99.9%) 7.387 B/op [Average]
[info]   (min, avg, max) = (451.109, 452.633, 455.632), stdev = 1.918
[info]   CI (99.9%): [445.246, 460.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.872 ±(99.9%) 1.354 MB/sec [Average]
[info]   (min, avg, max) = (670.504, 670.872, 671.454), stdev = 0.352
[info]   CI (99.9%): [669.519, 672.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   470.738 ±(99.9%) 3.461 B/op [Average]
[info]   (min, avg, max) = (469.743, 470.738, 471.879), stdev = 0.899
[info]   CI (99.9%): [467.277, 474.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224590.067 ops/s
[info] # Warmup Iteration   2: 2283266.746 ops/s
[info] # Warmup Iteration   3: 2398890.164 ops/s
[info] # Warmup Iteration   4: 2395873.543 ops/s
[info] # Warmup Iteration   5: 2398590.617 ops/s
[info] Iteration   1: 2399258.147 ops/s
[info]                  ·gc.alloc.rate:      24.391 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2399142.918 ops/s
[info]                  ·gc.alloc.rate:      24.392 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2398596.541 ops/s
[info]                  ·gc.alloc.rate:      24.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2404961.715 ops/s
[info]                  ·gc.alloc.rate:      24.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2404658.984 ops/s
[info]                  ·gc.alloc.rate:      24.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2401323.661 ±(99.9%) 12300.832 ops/s [Average]
[info]   (min, avg, max) = (2398596.541, 2401323.661, 2404961.715), stdev = 3194.487
[info]   CI (99.9%): [2389022.829, 2413624.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.414 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (24.385, 24.414, 24.451), stdev = 0.033
[info]   CI (99.9%): [24.285, 24.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12697.101 ops/s
[info] # Warmup Iteration   2: 47977.661 ops/s
[info] # Warmup Iteration   3: 51498.483 ops/s
[info] # Warmup Iteration   4: 49831.748 ops/s
[info] # Warmup Iteration   5: 49231.405 ops/s
[info] Iteration   1: 49983.094 ops/s
[info]                  ·gc.alloc.rate:                   2152.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              67765.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84268.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 50805.293 ops/s
[info]                  ·gc.alloc.rate:                   2183.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              67652.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62011.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 51770.378 ops/s
[info]                  ·gc.alloc.rate:                   2210.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              67206.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60823.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 51635.373 ops/s
[info]                  ·gc.alloc.rate:                   2217.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              67593.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61039.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 51747.058 ops/s
[info]                  ·gc.alloc.rate:               2251.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          68429.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81285.118 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51188.239 ±(99.9%) 3013.677 ops/s [Average]
[info]   (min, avg, max) = (49983.094, 51188.239, 51770.378), stdev = 782.642
[info]   CI (99.9%): [48174.562, 54201.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2203.244 ±(99.9%) 144.184 MB/sec [Average]
[info]   (min, avg, max) = (2152.118, 2203.244, 2251.769), stdev = 37.444
[info]   CI (99.9%): [2059.060, 2347.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67729.403 ±(99.9%) 1710.935 B/op [Average]
[info]   (min, avg, max) = (67206.321, 67729.403, 68429.557), stdev = 444.324
[info]   CI (99.9%): [66018.467, 69440.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2271.250 ±(99.9%) 1421.003 MB/sec [Average]
[info]   (min, avg, max) = (2000.762, 2271.250, 2676.203), stdev = 369.030
[info]   CI (99.9%): [850.247, 3692.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69885.472 ±(99.9%) 45528.646 B/op [Average]
[info]   (min, avg, max) = (60823.848, 69885.472, 84268.250), stdev = 11823.645
[info]   CI (99.9%): [24356.827, 115414.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.226), stdev = 1.867
[info]   CI (99.9%): [≈ 0, 8.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.887 ±(99.9%) 226.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.887, 133.062), stdev = 58.806
[info]   CI (99.9%): [≈ 0, 254.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59711.235 ops/s
[info] # Warmup Iteration   2: 714432.964 ops/s
[info] # Warmup Iteration   3: 828143.408 ops/s
[info] # Warmup Iteration   4: 857419.034 ops/s
[info] # Warmup Iteration   5: 851539.297 ops/s
[info] Iteration   1: 839610.336 ops/s
[info]                  ·gc.alloc.rate:                   2715.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              5090.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5012.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 867209.241 ops/s
[info]                  ·gc.alloc.rate:                   2801.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              5083.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4851.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 866336.097 ops/s
[info]                  ·gc.alloc.rate:               2815.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          5113.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4864.928 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 851956.629 ops/s
[info]                  ·gc.alloc.rate:               2769.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          5117.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4961.588 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 865573.706 ops/s
[info]                  ·gc.alloc.rate:               2813.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          5115.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4898.326 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   858137.202 ±(99.9%) 46617.831 ops/s [Average]
[info]   (min, avg, max) = (839610.336, 858137.202, 867209.241), stdev = 12106.503
[info]   CI (99.9%): [811519.371, 904755.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2783.102 ±(99.9%) 161.440 MB/sec [Average]
[info]   (min, avg, max) = (2715.466, 2783.102, 2815.198), stdev = 41.925
[info]   CI (99.9%): [2621.663, 2944.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5103.886 ±(99.9%) 60.186 B/op [Average]
[info]   (min, avg, max) = (5083.942, 5103.886, 5117.033), stdev = 15.630
[info]   CI (99.9%): [5043.700, 5164.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2681.196 ±(99.9%) 32.988 MB/sec [Average]
[info]   (min, avg, max) = (2673.798, 2681.196, 2693.832), stdev = 8.567
[info]   CI (99.9%): [2648.208, 2714.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4917.786 ±(99.9%) 261.226 B/op [Average]
[info]   (min, avg, max) = (4851.698, 4917.786, 5012.390), stdev = 67.840
[info]   CI (99.9%): [4656.560, 5179.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.039), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.663 ops/s
[info] # Warmup Iteration   2: 4291722.475 ops/s
[info] # Warmup Iteration   3: 4954561.591 ops/s
[info] # Warmup Iteration   4: 5050365.673 ops/s
[info] # Warmup Iteration   5: 5066623.071 ops/s
[info] Iteration   1: 4753591.421 ops/s
[info]                  ·gc.alloc.rate:                   306.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4756507.124 ops/s
[info]                  ·gc.alloc.rate:                   306.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5084311.308 ops/s
[info]                  ·gc.alloc.rate:      310.718 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.157 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5053895.599 ops/s
[info]                  ·gc.alloc.rate:               323.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207.449 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5065706.349 ops/s
[info]                  ·gc.alloc.rate:      309.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4942802.360 ±(99.9%) 661309.769 ops/s [Average]
[info]   (min, avg, max) = (4753591.421, 4942802.360, 5084311.308), stdev = 171740.047
[info]   CI (99.9%): [4281492.591, 5604112.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   311.094 ±(99.9%) 27.644 MB/sec [Average]
[info]   (min, avg, max) = (306.110, 311.094, 323.446), stdev = 7.179
[info]   CI (99.9%): [283.451, 338.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   99.106 ±(99.9%) 10.686 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.106, 101.362), stdev = 2.775
[info]   CI (99.9%): [88.420, 109.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.871 ±(99.9%) 1212.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.871, 666.146), stdev = 314.819
[info]   CI (99.9%): [≈ 0, 1550.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   109.221 ±(99.9%) 388.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.221, 207.449), stdev = 100.912
[info]   CI (99.9%): [≈ 0, 497.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38588.847 ops/s
[info] # Warmup Iteration   2: 858066.328 ops/s
[info] # Warmup Iteration   3: 966186.038 ops/s
[info] # Warmup Iteration   4: 974200.671 ops/s
[info] # Warmup Iteration   5: 975111.152 ops/s
[info] Iteration   1: 983049.739 ops/s
[info]                  ·gc.alloc.rate:               1145.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          1833.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1068.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 990956.445 ops/s
[info]                  ·gc.alloc.rate:                   1163.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1848.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2121.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1000309.055 ops/s
[info]                  ·gc.alloc.rate:               1185.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          1865.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2102.531 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 979600.780 ops/s
[info]                  ·gc.alloc.rate:                   1148.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              1844.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2148.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1002328.140 ops/s
[info]                  ·gc.alloc.rate:                   1160.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1821.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1050.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   991248.832 ±(99.9%) 38881.326 ops/s [Average]
[info]   (min, avg, max) = (979600.780, 991248.832, 1002328.140), stdev = 10097.357
[info]   CI (99.9%): [952367.506, 1030130.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1160.621 ±(99.9%) 62.214 MB/sec [Average]
[info]   (min, avg, max) = (1145.241, 1160.621, 1185.952), stdev = 16.157
[info]   CI (99.9%): [1098.408, 1222.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1842.666 ±(99.9%) 64.200 B/op [Average]
[info]   (min, avg, max) = (1821.476, 1842.666, 1865.828), stdev = 16.672
[info]   CI (99.9%): [1778.466, 1906.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.208 ±(99.9%) 1409.625 MB/sec [Average]
[info]   (min, avg, max) = (667.283, 1069.208, 1337.617), stdev = 366.075
[info]   CI (99.9%): [≈ 0, 2478.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1698.304 ±(99.9%) 2246.963 B/op [Average]
[info]   (min, avg, max) = (1050.654, 1698.304, 2148.974), stdev = 583.529
[info]   CI (99.9%): [≈ 0, 3945.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.847 ±(99.9%) 7.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.847, 4.184), stdev = 1.865
[info]   CI (99.9%): [≈ 0, 8.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.331 ±(99.9%) 11.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.331, 6.570), stdev = 2.929
[info]   CI (99.9%): [≈ 0, 12.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3072064.591 ops/s
[info] # Warmup Iteration   2: 8750725.472 ops/s
[info] # Warmup Iteration   3: 8971626.131 ops/s
[info] # Warmup Iteration   4: 8985226.721 ops/s
[info] # Warmup Iteration   5: 8678948.110 ops/s
[info] Iteration   1: 9103921.791 ops/s
[info]                  ·gc.alloc.rate:               427.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          73.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88.446 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 9100330.474 ops/s
[info]                  ·gc.alloc.rate:               427.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          73.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8796216.532 ops/s
[info]                  ·gc.alloc.rate:               441.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          78.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120.210 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 9146957.199 ops/s
[info]                  ·gc.alloc.rate:      418.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9126281.040 ops/s
[info]                  ·gc.alloc.rate:                   441.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              76.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9054741.407 ±(99.9%) 561170.602 ops/s [Average]
[info]   (min, avg, max) = (8796216.532, 9054741.407, 9146957.199), stdev = 145734.223
[info]   CI (99.9%): [8493570.805, 9615912.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.321 ±(99.9%) 38.264 MB/sec [Average]
[info]   (min, avg, max) = (418.499, 431.321, 441.523), stdev = 9.937
[info]   CI (99.9%): [393.056, 469.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.993 ±(99.9%) 10.194 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.993, 78.937), stdev = 2.647
[info]   CI (99.9%): [64.799, 85.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.424 ±(99.9%) 1064.796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.424, 672.024), stdev = 276.524
[info]   CI (99.9%): [≈ 0, 1538.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   82.600 ±(99.9%) 186.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.600, 120.210), stdev = 48.508
[info]   CI (99.9%): [≈ 0, 269.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6444.798 ops/s
[info] # Warmup Iteration   2: 133286.238 ops/s
[info] # Warmup Iteration   3: 489667.567 ops/s
[info] # Warmup Iteration   4: 488665.999 ops/s
[info] # Warmup Iteration   5: 492630.478 ops/s
[info] Iteration   1: 504700.539 ops/s
[info]                  ·gc.alloc.rate:                   2171.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              6772.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6256.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 505308.463 ops/s
[info]                  ·gc.alloc.rate:                   2197.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              6844.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8357.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 506844.502 ops/s
[info]                  ·gc.alloc.rate:               2188.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          6794.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6257.333 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 490129.259 ops/s
[info]                  ·gc.alloc.rate:               2118.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          6801.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6479.069 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 498282.324 ops/s
[info]                  ·gc.alloc.rate:               2167.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          6846.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6384.494 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   501053.018 ±(99.9%) 26675.249 ops/s [Average]
[info]   (min, avg, max) = (490129.259, 501053.018, 506844.502), stdev = 6927.477
[info]   CI (99.9%): [474377.768, 527728.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2168.651 ±(99.9%) 118.521 MB/sec [Average]
[info]   (min, avg, max) = (2118.107, 2168.651, 2197.537), stdev = 30.779
[info]   CI (99.9%): [2050.130, 2287.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6811.819 ±(99.9%) 125.480 B/op [Average]
[info]   (min, avg, max) = (6772.143, 6811.819, 6846.703), stdev = 32.587
[info]   CI (99.9%): [6686.339, 6937.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2148.795 ±(99.9%) 1151.208 MB/sec [Average]
[info]   (min, avg, max) = (2006.151, 2148.795, 2683.506), stdev = 298.965
[info]   CI (99.9%): [997.587, 3300.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6746.950 ±(99.9%) 3486.202 B/op [Average]
[info]   (min, avg, max) = (6256.053, 6746.950, 8357.800), stdev = 905.356
[info]   CI (99.9%): [3260.747, 10233.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.246 ±(99.9%) 2.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.208), stdev = 0.538
[info]   CI (99.9%): [≈ 0, 2.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.765 ±(99.9%) 6.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.765, 3.761), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 885.631 ops/s
[info] # Warmup Iteration   2: 3613.894 ops/s
[info] # Warmup Iteration   3: 3909.558 ops/s
[info] # Warmup Iteration   4: 4525.229 ops/s
[info] # Warmup Iteration   5: 4524.159 ops/s
[info] Iteration   1: 4535.556 ops/s
[info]                  ·gc.alloc.rate:                   2266.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              786654.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926893.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1538.370 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 4558.279 ops/s
[info]                  ·gc.alloc.rate:                   2300.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              794115.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689773.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4531.249 ops/s
[info]                  ·gc.alloc.rate:                   2260.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              785142.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693536.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4527.113 ops/s
[info]                  ·gc.alloc.rate:                   2286.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              794335.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925363.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.240 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4504.174 ops/s
[info]                  ·gc.alloc.rate:                   2273.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              794549.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700486.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4531.274 ±(99.9%) 74.552 ops/s [Average]
[info]   (min, avg, max) = (4504.174, 4531.274, 4558.279), stdev = 19.361
[info]   CI (99.9%): [4456.722, 4605.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2277.704 ±(99.9%) 60.963 MB/sec [Average]
[info]   (min, avg, max) = (2260.890, 2277.704, 2300.468), stdev = 15.832
[info]   CI (99.9%): [2216.741, 2338.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   790959.519 ±(99.9%) 17918.928 B/op [Average]
[info]   (min, avg, max) = (785142.731, 790959.519, 794549.299), stdev = 4653.489
[info]   CI (99.9%): [773040.591, 808878.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2266.903 ±(99.9%) 1407.252 MB/sec [Average]
[info]   (min, avg, max) = (1997.101, 2266.903, 2671.102), stdev = 365.459
[info]   CI (99.9%): [859.650, 3674.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   787210.615 ±(99.9%) 488544.182 B/op [Average]
[info]   (min, avg, max) = (689773.947, 787210.615, 926893.112), stdev = 126873.373
[info]   CI (99.9%): [298666.433, 1275754.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.034 ±(99.9%) 7.318 MB/sec [Average]
[info]   (min, avg, max) = (0.140, 1.034, 4.433), stdev = 1.900
[info]   CI (99.9%): [≈ 0, 8.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   358.877 ±(99.9%) 2539.209 B/op [Average]
[info]   (min, avg, max) = (48.167, 358.877, 1538.370), stdev = 659.425
[info]   CI (99.9%): [≈ 0, 2898.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.775
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 938.368 ops/s
[info] # Warmup Iteration   2: 5475.258 ops/s
[info] # Warmup Iteration   3: 6413.773 ops/s
[info] # Warmup Iteration   4: 6797.752 ops/s
[info] # Warmup Iteration   5: 6800.873 ops/s
[info] Iteration   1: 6594.041 ops/s
[info]                  ·gc.alloc.rate:                   2257.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              538732.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     637890.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6569.927 ops/s
[info]                  ·gc.alloc.rate:                   2234.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              535076.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481521.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.907 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6785.805 ops/s
[info]                  ·gc.alloc.rate:               2304.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          534386.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 466814.850 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 6795.805 ops/s
[info]                  ·gc.alloc.rate:               2323.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          538000.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467207.947 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6724.696 ops/s
[info]                  ·gc.alloc.rate:               2326.642 MB/sec
[info]                  ·gc.alloc.rate.norm:          544520.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631000.797 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6694.055 ±(99.9%) 408.969 ops/s [Average]
[info]   (min, avg, max) = (6569.927, 6694.055, 6795.805), stdev = 106.208
[info]   CI (99.9%): [6285.085, 7103.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2289.125 ±(99.9%) 159.500 MB/sec [Average]
[info]   (min, avg, max) = (2234.112, 2289.125, 2326.642), stdev = 41.422
[info]   CI (99.9%): [2129.625, 2448.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   538143.261 ±(99.9%) 15468.807 B/op [Average]
[info]   (min, avg, max) = (534386.699, 538143.261, 544520.263), stdev = 4017.200
[info]   CI (99.9%): [522674.455, 553612.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2281.977 ±(99.9%) 1414.952 MB/sec [Average]
[info]   (min, avg, max) = (2010.504, 2281.977, 2696.159), stdev = 367.458
[info]   CI (99.9%): [867.026, 3696.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   536887.100 ±(99.9%) 343817.953 B/op [Average]
[info]   (min, avg, max) = (466814.850, 536887.100, 637890.358), stdev = 89288.431
[info]   CI (99.9%): [193069.147, 880705.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.999), stdev = 0.435
[info]   CI (99.9%): [≈ 0, 1.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   54.680 ±(99.9%) 399.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.680, 238.493), stdev = 103.861
[info]   CI (99.9%): [≈ 0, 454.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24936.496 ops/s
[info] # Warmup Iteration   2: 42845.751 ops/s
[info] # Warmup Iteration   3: 44323.443 ops/s
[info] # Warmup Iteration   4: 46243.553 ops/s
[info] # Warmup Iteration   5: 46130.292 ops/s
[info] Iteration   1: 45355.458 ops/s
[info]                  ·gc.alloc.rate:                   747.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              25927.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23277.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.445 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 44914.624 ops/s
[info]                  ·gc.alloc.rate:               747.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          26197.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23529.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 46441.471 ops/s
[info]                  ·gc.alloc.rate:                   768.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              26048.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22755.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46307.442 ops/s
[info]                  ·gc.alloc.rate:                   781.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              26548.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45642.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 46172.271 ops/s
[info]                  ·gc.alloc.rate:               759.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          25871.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22910.636 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   45838.253 ±(99.9%) 2569.970 ops/s [Average]
[info]   (min, avg, max) = (44914.624, 45838.253, 46441.471), stdev = 667.413
[info]   CI (99.9%): [43268.283, 48408.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   760.881 ±(99.9%) 55.928 MB/sec [Average]
[info]   (min, avg, max) = (747.173, 760.881, 781.429), stdev = 14.524
[info]   CI (99.9%): [704.953, 816.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26118.655 ±(99.9%) 1042.979 B/op [Average]
[info]   (min, avg, max) = (25871.742, 26118.655, 26548.499), stdev = 270.858
[info]   CI (99.9%): [25075.676, 27161.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.963 ±(99.9%) 1156.960 MB/sec [Average]
[info]   (min, avg, max) = (670.814, 805.963, 1343.440), stdev = 300.459
[info]   CI (99.9%): [≈ 0, 1962.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27623.075 ±(99.9%) 38805.605 B/op [Average]
[info]   (min, avg, max) = (22755.379, 27623.075, 45642.406), stdev = 10077.692
[info]   CI (99.9%): [≈ 0, 66428.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.713 ±(99.9%) 2.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 1.445), stdev = 0.715
[info]   CI (99.9%): [≈ 0, 3.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1486.480 ops/s
[info] # Warmup Iteration   2: 4271.104 ops/s
[info] # Warmup Iteration   3: 4612.058 ops/s
[info] # Warmup Iteration   4: 4817.633 ops/s
[info] # Warmup Iteration   5: 4797.315 ops/s
[info] Iteration   1: 4791.340 ops/s
[info]                  ·gc.alloc.rate:                   1044.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              343228.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219583.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4804.218 ops/s
[info]                  ·gc.alloc.rate:                   1066.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              349357.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     438197.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4823.245 ops/s
[info]                  ·gc.alloc.rate:               1043.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          340592.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218453.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4771.766 ops/s
[info]                  ·gc.alloc.rate:                   1046.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              345244.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441684.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4801.861 ops/s
[info]                  ·gc.alloc.rate:                   1037.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              339909.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219517.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.822 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4798.486 ±(99.9%) 72.610 ops/s [Average]
[info]   (min, avg, max) = (4771.766, 4798.486, 4823.245), stdev = 18.857
[info]   CI (99.9%): [4725.876, 4871.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1047.804 ±(99.9%) 42.541 MB/sec [Average]
[info]   (min, avg, max) = (1037.122, 1047.804, 1066.467), stdev = 11.048
[info]   CI (99.9%): [1005.263, 1090.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   343666.389 ±(99.9%) 14741.487 B/op [Average]
[info]   (min, avg, max) = (339909.978, 343666.389, 349357.093), stdev = 3828.317
[info]   CI (99.9%): [328924.902, 358407.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   936.913 ±(99.9%) 1411.330 MB/sec [Average]
[info]   (min, avg, max) = (668.490, 936.913, 1339.157), stdev = 366.518
[info]   CI (99.9%): [≈ 0, 2348.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   307487.519 ±(99.9%) 465621.358 B/op [Average]
[info]   (min, avg, max) = (218453.333, 307487.519, 441684.904), stdev = 120920.388
[info]   CI (99.9%): [≈ 0, 773108.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.665 ±(99.9%) 49.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.665, 34.098), stdev = 12.758
[info]   CI (99.9%): [≈ 0, 62.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1423.307 ops/s
[info] # Warmup Iteration   2: 4350.558 ops/s
[info] # Warmup Iteration   3: 4839.405 ops/s
[info] # Warmup Iteration   4: 4991.591 ops/s
[info] # Warmup Iteration   5: 5004.187 ops/s
[info] Iteration   1: 5016.381 ops/s
[info]                  ·gc.alloc.rate:                   659.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              206774.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206768.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5015.095 ops/s
[info]                  ·gc.alloc.rate:               656.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          205852.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207269.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 5040.825 ops/s
[info]                  ·gc.alloc.rate:                   662.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              206730.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206200.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4988.349 ops/s
[info]                  ·gc.alloc.rate:                   657.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              207482.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208874.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4997.138 ops/s
[info]                  ·gc.alloc.rate:                   655.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              206324.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208540.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5011.558 ±(99.9%) 77.943 ops/s [Average]
[info]   (min, avg, max) = (4988.349, 5011.558, 5040.825), stdev = 20.242
[info]   CI (99.9%): [4933.614, 5089.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   658.032 ±(99.9%) 10.544 MB/sec [Average]
[info]   (min, avg, max) = (655.083, 658.032, 662.131), stdev = 2.738
[info]   CI (99.9%): [647.488, 668.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   206632.787 ±(99.9%) 2323.755 B/op [Average]
[info]   (min, avg, max) = (205852.263, 206632.787, 207482.915), stdev = 603.472
[info]   CI (99.9%): [204309.033, 208956.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.882 ±(99.9%) 4.920 MB/sec [Average]
[info]   (min, avg, max) = (659.049, 660.882, 662.119), stdev = 1.278
[info]   CI (99.9%): [655.961, 665.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   207530.740 ±(99.9%) 4408.801 B/op [Average]
[info]   (min, avg, max) = (206200.536, 207530.740, 208874.658), stdev = 1144.952
[info]   CI (99.9%): [203121.939, 211939.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.879 ±(99.9%) 13.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.879, 9.690), stdev = 3.539
[info]   CI (99.9%): [≈ 0, 17.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3873.318 ops/s
[info] # Warmup Iteration   2: 6301.113 ops/s
[info] # Warmup Iteration   3: 6500.146 ops/s
[info] # Warmup Iteration   4: 6566.467 ops/s
[info] # Warmup Iteration   5: 6538.830 ops/s
[info] Iteration   1: 6537.185 ops/s
[info]                  ·gc.alloc.rate:               331.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          79857.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123154.361 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6592.022 ops/s
[info]                  ·gc.alloc.rate:      322.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6493.105 ops/s
[info]                  ·gc.alloc.rate:               330.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          80122.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124007.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6564.823 ops/s
[info]                  ·gc.alloc.rate:      320.800 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6506.779 ops/s
[info]                  ·gc.alloc.rate:               341.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          82621.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162168.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6538.783 ±(99.9%) 156.719 ops/s [Average]
[info]   (min, avg, max) = (6493.105, 6538.783, 6592.022), stdev = 40.699
[info]   CI (99.9%): [6382.064, 6695.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   329.429 ±(99.9%) 32.567 MB/sec [Average]
[info]   (min, avg, max) = (320.800, 329.429, 341.730), stdev = 8.457
[info]   CI (99.9%): [296.862, 361.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79275.620 ±(99.9%) 9363.633 B/op [Average]
[info]   (min, avg, max) = (76888.066, 79275.620, 82621.621), stdev = 2431.706
[info]   CI (99.9%): [69911.987, 88639.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.848 ±(99.9%) 1217.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.848, 670.742), stdev = 316.061
[info]   CI (99.9%): [≈ 0, 1555.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81866.097 ±(99.9%) 294097.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81866.097, 162168.369), stdev = 76376.061
[info]   CI (99.9%): [≈ 0, 375963.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3872.032 ops/s
[info] # Warmup Iteration   2: 6245.348 ops/s
[info] # Warmup Iteration   3: 6595.747 ops/s
[info] # Warmup Iteration   4: 6604.973 ops/s
[info] # Warmup Iteration   5: 6623.918 ops/s
[info] Iteration   1: 6653.391 ops/s
[info]                  ·gc.alloc.rate:      276.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.088 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6612.222 ops/s
[info]                  ·gc.alloc.rate:               290.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          69100.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121757.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6625.804 ops/s
[info]                  ·gc.alloc.rate:      275.345 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6573.293 ops/s
[info]                  ·gc.alloc.rate:               298.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          71447.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122480.056 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6606.589 ops/s
[info]                  ·gc.alloc.rate:      275.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 65677.314 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6614.260 ±(99.9%) 112.360 ops/s [Average]
[info]   (min, avg, max) = (6573.293, 6614.260, 6653.391), stdev = 29.180
[info]   CI (99.9%): [6501.900, 6726.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   283.250 ±(99.9%) 40.648 MB/sec [Average]
[info]   (min, avg, max) = (275.345, 283.250, 298.411), stdev = 10.556
[info]   CI (99.9%): [242.603, 323.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67405.150 ±(99.9%) 10588.168 B/op [Average]
[info]   (min, avg, max) = (65400.065, 67405.150, 71447.899), stdev = 2749.714
[info]   CI (99.9%): [56816.982, 77993.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.627 ±(99.9%) 1078.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.627, 511.583), stdev = 280.198
[info]   CI (99.9%): [≈ 0, 1283.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   48847.580 ±(99.9%) 257561.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48847.580, 122480.056), stdev = 66887.790
[info]   CI (99.9%): [≈ 0, 306408.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2494.131 ops/s
[info] # Warmup Iteration   2: 6957.524 ops/s
[info] # Warmup Iteration   3: 8049.784 ops/s
[info] # Warmup Iteration   4: 7882.621 ops/s
[info] # Warmup Iteration   5: 7840.926 ops/s
[info] Iteration   1: 7856.265 ops/s
[info]                  ·gc.alloc.rate:               1649.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          330433.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 268615.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 7874.678 ops/s
[info]                  ·gc.alloc.rate:                   1690.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              337775.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402335.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8091.571 ops/s
[info]                  ·gc.alloc.rate:                   1710.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              332598.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260427.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7807.753 ops/s
[info]                  ·gc.alloc.rate:                   1665.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              335615.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269326.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7822.856 ops/s
[info]                  ·gc.alloc.rate:               1662.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          334393.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 403267.534 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7890.625 ±(99.9%) 444.389 ops/s [Average]
[info]   (min, avg, max) = (7807.753, 7890.625, 8091.571), stdev = 115.406
[info]   CI (99.9%): [7446.236, 8335.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1675.420 ±(99.9%) 94.150 MB/sec [Average]
[info]   (min, avg, max) = (1649.319, 1675.420, 1710.250), stdev = 24.451
[info]   CI (99.9%): [1581.270, 1769.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334163.124 ±(99.9%) 10818.533 B/op [Average]
[info]   (min, avg, max) = (330433.184, 334163.124, 337775.508), stdev = 2809.539
[info]   CI (99.9%): [323344.590, 344981.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.801 ±(99.9%) 1413.728 MB/sec [Average]
[info]   (min, avg, max) = (1336.168, 1606.801, 2013.220), stdev = 367.141
[info]   CI (99.9%): [193.074, 3020.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   320794.678 ±(99.9%) 288583.260 B/op [Average]
[info]   (min, avg, max) = (260427.253, 320794.678, 403267.534), stdev = 74944.156
[info]   CI (99.9%): [32211.418, 609377.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.826 ±(99.9%) 6.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.826, 3.712), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 7.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   164.659 ±(99.9%) 1247.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 164.659, 741.878), stdev = 323.927
[info]   CI (99.9%): [≈ 0, 1411.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.720 ops/s
[info] # Warmup Iteration   2: 17472.284 ops/s
[info] # Warmup Iteration   3: 18294.548 ops/s
[info] # Warmup Iteration   4: 18931.228 ops/s
[info] # Warmup Iteration   5: 19012.485 ops/s
[info] Iteration   1: 19055.784 ops/s
[info]                  ·gc.alloc.rate:                   485.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              40086.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54882.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18921.383 ops/s
[info]                  ·gc.alloc.rate:      472.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 39267.416 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18739.241 ops/s
[info]                  ·gc.alloc.rate:               487.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          40916.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55808.055 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 18897.087 ops/s
[info]                  ·gc.alloc.rate:                   490.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              40817.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55394.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19116.299 ops/s
[info]                  ·gc.alloc.rate:      471.750 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18945.959 ±(99.9%) 567.242 ops/s [Average]
[info]   (min, avg, max) = (18739.241, 18945.959, 19116.299), stdev = 147.311
[info]   CI (99.9%): [18378.716, 19513.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   481.340 ±(99.9%) 33.494 MB/sec [Average]
[info]   (min, avg, max) = (471.750, 481.340, 490.154), stdev = 8.698
[info]   CI (99.9%): [447.846, 514.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39983.878 ±(99.9%) 3557.991 B/op [Average]
[info]   (min, avg, max) = (38832.023, 39983.878, 40916.282), stdev = 923.999
[info]   CI (99.9%): [36425.888, 43541.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.843 ±(99.9%) 1401.989 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.843, 665.193), stdev = 364.092
[info]   CI (99.9%): [≈ 0, 1800.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   33216.964 ±(99.9%) 116769.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33216.964, 55808.055), stdev = 30324.572
[info]   CI (99.9%): [≈ 0, 149986.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.885 ±(99.9%) 4.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 2.335), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4723.309 ops/s
[info] # Warmup Iteration   2: 14480.263 ops/s
[info] # Warmup Iteration   3: 15429.545 ops/s
[info] # Warmup Iteration   4: 16165.859 ops/s
[info] # Warmup Iteration   5: 16148.588 ops/s
[info] Iteration   1: 15843.242 ops/s
[info]                  ·gc.alloc.rate:                   438.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              43526.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50817.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15508.494 ops/s
[info]                  ·gc.alloc.rate:      412.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15358.855 ops/s
[info]                  ·gc.alloc.rate:               441.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          45194.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67468.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 15521.404 ops/s
[info]                  ·gc.alloc.rate:               433.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          43924.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66764.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 15537.607 ops/s
[info]                  ·gc.alloc.rate:      412.995 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15553.920 ±(99.9%) 681.098 ops/s [Average]
[info]   (min, avg, max) = (15358.855, 15553.920, 15843.242), stdev = 176.879
[info]   CI (99.9%): [14872.822, 16235.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   427.550 ±(99.9%) 53.483 MB/sec [Average]
[info]   (min, avg, max) = (412.315, 427.550, 441.077), stdev = 13.889
[info]   CI (99.9%): [374.067, 481.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43262.026 ±(99.9%) 5558.131 B/op [Average]
[info]   (min, avg, max) = (41832.028, 43262.026, 45194.614), stdev = 1443.429
[info]   CI (99.9%): [37703.895, 48820.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   365.693 ±(99.9%) 1306.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 365.693, 658.459), stdev = 339.172
[info]   CI (99.9%): [≈ 0, 1671.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   37010.084 ±(99.9%) 132598.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37010.084, 67468.423), stdev = 34435.337
[info]   CI (99.9%): [≈ 0, 169608.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.414 ±(99.9%) 3.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.414, 2.068), stdev = 0.925
[info]   CI (99.9%): [≈ 0, 3.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8676.213 ops/s
[info] # Warmup Iteration   2: 22605.758 ops/s
[info] # Warmup Iteration   3: 22464.822 ops/s
[info] # Warmup Iteration   4: 22334.921 ops/s
[info] # Warmup Iteration   5: 22482.306 ops/s
[info] Iteration   1: 21941.121 ops/s
[info]                  ·gc.alloc.rate:               441.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          31635.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      510.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36609.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22533.054 ops/s
[info]                  ·gc.alloc.rate:      414.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23121.260 ops/s
[info]                  ·gc.alloc.rate:               442.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          30121.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45638.562 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 23261.876 ops/s
[info]                  ·gc.alloc.rate:      427.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23182.341 ops/s
[info]                  ·gc.alloc.rate:                   447.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              30401.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45518.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22807.930 ±(99.9%) 2170.873 ops/s [Average]
[info]   (min, avg, max) = (21941.121, 22807.930, 23261.876), stdev = 563.769
[info]   CI (99.9%): [20637.057, 24978.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   434.706 ±(99.9%) 52.650 MB/sec [Average]
[info]   (min, avg, max) = (414.233, 434.706, 447.804), stdev = 13.673
[info]   CI (99.9%): [382.056, 487.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30002.969 ±(99.9%) 4369.424 B/op [Average]
[info]   (min, avg, max) = (28928.019, 30002.969, 31635.894), stdev = 1134.725
[info]   CI (99.9%): [25633.545, 34372.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.353 ±(99.9%) 1325.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.353, 670.469), stdev = 344.307
[info]   CI (99.9%): [≈ 0, 1696.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25553.376 ±(99.9%) 90923.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25553.376, 45638.562), stdev = 23612.580
[info]   CI (99.9%): [≈ 0, 116477.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.283 ±(99.9%) 2.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.283, 1.413), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132.755 ops/s
[info] # Warmup Iteration   2: 2840.280 ops/s
[info] # Warmup Iteration   3: 3438.283 ops/s
[info] # Warmup Iteration   4: 3570.717 ops/s
[info] # Warmup Iteration   5: 3649.269 ops/s
[info] Iteration   1: 3634.920 ops/s
[info]                  ·gc.alloc.rate:                   2262.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              979797.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1158884.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 932.757 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3631.489 ops/s
[info]                  ·gc.alloc.rate:                   2267.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              982800.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     870733.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3631.551 ops/s
[info]                  ·gc.alloc.rate:                   2244.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              972647.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871215.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3620.503 ops/s
[info]                  ·gc.alloc.rate:               2291.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          996148.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1166692.789 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 3616.196 ops/s
[info]                  ·gc.alloc.rate:               2262.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          984580.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 877678.695 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   3626.932 ±(99.9%) 31.193 ops/s [Average]
[info]   (min, avg, max) = (3616.196, 3626.932, 3634.920), stdev = 8.101
[info]   CI (99.9%): [3595.739, 3658.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2265.849 ±(99.9%) 65.404 MB/sec [Average]
[info]   (min, avg, max) = (2244.549, 2265.849, 2291.829), stdev = 16.985
[info]   CI (99.9%): [2200.444, 2331.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   983194.655 ±(99.9%) 32936.454 B/op [Average]
[info]   (min, avg, max) = (972647.617, 983194.655, 996148.000), stdev = 8553.493
[info]   CI (99.9%): [950258.200, 1016131.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2279.393 ±(99.9%) 1409.653 MB/sec [Average]
[info]   (min, avg, max) = (2009.147, 2279.393, 2684.200), stdev = 366.082
[info]   CI (99.9%): [869.741, 3689.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   989041.024 ±(99.9%) 610930.466 B/op [Average]
[info]   (min, avg, max) = (870733.815, 989041.024, 1166692.789), stdev = 158656.702
[info]   CI (99.9%): [378110.559, 1599971.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.502 ±(99.9%) 3.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.502, 2.154), stdev = 0.933
[info]   CI (99.9%): [≈ 0, 4.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   217.219 ±(99.9%) 1555.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 217.219, 932.757), stdev = 403.963
[info]   CI (99.9%): [≈ 0, 1772.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2580.888 ops/s
[info] # Warmup Iteration   2: 8687.647 ops/s
[info] # Warmup Iteration   3: 9441.956 ops/s
[info] # Warmup Iteration   4: 9575.196 ops/s
[info] # Warmup Iteration   5: 9467.060 ops/s
[info] Iteration   1: 9723.981 ops/s
[info]                  ·gc.alloc.rate:                   2079.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              336551.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325645.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 576.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9865.900 ops/s
[info]                  ·gc.alloc.rate:                   2094.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              334104.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320162.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9828.192 ops/s
[info]                  ·gc.alloc.rate:                   2113.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              338385.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320973.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9836.334 ops/s
[info]                  ·gc.alloc.rate:                   2115.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              338493.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320978.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9814.648 ops/s
[info]                  ·gc.alloc.rate:               2111.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          338630.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 322125.196 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9813.811 ±(99.9%) 206.445 ops/s [Average]
[info]   (min, avg, max) = (9723.981, 9813.811, 9865.900), stdev = 53.613
[info]   CI (99.9%): [9607.366, 10020.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2102.893 ±(99.9%) 59.941 MB/sec [Average]
[info]   (min, avg, max) = (2079.397, 2102.893, 2115.630), stdev = 15.566
[info]   CI (99.9%): [2042.952, 2162.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   337233.069 ±(99.9%) 7487.083 B/op [Average]
[info]   (min, avg, max) = (334104.405, 337233.069, 338630.081), stdev = 1944.372
[info]   CI (99.9%): [329745.987, 344720.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2007.707 ±(99.9%) 11.156 MB/sec [Average]
[info]   (min, avg, max) = (2004.404, 2007.707, 2012.011), stdev = 2.897
[info]   CI (99.9%): [1996.551, 2018.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   321976.783 ±(99.9%) 8342.526 B/op [Average]
[info]   (min, avg, max) = (320162.088, 321976.783, 325645.055), stdev = 2166.527
[info]   CI (99.9%): [313634.257, 330319.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.807 ±(99.9%) 5.961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.807, 3.562), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 6.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   130.462 ±(99.9%) 965.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.462, 576.541), stdev = 250.653
[info]   CI (99.9%): [≈ 0, 1095.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.843 ops/s
[info] # Warmup Iteration   2: 51511.145 ops/s
[info] # Warmup Iteration   3: 55977.082 ops/s
[info] # Warmup Iteration   4: 56558.108 ops/s
[info] # Warmup Iteration   5: 56354.672 ops/s
[info] Iteration   1: 54537.305 ops/s
[info]                  ·gc.alloc.rate:                   524.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              15146.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19185.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 54426.217 ops/s
[info]                  ·gc.alloc.rate:               525.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          15202.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19224.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 54767.433 ops/s
[info]                  ·gc.alloc.rate:      511.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 54747.081 ops/s
[info]                  ·gc.alloc.rate:               533.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          15326.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19120.900 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 56078.707 ops/s
[info]                  ·gc.alloc.rate:               538.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          15123.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18666.818 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   54911.349 ±(99.9%) 2572.797 ops/s [Average]
[info]   (min, avg, max) = (54426.217, 54911.349, 56078.707), stdev = 668.147
[info]   CI (99.9%): [52338.551, 57484.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   526.942 ±(99.9%) 39.030 MB/sec [Average]
[info]   (min, avg, max) = (511.985, 526.942, 538.864), stdev = 10.136
[info]   CI (99.9%): [487.911, 565.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15102.109 ±(99.9%) 892.538 B/op [Average]
[info]   (min, avg, max) = (14712.008, 15102.109, 15326.206), stdev = 231.789
[info]   CI (99.9%): [14209.570, 15994.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.013 ±(99.9%) 1145.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.013, 665.244), stdev = 297.404
[info]   CI (99.9%): [≈ 0, 1677.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15239.540 ±(99.9%) 32815.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15239.540, 19224.728), stdev = 8522.106
[info]   CI (99.9%): [≈ 0, 48055.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.078 ±(99.9%) 0.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.392), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7616.735 ops/s
[info] # Warmup Iteration   2: 43003.355 ops/s
[info] # Warmup Iteration   3: 45074.807 ops/s
[info] # Warmup Iteration   4: 45068.323 ops/s
[info] # Warmup Iteration   5: 43301.435 ops/s
[info] Iteration   1: 45234.368 ops/s
[info]                  ·gc.alloc.rate:               671.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          23362.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23004.237 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 45233.707 ops/s
[info]                  ·gc.alloc.rate:                   671.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              23377.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23003.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43452.527 ops/s
[info]                  ·gc.alloc.rate:               640.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          23202.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24019.361 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 45345.307 ops/s
[info]                  ·gc.alloc.rate:               673.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          23362.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23016.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 45341.152 ops/s
[info]                  ·gc.alloc.rate:               671.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          23306.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23087.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   44921.412 ±(99.9%) 3168.872 ops/s [Average]
[info]   (min, avg, max) = (43452.527, 44921.412, 45345.307), stdev = 822.946
[info]   CI (99.9%): [41752.540, 48090.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   665.790 ±(99.9%) 54.131 MB/sec [Average]
[info]   (min, avg, max) = (640.666, 665.790, 673.100), stdev = 14.058
[info]   CI (99.9%): [611.659, 719.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23322.184 ±(99.9%) 278.275 B/op [Average]
[info]   (min, avg, max) = (23202.156, 23322.184, 23377.148), stdev = 72.267
[info]   CI (99.9%): [23043.910, 23600.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.843 ±(99.9%) 6.730 MB/sec [Average]
[info]   (min, avg, max) = (661.141, 662.843, 665.423), stdev = 1.748
[info]   CI (99.9%): [656.113, 669.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23226.359 ±(99.9%) 1712.245 B/op [Average]
[info]   (min, avg, max) = (23003.728, 23226.359, 24019.361), stdev = 444.665
[info]   CI (99.9%): [21514.114, 24938.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.350), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31435.612 ops/s
[info] # Warmup Iteration   2: 88155.482 ops/s
[info] # Warmup Iteration   3: 86995.990 ops/s
[info] # Warmup Iteration   4: 86913.600 ops/s
[info] # Warmup Iteration   5: 87625.542 ops/s
[info] Iteration   1: 87087.982 ops/s
[info]                  ·gc.alloc.rate:                   671.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              12141.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12104.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 90611.576 ops/s
[info]                  ·gc.alloc.rate:               698.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          12128.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11634.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 90076.773 ops/s
[info]                  ·gc.alloc.rate:                   711.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              12424.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23407.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 90392.597 ops/s
[info]                  ·gc.alloc.rate:               696.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          12124.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11679.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 90577.198 ops/s
[info]                  ·gc.alloc.rate:               698.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          12126.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11655.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   89749.225 ±(99.9%) 5786.423 ops/s [Average]
[info]   (min, avg, max) = (87087.982, 89749.225, 90611.576), stdev = 1502.716
[info]   CI (99.9%): [83962.802, 95535.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   695.193 ±(99.9%) 55.336 MB/sec [Average]
[info]   (min, avg, max) = (671.836, 695.193, 711.348), stdev = 14.371
[info]   CI (99.9%): [639.856, 750.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12188.958 ±(99.9%) 507.434 B/op [Average]
[info]   (min, avg, max) = (12124.543, 12188.958, 12424.374), stdev = 131.779
[info]   CI (99.9%): [11681.524, 12696.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.342 ±(99.9%) 1153.453 MB/sec [Average]
[info]   (min, avg, max) = (669.794, 804.342, 1340.189), stdev = 299.548
[info]   CI (99.9%): [≈ 0, 1957.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14096.470 ±(99.9%) 20057.119 B/op [Average]
[info]   (min, avg, max) = (11634.645, 14096.470, 23407.688), stdev = 5208.770
[info]   CI (99.9%): [≈ 0, 34153.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.148 ±(99.9%) 0.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.376), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32124.659 ops/s
[info] # Warmup Iteration   2: 99801.113 ops/s
[info] # Warmup Iteration   3: 103681.194 ops/s
[info] # Warmup Iteration   4: 104938.696 ops/s
[info] # Warmup Iteration   5: 105459.783 ops/s
[info] Iteration   1: 105250.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105128.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 105145.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105238.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105213.376 ops/s
[info]                  ·gc.alloc.rate:      0.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.310 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   105195.249 ±(99.9%) 211.506 ops/s [Average]
[info]   (min, avg, max) = (105128.632, 105195.249, 105250.240), stdev = 54.927
[info]   CI (99.9%): [104983.743, 105406.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.058 ±(99.9%) 0.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.058, 0.288), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.865 ±(99.9%) 7.415 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.865, 4.310), stdev = 1.926
[info]   CI (99.9%): [≈ 0, 8.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643.582 ops/s
[info] # Warmup Iteration   2: 6535.863 ops/s
[info] # Warmup Iteration   3: 7482.670 ops/s
[info] # Warmup Iteration   4: 7560.562 ops/s
[info] # Warmup Iteration   5: 7561.528 ops/s
[info] Iteration   1: 7536.880 ops/s
[info]                  ·gc.alloc.rate:                   2383.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              497815.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418915.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7546.851 ops/s
[info]                  ·gc.alloc.rate:                   2427.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              506224.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559435.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.706 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7544.090 ops/s
[info]                  ·gc.alloc.rate:                   2400.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              500788.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420833.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7566.688 ops/s
[info]                  ·gc.alloc.rate:                   2434.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              506364.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     560584.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7554.685 ops/s
[info]                  ·gc.alloc.rate:               2404.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          500897.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 421955.752 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7549.839 ±(99.9%) 43.790 ops/s [Average]
[info]   (min, avg, max) = (7536.880, 7549.839, 7566.688), stdev = 11.372
[info]   CI (99.9%): [7506.049, 7593.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2410.261 ±(99.9%) 79.523 MB/sec [Average]
[info]   (min, avg, max) = (2383.936, 2410.261, 2434.543), stdev = 20.652
[info]   CI (99.9%): [2330.739, 2489.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   502418.102 ±(99.9%) 14435.781 B/op [Average]
[info]   (min, avg, max) = (497815.080, 502418.102, 506364.332), stdev = 3748.926
[info]   CI (99.9%): [487982.321, 516853.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.414 ±(99.9%) 1418.933 MB/sec [Average]
[info]   (min, avg, max) = (2006.103, 2285.414, 2695.226), stdev = 368.492
[info]   CI (99.9%): [866.481, 3704.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   476344.938 ±(99.9%) 294127.291 B/op [Average]
[info]   (min, avg, max) = (418915.710, 476344.938, 560584.329), stdev = 76383.924
[info]   CI (99.9%): [182217.646, 770472.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.194 ±(99.9%) 1.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.823), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40.431 ±(99.9%) 284.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.431, 171.778), stdev = 73.897
[info]   CI (99.9%): [≈ 0, 324.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1372964.550 ops/s
[info] # Warmup Iteration   2: 7303842.104 ops/s
[info] # Warmup Iteration   3: 8394591.247 ops/s
[info] # Warmup Iteration   4: 8418200.269 ops/s
[info] # Warmup Iteration   5: 8486258.116 ops/s
[info] Iteration   1: 8503306.396 ops/s
[info]                  ·gc.alloc.rate:                   4682.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4710.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8340454.878 ops/s
[info]                  ·gc.alloc.rate:                   4572.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8524812.180 ops/s
[info]                  ·gc.alloc.rate:                   4695.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              866.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4743.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     875.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 8385887.919 ops/s
[info]                  ·gc.alloc.rate:                   4624.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              867.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4751.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     891.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8492779.242 ops/s
[info]                  ·gc.alloc.rate:                   4651.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   8449448.123 ±(99.9%) 312694.263 ops/s [Average]
[info]   (min, avg, max) = (8340454.878, 8449448.123, 8524812.180), stdev = 81205.707
[info]   CI (99.9%): [8136753.860, 8762142.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4645.228 ±(99.9%) 189.403 MB/sec [Average]
[info]   (min, avg, max) = (4572.483, 4645.228, 4695.327), stdev = 49.187
[info]   CI (99.9%): [4455.825, 4834.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   865.119 ±(99.9%) 10.329 B/op [Average]
[info]   (min, avg, max) = (862.007, 865.119, 867.712), stdev = 2.683
[info]   CI (99.9%): [854.790, 875.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4467.976 ±(99.9%) 1410.306 MB/sec [Average]
[info]   (min, avg, max) = (4054.059, 4467.976, 4751.728), stdev = 366.252
[info]   CI (99.9%): [3057.671, 5878.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   831.979 ±(99.9%) 253.349 B/op [Average]
[info]   (min, avg, max) = (756.234, 831.979, 891.603), stdev = 65.794
[info]   CI (99.9%): [578.630, 1085.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.596 ops/s
[info] # Warmup Iteration   2: 35914367.335 ops/s
[info] # Warmup Iteration   3: 38043403.468 ops/s
[info] # Warmup Iteration   4: 38264948.370 ops/s
[info] # Warmup Iteration   5: 38221585.985 ops/s
[info] Iteration   1: 38257357.222 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38286550.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38201074.895 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38240932.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38271004.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38251383.979 ±(99.9%) 126216.800 ops/s [Average]
[info]   (min, avg, max) = (38201074.895, 38251383.979, 38286550.817), stdev = 32778.102
[info]   CI (99.9%): [38125167.179, 38377600.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489890.763 ops/s
[info] # Warmup Iteration   2: 10234459.857 ops/s
[info] # Warmup Iteration   3: 10956698.650 ops/s
[info] # Warmup Iteration   4: 10545364.064 ops/s
[info] # Warmup Iteration   5: 10981372.309 ops/s
[info] Iteration   1: 11178736.587 ops/s
[info]                  ·gc.alloc.rate:                   3773.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              531.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11035282.194 ops/s
[info]                  ·gc.alloc.rate:                   3804.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              542.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11110789.574 ops/s
[info]                  ·gc.alloc.rate:               3804.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          538.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477.616 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 11117871.669 ops/s
[info]                  ·gc.alloc.rate:                   3808.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     478.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 11104190.727 ops/s
[info]                  ·gc.alloc.rate:                   3831.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              543.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     576.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   11109374.150 ±(99.9%) 196362.498 ops/s [Average]
[info]   (min, avg, max) = (11035282.194, 11109374.150, 11178736.587), stdev = 50994.717
[info]   CI (99.9%): [10913011.652, 11305736.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3804.542 ±(99.9%) 79.247 MB/sec [Average]
[info]   (min, avg, max) = (3773.458, 3804.542, 3831.233), stdev = 20.580
[info]   CI (99.9%): [3725.295, 3883.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   538.927 ±(99.9%) 18.480 B/op [Average]
[info]   (min, avg, max) = (531.073, 538.927, 543.008), stdev = 4.799
[info]   CI (99.9%): [520.448, 557.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3639.985 ±(99.9%) 1441.049 MB/sec [Average]
[info]   (min, avg, max) = (3346.629, 3639.985, 4068.741), stdev = 374.236
[info]   CI (99.9%): [2198.936, 5081.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   515.754 ±(99.9%) 211.089 B/op [Average]
[info]   (min, avg, max) = (471.002, 515.754, 576.670), stdev = 54.819
[info]   CI (99.9%): [304.665, 726.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16258200.648 ops/s
[info] # Warmup Iteration   2: 45643085.301 ops/s
[info] # Warmup Iteration   3: 48921577.230 ops/s
[info] # Warmup Iteration   4: 48906857.130 ops/s
[info] # Warmup Iteration   5: 48795999.956 ops/s
[info] Iteration   1: 48932894.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48914856.047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48891473.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48906153.237 ops/s
[info]                  ·gc.alloc.rate:      0.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48915646.804 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48912204.725 ±(99.9%) 58185.795 ops/s [Average]
[info]   (min, avg, max) = (48891473.503, 48912204.725, 48932894.033), stdev = 15110.666
[info]   CI (99.9%): [48854018.930, 48970390.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.036 ±(99.9%) 0.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6246427.509 ops/s
[info] # Warmup Iteration   2: 29444358.531 ops/s
[info] # Warmup Iteration   3: 31568660.624 ops/s
[info] # Warmup Iteration   4: 31638378.518 ops/s
[info] # Warmup Iteration   5: 31654282.306 ops/s
[info] Iteration   1: 31649683.298 ops/s
[info]                  ·gc.alloc.rate:               827.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 31358398.042 ops/s
[info]                  ·gc.alloc.rate:                   839.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              42.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 31618441.197 ops/s
[info]                  ·gc.alloc.rate:               825.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 31688935.456 ops/s
[info]                  ·gc.alloc.rate:               821.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31685715.213 ops/s
[info]                  ·gc.alloc.rate:               820.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31600234.641 ±(99.9%) 532296.169 ops/s [Average]
[info]   (min, avg, max) = (31358398.042, 31600234.641, 31688935.456), stdev = 138235.625
[info]   CI (99.9%): [31067938.473, 32132530.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   826.607 ±(99.9%) 29.411 MB/sec [Average]
[info]   (min, avg, max) = (820.144, 826.607, 839.191), stdev = 7.638
[info]   CI (99.9%): [797.196, 856.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.172 ±(99.9%) 2.149 B/op [Average]
[info]   (min, avg, max) = (40.740, 41.172, 42.118), stdev = 0.558
[info]   CI (99.9%): [39.023, 43.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.688 ±(99.9%) 1157.205 MB/sec [Average]
[info]   (min, avg, max) = (671.447, 806.688, 1344.278), stdev = 300.522
[info]   CI (99.9%): [≈ 0, 1963.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.230 ±(99.9%) 58.631 B/op [Average]
[info]   (min, avg, max) = (33.391, 40.230, 67.468), stdev = 15.226
[info]   CI (99.9%): [≈ 0, 98.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 6.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 944362.833 ops/s
[info] # Warmup Iteration   2: 8279374.492 ops/s
[info] # Warmup Iteration   3: 8663640.237 ops/s
[info] # Warmup Iteration   4: 8710769.201 ops/s
[info] # Warmup Iteration   5: 8868958.197 ops/s
[info] Iteration   1: 8796496.337 ops/s
[info]                  ·gc.alloc.rate:                   3958.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              708.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4020.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8893883.880 ops/s
[info]                  ·gc.alloc.rate:                   4004.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              708.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4037.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8865638.964 ops/s
[info]                  ·gc.alloc.rate:                   3964.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              703.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     599.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8854277.189 ops/s
[info]                  ·gc.alloc.rate:                   3985.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              708.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4063.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8898537.536 ops/s
[info]                  ·gc.alloc.rate:                   4005.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              708.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8861766.781 ±(99.9%) 157769.711 ops/s [Average]
[info]   (min, avg, max) = (8796496.337, 8861766.781, 8898537.536), stdev = 40972.293
[info]   CI (99.9%): [8703997.071, 9019536.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3983.573 ±(99.9%) 83.722 MB/sec [Average]
[info]   (min, avg, max) = (3958.028, 3983.573, 4005.044), stdev = 21.742
[info]   CI (99.9%): [3899.851, 4067.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   707.354 ±(99.9%) 8.310 B/op [Average]
[info]   (min, avg, max) = (703.500, 707.354, 708.427), stdev = 2.158
[info]   CI (99.9%): [699.044, 715.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3914.352 ±(99.9%) 1157.774 MB/sec [Average]
[info]   (min, avg, max) = (3377.775, 3914.352, 4072.704), stdev = 300.670
[info]   CI (99.9%): [2756.578, 5072.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   695.084 ±(99.9%) 206.401 B/op [Average]
[info]   (min, avg, max) = (599.339, 695.084, 722.175), stdev = 53.602
[info]   CI (99.9%): [488.682, 901.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1816296.359 ops/s
[info] # Warmup Iteration   2: 12592369.658 ops/s
[info] # Warmup Iteration   3: 13242788.822 ops/s
[info] # Warmup Iteration   4: 13221174.645 ops/s
[info] # Warmup Iteration   5: 13740196.064 ops/s
[info] Iteration   1: 13710071.849 ops/s
[info]                  ·gc.alloc.rate:                   1630.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              187.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13730272.124 ops/s
[info]                  ·gc.alloc.rate:                   1659.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 13851285.124 ops/s
[info]                  ·gc.alloc.rate:                   1659.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13769991.944 ops/s
[info]                  ·gc.alloc.rate:               1662.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          190.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.113 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13720651.136 ops/s
[info]                  ·gc.alloc.rate:                   1657.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13756454.436 ±(99.9%) 221996.032 ops/s [Average]
[info]   (min, avg, max) = (13710071.849, 13756454.436, 13851285.124), stdev = 57651.664
[info]   CI (99.9%): [13534458.404, 13978450.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1653.790 ±(99.9%) 49.611 MB/sec [Average]
[info]   (min, avg, max) = (1630.985, 1653.790, 1662.379), stdev = 12.884
[info]   CI (99.9%): [1604.179, 1703.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   189.208 ±(99.9%) 5.016 B/op [Average]
[info]   (min, avg, max) = (187.226, 189.208, 190.189), stdev = 1.303
[info]   CI (99.9%): [184.192, 194.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.267 ±(99.9%) 1414.239 MB/sec [Average]
[info]   (min, avg, max) = (1339.587, 1609.267, 2014.808), stdev = 367.273
[info]   CI (99.9%): [195.028, 3023.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   184.186 ±(99.9%) 163.388 B/op [Average]
[info]   (min, avg, max) = (152.480, 184.186, 230.943), stdev = 42.431
[info]   CI (99.9%): [20.797, 347.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.185), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.365), stdev = 0.159
[info]   CI (99.9%): [≈ 0, 0.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 2.864
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.697 ops/s
[info] # Warmup Iteration   2: 38292953.248 ops/s
[info] # Warmup Iteration   3: 42580291.553 ops/s
[info] # Warmup Iteration   4: 40577137.727 ops/s
[info] # Warmup Iteration   5: 42547761.280 ops/s
[info] Iteration   1: 42121752.203 ops/s
[info]                  ·gc.alloc.rate:                   872.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42176985.380 ops/s
[info]                  ·gc.alloc.rate:                   902.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42499421.096 ops/s
[info]                  ·gc.alloc.rate:                   882.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42554518.043 ops/s
[info]                  ·gc.alloc.rate:               879.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.686 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 42607611.098 ops/s
[info]                  ·gc.alloc.rate:               892.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42392057.564 ±(99.9%) 868968.198 ops/s [Average]
[info]   (min, avg, max) = (42121752.203, 42392057.564, 42607611.098), stdev = 225668.282
[info]   CI (99.9%): [41523089.366, 43261025.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   886.113 ±(99.9%) 44.928 MB/sec [Average]
[info]   (min, avg, max) = (872.867, 886.113, 902.568), stdev = 11.668
[info]   CI (99.9%): [841.185, 931.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.897 ±(99.9%) 1.805 B/op [Average]
[info]   (min, avg, max) = (32.537, 32.897, 33.680), stdev = 0.469
[info]   CI (99.9%): [31.093, 34.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.499 ±(99.9%) 1147.782 MB/sec [Average]
[info]   (min, avg, max) = (666.654, 800.499, 1333.712), stdev = 298.075
[info]   CI (99.9%): [≈ 0, 1948.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   29.744 ±(99.9%) 43.105 B/op [Average]
[info]   (min, avg, max) = (24.655, 29.744, 49.768), stdev = 11.194
[info]   CI (99.9%): [≈ 0, 72.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.025), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 881651.393 ops/s
[info] # Warmup Iteration   2: 11955423.018 ops/s
[info] # Warmup Iteration   3: 12755662.980 ops/s
[info] # Warmup Iteration   4: 12902777.090 ops/s
[info] # Warmup Iteration   5: 13062815.640 ops/s
[info] Iteration   1: 13205787.577 ops/s
[info]                  ·gc.alloc.rate:               2682.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          319.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239.045 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13132567.163 ops/s
[info]                  ·gc.alloc.rate:                   2680.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              321.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13143814.360 ops/s
[info]                  ·gc.alloc.rate:               2711.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.457 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 13171477.755 ops/s
[info]                  ·gc.alloc.rate:               2717.643 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.734 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13234507.297 ops/s
[info]                  ·gc.alloc.rate:               2731.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.206 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13177630.830 ±(99.9%) 163820.837 ops/s [Average]
[info]   (min, avg, max) = (13132567.163, 13177630.830, 13234507.297), stdev = 42543.751
[info]   CI (99.9%): [13013809.994, 13341451.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2704.745 ±(99.9%) 85.675 MB/sec [Average]
[info]   (min, avg, max) = (2680.916, 2704.745, 2731.184), stdev = 22.249
[info]   CI (99.9%): [2619.070, 2790.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.035 ±(99.9%) 9.208 B/op [Average]
[info]   (min, avg, max) = (319.692, 323.035, 324.775), stdev = 2.391
[info]   CI (99.9%): [313.827, 332.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2546.323 ±(99.9%) 1164.088 MB/sec [Average]
[info]   (min, avg, max) = (2005.711, 2546.323, 2692.768), stdev = 302.310
[info]   CI (99.9%): [1382.235, 3710.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   304.149 ±(99.9%) 140.144 B/op [Average]
[info]   (min, avg, max) = (239.045, 304.149, 320.734), stdev = 36.395
[info]   CI (99.9%): [164.005, 444.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15341049.602 ops/s
[info] # Warmup Iteration   2: 44552020.441 ops/s
[info] # Warmup Iteration   3: 47219366.136 ops/s
[info] # Warmup Iteration   4: 47945072.988 ops/s
[info] # Warmup Iteration   5: 47464746.455 ops/s
[info] Iteration   1: 47399898.460 ops/s
[info]                  ·gc.alloc.rate:               1001.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44.547 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 47470348.142 ops/s
[info]                  ·gc.alloc.rate:               982.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 47476173.789 ops/s
[info]                  ·gc.alloc.rate:                   995.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 49858192.587 ops/s
[info]                  ·gc.alloc.rate:               1039.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 49477168.131 ops/s
[info]                  ·gc.alloc.rate:                   1033.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   48336356.222 ±(99.9%) 4709872.225 ops/s [Average]
[info]   (min, avg, max) = (47399898.460, 48336356.222, 49858192.587), stdev = 1223138.860
[info]   CI (99.9%): [43626483.996, 53046228.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1010.513 ±(99.9%) 96.014 MB/sec [Average]
[info]   (min, avg, max) = (982.636, 1010.513, 1039.845), stdev = 24.934
[info]   CI (99.9%): [914.500, 1106.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.903 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (32.580, 32.903, 33.257), stdev = 0.247
[info]   CI (99.9%): [31.954, 33.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.540 ±(99.9%) 1416.232 MB/sec [Average]
[info]   (min, avg, max) = (671.478, 1074.540, 1344.391), stdev = 367.791
[info]   CI (99.9%): [≈ 0, 2490.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   35.062 ±(99.9%) 46.951 B/op [Average]
[info]   (min, avg, max) = (21.207, 35.062, 44.547), stdev = 12.193
[info]   CI (99.9%): [≈ 0, 82.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22184367.345 ops/s
[info] # Warmup Iteration   2: 57407506.770 ops/s
[info] # Warmup Iteration   3: 61051056.365 ops/s
[info] # Warmup Iteration   4: 60907877.784 ops/s
[info] # Warmup Iteration   5: 61139408.259 ops/s
[info] Iteration   1: 61098123.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 61192298.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 61243641.429 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 61098708.590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62571083.801 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   61440771.146 ±(99.9%) 2444946.481 ops/s [Average]
[info]   (min, avg, max) = (61098123.196, 61440771.146, 62571083.801), stdev = 634944.837
[info]   CI (99.9%): [58995824.666, 63885717.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5923681.111 ops/s
[info] # Warmup Iteration   2: 16969796.108 ops/s
[info] # Warmup Iteration   3: 17399653.464 ops/s
[info] # Warmup Iteration   4: 17851700.213 ops/s
[info] # Warmup Iteration   5: 17919648.357 ops/s
[info] Iteration   1: 17963600.037 ops/s
[info]                  ·gc.alloc.rate:                   1671.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              146.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17533849.499 ops/s
[info]                  ·gc.alloc.rate:                   1671.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17963755.495 ops/s
[info]                  ·gc.alloc.rate:                   1683.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              147.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17699176.470 ops/s
[info]                  ·gc.alloc.rate:                   1699.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              151.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17908728.512 ops/s
[info]                  ·gc.alloc.rate:               1678.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.846 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17813822.003 ±(99.9%) 734274.883 ops/s [Average]
[info]   (min, avg, max) = (17533849.499, 17813822.003, 17963755.495), stdev = 190688.855
[info]   CI (99.9%): [17079547.120, 18548096.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1681.112 ±(99.9%) 45.177 MB/sec [Average]
[info]   (min, avg, max) = (1671.108, 1681.112, 1699.921), stdev = 11.732
[info]   CI (99.9%): [1635.934, 1726.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.538 ±(99.9%) 7.513 B/op [Average]
[info]   (min, avg, max) = (146.478, 148.538, 151.165), stdev = 1.951
[info]   CI (99.9%): [141.025, 156.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1620.265 ±(99.9%) 1425.323 MB/sec [Average]
[info]   (min, avg, max) = (1346.966, 1620.265, 2027.074), stdev = 370.152
[info]   CI (99.9%): [194.942, 3045.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   143.426 ±(99.9%) 131.993 B/op [Average]
[info]   (min, avg, max) = (118.012, 143.426, 181.683), stdev = 34.278
[info]   CI (99.9%): [11.432, 275.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.500), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 404235.587 ops/s
[info] # Warmup Iteration   2: 2564357.964 ops/s
[info] # Warmup Iteration   3: 2747345.378 ops/s
[info] # Warmup Iteration   4: 2694426.441 ops/s
[info] # Warmup Iteration   5: 2702696.801 ops/s
[info] Iteration   1: 2667861.951 ops/s
[info]                  ·gc.alloc.rate:                   2126.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              1254.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1188.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2660088.588 ops/s
[info]                  ·gc.alloc.rate:                   2134.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1189.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2648095.455 ops/s
[info]                  ·gc.alloc.rate:               2139.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1271.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1193.680 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2730366.693 ops/s
[info]                  ·gc.alloc.rate:                   2227.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              1283.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2743920.417 ops/s
[info]                  ·gc.alloc.rate:               2213.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1155.234 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2690066.621 ±(99.9%) 168700.790 ops/s [Average]
[info]   (min, avg, max) = (2648095.455, 2690066.621, 2743920.417), stdev = 43811.059
[info]   CI (99.9%): [2521365.831, 2858767.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2168.191 ±(99.9%) 184.751 MB/sec [Average]
[info]   (min, avg, max) = (2126.566, 2168.191, 2227.250), stdev = 47.979
[info]   CI (99.9%): [1983.440, 2352.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1268.283 ±(99.9%) 42.590 B/op [Average]
[info]   (min, avg, max) = (1254.037, 1268.283, 1283.886), stdev = 11.061
[info]   CI (99.9%): [1225.692, 1310.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2145.861 ±(99.9%) 1150.779 MB/sec [Average]
[info]   (min, avg, max) = (2008.850, 2145.861, 2680.441), stdev = 298.854
[info]   CI (99.9%): [995.082, 3296.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1254.390 ±(99.9%) 628.635 B/op [Average]
[info]   (min, avg, max) = (1155.234, 1254.390, 1545.125), stdev = 163.254
[info]   CI (99.9%): [625.755, 1883.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 6.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.499), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.418 ±(99.9%) 3.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.418, 2.063), stdev = 0.920
[info]   CI (99.9%): [≈ 0, 3.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65309.528 ops/s
[info] # Warmup Iteration   2: 153243.526 ops/s
[info] # Warmup Iteration   3: 168995.106 ops/s
[info] # Warmup Iteration   4: 170856.983 ops/s
[info] # Warmup Iteration   5: 171577.897 ops/s
[info] Iteration   1: 171876.901 ops/s
[info]                  ·gc.alloc.rate:               3272.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          29970.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30728.518 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 172377.626 ops/s
[info]                  ·gc.alloc.rate:                   3279.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              29974.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30705.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 171297.671 ops/s
[info]                  ·gc.alloc.rate:               3248.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          29842.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24781.463 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 171147.633 ops/s
[info]                  ·gc.alloc.rate:                   3274.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              30109.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31081.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 171710.965 ops/s
[info]                  ·gc.alloc.rate:                   3257.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              29862.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24838.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   171682.159 ±(99.9%) 1882.466 ops/s [Average]
[info]   (min, avg, max) = (171147.633, 171682.159, 172377.626), stdev = 488.870
[info]   CI (99.9%): [169799.694, 173564.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3266.510 ±(99.9%) 50.188 MB/sec [Average]
[info]   (min, avg, max) = (3248.047, 3266.510, 3279.359), stdev = 13.034
[info]   CI (99.9%): [3216.323, 3316.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29951.913 ±(99.9%) 411.918 B/op [Average]
[info]   (min, avg, max) = (29842.305, 29951.913, 30109.783), stdev = 106.974
[info]   CI (99.9%): [29539.995, 30363.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3100.405 ±(99.9%) 1395.598 MB/sec [Average]
[info]   (min, avg, max) = (2697.224, 3100.405, 3379.896), stdev = 362.432
[info]   CI (99.9%): [1704.808, 4496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28427.077 ±(99.9%) 12727.884 B/op [Average]
[info]   (min, avg, max) = (24781.463, 28427.077, 31081.714), stdev = 3305.391
[info]   CI (99.9%): [15699.193, 41154.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.114 ±(99.9%) 0.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.191), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1525.239 ops/s
[info] # Warmup Iteration   2: 24952.538 ops/s
[info] # Warmup Iteration   3: 35454.016 ops/s
[info] # Warmup Iteration   4: 35655.700 ops/s
[info] # Warmup Iteration   5: 35458.462 ops/s
[info] Iteration   1: 35172.586 ops/s
[info]                  ·gc.alloc.rate:                   2543.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              113800.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119730.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34960.484 ops/s
[info]                  ·gc.alloc.rate:                   2489.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              112080.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90550.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35463.437 ops/s
[info]                  ·gc.alloc.rate:               2539.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          112666.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119346.509 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 35751.893 ops/s
[info]                  ·gc.alloc.rate:               2585.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          113837.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118704.504 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 35368.290 ops/s
[info]                  ·gc.alloc.rate:               2532.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          112658.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90207.417 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   35343.338 ±(99.9%) 1151.492 ops/s [Average]
[info]   (min, avg, max) = (34960.484, 35343.338, 35751.893), stdev = 299.039
[info]   CI (99.9%): [34191.846, 36494.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2538.267 ±(99.9%) 131.861 MB/sec [Average]
[info]   (min, avg, max) = (2489.705, 2538.267, 2585.893), stdev = 34.244
[info]   CI (99.9%): [2406.406, 2670.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113008.617 ±(99.9%) 2992.328 B/op [Average]
[info]   (min, avg, max) = (112080.028, 113008.617, 113837.778), stdev = 777.098
[info]   CI (99.9%): [110016.289, 116000.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2420.403 ±(99.9%) 1408.937 MB/sec [Average]
[info]   (min, avg, max) = (2011.447, 2420.403, 2696.443), stdev = 365.897
[info]   CI (99.9%): [1011.466, 3829.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107707.870 ±(99.9%) 60932.391 B/op [Average]
[info]   (min, avg, max) = (90207.417, 107707.870, 119730.807), stdev = 15823.948
[info]   CI (99.9%): [46775.479, 168640.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.185 ±(99.9%) 1.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.906), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.294 ±(99.9%) 69.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.294, 40.533), stdev = 18.027
[info]   CI (99.9%): [≈ 0, 77.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44505.023 ops/s
[info] # Warmup Iteration   2: 139122.614 ops/s
[info] # Warmup Iteration   3: 142934.202 ops/s
[info] # Warmup Iteration   4: 138966.559 ops/s
[info] # Warmup Iteration   5: 139478.701 ops/s
[info] Iteration   1: 143854.302 ops/s
[info]                  ·gc.alloc.rate:                   1246.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              13635.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14612.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 143152.406 ops/s
[info]                  ·gc.alloc.rate:                   1239.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              13629.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14698.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 144042.811 ops/s
[info]                  ·gc.alloc.rate:               1235.023 MB/sec
[info]                  ·gc.alloc.rate.norm:          13491.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7307.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 143549.051 ops/s
[info]                  ·gc.alloc.rate:                   1250.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              13715.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14673.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 142634.740 ops/s
[info]                  ·gc.alloc.rate:                   1239.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              13681.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14752.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   143446.662 ±(99.9%) 2176.424 ops/s [Average]
[info]   (min, avg, max) = (142634.740, 143446.662, 144042.811), stdev = 565.210
[info]   CI (99.9%): [141270.238, 145623.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1242.423 ±(99.9%) 24.044 MB/sec [Average]
[info]   (min, avg, max) = (1235.023, 1242.423, 1250.890), stdev = 6.244
[info]   CI (99.9%): [1218.379, 1266.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13630.706 ±(99.9%) 329.368 B/op [Average]
[info]   (min, avg, max) = (13491.164, 13630.706, 13715.485), stdev = 85.536
[info]   CI (99.9%): [13301.338, 13960.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.403 ±(99.9%) 1150.391 MB/sec [Average]
[info]   (min, avg, max) = (668.980, 1203.403, 1338.265), stdev = 298.753
[info]   CI (99.9%): [53.012, 2353.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13208.945 ±(99.9%) 12704.108 B/op [Average]
[info]   (min, avg, max) = (7307.809, 13208.945, 14752.009), stdev = 3299.217
[info]   CI (99.9%): [504.837, 25913.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 6.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 3.705), stdev = 1.610
[info]   CI (99.9%): [≈ 0, 7.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.273 ±(99.9%) 67.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.273, 40.628), stdev = 17.653
[info]   CI (99.9%): [≈ 0, 77.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221068.558 ops/s
[info] # Warmup Iteration   2: 427658.508 ops/s
[info] # Warmup Iteration   3: 426630.425 ops/s
[info] # Warmup Iteration   4: 441339.833 ops/s
[info] # Warmup Iteration   5: 443237.611 ops/s
[info] Iteration   1: 440797.767 ops/s
[info]                  ·gc.alloc.rate:                   1751.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              6254.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4799.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 444112.812 ops/s
[info]                  ·gc.alloc.rate:                   1791.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              6347.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7141.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 441802.338 ops/s
[info]                  ·gc.alloc.rate:                   1756.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              6256.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4776.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 437484.995 ops/s
[info]                  ·gc.alloc.rate:               1764.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          6347.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7232.385 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 443574.049 ops/s
[info]                  ·gc.alloc.rate:               1775.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          6301.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4755.340 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   441554.392 ±(99.9%) 10154.769 ops/s [Average]
[info]   (min, avg, max) = (437484.995, 441554.392, 444112.812), stdev = 2637.161
[info]   CI (99.9%): [431399.623, 451709.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1767.882 ±(99.9%) 61.080 MB/sec [Average]
[info]   (min, avg, max) = (1751.708, 1767.882, 1791.019), stdev = 15.862
[info]   CI (99.9%): [1706.802, 1828.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6301.458 ±(99.9%) 176.597 B/op [Average]
[info]   (min, avg, max) = (6254.482, 6301.458, 6347.398), stdev = 45.862
[info]   CI (99.9%): [6124.862, 6478.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1610.171 ±(99.9%) 1415.042 MB/sec [Average]
[info]   (min, avg, max) = (1340.166, 1610.171, 2015.072), stdev = 367.482
[info]   CI (99.9%): [195.129, 3025.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5741.107 ±(99.9%) 5083.635 B/op [Average]
[info]   (min, avg, max) = (4755.340, 5741.107, 7232.385), stdev = 1320.204
[info]   CI (99.9%): [657.472, 10824.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.372), stdev = 1.504
[info]   CI (99.9%): [≈ 0, 6.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.420 ±(99.9%) 20.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.420, 11.951), stdev = 5.328
[info]   CI (99.9%): [≈ 0, 22.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224272.234 ops/s
[info] # Warmup Iteration   2: 453340.095 ops/s
[info] # Warmup Iteration   3: 486160.508 ops/s
[info] # Warmup Iteration   4: 484574.596 ops/s
[info] # Warmup Iteration   5: 486918.153 ops/s
[info] Iteration   1: 487119.219 ops/s
[info]                  ·gc.alloc.rate:               1389.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          4488.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4340.056 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 485635.971 ops/s
[info]                  ·gc.alloc.rate:                   1406.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              4556.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4355.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 472204.788 ops/s
[info]                  ·gc.alloc.rate:                   1359.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              4528.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4482.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 482788.349 ops/s
[info]                  ·gc.alloc.rate:                   1382.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              4508.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4382.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 477693.066 ops/s
[info]                  ·gc.alloc.rate:               1374.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          4526.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4420.065 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   481088.279 ±(99.9%) 23610.749 ops/s [Average]
[info]   (min, avg, max) = (472204.788, 481088.279, 487119.219), stdev = 6131.637
[info]   CI (99.9%): [457477.529, 504699.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1382.455 ±(99.9%) 67.749 MB/sec [Average]
[info]   (min, avg, max) = (1359.133, 1382.455, 1406.557), stdev = 17.594
[info]   CI (99.9%): [1314.705, 1450.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4521.617 ±(99.9%) 97.377 B/op [Average]
[info]   (min, avg, max) = (4488.495, 4521.617, 4556.478), stdev = 25.288
[info]   CI (99.9%): [4424.240, 4618.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1343.911 ±(99.9%) 5.079 MB/sec [Average]
[info]   (min, avg, max) = (1341.974, 1343.911, 1345.483), stdev = 1.319
[info]   CI (99.9%): [1338.832, 1348.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4396.074 ±(99.9%) 220.011 B/op [Average]
[info]   (min, avg, max) = (4340.056, 4396.074, 4482.688), stdev = 57.136
[info]   CI (99.9%): [4176.063, 4616.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.646 ±(99.9%) 4.787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 2.853), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.145 ±(99.9%) 15.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.145, 9.505), stdev = 4.144
[info]   CI (99.9%): [≈ 0, 18.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11009.170 ops/s
[info] # Warmup Iteration   2: 62546.569 ops/s
[info] # Warmup Iteration   3: 73743.682 ops/s
[info] # Warmup Iteration   4: 75082.606 ops/s
[info] # Warmup Iteration   5: 75172.703 ops/s
[info] Iteration   1: 75374.778 ops/s
[info]                  ·gc.alloc.rate:                   1550.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              32369.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27832.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 74487.487 ops/s
[info]                  ·gc.alloc.rate:                   1568.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              33141.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42361.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 75371.986 ops/s
[info]                  ·gc.alloc.rate:                   1571.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              32803.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27974.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 75276.062 ops/s
[info]                  ·gc.alloc.rate:                   1568.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              32792.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28049.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.306 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 74777.578 ops/s
[info]                  ·gc.alloc.rate:                   1560.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              32833.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28279.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   75057.578 ±(99.9%) 1552.969 ops/s [Average]
[info]   (min, avg, max) = (74487.487, 75057.578, 75374.778), stdev = 403.301
[info]   CI (99.9%): [73504.609, 76610.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1563.739 ±(99.9%) 33.279 MB/sec [Average]
[info]   (min, avg, max) = (1550.268, 1563.739, 1571.308), stdev = 8.643
[info]   CI (99.9%): [1530.459, 1597.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32788.267 ±(99.9%) 1058.175 B/op [Average]
[info]   (min, avg, max) = (32369.873, 32788.267, 33141.348), stdev = 274.805
[info]   CI (99.9%): [31730.092, 33846.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.629 ±(99.9%) 1146.033 MB/sec [Average]
[info]   (min, avg, max) = (1332.957, 1472.629, 2004.981), stdev = 297.621
[info]   CI (99.9%): [326.596, 2618.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30899.226 ±(99.9%) 24680.386 B/op [Average]
[info]   (min, avg, max) = (27832.393, 30899.226, 42361.091), stdev = 6409.418
[info]   CI (99.9%): [6218.841, 55579.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.793 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.133, 0.500), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.784 ±(99.9%) 16.549 B/op [Average]
[info]   (min, avg, max) = (0.438, 2.784, 10.433), stdev = 4.298
[info]   CI (99.9%): [≈ 0, 19.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59637.489 ops/s
[info] # Warmup Iteration   2: 303765.036 ops/s
[info] # Warmup Iteration   3: 312708.640 ops/s
[info] # Warmup Iteration   4: 327438.714 ops/s
[info] # Warmup Iteration   5: 323286.375 ops/s
[info] Iteration   1: 327015.286 ops/s
[info]                  ·gc.alloc.rate:                   2427.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              11684.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9685.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 327969.023 ops/s
[info]                  ·gc.alloc.rate:                   2447.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              11742.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12850.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 328395.360 ops/s
[info]                  ·gc.alloc.rate:               2452.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          11748.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9628.662 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 323162.118 ops/s
[info]                  ·gc.alloc.rate:               2439.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          11878.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13072.689 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 328242.165 ops/s
[info]                  ·gc.alloc.rate:               2450.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          11752.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9673.311 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   326956.791 ±(99.9%) 8425.180 ops/s [Average]
[info]   (min, avg, max) = (323162.118, 326956.791, 328395.360), stdev = 2187.993
[info]   CI (99.9%): [318531.610, 335381.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2443.435 ±(99.9%) 38.989 MB/sec [Average]
[info]   (min, avg, max) = (2427.662, 2443.435, 2452.057), stdev = 10.125
[info]   CI (99.9%): [2404.446, 2482.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11761.365 ±(99.9%) 273.189 B/op [Average]
[info]   (min, avg, max) = (11684.183, 11761.365, 11878.012), stdev = 70.946
[info]   CI (99.9%): [11488.176, 12034.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2280.357 ±(99.9%) 1409.519 MB/sec [Average]
[info]   (min, avg, max) = (2009.555, 2280.357, 2684.711), stdev = 366.048
[info]   CI (99.9%): [870.839, 3689.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10982.029 ±(99.9%) 6965.378 B/op [Average]
[info]   (min, avg, max) = (9628.662, 10982.029, 13072.689), stdev = 1808.887
[info]   CI (99.9%): [4016.651, 17947.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 1.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.624), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.621 ±(99.9%) 5.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 3.006), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125360.192 ops/s
[info] # Warmup Iteration   2: 471605.874 ops/s
[info] # Warmup Iteration   3: 500088.399 ops/s
[info] # Warmup Iteration   4: 501342.972 ops/s
[info] # Warmup Iteration   5: 500423.813 ops/s
[info] Iteration   1: 499980.154 ops/s
[info]                  ·gc.alloc.rate:                   1330.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              4188.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4202.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 501209.054 ops/s
[info]                  ·gc.alloc.rate:               1329.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          4173.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4196.312 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 501286.575 ops/s
[info]                  ·gc.alloc.rate:                   1322.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              4151.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4199.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 486723.985 ops/s
[info]                  ·gc.alloc.rate:                   1296.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              4191.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4327.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 487521.881 ops/s
[info]                  ·gc.alloc.rate:                   1299.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              4193.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4309.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   495344.330 ±(99.9%) 28988.545 ops/s [Average]
[info]   (min, avg, max) = (486723.985, 495344.330, 501286.575), stdev = 7528.233
[info]   CI (99.9%): [466355.785, 524332.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1315.595 ±(99.9%) 63.127 MB/sec [Average]
[info]   (min, avg, max) = (1296.578, 1315.595, 1330.459), stdev = 16.394
[info]   CI (99.9%): [1252.469, 1378.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4179.591 ±(99.9%) 67.161 B/op [Average]
[info]   (min, avg, max) = (4151.615, 4179.591, 4193.131), stdev = 17.441
[info]   CI (99.9%): [4112.430, 4246.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.615 ±(99.9%) 5.917 MB/sec [Average]
[info]   (min, avg, max) = (1334.898, 1336.615, 1338.591), stdev = 1.537
[info]   CI (99.9%): [1330.698, 1342.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4247.003 ±(99.9%) 252.032 B/op [Average]
[info]   (min, avg, max) = (4196.312, 4247.003, 4327.245), stdev = 65.452
[info]   CI (99.9%): [3994.971, 4499.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.352), stdev = 1.937
[info]   CI (99.9%): [≈ 0, 8.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.866 ±(99.9%) 24.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.866, 14.068), stdev = 6.262
[info]   CI (99.9%): [≈ 0, 26.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648291.326 ops/s
[info] # Warmup Iteration   2: 1313685.835 ops/s
[info] # Warmup Iteration   3: 1361722.622 ops/s
[info] # Warmup Iteration   4: 1371741.530 ops/s
[info] # Warmup Iteration   5: 1374598.454 ops/s
[info] Iteration   1: 1371755.368 ops/s
[info]                  ·gc.alloc.rate:                   2766.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              3176.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3081.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1365356.817 ops/s
[info]                  ·gc.alloc.rate:                   2770.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              3193.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3098.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1375837.178 ops/s
[info]                  ·gc.alloc.rate:               2793.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          3194.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3080.918 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1364145.635 ops/s
[info]                  ·gc.alloc.rate:                   2769.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              3194.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3114.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1376159.808 ops/s
[info]                  ·gc.alloc.rate:               2793.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          3195.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3093.138 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1370650.961 ±(99.9%) 21851.446 ops/s [Average]
[info]   (min, avg, max) = (1364145.635, 1370650.961, 1376159.808), stdev = 5674.751
[info]   CI (99.9%): [1348799.516, 1392502.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2778.739 ±(99.9%) 52.458 MB/sec [Average]
[info]   (min, avg, max) = (2766.506, 2778.739, 2793.858), stdev = 13.623
[info]   CI (99.9%): [2726.280, 2831.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3191.124 ±(99.9%) 31.592 B/op [Average]
[info]   (min, avg, max) = (3176.498, 3191.124, 3195.762), stdev = 8.204
[info]   CI (99.9%): [3159.533, 3222.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2693.852 ±(99.9%) 31.675 MB/sec [Average]
[info]   (min, avg, max) = (2683.868, 2693.852, 2704.140), stdev = 8.226
[info]   CI (99.9%): [2662.177, 2725.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3093.674 ±(99.9%) 52.972 B/op [Average]
[info]   (min, avg, max) = (3080.918, 3093.674, 3114.323), stdev = 13.757
[info]   CI (99.9%): [3040.702, 3146.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.024), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15892.432 ops/s
[info] # Warmup Iteration   2: 97402.490 ops/s
[info] # Warmup Iteration   3: 103588.781 ops/s
[info] # Warmup Iteration   4: 107841.348 ops/s
[info] # Warmup Iteration   5: 108211.553 ops/s
[info] Iteration   1: 110008.132 ops/s
[info]                  ·gc.alloc.rate:                   3513.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              50262.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47764.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 108315.168 ops/s
[info]                  ·gc.alloc.rate:                   3489.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              50700.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48662.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 108299.184 ops/s
[info]                  ·gc.alloc.rate:               3490.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          50723.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48844.032 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 106554.135 ops/s
[info]                  ·gc.alloc.rate:               3436.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          50752.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49842.463 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 106405.687 ops/s
[info]                  ·gc.alloc.rate:                   3405.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              50370.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40020.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   107916.461 ±(99.9%) 5717.558 ops/s [Average]
[info]   (min, avg, max) = (106405.687, 107916.461, 110008.132), stdev = 1484.832
[info]   CI (99.9%): [102198.903, 113634.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3467.124 ±(99.9%) 171.227 MB/sec [Average]
[info]   (min, avg, max) = (3405.477, 3467.124, 3513.073), stdev = 44.467
[info]   CI (99.9%): [3295.897, 3638.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50561.994 ±(99.9%) 877.800 B/op [Average]
[info]   (min, avg, max) = (50262.551, 50561.994, 50752.006), stdev = 227.962
[info]   CI (99.9%): [49684.194, 51439.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3226.002 ±(99.9%) 1121.202 MB/sec [Average]
[info]   (min, avg, max) = (2705.702, 3226.002, 3375.034), stdev = 291.173
[info]   CI (99.9%): [2104.801, 4347.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47026.824 ±(99.9%) 15347.411 B/op [Average]
[info]   (min, avg, max) = (40020.255, 47026.824, 49842.463), stdev = 3985.674
[info]   CI (99.9%): [31679.412, 62374.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.229), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.777 ±(99.9%) 5.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.276), stdev = 1.405
[info]   CI (99.9%): [≈ 0, 6.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77933.099 ops/s
[info] # Warmup Iteration   2: 323947.486 ops/s
[info] # Warmup Iteration   3: 348974.580 ops/s
[info] # Warmup Iteration   4: 338423.903 ops/s
[info] # Warmup Iteration   5: 347837.052 ops/s
[info] Iteration   1: 338928.671 ops/s
[info]                  ·gc.alloc.rate:                   1185.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              5502.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6225.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 346994.535 ops/s
[info]                  ·gc.alloc.rate:                   1196.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              5425.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6083.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 346836.748 ops/s
[info]                  ·gc.alloc.rate:               1203.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          5460.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6089.641 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 349178.749 ops/s
[info]                  ·gc.alloc.rate:               1184.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          5340.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3024.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 348384.779 ops/s
[info]                  ·gc.alloc.rate:                   1209.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              5462.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6066.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   346064.696 ±(99.9%) 15813.872 ops/s [Average]
[info]   (min, avg, max) = (338928.671, 346064.696, 349178.749), stdev = 4106.812
[info]   CI (99.9%): [330250.824, 361878.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1195.850 ±(99.9%) 41.671 MB/sec [Average]
[info]   (min, avg, max) = (1184.961, 1195.850, 1209.389), stdev = 10.822
[info]   CI (99.9%): [1154.179, 1237.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5438.497 ±(99.9%) 234.929 B/op [Average]
[info]   (min, avg, max) = (5340.872, 5438.497, 5502.846), stdev = 61.010
[info]   CI (99.9%): [5203.567, 5673.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.714 ±(99.9%) 1155.025 MB/sec [Average]
[info]   (min, avg, max) = (671.138, 1207.714, 1343.253), stdev = 299.956
[info]   CI (99.9%): [52.689, 2362.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5498.108 ±(99.9%) 5329.239 B/op [Average]
[info]   (min, avg, max) = (3024.961, 5498.108, 6225.339), stdev = 1383.987
[info]   CI (99.9%): [168.868, 10827.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.854 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.415), stdev = 1.520
[info]   CI (99.9%): [≈ 0, 6.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.142 ±(99.9%) 26.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.142, 15.423), stdev = 6.866
[info]   CI (99.9%): [≈ 0, 29.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297523.284 ops/s
[info] # Warmup Iteration   2: 799472.375 ops/s
[info] # Warmup Iteration   3: 806405.723 ops/s
[info] # Warmup Iteration   4: 814707.413 ops/s
[info] # Warmup Iteration   5: 795271.393 ops/s
[info] Iteration   1: 812698.544 ops/s
[info]                  ·gc.alloc.rate:               601.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1290.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 834045.249 ops/s
[info]                  ·gc.alloc.rate:               627.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          1183.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1257.667 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 834768.251 ops/s
[info]                  ·gc.alloc.rate:               625.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          1179.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1257.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 822608.907 ops/s
[info]                  ·gc.alloc.rate:               613.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          1172.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1276.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 842324.539 ops/s
[info]                  ·gc.alloc.rate:      608.234 MB/sec
[info]                  ·gc.alloc.rate.norm: 1136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   829289.098 ±(99.9%) 44841.250 ops/s [Average]
[info]   (min, avg, max) = (812698.544, 829289.098, 842324.539), stdev = 11645.130
[info]   CI (99.9%): [784447.848, 874130.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   615.138 ±(99.9%) 43.014 MB/sec [Average]
[info]   (min, avg, max) = (601.416, 615.138, 627.239), stdev = 11.171
[info]   CI (99.9%): [572.124, 658.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1167.407 ±(99.9%) 73.058 B/op [Average]
[info]   (min, avg, max) = (1136.001, 1167.407, 1183.640), stdev = 18.973
[info]   CI (99.9%): [1094.348, 1240.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.446 ±(99.9%) 1148.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.446, 667.163), stdev = 298.206
[info]   CI (99.9%): [≈ 0, 1681.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1016.518 ±(99.9%) 2188.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1016.518, 1290.644), stdev = 568.419
[info]   CI (99.9%): [≈ 0, 3205.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1278184.494 ops/s
[info] # Warmup Iteration   2: 1944695.744 ops/s
[info] # Warmup Iteration   3: 2106040.372 ops/s
[info] # Warmup Iteration   4: 2129926.190 ops/s
[info] # Warmup Iteration   5: 2123970.153 ops/s
[info] Iteration   1: 2136418.713 ops/s
[info]                  ·gc.alloc.rate:               1013.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 494.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2112852.199 ops/s
[info]                  ·gc.alloc.rate:                   1009.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2062532.323 ops/s
[info]                  ·gc.alloc.rate:               969.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          739.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 512.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2063416.495 ops/s
[info]                  ·gc.alloc.rate:               968.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 512.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2050968.858 ops/s
[info]                  ·gc.alloc.rate:                   976.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1032.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2085237.718 ±(99.9%) 143408.823 ops/s [Average]
[info]   (min, avg, max) = (2050968.858, 2085237.718, 2136418.713), stdev = 37242.816
[info]   CI (99.9%): [1941828.895, 2228646.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   987.395 ±(99.9%) 85.399 MB/sec [Average]
[info]   (min, avg, max) = (968.695, 987.395, 1013.224), stdev = 22.178
[info]   CI (99.9%): [901.996, 1072.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   745.160 ±(99.9%) 22.857 B/op [Average]
[info]   (min, avg, max) = (738.865, 745.160, 752.055), stdev = 5.936
[info]   CI (99.9%): [722.303, 768.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.056 ±(99.9%) 1418.582 MB/sec [Average]
[info]   (min, avg, max) = (671.453, 941.056, 1345.585), stdev = 368.401
[info]   CI (99.9%): [≈ 0, 2359.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   710.746 ±(99.9%) 1076.855 B/op [Average]
[info]   (min, avg, max) = (494.661, 710.746, 1032.603), stdev = 279.656
[info]   CI (99.9%): [≈ 0, 1787.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.032), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978301.770 ops/s
[info] # Warmup Iteration   2: 2290572.039 ops/s
[info] # Warmup Iteration   3: 2351577.284 ops/s
[info] # Warmup Iteration   4: 2352836.734 ops/s
[info] # Warmup Iteration   5: 2352414.428 ops/s
[info] Iteration   1: 2359283.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2355038.856 ops/s
[info]                  ·gc.alloc.rate:      1.471 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.983 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2359201.954 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2358436.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2327542.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2351900.676 ±(99.9%) 52856.888 ops/s [Average]
[info]   (min, avg, max) = (2327542.574, 2351900.676, 2359283.167), stdev = 13726.766
[info]   CI (99.9%): [2299043.788, 2404757.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.294 ±(99.9%) 2.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.294, 1.471), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.197 ±(99.9%) 1.693 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.197, 0.983), stdev = 0.440
[info]   CI (99.9%): [≈ 0, 1.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173398.664 ops/s
[info] # Warmup Iteration   2: 458371.957 ops/s
[info] # Warmup Iteration   3: 475686.219 ops/s
[info] # Warmup Iteration   4: 464535.575 ops/s
[info] # Warmup Iteration   5: 474935.998 ops/s
[info] Iteration   1: 471828.587 ops/s
[info]                  ·gc.alloc.rate:               699.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          2333.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2228.696 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 476165.854 ops/s
[info]                  ·gc.alloc.rate:               700.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          2315.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2210.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 474123.825 ops/s
[info]                  ·gc.alloc.rate:               705.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          2340.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2220.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 472770.306 ops/s
[info]                  ·gc.alloc.rate:                   701.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              2334.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2228.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 457943.348 ops/s
[info]                  ·gc.alloc.rate:               677.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          2327.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2300.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   470566.384 ±(99.9%) 27887.337 ops/s [Average]
[info]   (min, avg, max) = (457943.348, 470566.384, 476165.854), stdev = 7242.253
[info]   CI (99.9%): [442679.047, 498453.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   696.840 ±(99.9%) 42.815 MB/sec [Average]
[info]   (min, avg, max) = (677.275, 696.840, 705.073), stdev = 11.119
[info]   CI (99.9%): [654.025, 739.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2330.561 ±(99.9%) 36.118 B/op [Average]
[info]   (min, avg, max) = (2315.896, 2330.561, 2340.465), stdev = 9.380
[info]   CI (99.9%): [2294.443, 2366.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.965 ±(99.9%) 1.988 MB/sec [Average]
[info]   (min, avg, max) = (668.267, 668.965, 669.479), stdev = 0.516
[info]   CI (99.9%): [666.977, 670.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2237.780 ±(99.9%) 138.709 B/op [Average]
[info]   (min, avg, max) = (2210.574, 2237.780, 2300.814), stdev = 36.022
[info]   CI (99.9%): [2099.071, 2376.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13712.274 ops/s
[info] # Warmup Iteration   2: 52857.234 ops/s
[info] # Warmup Iteration   3: 55559.364 ops/s
[info] # Warmup Iteration   4: 59505.653 ops/s
[info] # Warmup Iteration   5: 59153.284 ops/s
[info] Iteration   1: 60269.939 ops/s
[info]                  ·gc.alloc.rate:                   2110.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              55079.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52647.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 60152.425 ops/s
[info]                  ·gc.alloc.rate:                   2117.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              55410.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52583.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60181.643 ops/s
[info]                  ·gc.alloc.rate:                   2104.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              55031.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52523.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60177.850 ops/s
[info]                  ·gc.alloc.rate:               2119.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          55411.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52537.691 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 60227.776 ops/s
[info]                  ·gc.alloc.rate:                   2120.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              55424.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52562.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   60201.926 ±(99.9%) 179.947 ops/s [Average]
[info]   (min, avg, max) = (60152.425, 60201.926, 60269.939), stdev = 46.732
[info]   CI (99.9%): [60021.980, 60381.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2114.607 ±(99.9%) 26.506 MB/sec [Average]
[info]   (min, avg, max) = (2104.818, 2114.607, 2120.904), stdev = 6.884
[info]   CI (99.9%): [2088.101, 2141.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55271.523 ±(99.9%) 761.910 B/op [Average]
[info]   (min, avg, max) = (55031.686, 55271.523, 55424.047), stdev = 197.866
[info]   CI (99.9%): [54509.613, 56033.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.288 ±(99.9%) 12.553 MB/sec [Average]
[info]   (min, avg, max) = (2008.896, 2011.288, 2016.873), stdev = 3.260
[info]   CI (99.9%): [1998.735, 2023.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   52570.886 ±(99.9%) 186.143 B/op [Average]
[info]   (min, avg, max) = (52523.743, 52570.886, 52647.112), stdev = 48.341
[info]   CI (99.9%): [52384.743, 52757.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 6.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.603), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 6.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.571 ±(99.9%) 160.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.571, 94.044), stdev = 41.645
[info]   CI (99.9%): [≈ 0, 179.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16049.378 ops/s
[info] # Warmup Iteration   2: 78730.377 ops/s
[info] # Warmup Iteration   3: 89972.683 ops/s
[info] # Warmup Iteration   4: 95167.578 ops/s
[info] # Warmup Iteration   5: 95717.916 ops/s
[info] Iteration   1: 93236.631 ops/s
[info]                  ·gc.alloc.rate:                   1711.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              28886.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33875.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 94370.099 ops/s
[info]                  ·gc.alloc.rate:                   1726.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              28794.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22324.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 92251.553 ops/s
[info]                  ·gc.alloc.rate:                   1700.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              29000.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34196.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 92316.352 ops/s
[info]                  ·gc.alloc.rate:                   1700.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              28985.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22713.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 92971.325 ops/s
[info]                  ·gc.alloc.rate:               1726.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          29233.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33829.034 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   93029.192 ±(99.9%) 3310.925 ops/s [Average]
[info]   (min, avg, max) = (92251.553, 93029.192, 94370.099), stdev = 859.837
[info]   CI (99.9%): [89718.267, 96340.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1713.100 ±(99.9%) 50.985 MB/sec [Average]
[info]   (min, avg, max) = (1700.184, 1713.100, 1726.830), stdev = 13.241
[info]   CI (99.9%): [1662.115, 1764.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28979.899 ±(99.9%) 632.441 B/op [Average]
[info]   (min, avg, max) = (28794.480, 28979.899, 29233.430), stdev = 164.243
[info]   CI (99.9%): [28347.458, 29612.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.276 ±(99.9%) 1409.018 MB/sec [Average]
[info]   (min, avg, max) = (1332.275, 1736.276, 2007.126), stdev = 365.918
[info]   CI (99.9%): [327.258, 3145.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29387.633 ±(99.9%) 24156.436 B/op [Average]
[info]   (min, avg, max) = (22324.665, 29387.633, 34196.031), stdev = 6273.350
[info]   CI (99.9%): [5231.197, 53544.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.949 ±(99.9%) 6.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 3.664), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.913 ±(99.9%) 100.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.913, 61.103), stdev = 26.161
[info]   CI (99.9%): [≈ 0, 116.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40667.208 ops/s
[info] # Warmup Iteration   2: 155369.326 ops/s
[info] # Warmup Iteration   3: 162829.833 ops/s
[info] # Warmup Iteration   4: 165917.713 ops/s
[info] # Warmup Iteration   5: 165985.335 ops/s
[info] Iteration   1: 166637.660 ops/s
[info]                  ·gc.alloc.rate:                   2645.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              24986.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25355.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 165921.248 ops/s
[info]                  ·gc.alloc.rate:                   2635.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              25001.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25438.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 165170.646 ops/s
[info]                  ·gc.alloc.rate:               2611.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          24882.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19191.215 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 162358.369 ops/s
[info]                  ·gc.alloc.rate:               2594.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          25154.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26082.840 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 166734.648 ops/s
[info]                  ·gc.alloc.rate:               2662.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          25133.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25462.381 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   165364.514 ±(99.9%) 6910.435 ops/s [Average]
[info]   (min, avg, max) = (162358.369, 165364.514, 166734.648), stdev = 1794.618
[info]   CI (99.9%): [158454.079, 172274.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2630.078 ±(99.9%) 103.503 MB/sec [Average]
[info]   (min, avg, max) = (2594.897, 2630.078, 2662.490), stdev = 26.879
[info]   CI (99.9%): [2526.575, 2733.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25031.439 ±(99.9%) 433.057 B/op [Average]
[info]   (min, avg, max) = (24882.502, 25031.439, 25154.374), stdev = 112.463
[info]   CI (99.9%): [24598.382, 25464.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2553.787 ±(99.9%) 1161.238 MB/sec [Average]
[info]   (min, avg, max) = (2014.429, 2553.787, 2697.379), stdev = 301.570
[info]   CI (99.9%): [1392.549, 3715.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24306.192 ±(99.9%) 11066.926 B/op [Average]
[info]   (min, avg, max) = (19191.215, 24306.192, 26082.840), stdev = 2874.046
[info]   CI (99.9%): [13239.265, 35373.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.118 ±(99.9%) 0.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.393), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3194.839 ops/s
[info] # Warmup Iteration   2: 26973.230 ops/s
[info] # Warmup Iteration   3: 33080.440 ops/s
[info] # Warmup Iteration   4: 32605.446 ops/s
[info] # Warmup Iteration   5: 32296.703 ops/s
[info] Iteration   1: 33151.637 ops/s
[info]                  ·gc.alloc.rate:               2217.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          105232.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95079.282 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 33280.388 ops/s
[info]                  ·gc.alloc.rate:                   2222.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              105070.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94962.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33273.662 ops/s
[info]                  ·gc.alloc.rate:                   2223.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              105179.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95234.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33230.114 ops/s
[info]                  ·gc.alloc.rate:                   2249.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              106485.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127463.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.986 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 33280.957 ops/s
[info]                  ·gc.alloc.rate:                   2238.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              105846.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95684.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33243.352 ±(99.9%) 213.453 ops/s [Average]
[info]   (min, avg, max) = (33151.637, 33243.352, 33280.957), stdev = 55.433
[info]   CI (99.9%): [33029.898, 33456.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2230.199 ±(99.9%) 50.728 MB/sec [Average]
[info]   (min, avg, max) = (2217.364, 2230.199, 2249.242), stdev = 13.174
[info]   CI (99.9%): [2179.471, 2280.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105562.892 ±(99.9%) 2301.681 B/op [Average]
[info]   (min, avg, max) = (105070.662, 105562.892, 106485.325), stdev = 597.739
[info]   CI (99.9%): [103261.211, 107864.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2148.246 ±(99.9%) 1171.573 MB/sec [Average]
[info]   (min, avg, max) = (2003.424, 2148.246, 2692.353), stdev = 304.254
[info]   CI (99.9%): [976.673, 3319.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   101684.976 ±(99.9%) 55500.091 B/op [Average]
[info]   (min, avg, max) = (94962.818, 101684.976, 127463.428), stdev = 14413.197
[info]   CI (99.9%): [46184.885, 157185.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.978 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.583), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.104 ±(99.9%) 46.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.104, 27.564), stdev = 12.004
[info]   CI (99.9%): [≈ 0, 52.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25661.369 ops/s
[info] # Warmup Iteration   2: 143689.466 ops/s
[info] # Warmup Iteration   3: 154713.665 ops/s
[info] # Warmup Iteration   4: 155567.175 ops/s
[info] # Warmup Iteration   5: 160252.725 ops/s
[info] Iteration   1: 161562.902 ops/s
[info]                  ·gc.alloc.rate:               1071.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          10437.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6479.621 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 159232.274 ops/s
[info]                  ·gc.alloc.rate:                   1083.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              10708.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13168.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 162252.828 ops/s
[info]                  ·gc.alloc.rate:                   1074.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              10418.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6467.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 157908.253 ops/s
[info]                  ·gc.alloc.rate:               1080.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          10770.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13298.158 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 161664.101 ops/s
[info]                  ·gc.alloc.rate:               1067.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          10396.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6497.951 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160524.072 ±(99.9%) 7172.614 ops/s [Average]
[info]   (min, avg, max) = (157908.253, 160524.072, 162252.828), stdev = 1862.705
[info]   CI (99.9%): [153351.457, 167696.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1075.560 ±(99.9%) 24.919 MB/sec [Average]
[info]   (min, avg, max) = (1067.861, 1075.560, 1083.554), stdev = 6.471
[info]   CI (99.9%): [1050.641, 1100.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10546.339 ±(99.9%) 686.094 B/op [Average]
[info]   (min, avg, max) = (10396.568, 10546.339, 10770.550), stdev = 178.177
[info]   CI (99.9%): [9860.245, 11232.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   933.248 ±(99.9%) 1406.507 MB/sec [Average]
[info]   (min, avg, max) = (665.122, 933.248, 1334.241), stdev = 365.265
[info]   CI (99.9%): [≈ 0, 2339.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9182.422 ±(99.9%) 14240.547 B/op [Average]
[info]   (min, avg, max) = (6467.945, 9182.422, 13298.158), stdev = 3698.225
[info]   CI (99.9%): [≈ 0, 23422.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.206), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235828.543 ops/s
[info] # Warmup Iteration   2: 435504.114 ops/s
[info] # Warmup Iteration   3: 443519.471 ops/s
[info] # Warmup Iteration   4: 461359.911 ops/s
[info] # Warmup Iteration   5: 460894.035 ops/s
[info] Iteration   1: 457788.509 ops/s
[info]                  ·gc.alloc.rate:               523.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          1799.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1758.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 459753.709 ops/s
[info]                  ·gc.alloc.rate:               527.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          1805.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2294.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 461241.934 ops/s
[info]                  ·gc.alloc.rate:                   523.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1785.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2286.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 461982.889 ops/s
[info]                  ·gc.alloc.rate:               530.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          1805.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2285.206 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 462353.120 ops/s
[info]                  ·gc.alloc.rate:      510.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   460624.032 ±(99.9%) 7207.932 ops/s [Average]
[info]   (min, avg, max) = (457788.509, 460624.032, 462353.120), stdev = 1871.877
[info]   CI (99.9%): [453416.100, 467831.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   522.850 ±(99.9%) 29.681 MB/sec [Average]
[info]   (min, avg, max) = (510.051, 522.850, 530.028), stdev = 7.708
[info]   CI (99.9%): [493.170, 552.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1786.438 ±(99.9%) 113.069 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1786.438, 1805.669), stdev = 29.364
[info]   CI (99.9%): [1673.368, 1899.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.552 ±(99.9%) 1117.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.552, 670.790), stdev = 290.312
[info]   CI (99.9%): [≈ 0, 1622.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1724.971 ±(99.9%) 3816.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1724.971, 2294.078), stdev = 991.202
[info]   CI (99.9%): [≈ 0, 5541.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240011.426 ops/s
[info] # Warmup Iteration   2: 494973.536 ops/s
[info] # Warmup Iteration   3: 509118.444 ops/s
[info] # Warmup Iteration   4: 510477.088 ops/s
[info] # Warmup Iteration   5: 510861.747 ops/s
[info] Iteration   1: 484734.977 ops/s
[info]                  ·gc.alloc.rate:      4.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 512593.754 ops/s
[info]                  ·gc.alloc.rate:      5.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 508831.810 ops/s
[info]                  ·gc.alloc.rate:      5.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 511194.006 ops/s
[info]                  ·gc.alloc.rate:      5.197 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 510214.596 ops/s
[info]                  ·gc.alloc.rate:      5.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   505513.828 ±(99.9%) 45040.053 ops/s [Average]
[info]   (min, avg, max) = (484734.977, 505513.828, 512593.754), stdev = 11696.759
[info]   CI (99.9%): [460473.775, 550553.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.140 ±(99.9%) 0.455 MB/sec [Average]
[info]   (min, avg, max) = (4.930, 5.140, 5.213), stdev = 0.118
[info]   CI (99.9%): [4.685, 5.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8066.266 ops/s
[info] # Warmup Iteration   2: 63455.082 ops/s
[info] # Warmup Iteration   3: 74268.913 ops/s
[info] # Warmup Iteration   4: 75414.294 ops/s
[info] # Warmup Iteration   5: 75374.436 ops/s
[info] Iteration   1: 75367.794 ops/s
[info]                  ·gc.alloc.rate:                   1348.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              28162.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27752.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 75650.678 ops/s
[info]                  ·gc.alloc.rate:                   1347.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              28031.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27704.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 75629.281 ops/s
[info]                  ·gc.alloc.rate:               1356.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          28210.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27766.657 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 74916.936 ops/s
[info]                  ·gc.alloc.rate:                   1345.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              28271.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28085.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75323.729 ops/s
[info]                  ·gc.alloc.rate:                   1360.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27984.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   75377.684 ±(99.9%) 1144.109 ops/s [Average]
[info]   (min, avg, max) = (74916.936, 75377.684, 75650.678), stdev = 297.121
[info]   CI (99.9%): [74233.575, 76521.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1351.901 ±(99.9%) 24.409 MB/sec [Average]
[info]   (min, avg, max) = (1345.789, 1351.901, 1360.758), stdev = 6.339
[info]   CI (99.9%): [1327.492, 1376.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28221.631 ±(99.9%) 567.164 B/op [Average]
[info]   (min, avg, max) = (28031.140, 28221.631, 28432.492), stdev = 147.291
[info]   CI (99.9%): [27654.466, 28788.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1334.503 ±(99.9%) 15.217 MB/sec [Average]
[info]   (min, avg, max) = (1329.334, 1334.503, 1339.321), stdev = 3.952
[info]   CI (99.9%): [1319.286, 1349.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27858.693 ±(99.9%) 641.590 B/op [Average]
[info]   (min, avg, max) = (27704.248, 27858.693, 28085.733), stdev = 166.619
[info]   CI (99.9%): [27217.103, 28500.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.978), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.458 ±(99.9%) 34.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.458, 20.554), stdev = 9.003
[info]   CI (99.9%): [≈ 0, 39.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195608.584 ops/s
[info] # Warmup Iteration   2: 2514836.452 ops/s
[info] # Warmup Iteration   3: 2826022.393 ops/s
[info] # Warmup Iteration   4: 2912519.945 ops/s
[info] # Warmup Iteration   5: 2891640.829 ops/s
[info] Iteration   1: 2865313.696 ops/s
[info]                  ·gc.alloc.rate:                   3712.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4015.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2205.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2894135.338 ops/s
[info]                  ·gc.alloc.rate:                   3722.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              2024.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1826.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2881977.644 ops/s
[info]                  ·gc.alloc.rate:               3708.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          2025.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1840.260 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2843170.552 ops/s
[info]                  ·gc.alloc.rate:               3687.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          2041.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4056.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2245.787 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 2874202.392 ops/s
[info]                  ·gc.alloc.rate:                   3699.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              2025.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1855.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2871759.924 ±(99.9%) 73816.268 ops/s [Average]
[info]   (min, avg, max) = (2843170.552, 2871759.924, 2894135.338), stdev = 19169.850
[info]   CI (99.9%): [2797943.656, 2945576.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3706.141 ±(99.9%) 51.337 MB/sec [Average]
[info]   (min, avg, max) = (3687.074, 3706.141, 3722.285), stdev = 13.332
[info]   CI (99.9%): [3654.804, 3757.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2031.102 ±(99.9%) 31.921 B/op [Average]
[info]   (min, avg, max) = (2024.172, 2031.102, 2041.014), stdev = 8.290
[info]   CI (99.9%): [1999.181, 2063.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3637.988 ±(99.9%) 1402.333 MB/sec [Average]
[info]   (min, avg, max) = (3357.877, 3637.988, 4056.995), stdev = 364.181
[info]   CI (99.9%): [2235.656, 5040.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1994.710 ±(99.9%) 815.160 B/op [Average]
[info]   (min, avg, max) = (1826.008, 1994.710, 2245.787), stdev = 211.695
[info]   CI (99.9%): [1179.550, 2809.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 1.483
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.588 ops/s
[info] # Warmup Iteration   2: 751874.977 ops/s
[info] # Warmup Iteration   3: 795880.759 ops/s
[info] # Warmup Iteration   4: 815019.699 ops/s
[info] # Warmup Iteration   5: 814975.456 ops/s
[info] Iteration   1: 824403.016 ops/s
[info]                  ·gc.alloc.rate:                   489.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              934.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 806490.221 ops/s
[info]                  ·gc.alloc.rate:      467.342 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 801152.895 ops/s
[info]                  ·gc.alloc.rate:               464.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1308.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 799093.587 ops/s
[info]                  ·gc.alloc.rate:                   476.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              938.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1312.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 792550.310 ops/s
[info]                  ·gc.alloc.rate:      459.252 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   804738.006 ±(99.9%) 46489.063 ops/s [Average]
[info]   (min, avg, max) = (792550.310, 804738.006, 824403.016), stdev = 12073.062
[info]   CI (99.9%): [758248.943, 851227.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   471.421 ±(99.9%) 45.952 MB/sec [Average]
[info]   (min, avg, max) = (459.252, 471.421, 489.605), stdev = 11.934
[info]   CI (99.9%): [425.469, 517.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   921.799 ±(99.9%) 51.931 B/op [Average]
[info]   (min, avg, max) = (912.001, 921.799, 938.423), stdev = 13.486
[info]   CI (99.9%): [869.868, 973.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.837 ±(99.9%) 1405.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.837, 666.485), stdev = 365.000
[info]   CI (99.9%): [≈ 0, 1805.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   778.623 ±(99.9%) 2737.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 778.623, 1312.665), stdev = 710.961
[info]   CI (99.9%): [≈ 0, 3516.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17147.408 ops/s
[info] # Warmup Iteration   2: 248222.621 ops/s
[info] # Warmup Iteration   3: 347710.804 ops/s
[info] # Warmup Iteration   4: 357752.468 ops/s
[info] # Warmup Iteration   5: 355726.317 ops/s
[info] Iteration   1: 362015.524 ops/s
[info]                  ·gc.alloc.rate:               850.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          3699.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2896.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 361542.219 ops/s
[info]                  ·gc.alloc.rate:               838.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          3650.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2902.747 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 362546.149 ops/s
[info]                  ·gc.alloc.rate:                   883.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              3833.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5790.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 357476.971 ops/s
[info]                  ·gc.alloc.rate:                   841.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              3703.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2937.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 355357.112 ops/s
[info]                  ·gc.alloc.rate:               823.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          3646.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2957.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   359787.595 ±(99.9%) 12270.836 ops/s [Average]
[info]   (min, avg, max) = (355357.112, 359787.595, 362546.149), stdev = 3186.697
[info]   CI (99.9%): [347516.759, 372058.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   847.515 ±(99.9%) 86.223 MB/sec [Average]
[info]   (min, avg, max) = (823.305, 847.515, 883.440), stdev = 22.392
[info]   CI (99.9%): [761.292, 933.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3706.394 ±(99.9%) 291.814 B/op [Average]
[info]   (min, avg, max) = (3646.002, 3706.394, 3833.352), stdev = 75.783
[info]   CI (99.9%): [3414.581, 3998.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.561 ±(99.9%) 1149.492 MB/sec [Average]
[info]   (min, avg, max) = (666.142, 800.561, 1334.567), stdev = 298.519
[info]   CI (99.9%): [≈ 0, 1950.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3496.926 ±(99.9%) 4938.793 B/op [Average]
[info]   (min, avg, max) = (2896.139, 3496.926, 5790.849), stdev = 1282.589
[info]   CI (99.9%): [≈ 0, 8435.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.136), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356411.415 ops/s
[info] # Warmup Iteration   2: 658003.857 ops/s
[info] # Warmup Iteration   3: 759474.613 ops/s
[info] # Warmup Iteration   4: 744226.913 ops/s
[info] # Warmup Iteration   5: 734245.277 ops/s
[info] Iteration   1: 734307.587 ops/s
[info]                  ·gc.alloc.rate:                   657.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1410.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1439.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 729820.711 ops/s
[info]                  ·gc.alloc.rate:               666.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          1436.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1448.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 715325.238 ops/s
[info]                  ·gc.alloc.rate:               639.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1479.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 734749.527 ops/s
[info]                  ·gc.alloc.rate:               678.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          1453.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1440.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 738514.198 ops/s
[info]                  ·gc.alloc.rate:               680.812 MB/sec
[info]                  ·gc.alloc.rate.norm:          1450.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1433.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   730543.452 ±(99.9%) 34842.953 ops/s [Average]
[info]   (min, avg, max) = (715325.238, 730543.452, 738514.198), stdev = 9048.604
[info]   CI (99.9%): [695700.499, 765386.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   664.699 ±(99.9%) 64.296 MB/sec [Average]
[info]   (min, avg, max) = (639.952, 664.699, 680.812), stdev = 16.698
[info]   CI (99.9%): [600.403, 728.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1431.816 ±(99.9%) 83.934 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1431.816, 1453.813), stdev = 21.797
[info]   CI (99.9%): [1347.881, 1515.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.294 ±(99.9%) 1.573 MB/sec [Average]
[info]   (min, avg, max) = (671.782, 672.294, 672.774), stdev = 0.409
[info]   CI (99.9%): [670.721, 673.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1448.500 ±(99.9%) 69.996 B/op [Average]
[info]   (min, avg, max) = (1433.778, 1448.500, 1479.580), stdev = 18.178
[info]   CI (99.9%): [1378.504, 1518.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972215.428 ops/s
[info] # Warmup Iteration   2: 2384919.208 ops/s
[info] # Warmup Iteration   3: 3272690.897 ops/s
[info] # Warmup Iteration   4: 3258611.583 ops/s
[info] # Warmup Iteration   5: 3371264.508 ops/s
[info] Iteration   1: 3334582.654 ops/s
[info]                  ·gc.alloc.rate:                   2015.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3356469.656 ops/s
[info]                  ·gc.alloc.rate:                   2040.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3349714.319 ops/s
[info]                  ·gc.alloc.rate:                   2022.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3364190.740 ops/s
[info]                  ·gc.alloc.rate:                   2046.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3276397.369 ops/s
[info]                  ·gc.alloc.rate:               1994.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          958.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 970.229 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3336270.948 ±(99.9%) 135539.420 ops/s [Average]
[info]   (min, avg, max) = (3276397.369, 3336270.948, 3364190.740), stdev = 35199.157
[info]   CI (99.9%): [3200731.528, 3471810.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2023.896 ±(99.9%) 79.256 MB/sec [Average]
[info]   (min, avg, max) = (1994.596, 2023.896, 2046.238), stdev = 20.583
[info]   CI (99.9%): [1944.640, 2103.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   954.736 ±(99.9%) 13.929 B/op [Average]
[info]   (min, avg, max) = (950.216, 954.736, 958.177), stdev = 3.617
[info]   CI (99.9%): [940.807, 968.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2020.329 ±(99.9%) 6.441 MB/sec [Average]
[info]   (min, avg, max) = (2018.669, 2020.329, 2022.496), stdev = 1.673
[info]   CI (99.9%): [2013.887, 2026.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   953.130 ±(99.9%) 39.272 B/op [Average]
[info]   (min, avg, max) = (944.219, 953.130, 970.229), stdev = 10.199
[info]   CI (99.9%): [913.858, 992.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.537 ±(99.9%) 4.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 2.519), stdev = 1.109
[info]   CI (99.9%): [≈ 0, 4.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.252 ±(99.9%) 2.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 1.181), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1734693.875 ops/s
[info] # Warmup Iteration   2: 4262652.501 ops/s
[info] # Warmup Iteration   3: 7143661.251 ops/s
[info] # Warmup Iteration   4: 7567302.814 ops/s
[info] # Warmup Iteration   5: 7189267.299 ops/s
[info] Iteration   1: 7173384.990 ops/s
[info]                  ·gc.alloc.rate:                   796.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              174.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7279677.216 ops/s
[info]                  ·gc.alloc.rate:               791.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145.388 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7522122.144 ops/s
[info]                  ·gc.alloc.rate:               826.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 7542777.349 ops/s
[info]                  ·gc.alloc.rate:               825.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 7498108.776 ops/s
[info]                  ·gc.alloc.rate:               816.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141.223 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7403214.095 ±(99.9%) 640599.506 ops/s [Average]
[info]   (min, avg, max) = (7173384.990, 7403214.095, 7542777.349), stdev = 166361.657
[info]   CI (99.9%): [6762614.589, 8043813.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   811.255 ±(99.9%) 63.653 MB/sec [Average]
[info]   (min, avg, max) = (791.296, 811.255, 826.490), stdev = 16.530
[info]   CI (99.9%): [747.602, 874.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   172.465 ±(99.9%) 5.587 B/op [Average]
[info]   (min, avg, max) = (171.072, 172.465, 174.683), stdev = 1.451
[info]   CI (99.9%): [166.877, 178.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   806.904 ±(99.9%) 1155.768 MB/sec [Average]
[info]   (min, avg, max) = (672.488, 806.904, 1343.827), stdev = 300.149
[info]   CI (99.9%): [≈ 0, 1962.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   172.498 ±(99.9%) 263.354 B/op [Average]
[info]   (min, avg, max) = (140.389, 172.498, 294.788), stdev = 68.392
[info]   CI (99.9%): [≈ 0, 435.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2610.020 ops/s
[info] # Warmup Iteration   2: 66198.360 ops/s
[info] # Warmup Iteration   3: 189311.279 ops/s
[info] # Warmup Iteration   4: 228602.435 ops/s
[info] # Warmup Iteration   5: 225960.283 ops/s
[info] Iteration   1: 229229.545 ops/s
[info]                  ·gc.alloc.rate:                   2030.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              13943.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13775.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 224562.188 ops/s
[info]                  ·gc.alloc.rate:                   1983.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              13899.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14101.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 221795.832 ops/s
[info]                  ·gc.alloc.rate:                   1981.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              14061.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14292.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.807 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 224620.033 ops/s
[info]                  ·gc.alloc.rate:               1989.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          13939.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14133.551 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 223323.234 ops/s
[info]                  ·gc.alloc.rate:               1979.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          13948.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14234.340 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   224706.167 ±(99.9%) 10697.524 ops/s [Average]
[info]   (min, avg, max) = (221795.832, 224706.167, 229229.545), stdev = 2778.113
[info]   CI (99.9%): [214008.642, 235403.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1992.867 ±(99.9%) 82.953 MB/sec [Average]
[info]   (min, avg, max) = (1979.241, 1992.867, 2030.826), stdev = 21.543
[info]   CI (99.9%): [1909.914, 2075.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13958.320 ±(99.9%) 233.282 B/op [Average]
[info]   (min, avg, max) = (13899.613, 13958.320, 14061.030), stdev = 60.583
[info]   CI (99.9%): [13725.038, 14191.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.930 ±(99.9%) 19.873 MB/sec [Average]
[info]   (min, avg, max) = (2006.307, 2013.930, 2019.872), stdev = 5.161
[info]   CI (99.9%): [1994.057, 2033.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   14107.509 ±(99.9%) 772.912 B/op [Average]
[info]   (min, avg, max) = (13775.509, 14107.509, 14292.275), stdev = 200.723
[info]   CI (99.9%): [13334.597, 14880.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.254 ±(99.9%) 1.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 0.854), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.786 ±(99.9%) 10.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.786, 5.982), stdev = 2.633
[info]   CI (99.9%): [≈ 0, 11.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 808479.827 ops/s
[info] # Warmup Iteration   2: 1526857.662 ops/s
[info] # Warmup Iteration   3: 1578545.289 ops/s
[info] # Warmup Iteration   4: 1584634.022 ops/s
[info] # Warmup Iteration   5: 1565708.699 ops/s
[info] Iteration   1: 1570520.016 ops/s
[info]                  ·gc.alloc.rate:      87.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1571378.854 ops/s
[info]                  ·gc.alloc.rate:      87.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1571865.226 ops/s
[info]                  ·gc.alloc.rate:      87.890 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1573162.674 ops/s
[info]                  ·gc.alloc.rate:      87.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1577863.999 ops/s
[info]                  ·gc.alloc.rate:                   101.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     510.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1572958.154 ±(99.9%) 11183.841 ops/s [Average]
[info]   (min, avg, max) = (1570520.016, 1572958.154, 1577863.999), stdev = 2904.408
[info]   CI (99.9%): [1561774.313, 1584141.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   90.604 ±(99.9%) 23.449 MB/sec [Average]
[info]   (min, avg, max) = (87.812, 90.604, 101.497), stdev = 6.090
[info]   CI (99.9%): [67.156, 114.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   90.649 ±(99.9%) 22.805 B/op [Average]
[info]   (min, avg, max) = (88.000, 90.649, 101.243), stdev = 5.922
[info]   CI (99.9%): [67.844, 113.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.315 ±(99.9%) 880.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.315, 511.576), stdev = 228.784
[info]   CI (99.9%): [≈ 0, 983.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   102.059 ±(99.9%) 878.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.059, 510.293), stdev = 228.210
[info]   CI (99.9%): [≈ 0, 980.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.134 ±(99.9%) 1.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.672), stdev = 0.301
[info]   CI (99.9%): [≈ 0, 1.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 1.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.670), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7142.554 ops/s
[info] # Warmup Iteration   2: 62368.147 ops/s
[info] # Warmup Iteration   3: 71875.724 ops/s
[info] # Warmup Iteration   4: 74862.513 ops/s
[info] # Warmup Iteration   5: 72137.129 ops/s
[info] Iteration   1: 73634.435 ops/s
[info]                  ·gc.alloc.rate:                   3209.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              68594.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57264.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.559 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 74839.652 ops/s
[info]                  ·gc.alloc.rate:                   3317.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              69755.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70722.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 75246.278 ops/s
[info]                  ·gc.alloc.rate:               3333.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          69710.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70591.030 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 74842.673 ops/s
[info]                  ·gc.alloc.rate:               3290.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          69195.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56925.098 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 73405.344 ops/s
[info]                  ·gc.alloc.rate:               3256.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          69821.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72694.795 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   74393.676 ±(99.9%) 3152.282 ops/s [Average]
[info]   (min, avg, max) = (73405.344, 74393.676, 75246.278), stdev = 818.638
[info]   CI (99.9%): [71241.394, 77545.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3281.513 ±(99.9%) 191.445 MB/sec [Average]
[info]   (min, avg, max) = (3209.403, 3281.513, 3333.243), stdev = 49.718
[info]   CI (99.9%): [3090.067, 3472.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69415.624 ±(99.9%) 2010.194 B/op [Average]
[info]   (min, avg, max) = (68594.433, 69415.624, 69821.985), stdev = 522.041
[info]   CI (99.9%): [67405.430, 71425.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3103.207 ±(99.9%) 1442.243 MB/sec [Average]
[info]   (min, avg, max) = (2679.306, 3103.207, 3390.610), stdev = 374.546
[info]   CI (99.9%): [1660.964, 4545.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65639.664 ±(99.9%) 30210.506 B/op [Average]
[info]   (min, avg, max) = (56925.098, 65639.664, 72694.795), stdev = 7845.573
[info]   CI (99.9%): [35429.157, 95850.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.975 ±(99.9%) 5.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 3.559), stdev = 1.553
[info]   CI (99.9%): [≈ 0, 6.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500621.472 ops/s
[info] # Warmup Iteration   2: 1466395.944 ops/s
[info] # Warmup Iteration   3: 1527998.867 ops/s
[info] # Warmup Iteration   4: 1560105.064 ops/s
[info] # Warmup Iteration   5: 1535212.066 ops/s
[info] Iteration   1: 1548677.346 ops/s
[info]                  ·gc.alloc.rate:                   848.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1355.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1599537.579 ops/s
[info]                  ·gc.alloc.rate:               855.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 656.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1599434.723 ops/s
[info]                  ·gc.alloc.rate:                   854.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     657.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1560854.287 ops/s
[info]                  ·gc.alloc.rate:               832.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 673.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1576951.677 ops/s
[info]                  ·gc.alloc.rate:               862.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          860.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1334.334 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1577091.123 ±(99.9%) 87683.078 ops/s [Average]
[info]   (min, avg, max) = (1548677.346, 1577091.123, 1599537.579), stdev = 22771.017
[info]   CI (99.9%): [1489408.045, 1664774.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   850.764 ±(99.9%) 43.176 MB/sec [Average]
[info]   (min, avg, max) = (832.927, 850.764, 862.546), stdev = 11.213
[info]   CI (99.9%): [807.588, 893.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   849.065 ±(99.9%) 43.439 B/op [Average]
[info]   (min, avg, max) = (839.876, 849.065, 861.904), stdev = 11.281
[info]   CI (99.9%): [805.625, 892.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   934.844 ±(99.9%) 1407.682 MB/sec [Average]
[info]   (min, avg, max) = (667.304, 934.844, 1336.921), stdev = 365.571
[info]   CI (99.9%): [≈ 0, 2342.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   935.475 ±(99.9%) 1439.568 B/op [Average]
[info]   (min, avg, max) = (656.471, 935.475, 1355.383), stdev = 373.851
[info]   CI (99.9%): [≈ 0, 2375.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707976.072 ops/s
[info] # Warmup Iteration   2: 1642785.535 ops/s
[info] # Warmup Iteration   3: 1615135.539 ops/s
[info] # Warmup Iteration   4: 1612466.183 ops/s
[info] # Warmup Iteration   5: 1648124.818 ops/s
[info] Iteration   1: 1687382.231 ops/s
[info]                  ·gc.alloc.rate:               489.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1678278.057 ops/s
[info]                  ·gc.alloc.rate:               486.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 629.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1696389.828 ops/s
[info]                  ·gc.alloc.rate:      474.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1648543.754 ops/s
[info]                  ·gc.alloc.rate:               485.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          463.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 640.433 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1624540.251 ops/s
[info]                  ·gc.alloc.rate:                   477.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              462.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1667026.824 ±(99.9%) 114711.898 ops/s [Average]
[info]   (min, avg, max) = (1624540.251, 1667026.824, 1696389.828), stdev = 29790.316
[info]   CI (99.9%): [1552314.927, 1781738.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   482.694 ±(99.9%) 24.693 MB/sec [Average]
[info]   (min, avg, max) = (474.260, 482.694, 489.052), stdev = 6.413
[info]   CI (99.9%): [458.001, 507.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   455.828 ±(99.9%) 36.588 B/op [Average]
[info]   (min, avg, max) = (440.000, 455.828, 463.759), stdev = 9.502
[info]   CI (99.9%): [419.239, 492.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.878 ±(99.9%) 1118.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.878, 671.125), stdev = 290.542
[info]   CI (99.9%): [≈ 0, 1623.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   479.389 ±(99.9%) 1067.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 479.389, 650.228), stdev = 277.196
[info]   CI (99.9%): [≈ 0, 1546.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 997901.341 ops/s
[info] # Warmup Iteration   2: 1689194.557 ops/s
[info] # Warmup Iteration   3: 1807279.543 ops/s
[info] # Warmup Iteration   4: 1807665.564 ops/s
[info] # Warmup Iteration   5: 1807423.502 ops/s
[info] Iteration   1: 1794553.424 ops/s
[info]                  ·gc.alloc.rate:      18.244 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1800737.465 ops/s
[info]                  ·gc.alloc.rate:      18.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1801879.801 ops/s
[info]                  ·gc.alloc.rate:      18.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1811840.594 ops/s
[info]                  ·gc.alloc.rate:      18.421 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1811742.742 ops/s
[info]                  ·gc.alloc.rate:      18.420 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1804150.805 ±(99.9%) 28923.978 ops/s [Average]
[info]   (min, avg, max) = (1794553.424, 1804150.805, 1811840.594), stdev = 7511.465
[info]   CI (99.9%): [1775226.828, 1833074.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.342 ±(99.9%) 0.297 MB/sec [Average]
[info]   (min, avg, max) = (18.244, 18.342, 18.421), stdev = 0.077
[info]   CI (99.9%): [18.045, 18.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6042.291 ops/s
[info] # Warmup Iteration   2: 45768.793 ops/s
[info] # Warmup Iteration   3: 49966.934 ops/s
[info] # Warmup Iteration   4: 50687.812 ops/s
[info] # Warmup Iteration   5: 50097.105 ops/s
[info] Iteration   1: 50828.138 ops/s
[info]                  ·gc.alloc.rate:                   2171.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              67228.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62145.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 51450.563 ops/s
[info]                  ·gc.alloc.rate:                   2223.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              68014.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61230.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51696.715 ops/s
[info]                  ·gc.alloc.rate:                   2220.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              67605.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81180.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.267 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52010.028 ops/s
[info]                  ·gc.alloc.rate:               2246.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          67996.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60594.784 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 51961.977 ops/s
[info]                  ·gc.alloc.rate:               2245.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          68015.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60778.389 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   51589.484 ±(99.9%) 1852.769 ops/s [Average]
[info]   (min, avg, max) = (50828.138, 51589.484, 52010.028), stdev = 481.158
[info]   CI (99.9%): [49736.715, 53442.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2221.591 ±(99.9%) 118.167 MB/sec [Average]
[info]   (min, avg, max) = (2171.163, 2221.591, 2246.990), stdev = 30.688
[info]   CI (99.9%): [2103.424, 2339.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67772.152 ±(99.9%) 1350.206 B/op [Average]
[info]   (min, avg, max) = (67228.268, 67772.152, 68015.542), stdev = 350.644
[info]   CI (99.9%): [66421.946, 69122.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2136.879 ±(99.9%) 1140.379 MB/sec [Average]
[info]   (min, avg, max) = (2001.727, 2136.879, 2666.636), stdev = 296.153
[info]   CI (99.9%): [996.500, 3277.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65185.960 ±(99.9%) 34507.303 B/op [Average]
[info]   (min, avg, max) = (60594.784, 65185.960, 81180.732), stdev = 8961.437
[info]   CI (99.9%): [30678.658, 99693.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 7.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.267), stdev = 1.899
[info]   CI (99.9%): [≈ 0, 8.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.935 ±(99.9%) 226.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.935, 132.134), stdev = 58.812
[info]   CI (99.9%): [≈ 0, 253.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112726.206 ops/s
[info] # Warmup Iteration   2: 254286.472 ops/s
[info] # Warmup Iteration   3: 266817.470 ops/s
[info] # Warmup Iteration   4: 274913.721 ops/s
[info] # Warmup Iteration   5: 270894.360 ops/s
[info] Iteration   1: 272571.741 ops/s
[info]                  ·gc.alloc.rate:                   1099.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              6350.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7756.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 274598.923 ops/s
[info]                  ·gc.alloc.rate:               1090.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          6248.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3850.567 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 273857.252 ops/s
[info]                  ·gc.alloc.rate:                   1113.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              6401.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7725.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 275047.690 ops/s
[info]                  ·gc.alloc.rate:                   1101.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              6303.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3849.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 273088.378 ops/s
[info]                  ·gc.alloc.rate:                   1122.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              6468.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7755.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   273832.797 ±(99.9%) 3949.460 ops/s [Average]
[info]   (min, avg, max) = (272571.741, 273832.797, 275047.690), stdev = 1025.662
[info]   CI (99.9%): [269883.337, 277782.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1105.578 ±(99.9%) 48.491 MB/sec [Average]
[info]   (min, avg, max) = (1090.172, 1105.578, 1122.345), stdev = 12.593
[info]   CI (99.9%): [1057.087, 1154.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6354.305 ±(99.9%) 327.978 B/op [Average]
[info]   (min, avg, max) = (6248.086, 6354.305, 6468.222), stdev = 85.175
[info]   CI (99.9%): [6026.327, 6682.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.638 ±(99.9%) 1417.614 MB/sec [Average]
[info]   (min, avg, max) = (671.850, 1075.638, 1345.697), stdev = 368.150
[info]   CI (99.9%): [≈ 0, 2493.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6187.732 ±(99.9%) 8216.648 B/op [Average]
[info]   (min, avg, max) = (3849.972, 6187.732, 7756.701), stdev = 2133.837
[info]   CI (99.9%): [≈ 0, 14404.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.873), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.455 ±(99.9%) 28.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.455, 16.557), stdev = 7.325
[info]   CI (99.9%): [≈ 0, 31.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2175.039 ops/s
[info] # Warmup Iteration   2: 31875.946 ops/s
[info] # Warmup Iteration   3: 39688.330 ops/s
[info] # Warmup Iteration   4: 40113.076 ops/s
[info] # Warmup Iteration   5: 41026.192 ops/s
[info] Iteration   1: 40226.060 ops/s
[info]                  ·gc.alloc.rate:                   1989.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              77824.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78582.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 40186.014 ops/s
[info]                  ·gc.alloc.rate:                   2000.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              78330.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78787.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40427.660 ops/s
[info]                  ·gc.alloc.rate:               1984.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          77251.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52280.982 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 39806.775 ops/s
[info]                  ·gc.alloc.rate:                   1955.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              77300.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79748.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41112.637 ops/s
[info]                  ·gc.alloc.rate:               2058.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          78789.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77344.561 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   40351.829 ±(99.9%) 1851.691 ops/s [Average]
[info]   (min, avg, max) = (39806.775, 40351.829, 41112.637), stdev = 480.878
[info]   CI (99.9%): [38500.138, 42203.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1997.456 ±(99.9%) 145.655 MB/sec [Average]
[info]   (min, avg, max) = (1955.106, 1997.456, 2058.193), stdev = 37.826
[info]   CI (99.9%): [1851.801, 2143.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77899.206 ±(99.9%) 2555.410 B/op [Average]
[info]   (min, avg, max) = (77251.639, 77899.206, 78789.109), stdev = 663.632
[info]   CI (99.9%): [75343.795, 80454.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1880.212 ±(99.9%) 1156.552 MB/sec [Average]
[info]   (min, avg, max) = (1342.985, 1880.212, 2020.457), stdev = 300.353
[info]   CI (99.9%): [723.659, 3036.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73348.703 ±(99.9%) 45469.389 B/op [Average]
[info]   (min, avg, max) = (52280.982, 73348.703, 79748.032), stdev = 11808.256
[info]   CI (99.9%): [27879.314, 118818.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.239 ±(99.9%) 1.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 1.135), stdev = 0.501
[info]   CI (99.9%): [≈ 0, 2.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.379 ±(99.9%) 75.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.379, 44.445), stdev = 19.614
[info]   CI (99.9%): [≈ 0, 84.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31715.553 ops/s
[info] # Warmup Iteration   2: 107954.703 ops/s
[info] # Warmup Iteration   3: 110841.257 ops/s
[info] # Warmup Iteration   4: 110046.896 ops/s
[info] # Warmup Iteration   5: 113634.910 ops/s
[info] Iteration   1: 114371.249 ops/s
[info]                  ·gc.alloc.rate:                   1156.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              15913.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18370.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 114344.256 ops/s
[info]                  ·gc.alloc.rate:                   1146.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              15785.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18393.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 114765.985 ops/s
[info]                  ·gc.alloc.rate:               1148.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          15746.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9167.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 109693.249 ops/s
[info]                  ·gc.alloc.rate:                   1112.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              15959.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19201.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 112916.447 ops/s
[info]                  ·gc.alloc.rate:                   1143.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              15938.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18662.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   113218.237 ±(99.9%) 8056.384 ops/s [Average]
[info]   (min, avg, max) = (109693.249, 113218.237, 114765.985), stdev = 2092.217
[info]   CI (99.9%): [105161.853, 121274.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1141.480 ±(99.9%) 65.262 MB/sec [Average]
[info]   (min, avg, max) = (1112.398, 1141.480, 1156.486), stdev = 16.948
[info]   CI (99.9%): [1076.218, 1206.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15868.660 ±(99.9%) 370.978 B/op [Average]
[info]   (min, avg, max) = (15746.262, 15868.660, 15959.152), stdev = 96.342
[info]   CI (99.9%): [15497.682, 16239.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.413 ±(99.9%) 1151.501 MB/sec [Average]
[info]   (min, avg, max) = (668.479, 1203.413, 1338.883), stdev = 299.041
[info]   CI (99.9%): [51.911, 2354.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16759.009 ±(99.9%) 16392.786 B/op [Average]
[info]   (min, avg, max) = (9167.184, 16759.009, 19201.783), stdev = 4257.154
[info]   CI (99.9%): [366.224, 33151.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.997), stdev = 1.774
[info]   CI (99.9%): [≈ 0, 7.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.488 ±(99.9%) 95.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.488, 55.710), stdev = 24.723
[info]   CI (99.9%): [≈ 0, 106.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172841.993 ops/s
[info] # Warmup Iteration   2: 325199.158 ops/s
[info] # Warmup Iteration   3: 332374.282 ops/s
[info] # Warmup Iteration   4: 334942.098 ops/s
[info] # Warmup Iteration   5: 322821.941 ops/s
[info] Iteration   1: 335637.523 ops/s
[info]                  ·gc.alloc.rate:               471.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          2210.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2398.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 332575.047 ops/s
[info]                  ·gc.alloc.rate:               472.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          2236.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3172.870 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 334040.124 ops/s
[info]                  ·gc.alloc.rate:      449.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 333842.070 ops/s
[info]                  ·gc.alloc.rate:                   463.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              2183.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3160.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 317885.033 ops/s
[info]                  ·gc.alloc.rate:               447.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          2214.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3321.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   330795.959 ±(99.9%) 28105.831 ops/s [Average]
[info]   (min, avg, max) = (317885.033, 330795.959, 335637.523), stdev = 7298.995
[info]   CI (99.9%): [302690.128, 358901.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   460.998 ±(99.9%) 45.739 MB/sec [Average]
[info]   (min, avg, max) = (447.393, 460.998, 472.887), stdev = 11.878
[info]   CI (99.9%): [415.259, 506.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2193.153 ±(99.9%) 173.402 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2193.153, 2236.788), stdev = 45.032
[info]   CI (99.9%): [2019.751, 2366.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.781 ±(99.9%) 1118.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.781, 670.887), stdev = 290.452
[info]   CI (99.9%): [≈ 0, 1623.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2410.789 ±(99.9%) 5371.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2410.789, 3321.284), stdev = 1395.022
[info]   CI (99.9%): [≈ 0, 7782.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147655.029 ops/s
[info] # Warmup Iteration   2: 342039.577 ops/s
[info] # Warmup Iteration   3: 347032.897 ops/s
[info] # Warmup Iteration   4: 366176.895 ops/s
[info] # Warmup Iteration   5: 366411.818 ops/s
[info] Iteration   1: 366116.335 ops/s
[info]                  ·gc.alloc.rate:      3.722 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 362074.906 ops/s
[info]                  ·gc.alloc.rate:      8.573 MB/sec
[info]                  ·gc.alloc.rate.norm: 37.262 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 365535.217 ops/s
[info]                  ·gc.alloc.rate:      3.844 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.550 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 366182.312 ops/s
[info]                  ·gc.alloc.rate:      3.723 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365438.606 ops/s
[info]                  ·gc.alloc.rate:      3.715 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   365069.475 ±(99.9%) 6572.920 ops/s [Average]
[info]   (min, avg, max) = (362074.906, 365069.475, 366182.312), stdev = 1706.967
[info]   CI (99.9%): [358496.555, 371642.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.715 ±(99.9%) 8.306 MB/sec [Average]
[info]   (min, avg, max) = (3.715, 4.715, 8.573), stdev = 2.157
[info]   CI (99.9%): [≈ 0, 13.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   20.363 ±(99.9%) 36.387 B/op [Average]
[info]   (min, avg, max) = (16.001, 20.363, 37.262), stdev = 9.450
[info]   CI (99.9%): [≈ 0, 56.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8442.000 ops/s
[info] # Warmup Iteration   2: 50457.244 ops/s
[info] # Warmup Iteration   3: 58989.927 ops/s
[info] # Warmup Iteration   4: 59043.883 ops/s
[info] # Warmup Iteration   5: 59137.975 ops/s
[info] Iteration   1: 59245.876 ops/s
[info]                  ·gc.alloc.rate:                   1419.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              37705.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35445.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 59241.088 ops/s
[info]                  ·gc.alloc.rate:                   1425.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              37875.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35520.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 59278.163 ops/s
[info]                  ·gc.alloc.rate:                   1427.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              37899.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35568.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 59010.527 ops/s
[info]                  ·gc.alloc.rate:                   1425.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              38017.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35789.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 59291.343 ops/s
[info]                  ·gc.alloc.rate:                   1422.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              37753.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35663.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   59213.399 ±(99.9%) 444.279 ops/s [Average]
[info]   (min, avg, max) = (59010.527, 59213.399, 59291.343), stdev = 115.378
[info]   CI (99.9%): [58769.120, 59657.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1424.234 ±(99.9%) 11.465 MB/sec [Average]
[info]   (min, avg, max) = (1419.990, 1424.234, 1427.479), stdev = 2.977
[info]   CI (99.9%): [1412.769, 1435.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37850.239 ±(99.9%) 477.699 B/op [Average]
[info]   (min, avg, max) = (37705.356, 37850.239, 38017.868), stdev = 124.057
[info]   CI (99.9%): [37372.540, 38327.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1339.463 ±(99.9%) 13.803 MB/sec [Average]
[info]   (min, avg, max) = (1334.868, 1339.463, 1343.755), stdev = 3.585
[info]   CI (99.9%): [1325.660, 1353.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35597.399 ±(99.9%) 514.949 B/op [Average]
[info]   (min, avg, max) = (35445.072, 35597.399, 35789.911), stdev = 133.730
[info]   CI (99.9%): [35082.450, 36112.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.988 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.146, 0.604), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.884 ±(99.9%) 26.363 B/op [Average]
[info]   (min, avg, max) = (0.553, 3.884, 16.101), stdev = 6.846
[info]   CI (99.9%): [≈ 0, 30.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13979.876 ops/s
[info] # Warmup Iteration   2: 63636.246 ops/s
[info] # Warmup Iteration   3: 67821.251 ops/s
[info] # Warmup Iteration   4: 71179.066 ops/s
[info] # Warmup Iteration   5: 71267.883 ops/s
[info] Iteration   1: 71809.216 ops/s
[info]                  ·gc.alloc.rate:                   1671.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              36639.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29433.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 71066.285 ops/s
[info]                  ·gc.alloc.rate:                   1661.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              36792.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44656.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 71810.686 ops/s
[info]                  ·gc.alloc.rate:                   1659.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              36360.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29432.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69366.649 ops/s
[info]                  ·gc.alloc.rate:                   1641.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              37243.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45599.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71656.376 ops/s
[info]                  ·gc.alloc.rate:                   1666.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              36597.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29408.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   71141.842 ±(99.9%) 3999.161 ops/s [Average]
[info]   (min, avg, max) = (69366.649, 71141.842, 71810.686), stdev = 1038.569
[info]   CI (99.9%): [67142.681, 75141.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1659.966 ±(99.9%) 44.041 MB/sec [Average]
[info]   (min, avg, max) = (1641.474, 1659.966, 1671.776), stdev = 11.437
[info]   CI (99.9%): [1615.924, 1704.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   36726.550 ±(99.9%) 1262.844 B/op [Average]
[info]   (min, avg, max) = (36360.239, 36726.550, 37243.584), stdev = 327.957
[info]   CI (99.9%): [35463.706, 37989.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.208 ±(99.9%) 1416.207 MB/sec [Average]
[info]   (min, avg, max) = (1338.919, 1610.208, 2016.417), stdev = 367.785
[info]   CI (99.9%): [194.001, 3026.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35706.154 ±(99.9%) 33143.690 B/op [Average]
[info]   (min, avg, max) = (29408.352, 35706.154, 45599.461), stdev = 8607.311
[info]   CI (99.9%): [2562.464, 68849.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.529 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.754, 2.769), stdev = 1.176
[info]   CI (99.9%): [≈ 0, 5.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.659 ±(99.9%) 100.258 B/op [Average]
[info]   (min, avg, max) = (0.457, 16.659, 61.316), stdev = 26.037
[info]   CI (99.9%): [≈ 0, 116.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24736.860 ops/s
[info] # Warmup Iteration   2: 114261.688 ops/s
[info] # Warmup Iteration   3: 126558.575 ops/s
[info] # Warmup Iteration   4: 131126.596 ops/s
[info] # Warmup Iteration   5: 133081.624 ops/s
[info] Iteration   1: 132757.781 ops/s
[info]                  ·gc.alloc.rate:               903.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          10712.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7900.922 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 133170.381 ops/s
[info]                  ·gc.alloc.rate:               911.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          10770.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7876.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 132845.606 ops/s
[info]                  ·gc.alloc.rate:                   924.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              10951.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15807.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 133292.149 ops/s
[info]                  ·gc.alloc.rate:                   903.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              10666.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7885.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 133424.052 ops/s
[info]                  ·gc.alloc.rate:               903.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          10662.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7877.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   133097.994 ±(99.9%) 1103.823 ops/s [Average]
[info]   (min, avg, max) = (132757.781, 133097.994, 133424.052), stdev = 286.659
[info]   CI (99.9%): [131994.171, 134201.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   909.344 ±(99.9%) 34.923 MB/sec [Average]
[info]   (min, avg, max) = (903.433, 909.344, 924.434), stdev = 9.069
[info]   CI (99.9%): [874.421, 944.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10752.791 ±(99.9%) 459.956 B/op [Average]
[info]   (min, avg, max) = (10662.461, 10752.791, 10951.733), stdev = 119.449
[info]   CI (99.9%): [10292.834, 11212.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.580 ±(99.9%) 1148.940 MB/sec [Average]
[info]   (min, avg, max) = (666.455, 800.580, 1334.330), stdev = 298.376
[info]   CI (99.9%): [≈ 0, 1949.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9469.570 ±(99.9%) 13643.479 B/op [Average]
[info]   (min, avg, max) = (7876.660, 9469.570, 15807.758), stdev = 3543.168
[info]   CI (99.9%): [≈ 0, 23113.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.148 ±(99.9%) 0.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.492), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86041.357 ops/s
[info] # Warmup Iteration   2: 238023.423 ops/s
[info] # Warmup Iteration   3: 259387.510 ops/s
[info] # Warmup Iteration   4: 261366.989 ops/s
[info] # Warmup Iteration   5: 261123.704 ops/s
[info] Iteration   1: 259246.566 ops/s
[info]                  ·gc.alloc.rate:                   1111.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              6748.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8155.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 261838.851 ops/s
[info]                  ·gc.alloc.rate:               1093.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          6572.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4038.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 260639.367 ops/s
[info]                  ·gc.alloc.rate:                   1117.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              6745.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8117.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 258203.651 ops/s
[info]                  ·gc.alloc.rate:               1086.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          6624.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4098.934 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 261665.010 ops/s
[info]                  ·gc.alloc.rate:                   1117.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              6720.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8091.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   260318.689 ±(99.9%) 6042.303 ops/s [Average]
[info]   (min, avg, max) = (258203.651, 260318.689, 261838.851), stdev = 1569.167
[info]   CI (99.9%): [254276.386, 266360.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1105.298 ±(99.9%) 54.662 MB/sec [Average]
[info]   (min, avg, max) = (1086.864, 1105.298, 1117.422), stdev = 14.196
[info]   CI (99.9%): [1050.636, 1159.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6682.519 ±(99.9%) 305.856 B/op [Average]
[info]   (min, avg, max) = (6572.490, 6682.519, 6748.808), stdev = 79.430
[info]   CI (99.9%): [6376.662, 6988.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.451 ±(99.9%) 1417.693 MB/sec [Average]
[info]   (min, avg, max) = (671.831, 1075.451, 1345.354), stdev = 368.170
[info]   CI (99.9%): [≈ 0, 2493.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6500.314 ±(99.9%) 8548.794 B/op [Average]
[info]   (min, avg, max) = (4038.190, 6500.314, 8155.348), stdev = 2220.095
[info]   CI (99.9%): [≈ 0, 15049.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.915), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.582 ±(99.9%) 30.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.582, 17.530), stdev = 7.798
[info]   CI (99.9%): [≈ 0, 33.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1388.683 ops/s
[info] # Warmup Iteration   2: 26319.000 ops/s
[info] # Warmup Iteration   3: 33260.343 ops/s
[info] # Warmup Iteration   4: 33119.942 ops/s
[info] # Warmup Iteration   5: 32503.753 ops/s
[info] Iteration   1: 33201.669 ops/s
[info]                  ·gc.alloc.rate:               1651.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          78271.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63187.393 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 33610.994 ops/s
[info]                  ·gc.alloc.rate:                   1683.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              78824.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93934.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33544.463 ops/s
[info]                  ·gc.alloc.rate:                   1676.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              78673.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62898.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33629.553 ops/s
[info]                  ·gc.alloc.rate:               1694.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          79284.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94242.463 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 32997.897 ops/s
[info]                  ·gc.alloc.rate:               1651.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          78758.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64116.182 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33396.915 ±(99.9%) 1087.521 ops/s [Average]
[info]   (min, avg, max) = (32997.897, 33396.915, 33629.553), stdev = 282.426
[info]   CI (99.9%): [32309.394, 34484.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1671.445 ±(99.9%) 74.335 MB/sec [Average]
[info]   (min, avg, max) = (1651.263, 1671.445, 1694.033), stdev = 19.305
[info]   CI (99.9%): [1597.111, 1745.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78762.760 ±(99.9%) 1395.104 B/op [Average]
[info]   (min, avg, max) = (78271.706, 78762.760, 79284.460), stdev = 362.304
[info]   CI (99.9%): [77367.655, 80157.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.605 ±(99.9%) 1414.378 MB/sec [Average]
[info]   (min, avg, max) = (1333.237, 1607.605, 2013.634), stdev = 367.309
[info]   CI (99.9%): [193.227, 3021.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75675.838 ±(99.9%) 64747.070 B/op [Average]
[info]   (min, avg, max) = (62898.933, 75675.838, 94242.463), stdev = 16814.608
[info]   CI (99.9%): [10928.768, 140422.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.173 ±(99.9%) 1.400 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.823), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 1.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.109 ±(99.9%) 65.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.109, 38.595), stdev = 17.063
[info]   CI (99.9%): [≈ 0, 73.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48315.977 ops/s
[info] # Warmup Iteration   2: 169711.200 ops/s
[info] # Warmup Iteration   3: 177623.624 ops/s
[info] # Warmup Iteration   4: 178121.530 ops/s
[info] # Warmup Iteration   5: 178868.595 ops/s
[info] Iteration   1: 177807.803 ops/s
[info]                  ·gc.alloc.rate:                   1025.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              9077.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11810.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 177506.972 ops/s
[info]                  ·gc.alloc.rate:               1009.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          8951.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5921.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 177582.300 ops/s
[info]                  ·gc.alloc.rate:               1012.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          8977.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11843.313 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 173491.843 ops/s
[info]                  ·gc.alloc.rate:                   973.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6064.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 173221.165 ops/s
[info]                  ·gc.alloc.rate:                   985.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              8954.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12159.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   175922.017 ±(99.9%) 9035.721 ops/s [Average]
[info]   (min, avg, max) = (173221.165, 175922.017, 177807.803), stdev = 2346.548
[info]   CI (99.9%): [166886.295, 184957.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1001.507 ±(99.9%) 81.808 MB/sec [Average]
[info]   (min, avg, max) = (973.727, 1001.507, 1025.528), stdev = 21.245
[info]   CI (99.9%): [919.699, 1083.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8958.592 ±(99.9%) 336.836 B/op [Average]
[info]   (min, avg, max) = (8832.126, 8958.592, 9077.687), stdev = 87.475
[info]   CI (99.9%): [8621.756, 9295.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.090 ±(99.9%) 1408.912 MB/sec [Average]
[info]   (min, avg, max) = (667.999, 1069.090, 1338.282), stdev = 365.890
[info]   CI (99.9%): [≈ 0, 2478.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9559.830 ±(99.9%) 12551.119 B/op [Average]
[info]   (min, avg, max) = (5921.438, 9559.830, 12159.736), stdev = 3259.486
[info]   CI (99.9%): [≈ 0, 22110.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.378), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183039.506 ops/s
[info] # Warmup Iteration   2: 428984.869 ops/s
[info] # Warmup Iteration   3: 463771.079 ops/s
[info] # Warmup Iteration   4: 456292.853 ops/s
[info] # Warmup Iteration   5: 467689.666 ops/s
[info] Iteration   1: 476964.892 ops/s
[info]                  ·gc.alloc.rate:               1428.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          4712.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4433.572 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 458054.334 ops/s
[info]                  ·gc.alloc.rate:               1392.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          4784.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4618.904 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 464166.178 ops/s
[info]                  ·gc.alloc.rate:                   1386.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              4700.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4560.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 456731.164 ops/s
[info]                  ·gc.alloc.rate:                   1377.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              4747.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4632.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 463577.289 ops/s
[info]                  ·gc.alloc.rate:                   1407.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4554.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   463898.772 ±(99.9%) 30831.037 ops/s [Average]
[info]   (min, avg, max) = (456731.164, 463898.772, 476964.892), stdev = 8006.722
[info]   CI (99.9%): [433067.735, 494729.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1398.482 ±(99.9%) 77.134 MB/sec [Average]
[info]   (min, avg, max) = (1377.766, 1398.482, 1428.684), stdev = 20.031
[info]   CI (99.9%): [1321.348, 1475.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4744.272 ±(99.9%) 144.158 B/op [Average]
[info]   (min, avg, max) = (4700.487, 4744.272, 4784.125), stdev = 37.437
[info]   CI (99.9%): [4600.113, 4888.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1343.922 ±(99.9%) 4.525 MB/sec [Average]
[info]   (min, avg, max) = (1341.889, 1343.922, 1344.945), stdev = 1.175
[info]   CI (99.9%): [1339.396, 1348.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4559.983 ±(99.9%) 302.573 B/op [Average]
[info]   (min, avg, max) = (4433.572, 4559.983, 4632.231), stdev = 78.577
[info]   CI (99.9%): [4257.410, 4862.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 4.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.935), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.349 ±(99.9%) 16.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.349, 9.952), stdev = 4.307
[info]   CI (99.9%): [≈ 0, 18.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224357.341 ops/s
[info] # Warmup Iteration   2: 492073.833 ops/s
[info] # Warmup Iteration   3: 501476.782 ops/s
[info] # Warmup Iteration   4: 503645.841 ops/s
[info] # Warmup Iteration   5: 504296.179 ops/s
[info] Iteration   1: 492097.511 ops/s
[info]                  ·gc.alloc.rate:               954.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          3052.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4292.859 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 509850.415 ops/s
[info]                  ·gc.alloc.rate:               951.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          2935.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2072.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 508731.616 ops/s
[info]                  ·gc.alloc.rate:                   949.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              2935.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2077.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 505563.219 ops/s
[info]                  ·gc.alloc.rate:               970.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          3019.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4184.699 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 518690.264 ops/s
[info]                  ·gc.alloc.rate:                   978.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              2969.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2040.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   506986.605 ±(99.9%) 37130.933 ops/s [Average]
[info]   (min, avg, max) = (492097.511, 506986.605, 518690.264), stdev = 9642.785
[info]   CI (99.9%): [469855.672, 544117.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   960.764 ±(99.9%) 49.685 MB/sec [Average]
[info]   (min, avg, max) = (949.012, 960.764, 978.628), stdev = 12.903
[info]   CI (99.9%): [911.079, 1010.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2982.492 ±(99.9%) 200.285 B/op [Average]
[info]   (min, avg, max) = (2935.330, 2982.492, 3052.287), stdev = 52.013
[info]   CI (99.9%): [2782.207, 3182.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   940.570 ±(99.9%) 1416.329 MB/sec [Average]
[info]   (min, avg, max) = (671.600, 940.570, 1344.253), stdev = 367.816
[info]   CI (99.9%): [≈ 0, 2356.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2933.624 ±(99.9%) 4590.488 B/op [Average]
[info]   (min, avg, max) = (2040.515, 2933.624, 4292.859), stdev = 1192.135
[info]   CI (99.9%): [≈ 0, 7524.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.064), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9692.964 ops/s
[info] # Warmup Iteration   2: 65158.606 ops/s
[info] # Warmup Iteration   3: 72694.392 ops/s
[info] # Warmup Iteration   4: 76488.258 ops/s
[info] # Warmup Iteration   5: 75406.397 ops/s
[info] Iteration   1: 74109.389 ops/s
[info]                  ·gc.alloc.rate:                   1328.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              28208.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28308.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 73392.070 ops/s
[info]                  ·gc.alloc.rate:               1317.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          28237.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28642.202 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 74543.913 ops/s
[info]                  ·gc.alloc.rate:                   1337.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              28224.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28256.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 75760.615 ops/s
[info]                  ·gc.alloc.rate:                   1356.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              28168.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27856.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75689.789 ops/s
[info]                  ·gc.alloc.rate:               1368.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          28437.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27910.500 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   74699.155 ±(99.9%) 3940.306 ops/s [Average]
[info]   (min, avg, max) = (73392.070, 74699.155, 75760.615), stdev = 1023.285
[info]   CI (99.9%): [70758.849, 78639.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1341.393 ±(99.9%) 79.666 MB/sec [Average]
[info]   (min, avg, max) = (1317.087, 1341.393, 1368.223), stdev = 20.689
[info]   CI (99.9%): [1261.727, 1421.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28255.208 ±(99.9%) 404.407 B/op [Average]
[info]   (min, avg, max) = (28168.431, 28255.208, 28437.287), stdev = 105.023
[info]   CI (99.9%): [27850.801, 28659.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.339 ±(99.9%) 15.153 MB/sec [Average]
[info]   (min, avg, max) = (1333.003, 1338.339, 1342.877), stdev = 3.935
[info]   CI (99.9%): [1323.186, 1353.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28194.761 ±(99.9%) 1236.245 B/op [Average]
[info]   (min, avg, max) = (27856.303, 28194.761, 28642.202), stdev = 321.049
[info]   CI (99.9%): [26958.516, 29431.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.162 ±(99.9%) 1.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.729), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.379 ±(99.9%) 25.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.379, 15.136), stdev = 6.594
[info]   CI (99.9%): [≈ 0, 28.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28953.205 ops/s
[info] # Warmup Iteration   2: 87977.351 ops/s
[info] # Warmup Iteration   3: 91423.174 ops/s
[info] # Warmup Iteration   4: 99171.506 ops/s
[info] # Warmup Iteration   5: 99143.045 ops/s
[info] Iteration   1: 99804.325 ops/s
[info]                  ·gc.alloc.rate:               1621.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          25568.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21187.492 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 98946.316 ops/s
[info]                  ·gc.alloc.rate:                   1645.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              26175.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32072.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 99395.775 ops/s
[info]                  ·gc.alloc.rate:                   1624.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              25716.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21264.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 97858.720 ops/s
[info]                  ·gc.alloc.rate:                   1601.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              25739.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21555.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 98141.000 ops/s
[info]                  ·gc.alloc.rate:                   1616.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              25927.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32208.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   98829.227 ±(99.9%) 3164.238 ops/s [Average]
[info]   (min, avg, max) = (97858.720, 98829.227, 99804.325), stdev = 821.743
[info]   CI (99.9%): [95664.989, 101993.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1621.898 ±(99.9%) 62.161 MB/sec [Average]
[info]   (min, avg, max) = (1601.112, 1621.898, 1645.936), stdev = 16.143
[info]   CI (99.9%): [1559.737, 1684.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25825.542 ±(99.9%) 899.663 B/op [Average]
[info]   (min, avg, max) = (25568.090, 25825.542, 26175.499), stdev = 233.640
[info]   CI (99.9%): [24925.879, 26725.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.538 ±(99.9%) 1413.283 MB/sec [Average]
[info]   (min, avg, max) = (1340.852, 1610.538, 2016.735), stdev = 367.025
[info]   CI (99.9%): [197.255, 3023.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25657.742 ±(99.9%) 22794.412 B/op [Average]
[info]   (min, avg, max) = (21187.492, 25657.742, 32208.491), stdev = 5919.636
[info]   CI (99.9%): [2863.330, 48452.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 4.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 2.852), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.052 ±(99.9%) 73.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.052, 45.362), stdev = 19.063
[info]   CI (99.9%): [≈ 0, 85.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34953.719 ops/s
[info] # Warmup Iteration   2: 156923.534 ops/s
[info] # Warmup Iteration   3: 169729.564 ops/s
[info] # Warmup Iteration   4: 169974.997 ops/s
[info] # Warmup Iteration   5: 166950.500 ops/s
[info] Iteration   1: 174934.952 ops/s
[info]                  ·gc.alloc.rate:               744.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          6700.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5990.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 174817.285 ops/s
[info]                  ·gc.alloc.rate:               737.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          6638.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6000.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 174950.358 ops/s
[info]                  ·gc.alloc.rate:                   745.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              6702.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5995.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 174995.478 ops/s
[info]                  ·gc.alloc.rate:               742.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          6679.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6000.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 174026.198 ops/s
[info]                  ·gc.alloc.rate:               736.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          6661.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6033.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   174744.854 ±(99.9%) 1567.565 ops/s [Average]
[info]   (min, avg, max) = (174026.198, 174744.854, 174995.478), stdev = 407.092
[info]   CI (99.9%): [173177.290, 176312.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   741.278 ±(99.9%) 15.654 MB/sec [Average]
[info]   (min, avg, max) = (736.502, 741.278, 745.054), stdev = 4.065
[info]   CI (99.9%): [725.624, 756.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6676.375 ±(99.9%) 103.920 B/op [Average]
[info]   (min, avg, max) = (6638.653, 6676.375, 6702.456), stdev = 26.988
[info]   CI (99.9%): [6572.454, 6780.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.612 ±(99.9%) 2.206 MB/sec [Average]
[info]   (min, avg, max) = (665.788, 666.612, 667.197), stdev = 0.573
[info]   CI (99.9%): [664.406, 668.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6003.937 ±(99.9%) 65.587 B/op [Average]
[info]   (min, avg, max) = (5990.168, 6003.937, 6033.501), stdev = 17.033
[info]   CI (99.9%): [5938.350, 6069.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.375), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132723.237 ops/s
[info] # Warmup Iteration   2: 264326.934 ops/s
[info] # Warmup Iteration   3: 276350.287 ops/s
[info] # Warmup Iteration   4: 279153.225 ops/s
[info] # Warmup Iteration   5: 269931.740 ops/s
[info] Iteration   1: 279322.171 ops/s
[info]                  ·gc.alloc.rate:               1022.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          5760.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3781.523 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 279197.984 ops/s
[info]                  ·gc.alloc.rate:                   1038.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              5853.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7573.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 280917.569 ops/s
[info]                  ·gc.alloc.rate:               1016.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          5694.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3765.681 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 279611.580 ops/s
[info]                  ·gc.alloc.rate:                   1025.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              5770.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7570.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 280080.029 ops/s
[info]                  ·gc.alloc.rate:               1012.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          5687.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3780.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   279825.866 ±(99.9%) 2688.757 ops/s [Average]
[info]   (min, avg, max) = (279197.984, 279825.866, 280917.569), stdev = 698.262
[info]   CI (99.9%): [277137.109, 282514.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1022.940 ±(99.9%) 38.510 MB/sec [Average]
[info]   (min, avg, max) = (1012.274, 1022.940, 1038.425), stdev = 10.001
[info]   CI (99.9%): [984.430, 1061.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5753.284 ±(99.9%) 259.711 B/op [Average]
[info]   (min, avg, max) = (5687.068, 5753.284, 5853.598), stdev = 67.446
[info]   CI (99.9%): [5493.573, 6012.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.945 ±(99.9%) 1417.722 MB/sec [Average]
[info]   (min, avg, max) = (671.122, 940.945, 1344.952), stdev = 368.178
[info]   CI (99.9%): [≈ 0, 2358.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5294.380 ±(99.9%) 8006.396 B/op [Average]
[info]   (min, avg, max) = (3765.681, 5294.380, 7573.725), stdev = 2079.236
[info]   CI (99.9%): [≈ 0, 13300.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.235), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8672.359 ops/s
[info] # Warmup Iteration   2: 59116.475 ops/s
[info] # Warmup Iteration   3: 66191.966 ops/s
[info] # Warmup Iteration   4: 69258.682 ops/s
[info] # Warmup Iteration   5: 69464.418 ops/s
[info] Iteration   1: 67356.828 ops/s
[info]                  ·gc.alloc.rate:                   2545.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              59448.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62480.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.862 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69267.604 ops/s
[info]                  ·gc.alloc.rate:                   2597.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              59017.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60633.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 69741.795 ops/s
[info]                  ·gc.alloc.rate:               2657.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          59979.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60290.376 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 69765.579 ops/s
[info]                  ·gc.alloc.rate:               2646.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          59668.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60331.188 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 69636.193 ops/s
[info]                  ·gc.alloc.rate:               2627.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          59382.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45528.728 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   69153.600 ±(99.9%) 3943.280 ops/s [Average]
[info]   (min, avg, max) = (67356.828, 69153.600, 69765.579), stdev = 1024.057
[info]   CI (99.9%): [65210.320, 73096.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2614.846 ±(99.9%) 174.073 MB/sec [Average]
[info]   (min, avg, max) = (2545.084, 2614.846, 2657.858), stdev = 45.206
[info]   CI (99.9%): [2440.774, 2788.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59499.391 ±(99.9%) 1371.970 B/op [Average]
[info]   (min, avg, max) = (59017.139, 59499.391, 59979.293), stdev = 356.296
[info]   CI (99.9%): [58127.421, 60871.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.075 ±(99.9%) 1133.850 MB/sec [Average]
[info]   (min, avg, max) = (2014.358, 2541.075, 2675.855), stdev = 294.457
[info]   CI (99.9%): [1407.224, 3674.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57852.895 ±(99.9%) 26755.397 B/op [Average]
[info]   (min, avg, max) = (45528.728, 57852.895, 62480.280), stdev = 6948.292
[info]   CI (99.9%): [31097.498, 84608.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.979), stdev = 0.425
[info]   CI (99.9%): [≈ 0, 1.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.329 ±(99.9%) 38.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.329, 22.862), stdev = 9.937
[info]   CI (99.9%): [≈ 0, 43.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63131.078 ops/s
[info] # Warmup Iteration   2: 182357.730 ops/s
[info] # Warmup Iteration   3: 199156.919 ops/s
[info] # Warmup Iteration   4: 201799.279 ops/s
[info] # Warmup Iteration   5: 199923.334 ops/s
[info] Iteration   1: 205532.857 ops/s
[info]                  ·gc.alloc.rate:                   1426.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              10924.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10271.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 205212.234 ops/s
[info]                  ·gc.alloc.rate:                   1434.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              11001.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10292.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 205675.348 ops/s
[info]                  ·gc.alloc.rate:                   1437.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              10998.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10274.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 203548.949 ops/s
[info]                  ·gc.alloc.rate:                   1422.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              10997.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10373.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 201838.248 ops/s
[info]                  ·gc.alloc.rate:               1421.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          11086.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10445.557 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   204361.527 ±(99.9%) 6341.609 ops/s [Average]
[info]   (min, avg, max) = (201838.248, 204361.527, 205675.348), stdev = 1646.896
[info]   CI (99.9%): [198019.918, 210703.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1428.742 ±(99.9%) 27.021 MB/sec [Average]
[info]   (min, avg, max) = (1421.836, 1428.742, 1437.375), stdev = 7.017
[info]   CI (99.9%): [1401.721, 1455.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11001.828 ±(99.9%) 221.189 B/op [Average]
[info]   (min, avg, max) = (10924.822, 11001.828, 11086.909), stdev = 57.442
[info]   CI (99.9%): [10780.639, 11223.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.634 ±(99.9%) 4.886 MB/sec [Average]
[info]   (min, avg, max) = (1339.586, 1341.634, 1342.775), stdev = 1.269
[info]   CI (99.9%): [1336.748, 1346.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10331.275 ±(99.9%) 293.535 B/op [Average]
[info]   (min, avg, max) = (10271.055, 10331.275, 10445.557), stdev = 76.230
[info]   CI (99.9%): [10037.740, 10624.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.060), stdev = 1.320
[info]   CI (99.9%): [≈ 0, 5.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.584 ±(99.9%) 38.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.584, 23.417), stdev = 10.095
[info]   CI (99.9%): [≈ 0, 44.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167235.069 ops/s
[info] # Warmup Iteration   2: 490257.797 ops/s
[info] # Warmup Iteration   3: 501311.667 ops/s
[info] # Warmup Iteration   4: 496552.708 ops/s
[info] # Warmup Iteration   5: 492369.709 ops/s
[info] Iteration   1: 485579.063 ops/s
[info]                  ·gc.alloc.rate:               398.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          1293.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1658.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 497952.863 ops/s
[info]                  ·gc.alloc.rate:               409.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1295.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1616.932 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 491787.894 ops/s
[info]                  ·gc.alloc.rate:      387.524 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 493755.469 ops/s
[info]                  ·gc.alloc.rate:               412.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          1315.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2123.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 498278.275 ops/s
[info]                  ·gc.alloc.rate:               407.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          1286.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2104.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   493470.713 ±(99.9%) 20044.943 ops/s [Average]
[info]   (min, avg, max) = (485579.063, 493470.713, 498278.275), stdev = 5205.608
[info]   CI (99.9%): [473425.770, 513515.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   403.245 ±(99.9%) 39.121 MB/sec [Average]
[info]   (min, avg, max) = (387.524, 403.245, 412.655), stdev = 10.160
[info]   CI (99.9%): [364.123, 442.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1285.959 ±(99.9%) 107.467 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1285.959, 1315.391), stdev = 27.909
[info]   CI (99.9%): [1178.492, 1393.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.128 ±(99.9%) 1056.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.128, 666.314), stdev = 274.481
[info]   CI (99.9%): [≈ 0, 1528.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1500.510 ±(99.9%) 3358.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1500.510, 2123.358), stdev = 872.091
[info]   CI (99.9%): [≈ 0, 4858.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267468.076 ops/s
[info] # Warmup Iteration   2: 624486.054 ops/s
[info] # Warmup Iteration   3: 626399.562 ops/s
[info] # Warmup Iteration   4: 636583.334 ops/s
[info] # Warmup Iteration   5: 631471.189 ops/s
[info] Iteration   1: 625021.021 ops/s
[info]                  ·gc.alloc.rate:                   352.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              886.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1288.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 606868.734 ops/s
[info]                  ·gc.alloc.rate:      328.807 MB/sec
[info]                  ·gc.alloc.rate.norm: 852.719 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 626509.199 ops/s
[info]                  ·gc.alloc.rate:               348.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1285.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 633145.046 ops/s
[info]                  ·gc.alloc.rate:      341.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 632464.353 ops/s
[info]                  ·gc.alloc.rate:               360.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          897.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1669.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   624801.671 ±(99.9%) 40972.850 ops/s [Average]
[info]   (min, avg, max) = (606868.734, 624801.671, 633145.046), stdev = 10640.519
[info]   CI (99.9%): [583828.821, 665774.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   346.267 ±(99.9%) 46.388 MB/sec [Average]
[info]   (min, avg, max) = (328.807, 346.267, 360.734), stdev = 12.047
[info]   CI (99.9%): [299.879, 392.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   872.056 ±(99.9%) 82.258 B/op [Average]
[info]   (min, avg, max) = (848.001, 872.056, 897.425), stdev = 21.362
[info]   CI (99.9%): [789.799, 954.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.856 ±(99.9%) 1217.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.856, 671.015), stdev = 316.101
[info]   CI (99.9%): [≈ 0, 1556.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   848.563 ±(99.9%) 3042.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 848.563, 1669.335), stdev = 790.219
[info]   CI (99.9%): [≈ 0, 3891.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372311.729 ops/s
[info] # Warmup Iteration   2: 671192.497 ops/s
[info] # Warmup Iteration   3: 682256.898 ops/s
[info] # Warmup Iteration   4: 690447.973 ops/s
[info] # Warmup Iteration   5: 685852.192 ops/s
[info] Iteration   1: 683397.038 ops/s
[info]                  ·gc.alloc.rate:      6.949 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 683382.781 ops/s
[info]                  ·gc.alloc.rate:      6.949 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 686903.188 ops/s
[info]                  ·gc.alloc.rate:      6.984 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 687303.604 ops/s
[info]                  ·gc.alloc.rate:      6.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 685006.107 ops/s
[info]                  ·gc.alloc.rate:      6.964 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   685198.544 ±(99.9%) 7182.390 ops/s [Average]
[info]   (min, avg, max) = (683382.781, 685198.544, 687303.604), stdev = 1865.244
[info]   CI (99.9%): [678016.153, 692380.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.967 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (6.949, 6.967, 6.988), stdev = 0.019
[info]   CI (99.9%): [6.895, 7.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6758.345 ops/s
[info] # Warmup Iteration   2: 31871.301 ops/s
[info] # Warmup Iteration   3: 34060.519 ops/s
[info] # Warmup Iteration   4: 34633.958 ops/s
[info] # Warmup Iteration   5: 34045.347 ops/s
[info] Iteration   1: 34943.517 ops/s
[info]                  ·gc.alloc.rate:                   1888.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              85063.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90606.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.938 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 34199.929 ops/s
[info]                  ·gc.alloc.rate:                   1872.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              86116.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92574.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 35260.341 ops/s
[info]                  ·gc.alloc.rate:                   1925.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              85935.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89591.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35415.963 ops/s
[info]                  ·gc.alloc.rate:               1908.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          84772.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59380.726 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 35428.820 ops/s
[info]                  ·gc.alloc.rate:                   1935.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              85946.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89109.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35049.714 ±(99.9%) 1978.155 ops/s [Average]
[info]   (min, avg, max) = (34199.929, 35049.714, 35428.820), stdev = 513.721
[info]   CI (99.9%): [33071.559, 37027.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1905.860 ±(99.9%) 99.486 MB/sec [Average]
[info]   (min, avg, max) = (1872.150, 1905.860, 1935.110), stdev = 25.836
[info]   CI (99.9%): [1806.374, 2005.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85567.216 ±(99.9%) 2331.827 B/op [Average]
[info]   (min, avg, max) = (84772.654, 85567.216, 86116.953), stdev = 605.568
[info]   CI (99.9%): [83235.389, 87899.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.869 ±(99.9%) 1158.817 MB/sec [Average]
[info]   (min, avg, max) = (1336.552, 1874.869, 2012.537), stdev = 300.941
[info]   CI (99.9%): [716.053, 3033.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84252.682 ±(99.9%) 53782.938 B/op [Average]
[info]   (min, avg, max) = (59380.726, 84252.682, 92574.605), stdev = 13967.258
[info]   CI (99.9%): [30469.744, 138035.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.894), stdev = 1.712
[info]   CI (99.9%): [≈ 0, 7.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38.239 ±(99.9%) 303.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.239, 179.133), stdev = 78.804
[info]   CI (99.9%): [≈ 0, 341.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55257.329 ops/s
[info] # Warmup Iteration   2: 614929.911 ops/s
[info] # Warmup Iteration   3: 823425.035 ops/s
[info] # Warmup Iteration   4: 825964.422 ops/s
[info] # Warmup Iteration   5: 843050.634 ops/s
[info] Iteration   1: 843716.006 ops/s
[info]                  ·gc.alloc.rate:                   2275.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              4245.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3756.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 857484.140 ops/s
[info]                  ·gc.alloc.rate:                   2297.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3683.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 848227.834 ops/s
[info]                  ·gc.alloc.rate:               2273.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          4218.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4958.899 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 836093.537 ops/s
[info]                  ·gc.alloc.rate:               2256.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          4246.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3775.659 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 835761.597 ops/s
[info]                  ·gc.alloc.rate:               2255.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          4246.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3785.031 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   844256.623 ±(99.9%) 34966.276 ops/s [Average]
[info]   (min, avg, max) = (835761.597, 844256.623, 857484.140), stdev = 9080.631
[info]   CI (99.9%): [809290.347, 879222.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2271.764 ±(99.9%) 66.880 MB/sec [Average]
[info]   (min, avg, max) = (2255.699, 2271.764, 2297.872), stdev = 17.368
[info]   CI (99.9%): [2204.885, 2338.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4234.389 ±(99.9%) 61.069 B/op [Average]
[info]   (min, avg, max) = (4215.716, 4234.389, 4246.716), stdev = 15.859
[info]   CI (99.9%): [4173.321, 4295.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2142.181 ±(99.9%) 1141.831 MB/sec [Average]
[info]   (min, avg, max) = (2006.080, 2142.181, 2672.605), stdev = 296.530
[info]   CI (99.9%): [1000.351, 3284.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3991.976 ±(99.9%) 2086.982 B/op [Average]
[info]   (min, avg, max) = (3683.826, 3991.976, 4958.899), stdev = 541.983
[info]   CI (99.9%): [1904.994, 6078.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.914), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.529 ±(99.9%) 12.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.529, 7.300), stdev = 3.230
[info]   CI (99.9%): [≈ 0, 13.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65935.194 ops/s
[info] # Warmup Iteration   2: 1688422.967 ops/s
[info] # Warmup Iteration   3: 1744278.905 ops/s
[info] # Warmup Iteration   4: 1848548.850 ops/s
[info] # Warmup Iteration   5: 1840278.143 ops/s
[info] Iteration   1: 1853511.743 ops/s
[info]                  ·gc.alloc.rate:               1236.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          1049.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1132.968 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1861148.915 ops/s
[info]                  ·gc.alloc.rate:                   1232.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              1042.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1839700.282 ops/s
[info]                  ·gc.alloc.rate:                   1228.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1050.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1142.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1874524.058 ops/s
[info]                  ·gc.alloc.rate:               1235.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          1037.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 560.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1859146.683 ops/s
[info]                  ·gc.alloc.rate:                   1227.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              1039.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1857606.336 ±(99.9%) 48651.035 ops/s [Average]
[info]   (min, avg, max) = (1839700.282, 1857606.336, 1874524.058), stdev = 12634.519
[info]   CI (99.9%): [1808955.301, 1906257.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1231.806 ±(99.9%) 15.158 MB/sec [Average]
[info]   (min, avg, max) = (1227.306, 1231.806, 1236.053), stdev = 3.937
[info]   CI (99.9%): [1216.647, 1246.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1043.691 ±(99.9%) 23.906 B/op [Average]
[info]   (min, avg, max) = (1037.003, 1043.691, 1050.762), stdev = 6.208
[info]   CI (99.9%): [1019.785, 1067.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.232 ±(99.9%) 1149.710 MB/sec [Average]
[info]   (min, avg, max) = (668.128, 1202.232, 1337.520), stdev = 298.576
[info]   CI (99.9%): [52.522, 2351.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1019.668 ±(99.9%) 987.591 B/op [Average]
[info]   (min, avg, max) = (560.966, 1019.668, 1142.911), stdev = 256.474
[info]   CI (99.9%): [32.077, 2007.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 7.505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 4.371), stdev = 1.949
[info]   CI (99.9%): [≈ 0, 8.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.749 ±(99.9%) 6.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.701), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2720272.789 ops/s
[info] # Warmup Iteration   2: 8342937.304 ops/s
[info] # Warmup Iteration   3: 8550926.349 ops/s
[info] # Warmup Iteration   4: 8498211.631 ops/s
[info] # Warmup Iteration   5: 8306984.284 ops/s
[info] Iteration   1: 8534475.016 ops/s
[info]                  ·gc.alloc.rate:               277.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 8556900.356 ops/s
[info]                  ·gc.alloc.rate:      261.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8530429.286 ops/s
[info]                  ·gc.alloc.rate:               278.651 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 8587231.035 ops/s
[info]                  ·gc.alloc.rate:      261.946 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8551707.301 ops/s
[info]                  ·gc.alloc.rate:               271.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8552148.599 ±(99.9%) 86909.370 ops/s [Average]
[info]   (min, avg, max) = (8530429.286, 8552148.599, 8587231.035), stdev = 22570.088
[info]   CI (99.9%): [8465239.228, 8639057.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   270.093 ±(99.9%) 31.790 MB/sec [Average]
[info]   (min, avg, max) = (261.082, 270.093, 278.651), stdev = 8.256
[info]   CI (99.9%): [238.304, 301.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.703 ±(99.9%) 6.297 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.703, 51.411), stdev = 1.635
[info]   CI (99.9%): [43.407, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.992 ±(99.9%) 1079.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.992, 511.797), stdev = 280.244
[info]   CI (99.9%): [≈ 0, 1386.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   56.577 ±(99.9%) 198.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.577, 94.390), stdev = 51.648
[info]   CI (99.9%): [≈ 0, 255.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3735.466 ops/s
[info] # Warmup Iteration   2: 220980.161 ops/s
[info] # Warmup Iteration   3: 347853.479 ops/s
[info] # Warmup Iteration   4: 359595.633 ops/s
[info] # Warmup Iteration   5: 359738.428 ops/s
[info] Iteration   1: 350938.130 ops/s
[info]                  ·gc.alloc.rate:                   2360.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9019.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 360123.946 ops/s
[info]                  ·gc.alloc.rate:                   2445.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              10687.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11729.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 359104.059 ops/s
[info]                  ·gc.alloc.rate:               2426.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          10628.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8831.779 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 355662.075 ops/s
[info]                  ·gc.alloc.rate:               2443.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          10811.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11915.067 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 354296.314 ops/s
[info]                  ·gc.alloc.rate:               2407.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          10696.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8991.210 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   356024.905 ±(99.9%) 14314.646 ops/s [Average]
[info]   (min, avg, max) = (350938.130, 356024.905, 360123.946), stdev = 3717.468
[info]   CI (99.9%): [341710.259, 370339.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2416.636 ±(99.9%) 134.736 MB/sec [Average]
[info]   (min, avg, max) = (2360.223, 2416.636, 2445.633), stdev = 34.990
[info]   CI (99.9%): [2281.900, 2551.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10682.003 ±(99.9%) 329.407 B/op [Average]
[info]   (min, avg, max) = (10584.917, 10682.003, 10811.565), stdev = 85.546
[info]   CI (99.9%): [10352.597, 11011.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.564 ±(99.9%) 1415.964 MB/sec [Average]
[info]   (min, avg, max) = (2011.192, 2285.564, 2692.603), stdev = 367.721
[info]   CI (99.9%): [869.601, 3701.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10097.522 ±(99.9%) 6075.042 B/op [Average]
[info]   (min, avg, max) = (8831.779, 10097.522, 11915.067), stdev = 1577.669
[info]   CI (99.9%): [4022.480, 16172.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.624), stdev = 0.722
[info]   CI (99.9%): [≈ 0, 3.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.493 ±(99.9%) 12.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.493, 7.282), stdev = 3.237
[info]   CI (99.9%): [≈ 0, 13.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72839.162 ops/s
[info] # Warmup Iteration   2: 1047101.834 ops/s
[info] # Warmup Iteration   3: 1082266.265 ops/s
[info] # Warmup Iteration   4: 1089632.751 ops/s
[info] # Warmup Iteration   5: 1104432.910 ops/s
[info] Iteration   1: 1108682.693 ops/s
[info]                  ·gc.alloc.rate:                   1786.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1902.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1103186.156 ops/s
[info]                  ·gc.alloc.rate:                   1812.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              2586.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2870.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1084220.960 ops/s
[info]                  ·gc.alloc.rate:                   1771.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              2570.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2910.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1079227.431 ops/s
[info]                  ·gc.alloc.rate:               1751.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          2554.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1946.892 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1079779.704 ops/s
[info]                  ·gc.alloc.rate:               1777.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          2590.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2920.765 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1091019.389 ±(99.9%) 53481.756 ops/s [Average]
[info]   (min, avg, max) = (1079227.431, 1091019.389, 1108682.693), stdev = 13889.042
[info]   CI (99.9%): [1037537.633, 1144501.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1779.916 ±(99.9%) 86.537 MB/sec [Average]
[info]   (min, avg, max) = (1751.433, 1779.916, 1812.917), stdev = 22.473
[info]   CI (99.9%): [1693.380, 1866.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2567.495 ±(99.9%) 86.817 B/op [Average]
[info]   (min, avg, max) = (2536.245, 2567.495, 2590.063), stdev = 22.546
[info]   CI (99.9%): [2480.678, 2654.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1739.320 ±(99.9%) 1412.722 MB/sec [Average]
[info]   (min, avg, max) = (1335.048, 1739.320, 2011.723), stdev = 366.879
[info]   CI (99.9%): [326.598, 3152.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2510.110 ±(99.9%) 2060.740 B/op [Average]
[info]   (min, avg, max) = (1902.088, 2510.110, 2920.765), stdev = 535.168
[info]   CI (99.9%): [449.370, 4570.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 7.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.101), stdev = 1.823
[info]   CI (99.9%): [≈ 0, 7.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.200 ±(99.9%) 10.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.200, 5.851), stdev = 2.600
[info]   CI (99.9%): [≈ 0, 11.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266784.385 ops/s
[info] # Warmup Iteration   2: 2555554.255 ops/s
[info] # Warmup Iteration   3: 2630867.782 ops/s
[info] # Warmup Iteration   4: 2669314.292 ops/s
[info] # Warmup Iteration   5: 2653923.684 ops/s
[info] Iteration   1: 2739492.073 ops/s
[info]                  ·gc.alloc.rate:                   1210.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2769813.734 ops/s
[info]                  ·gc.alloc.rate:                   1226.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2702622.441 ops/s
[info]                  ·gc.alloc.rate:               1176.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          685.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 389.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2684907.064 ops/s
[info]                  ·gc.alloc.rate:                   1186.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2707467.828 ops/s
[info]                  ·gc.alloc.rate:                   1196.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2720860.628 ±(99.9%) 129844.299 ops/s [Average]
[info]   (min, avg, max) = (2684907.064, 2720860.628, 2769813.734), stdev = 33720.152
[info]   CI (99.9%): [2591016.329, 2850704.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1199.203 ±(99.9%) 75.902 MB/sec [Average]
[info]   (min, avg, max) = (1176.477, 1199.203, 1226.220), stdev = 19.712
[info]   CI (99.9%): [1123.301, 1275.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   693.667 ±(99.9%) 18.485 B/op [Average]
[info]   (min, avg, max) = (685.137, 693.667, 696.733), stdev = 4.801
[info]   CI (99.9%): [675.182, 712.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.965 ±(99.9%) 1152.010 MB/sec [Average]
[info]   (min, avg, max) = (668.794, 1203.965, 1339.590), stdev = 299.173
[info]   CI (99.9%): [51.955, 2355.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   696.018 ±(99.9%) 660.920 B/op [Average]
[info]   (min, avg, max) = (389.481, 696.018, 784.887), stdev = 171.639
[info]   CI (99.9%): [35.098, 1356.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.934), stdev = 1.753
[info]   CI (99.9%): [≈ 0, 7.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.465 ±(99.9%) 3.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.287), stdev = 1.019
[info]   CI (99.9%): [≈ 0, 4.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 935928.276 ops/s
[info] # Warmup Iteration   2: 5917367.653 ops/s
[info] # Warmup Iteration   3: 6322477.071 ops/s
[info] # Warmup Iteration   4: 6337494.351 ops/s
[info] # Warmup Iteration   5: 6142813.875 ops/s
[info] Iteration   1: 6263331.750 ops/s
[info]                  ·gc.alloc.rate:               717.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168.402 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6147598.290 ops/s
[info]                  ·gc.alloc.rate:                   717.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              183.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6301753.118 ops/s
[info]                  ·gc.alloc.rate:               725.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6442754.394 ops/s
[info]                  ·gc.alloc.rate:               739.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6456739.912 ops/s
[info]                  ·gc.alloc.rate:               738.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6322435.493 ±(99.9%) 498369.788 ops/s [Average]
[info]   (min, avg, max) = (6147598.290, 6322435.493, 6456739.912), stdev = 129425.051
[info]   CI (99.9%): [5824065.705, 6820805.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   727.763 ±(99.9%) 41.217 MB/sec [Average]
[info]   (min, avg, max) = (717.697, 727.763, 739.169), stdev = 10.704
[info]   CI (99.9%): [686.546, 768.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181.178 ±(99.9%) 5.759 B/op [Average]
[info]   (min, avg, max) = (180.093, 181.178, 183.762), stdev = 1.496
[info]   CI (99.9%): [175.419, 186.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.022 ±(99.9%) 1153.994 MB/sec [Average]
[info]   (min, avg, max) = (670.159, 805.022, 1341.120), stdev = 299.688
[info]   CI (99.9%): [≈ 0, 1959.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   201.392 ±(99.9%) 305.617 B/op [Average]
[info]   (min, avg, max) = (163.673, 201.392, 343.320), stdev = 79.368
[info]   CI (99.9%): [≈ 0, 507.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1067413.007 ops/s
[info] # Warmup Iteration   2: 6574622.081 ops/s
[info] # Warmup Iteration   3: 6791634.596 ops/s
[info] # Warmup Iteration   4: 6797115.141 ops/s
[info] # Warmup Iteration   5: 6849218.783 ops/s
[info] Iteration   1: 6825349.317 ops/s
[info]                  ·gc.alloc.rate:               435.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6837679.456 ops/s
[info]                  ·gc.alloc.rate:               430.330 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6858938.508 ops/s
[info]                  ·gc.alloc.rate:      418.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6826311.698 ops/s
[info]                  ·gc.alloc.rate:                   436.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6850132.031 ops/s
[info]                  ·gc.alloc.rate:      430.910 MB/sec
[info]                  ·gc.alloc.rate.norm: 99.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6839682.202 ±(99.9%) 56730.625 ops/s [Average]
[info]   (min, avg, max) = (6825349.317, 6839682.202, 6858938.508), stdev = 14732.763
[info]   CI (99.9%): [6782951.577, 6896412.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   430.301 ±(99.9%) 27.647 MB/sec [Average]
[info]   (min, avg, max) = (418.385, 430.301, 436.281), stdev = 7.180
[info]   CI (99.9%): [402.654, 457.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   99.019 ±(99.9%) 7.106 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.019, 100.591), stdev = 1.845
[info]   CI (99.9%): [91.913, 106.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.509 ±(99.9%) 1326.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.509, 670.489), stdev = 344.391
[info]   CI (99.9%): [≈ 0, 1696.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   85.376 ±(99.9%) 305.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85.376, 154.586), stdev = 79.348
[info]   CI (99.9%): [≈ 0, 390.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 5.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.998), stdev = 1.341
[info]   CI (99.9%): [≈ 0, 5.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.138 ±(99.9%) 1.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.691), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10914.169 ops/s
[info] # Warmup Iteration   2: 314298.338 ops/s
[info] # Warmup Iteration   3: 424680.799 ops/s
[info] # Warmup Iteration   4: 423747.812 ops/s
[info] # Warmup Iteration   5: 419896.363 ops/s
[info] Iteration   1: 432964.010 ops/s
[info]                  ·gc.alloc.rate:                   2409.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              8759.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7286.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 424609.246 ops/s
[info]                  ·gc.alloc.rate:                   2375.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              8805.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7404.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 430257.623 ops/s
[info]                  ·gc.alloc.rate:                   2397.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              8769.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9737.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 421933.662 ops/s
[info]                  ·gc.alloc.rate:               2349.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          8765.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7462.034 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 420299.798 ops/s
[info]                  ·gc.alloc.rate:               2381.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          8918.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10014.341 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   426012.868 ±(99.9%) 20877.590 ops/s [Average]
[info]   (min, avg, max) = (420299.798, 426012.868, 432964.010), stdev = 5421.844
[info]   CI (99.9%): [405135.278, 446890.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2382.913 ±(99.9%) 87.687 MB/sec [Average]
[info]   (min, avg, max) = (2349.866, 2382.913, 2409.852), stdev = 22.772
[info]   CI (99.9%): [2295.226, 2470.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8803.829 ±(99.9%) 256.054 B/op [Average]
[info]   (min, avg, max) = (8759.984, 8803.829, 8918.391), stdev = 66.496
[info]   CI (99.9%): [8547.776, 9059.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2267.798 ±(99.9%) 1407.274 MB/sec [Average]
[info]   (min, avg, max) = (1998.042, 2267.798, 2674.254), stdev = 365.465
[info]   CI (99.9%): [860.524, 3675.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8380.978 ±(99.9%) 5273.967 B/op [Average]
[info]   (min, avg, max) = (7286.099, 8380.978, 10014.341), stdev = 1369.633
[info]   CI (99.9%): [3107.011, 13654.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.974 ±(99.9%) 8.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.974, 4.767), stdev = 2.121
[info]   CI (99.9%): [≈ 0, 9.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.542 ±(99.9%) 29.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.542, 17.328), stdev = 7.708
[info]   CI (99.9%): [≈ 0, 33.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22244.774 ops/s
[info] # Warmup Iteration   2: 73747.047 ops/s
[info] # Warmup Iteration   3: 74035.741 ops/s
[info] # Warmup Iteration   4: 79329.444 ops/s
[info] # Warmup Iteration   5: 79211.208 ops/s
[info] Iteration   1: 78589.144 ops/s
[info]                  ·gc.alloc.rate:                   2193.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              43917.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40342.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 80359.232 ops/s
[info]                  ·gc.alloc.rate:                   2253.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              44143.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39348.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 79153.774 ops/s
[info]                  ·gc.alloc.rate:                   2195.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              43650.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39902.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 80490.860 ops/s
[info]                  ·gc.alloc.rate:               2273.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          44423.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52307.201 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 81047.309 ops/s
[info]                  ·gc.alloc.rate:               2274.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          44154.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39099.422 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   79928.064 ±(99.9%) 3921.039 ops/s [Average]
[info]   (min, avg, max) = (78589.144, 79928.064, 81047.309), stdev = 1018.281
[info]   CI (99.9%): [76007.025, 83849.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2237.967 ±(99.9%) 156.564 MB/sec [Average]
[info]   (min, avg, max) = (2193.279, 2237.967, 2274.122), stdev = 40.659
[info]   CI (99.9%): [2081.403, 2394.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44058.028 ±(99.9%) 1116.706 B/op [Average]
[info]   (min, avg, max) = (43650.264, 44058.028, 44423.651), stdev = 290.005
[info]   CI (99.9%): [42941.322, 45174.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2144.192 ±(99.9%) 1145.983 MB/sec [Average]
[info]   (min, avg, max) = (2006.857, 2144.192, 2676.537), stdev = 297.608
[info]   CI (99.9%): [998.209, 3290.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42199.910 ±(99.9%) 21836.195 B/op [Average]
[info]   (min, avg, max) = (39099.422, 42199.910, 52307.201), stdev = 5670.791
[info]   CI (99.9%): [20363.715, 64036.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.685), stdev = 1.631
[info]   CI (99.9%): [≈ 0, 7.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.412 ±(99.9%) 125.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.412, 73.791), stdev = 32.656
[info]   CI (99.9%): [≈ 0, 141.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20455.099 ops/s
[info] # Warmup Iteration   2: 115408.989 ops/s
[info] # Warmup Iteration   3: 123755.772 ops/s
[info] # Warmup Iteration   4: 126170.705 ops/s
[info] # Warmup Iteration   5: 126401.788 ops/s
[info] Iteration   1: 124155.716 ops/s
[info]                  ·gc.alloc.rate:                   1956.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              24799.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25438.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.764 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 125808.180 ops/s
[info]                  ·gc.alloc.rate:                   1980.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              24775.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25071.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 124715.312 ops/s
[info]                  ·gc.alloc.rate:                   1973.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              24909.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25219.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 127691.394 ops/s
[info]                  ·gc.alloc.rate:               2021.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          24913.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24631.228 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 127020.913 ops/s
[info]                  ·gc.alloc.rate:               2024.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          25091.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24806.328 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   125878.303 ±(99.9%) 5749.473 ops/s [Average]
[info]   (min, avg, max) = (124155.716, 125878.303, 127691.394), stdev = 1493.120
[info]   CI (99.9%): [120128.830, 131627.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1991.419 ±(99.9%) 116.519 MB/sec [Average]
[info]   (min, avg, max) = (1956.465, 1991.419, 2024.966), stdev = 30.260
[info]   CI (99.9%): [1874.900, 2107.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24897.862 ±(99.9%) 482.182 B/op [Average]
[info]   (min, avg, max) = (24775.115, 24897.862, 25091.798), stdev = 125.221
[info]   CI (99.9%): [24415.680, 25380.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2001.970 ±(99.9%) 14.173 MB/sec [Average]
[info]   (min, avg, max) = (1998.385, 2001.970, 2006.913), stdev = 3.681
[info]   CI (99.9%): [1987.797, 2016.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25033.458 ±(99.9%) 1238.608 B/op [Average]
[info]   (min, avg, max) = (24631.228, 25033.458, 25438.986), stdev = 321.662
[info]   CI (99.9%): [23794.850, 26272.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 6.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 3.768), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 7.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.691 ±(99.9%) 79.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.691, 47.764), stdev = 20.541
[info]   CI (99.9%): [≈ 0, 90.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53876.110 ops/s
[info] # Warmup Iteration   2: 170389.315 ops/s
[info] # Warmup Iteration   3: 177124.755 ops/s
[info] # Warmup Iteration   4: 177979.388 ops/s
[info] # Warmup Iteration   5: 174231.264 ops/s
[info] Iteration   1: 179513.736 ops/s
[info]                  ·gc.alloc.rate:                   2717.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              23828.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23531.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 179987.742 ops/s
[info]                  ·gc.alloc.rate:                   2722.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              23807.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23470.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.638 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 178107.837 ops/s
[info]                  ·gc.alloc.rate:                   2696.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              23827.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17811.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 172895.483 ops/s
[info]                  ·gc.alloc.rate:                   2646.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              24094.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24510.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 179147.696 ops/s
[info]                  ·gc.alloc.rate:                   2739.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              24066.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23713.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   177930.499 ±(99.9%) 11160.772 ops/s [Average]
[info]   (min, avg, max) = (172895.483, 177930.499, 179987.742), stdev = 2898.417
[info]   CI (99.9%): [166769.727, 189091.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2704.836 ±(99.9%) 138.341 MB/sec [Average]
[info]   (min, avg, max) = (2646.838, 2704.836, 2739.927), stdev = 35.927
[info]   CI (99.9%): [2566.495, 2843.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23924.645 ±(99.9%) 549.182 B/op [Average]
[info]   (min, avg, max) = (23807.357, 23924.645, 24094.302), stdev = 142.621
[info]   CI (99.9%): [23375.463, 24473.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2555.325 ±(99.9%) 1161.656 MB/sec [Average]
[info]   (min, avg, max) = (2015.791, 2555.325, 2699.784), stdev = 301.678
[info]   CI (99.9%): [1393.669, 3716.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22607.576 ±(99.9%) 10446.473 B/op [Average]
[info]   (min, avg, max) = (17811.983, 22607.576, 24510.292), stdev = 2712.916
[info]   CI (99.9%): [12161.103, 33054.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.187), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 2.339 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.586, 1.638), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 2.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8505.812 ops/s
[info] # Warmup Iteration   2: 51783.680 ops/s
[info] # Warmup Iteration   3: 55270.079 ops/s
[info] # Warmup Iteration   4: 58993.689 ops/s
[info] # Warmup Iteration   5: 60291.528 ops/s
[info] Iteration   1: 59691.252 ops/s
[info]                  ·gc.alloc.rate:                   2999.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              79084.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70326.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.647 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 60826.674 ops/s
[info]                  ·gc.alloc.rate:                   3083.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              79768.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86347.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.771 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 60800.287 ops/s
[info]                  ·gc.alloc.rate:               3081.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          79774.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69321.068 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 61145.340 ops/s
[info]                  ·gc.alloc.rate:               3099.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          79775.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69160.338 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 59221.611 ops/s
[info]                  ·gc.alloc.rate:               3032.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          80596.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89552.738 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   60337.033 ±(99.9%) 3203.745 ops/s [Average]
[info]   (min, avg, max) = (59221.611, 60337.033, 61145.340), stdev = 832.002
[info]   CI (99.9%): [57133.288, 63540.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3059.410 ±(99.9%) 160.120 MB/sec [Average]
[info]   (min, avg, max) = (2999.790, 3059.410, 3099.052), stdev = 41.583
[info]   CI (99.9%): [2899.290, 3219.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79799.915 ±(99.9%) 2063.567 B/op [Average]
[info]   (min, avg, max) = (79084.710, 79799.915, 80596.779), stdev = 535.902
[info]   CI (99.9%): [77736.348, 81863.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2947.994 ±(99.9%) 1427.557 MB/sec [Average]
[info]   (min, avg, max) = (2667.583, 2947.994, 3369.854), stdev = 370.732
[info]   CI (99.9%): [1520.437, 4375.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76941.576 ±(99.9%) 38979.262 B/op [Average]
[info]   (min, avg, max) = (69160.338, 76941.576, 89552.738), stdev = 10122.791
[info]   CI (99.9%): [37962.314, 115920.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.083 ±(99.9%) 6.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.083, 3.771), stdev = 1.663
[info]   CI (99.9%): [≈ 0, 7.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65407.920 ops/s
[info] # Warmup Iteration   2: 170507.405 ops/s
[info] # Warmup Iteration   3: 183121.815 ops/s
[info] # Warmup Iteration   4: 185988.904 ops/s
[info] # Warmup Iteration   5: 185194.616 ops/s
[info] Iteration   1: 185468.058 ops/s
[info]                  ·gc.alloc.rate:               1308.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          11104.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11373.111 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 184724.561 ops/s
[info]                  ·gc.alloc.rate:               1307.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          11141.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11430.694 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 184687.984 ops/s
[info]                  ·gc.alloc.rate:                   1307.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              11144.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11437.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 184469.478 ops/s
[info]                  ·gc.alloc.rate:                   1319.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              11255.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11457.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 187486.229 ops/s
[info]                  ·gc.alloc.rate:                   1327.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              11144.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11239.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.874 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   185367.262 ±(99.9%) 4786.538 ops/s [Average]
[info]   (min, avg, max) = (184469.478, 185367.262, 187486.229), stdev = 1243.049
[info]   CI (99.9%): [180580.724, 190153.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1314.346 ±(99.9%) 35.163 MB/sec [Average]
[info]   (min, avg, max) = (1307.576, 1314.346, 1327.866), stdev = 9.132
[info]   CI (99.9%): [1279.183, 1349.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11158.256 ±(99.9%) 219.428 B/op [Average]
[info]   (min, avg, max) = (11104.718, 11158.256, 11255.598), stdev = 56.985
[info]   CI (99.9%): [10938.828, 11377.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.348 ±(99.9%) 6.599 MB/sec [Average]
[info]   (min, avg, max) = (1339.168, 1341.348, 1343.538), stdev = 1.714
[info]   CI (99.9%): [1334.749, 1347.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11387.859 ±(99.9%) 341.063 B/op [Average]
[info]   (min, avg, max) = (11239.776, 11387.859, 11457.859), stdev = 88.573
[info]   CI (99.9%): [11046.796, 11728.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 6.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.624), stdev = 1.607
[info]   CI (99.9%): [≈ 0, 6.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.391 ±(99.9%) 52.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.391, 30.904), stdev = 13.708
[info]   CI (99.9%): [≈ 0, 59.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85276.120 ops/s
[info] # Warmup Iteration   2: 421486.227 ops/s
[info] # Warmup Iteration   3: 446692.502 ops/s
[info] # Warmup Iteration   4: 451288.194 ops/s
[info] # Warmup Iteration   5: 463873.619 ops/s
[info] Iteration   1: 455448.689 ops/s
[info]                  ·gc.alloc.rate:               418.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          1445.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1767.942 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 450352.269 ops/s
[info]                  ·gc.alloc.rate:               406.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          1420.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1787.909 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 464803.118 ops/s
[info]                  ·gc.alloc.rate:      401.638 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 459776.686 ops/s
[info]                  ·gc.alloc.rate:               422.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          1446.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2279.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 459486.098 ops/s
[info]                  ·gc.alloc.rate:               414.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          1420.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2280.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   457973.372 ±(99.9%) 20793.562 ops/s [Average]
[info]   (min, avg, max) = (450352.269, 457973.372, 464803.118), stdev = 5400.022
[info]   CI (99.9%): [437179.810, 478766.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   412.709 ±(99.9%) 32.995 MB/sec [Average]
[info]   (min, avg, max) = (401.638, 412.709, 422.472), stdev = 8.569
[info]   CI (99.9%): [379.715, 445.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1418.512 ±(99.9%) 135.154 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1418.512, 1446.165), stdev = 35.099
[info]   CI (99.9%): [1283.358, 1553.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   470.964 ±(99.9%) 1056.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470.964, 665.808), stdev = 274.333
[info]   CI (99.9%): [≈ 0, 1527.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1623.125 ±(99.9%) 3625.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1623.125, 2280.644), stdev = 941.453
[info]   CI (99.9%): [≈ 0, 5248.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353180.195 ops/s
[info] # Warmup Iteration   2: 609285.680 ops/s
[info] # Warmup Iteration   3: 652976.193 ops/s
[info] # Warmup Iteration   4: 659764.521 ops/s
[info] # Warmup Iteration   5: 651744.984 ops/s
[info] Iteration   1: 647772.548 ops/s
[info]                  ·gc.alloc.rate:                   363.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              884.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 635271.200 ops/s
[info]                  ·gc.alloc.rate:               363.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1267.472 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 654920.053 ops/s
[info]                  ·gc.alloc.rate:      352.888 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 651577.145 ops/s
[info]                  ·gc.alloc.rate:               371.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          896.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1619.496 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 654621.311 ops/s
[info]                  ·gc.alloc.rate:      352.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   648832.452 ±(99.9%) 31231.432 ops/s [Average]
[info]   (min, avg, max) = (635271.200, 648832.452, 654920.053), stdev = 8110.704
[info]   CI (99.9%): [617601.019, 680063.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   360.902 ±(99.9%) 30.796 MB/sec [Average]
[info]   (min, avg, max) = (352.714, 360.902, 371.273), stdev = 7.998
[info]   CI (99.9%): [330.106, 391.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   875.627 ±(99.9%) 100.041 B/op [Average]
[info]   (min, avg, max) = (848.001, 875.627, 901.127), stdev = 25.980
[info]   CI (99.9%): [775.586, 975.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.727 ±(99.9%) 1216.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.727, 670.429), stdev = 315.939
[info]   CI (99.9%): [≈ 0, 1555.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   825.997 ±(99.9%) 2959.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 825.997, 1619.496), stdev = 768.601
[info]   CI (99.9%): [≈ 0, 3785.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342249.525 ops/s
[info] # Warmup Iteration   2: 683895.096 ops/s
[info] # Warmup Iteration   3: 699412.031 ops/s
[info] # Warmup Iteration   4: 699787.278 ops/s
[info] # Warmup Iteration   5: 700263.687 ops/s
[info] Iteration   1: 699776.372 ops/s
[info]                  ·gc.alloc.rate:      7.114 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 690004.355 ops/s
[info]                  ·gc.alloc.rate:      7.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.117 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 691082.772 ops/s
[info]                  ·gc.alloc.rate:      7.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 691810.799 ops/s
[info]                  ·gc.alloc.rate:      7.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 691854.912 ops/s
[info]                  ·gc.alloc.rate:      7.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   692905.842 ±(99.9%) 15068.024 ops/s [Average]
[info]   (min, avg, max) = (690004.355, 692905.842, 699776.372), stdev = 3913.118
[info]   CI (99.9%): [677837.818, 707973.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.143 ±(99.9%) 0.792 MB/sec [Average]
[info]   (min, avg, max) = (7.026, 7.143, 7.505), stdev = 0.206
[info]   CI (99.9%): [6.351, 7.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.224 ±(99.9%) 1.923 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.224, 17.117), stdev = 0.499
[info]   CI (99.9%): [14.301, 18.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5911.900 ops/s
[info] # Warmup Iteration   2: 31226.901 ops/s
[info] # Warmup Iteration   3: 34846.029 ops/s
[info] # Warmup Iteration   4: 34874.681 ops/s
[info] # Warmup Iteration   5: 34483.898 ops/s
[info] Iteration   1: 35460.239 ops/s
[info]                  ·gc.alloc.rate:                   1925.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              85442.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89261.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.924 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34718.057 ops/s
[info]                  ·gc.alloc.rate:                   1896.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              85971.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91138.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 35335.338 ops/s
[info]                  ·gc.alloc.rate:                   1929.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              85945.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89309.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34892.469 ops/s
[info]                  ·gc.alloc.rate:                   1907.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              86001.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90289.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34878.216 ops/s
[info]                  ·gc.alloc.rate:                   1893.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              85413.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60339.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35056.864 ±(99.9%) 1238.792 ops/s [Average]
[info]   (min, avg, max) = (34718.057, 35056.864, 35460.239), stdev = 321.710
[info]   CI (99.9%): [33818.071, 36295.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1910.502 ±(99.9%) 63.696 MB/sec [Average]
[info]   (min, avg, max) = (1893.251, 1910.502, 1929.673), stdev = 16.542
[info]   CI (99.9%): [1846.806, 1974.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85754.726 ±(99.9%) 1152.848 B/op [Average]
[info]   (min, avg, max) = (85413.305, 85754.726, 86001.306), stdev = 299.391
[info]   CI (99.9%): [84601.878, 86907.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1873.489 ±(99.9%) 1153.887 MB/sec [Average]
[info]   (min, avg, max) = (1337.479, 1873.489, 2011.537), stdev = 299.661
[info]   CI (99.9%): [719.602, 3027.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84067.810 ±(99.9%) 51163.287 B/op [Average]
[info]   (min, avg, max) = (60339.859, 84067.810, 91138.507), stdev = 13286.943
[info]   CI (99.9%): [32904.523, 135231.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.668 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.816, 3.914), stdev = 1.732
[info]   CI (99.9%): [≈ 0, 7.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.975 ±(99.9%) 302.330 B/op [Average]
[info]   (min, avg, max) = (0.924, 36.975, 177.415), stdev = 78.514
[info]   CI (99.9%): [≈ 0, 339.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1088418.879 ops/s
[info] # Warmup Iteration   2: 3389518.615 ops/s
[info] # Warmup Iteration   3: 3656315.591 ops/s
[info] # Warmup Iteration   4: 3712091.018 ops/s
[info] # Warmup Iteration   5: 3730018.851 ops/s
[info] Iteration   1: 3667716.303 ops/s
[info]                  ·gc.alloc.rate:                   2959.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1269.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1437.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3763059.252 ops/s
[info]                  ·gc.alloc.rate:                   3033.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3762175.335 ops/s
[info]                  ·gc.alloc.rate:                   3032.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1125.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3656446.246 ops/s
[info]                  ·gc.alloc.rate:                   2978.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1282.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1450.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3751160.969 ops/s
[info]                  ·gc.alloc.rate:               3025.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1134.771 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3720111.621 ±(99.9%) 205355.841 ops/s [Average]
[info]   (min, avg, max) = (3656446.246, 3720111.621, 3763059.252), stdev = 53330.260
[info]   CI (99.9%): [3514755.780, 3925467.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3005.951 ±(99.9%) 133.745 MB/sec [Average]
[info]   (min, avg, max) = (2959.186, 3005.951, 3033.831), stdev = 34.733
[info]   CI (99.9%): [2872.206, 3139.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1271.523 ±(99.9%) 22.621 B/op [Average]
[info]   (min, avg, max) = (1268.358, 1271.523, 1282.002), stdev = 5.874
[info]   CI (99.9%): [1248.902, 1294.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2960.418 ±(99.9%) 1409.589 MB/sec [Average]
[info]   (min, avg, max) = (2684.382, 2960.418, 3370.977), stdev = 366.066
[info]   CI (99.9%): [1550.829, 4370.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1254.211 ±(99.9%) 669.096 B/op [Average]
[info]   (min, avg, max) = (1122.263, 1254.211, 1450.983), stdev = 173.762
[info]   CI (99.9%): [585.115, 1923.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.801 ops/s
[info] # Warmup Iteration   2: 5539755.367 ops/s
[info] # Warmup Iteration   3: 5939060.969 ops/s
[info] # Warmup Iteration   4: 5942703.603 ops/s
[info] # Warmup Iteration   5: 5967746.850 ops/s
[info] Iteration   1: 5912654.938 ops/s
[info]                  ·gc.alloc.rate:               1137.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5841382.277 ops/s
[info]                  ·gc.alloc.rate:                   1133.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5844478.844 ops/s
[info]                  ·gc.alloc.rate:               1139.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359.690 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 5860137.612 ops/s
[info]                  ·gc.alloc.rate:                   1129.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5855394.593 ops/s
[info]                  ·gc.alloc.rate:                   1140.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   5862809.653 ±(99.9%) 111300.035 ops/s [Average]
[info]   (min, avg, max) = (5841382.277, 5862809.653, 5912654.938), stdev = 28904.266
[info]   CI (99.9%): [5751509.618, 5974109.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1135.967 ±(99.9%) 18.184 MB/sec [Average]
[info]   (min, avg, max) = (1129.156, 1135.967, 1140.378), stdev = 4.722
[info]   CI (99.9%): [1117.783, 1154.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.925 ±(99.9%) 6.931 B/op [Average]
[info]   (min, avg, max) = (302.895, 304.925, 306.783), stdev = 1.800
[info]   CI (99.9%): [297.994, 311.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1068.519 ±(99.9%) 1409.571 MB/sec [Average]
[info]   (min, avg, max) = (666.856, 1068.519, 1337.078), stdev = 366.061
[info]   CI (99.9%): [≈ 0, 2478.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   287.105 ±(99.9%) 381.863 B/op [Average]
[info]   (min, avg, max) = (177.498, 287.105, 359.690), stdev = 99.169
[info]   CI (99.9%): [≈ 0, 668.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.864 ±(99.9%) 7.407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.864, 4.305), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 8.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.232 ±(99.9%) 1.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.232, 1.157), stdev = 0.517
[info]   CI (99.9%): [≈ 0, 2.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1383210.327 ops/s
[info] # Warmup Iteration   2: 3735708.501 ops/s
[info] # Warmup Iteration   3: 4082861.299 ops/s
[info] # Warmup Iteration   4: 4027475.666 ops/s
[info] # Warmup Iteration   5: 4175223.727 ops/s
[info] Iteration   1: 4135812.797 ops/s
[info]                  ·gc.alloc.rate:                   2273.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              865.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4101712.102 ops/s
[info]                  ·gc.alloc.rate:                   2269.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              870.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1025.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4068110.664 ops/s
[info]                  ·gc.alloc.rate:                   2248.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              869.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4139733.520 ops/s
[info]                  ·gc.alloc.rate:               2290.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 763.187 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4021293.679 ops/s
[info]                  ·gc.alloc.rate:                   2226.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4093332.552 ±(99.9%) 191117.478 ops/s [Average]
[info]   (min, avg, max) = (4021293.679, 4093332.552, 4139733.520), stdev = 49632.602
[info]   CI (99.9%): [3902215.075, 4284450.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2261.526 ±(99.9%) 95.075 MB/sec [Average]
[info]   (min, avg, max) = (2226.272, 2261.526, 2290.299), stdev = 24.691
[info]   CI (99.9%): [2166.450, 2356.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   869.475 ±(99.9%) 9.554 B/op [Average]
[info]   (min, avg, max) = (865.140, 869.475, 871.356), stdev = 2.481
[info]   CI (99.9%): [859.922, 879.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2140.649 ±(99.9%) 1142.554 MB/sec [Average]
[info]   (min, avg, max) = (2003.804, 2140.649, 2671.414), stdev = 296.718
[info]   CI (99.9%): [998.095, 3283.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   822.982 ±(99.9%) 436.427 B/op [Average]
[info]   (min, avg, max) = (763.187, 822.982, 1025.004), stdev = 113.339
[info]   CI (99.9%): [386.555, 1259.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.851), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.300 ±(99.9%) 2.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.466), stdev = 0.652
[info]   CI (99.9%): [≈ 0, 2.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4429276.728 ops/s
[info] # Warmup Iteration   2: 6669627.596 ops/s
[info] # Warmup Iteration   3: 6690058.231 ops/s
[info] # Warmup Iteration   4: 6776378.071 ops/s
[info] # Warmup Iteration   5: 6837588.116 ops/s
[info] Iteration   1: 6896980.384 ops/s
[info]                  ·gc.alloc.rate:                   1327.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6744949.678 ops/s
[info]                  ·gc.alloc.rate:                   1308.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6712529.711 ops/s
[info]                  ·gc.alloc.rate:                   1303.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6902213.112 ops/s
[info]                  ·gc.alloc.rate:                   1337.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6892731.927 ops/s
[info]                  ·gc.alloc.rate:                   1322.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6829880.962 ±(99.9%) 358488.307 ops/s [Average]
[info]   (min, avg, max) = (6712529.711, 6829880.962, 6902213.112), stdev = 93098.275
[info]   CI (99.9%): [6471392.655, 7188369.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1320.045 ±(99.9%) 54.479 MB/sec [Average]
[info]   (min, avg, max) = (1303.131, 1320.045, 1337.871), stdev = 14.148
[info]   CI (99.9%): [1265.566, 1374.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.203 ±(99.9%) 6.011 B/op [Average]
[info]   (min, avg, max) = (302.107, 304.203, 305.530), stdev = 1.561
[info]   CI (99.9%): [298.192, 310.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.670 ±(99.9%) 1159.303 MB/sec [Average]
[info]   (min, avg, max) = (672.105, 1210.670, 1346.036), stdev = 301.067
[info]   CI (99.9%): [51.367, 2369.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   279.315 ±(99.9%) 271.319 B/op [Average]
[info]   (min, avg, max) = (153.477, 279.315, 315.590), stdev = 70.461
[info]   CI (99.9%): [7.997, 550.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.358 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.625, 2.623), stdev = 1.132
[info]   CI (99.9%): [≈ 0, 4.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 1.022 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.146, 0.615), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1100874.607 ops/s
[info] # Warmup Iteration   2: 4040447.879 ops/s
[info] # Warmup Iteration   3: 4260771.193 ops/s
[info] # Warmup Iteration   4: 4209833.115 ops/s
[info] # Warmup Iteration   5: 4285495.809 ops/s
[info] Iteration   1: 4327673.010 ops/s
[info]                  ·gc.alloc.rate:                   2463.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     972.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4278448.904 ops/s
[info]                  ·gc.alloc.rate:                   2435.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4318963.639 ops/s
[info]                  ·gc.alloc.rate:               2499.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          910.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 973.907 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4179181.947 ops/s
[info]                  ·gc.alloc.rate:               2395.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          902.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 756.748 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4264502.482 ops/s
[info]                  ·gc.alloc.rate:                   2469.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              911.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     991.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4273753.996 ±(99.9%) 227828.946 ops/s [Average]
[info]   (min, avg, max) = (4179181.947, 4273753.996, 4327673.010), stdev = 59166.454
[info]   CI (99.9%): [4045925.050, 4501582.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2452.591 ±(99.9%) 151.026 MB/sec [Average]
[info]   (min, avg, max) = (2395.355, 2452.591, 2499.435), stdev = 39.221
[info]   CI (99.9%): [2301.565, 2603.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   903.161 ±(99.9%) 29.168 B/op [Average]
[info]   (min, avg, max) = (895.778, 903.161, 911.187), stdev = 7.575
[info]   CI (99.9%): [873.993, 932.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2409.068 ±(99.9%) 1417.310 MB/sec [Average]
[info]   (min, avg, max) = (2002.455, 2409.068, 2687.138), stdev = 368.071
[info]   CI (99.9%): [991.758, 3826.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   886.228 ±(99.9%) 492.117 B/op [Average]
[info]   (min, avg, max) = (736.630, 886.228, 991.520), stdev = 127.801
[info]   CI (99.9%): [394.110, 1378.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.629 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.375), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.136), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1019314.275 ops/s
[info] # Warmup Iteration   2: 2101383.703 ops/s
[info] # Warmup Iteration   3: 2181482.344 ops/s
[info] # Warmup Iteration   4: 2174963.449 ops/s
[info] # Warmup Iteration   5: 2193845.532 ops/s
[info] Iteration   1: 2202751.475 ops/s
[info]                  ·gc.alloc.rate:               1303.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          930.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 478.826 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2155660.102 ops/s
[info]                  ·gc.alloc.rate:                   1288.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2190436.225 ops/s
[info]                  ·gc.alloc.rate:                   1321.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2195247.931 ops/s
[info]                  ·gc.alloc.rate:                   1312.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2193009.447 ops/s
[info]                  ·gc.alloc.rate:               1322.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          948.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 962.831 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2187421.036 ±(99.9%) 70619.206 ops/s [Average]
[info]   (min, avg, max) = (2155660.102, 2187421.036, 2202751.475), stdev = 18339.584
[info]   CI (99.9%): [2116801.830, 2258040.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1309.818 ±(99.9%) 53.996 MB/sec [Average]
[info]   (min, avg, max) = (1288.908, 1309.818, 1322.263), stdev = 14.023
[info]   CI (99.9%): [1255.822, 1363.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   942.368 ±(99.9%) 29.334 B/op [Average]
[info]   (min, avg, max) = (930.961, 942.368, 949.764), stdev = 7.618
[info]   CI (99.9%): [913.034, 971.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.029 ±(99.9%) 1157.352 MB/sec [Average]
[info]   (min, avg, max) = (670.371, 1208.029, 1343.613), stdev = 300.561
[info]   CI (99.9%): [50.676, 2365.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   869.878 ±(99.9%) 842.187 B/op [Average]
[info]   (min, avg, max) = (478.826, 869.878, 979.505), stdev = 218.713
[info]   CI (99.9%): [27.691, 1712.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.206), stdev = 1.425
[info]   CI (99.9%): [≈ 0, 6.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.472 ±(99.9%) 3.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.472, 2.298), stdev = 1.021
[info]   CI (99.9%): [≈ 0, 4.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.832 ops/s
[info] # Warmup Iteration   2: 5297290.685 ops/s
[info] # Warmup Iteration   3: 5521229.328 ops/s
[info] # Warmup Iteration   4: 5839610.029 ops/s
[info] # Warmup Iteration   5: 5947728.779 ops/s
[info] Iteration   1: 5949960.561 ops/s
[info]                  ·gc.alloc.rate:               589.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.854 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5912337.634 ops/s
[info]                  ·gc.alloc.rate:               594.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5912603.724 ops/s
[info]                  ·gc.alloc.rate:                   587.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5911901.770 ops/s
[info]                  ·gc.alloc.rate:               595.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5926596.343 ops/s
[info]                  ·gc.alloc.rate:               593.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5922680.006 ±(99.9%) 63396.408 ops/s [Average]
[info]   (min, avg, max) = (5911901.770, 5922680.006, 5949960.561), stdev = 16463.846
[info]   CI (99.9%): [5859283.598, 5986076.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   592.088 ±(99.9%) 13.990 MB/sec [Average]
[info]   (min, avg, max) = (587.157, 592.088, 595.898), stdev = 3.633
[info]   CI (99.9%): [578.097, 606.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.309 ±(99.9%) 4.477 B/op [Average]
[info]   (min, avg, max) = (155.940, 157.309, 158.579), stdev = 1.163
[info]   CI (99.9%): [152.832, 161.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.268 ±(99.9%) 1.919 MB/sec [Average]
[info]   (min, avg, max) = (664.809, 665.268, 666.061), stdev = 0.498
[info]   CI (99.9%): [663.349, 667.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   176.751 ±(99.9%) 1.975 B/op [Average]
[info]   (min, avg, max) = (175.854, 176.751, 177.074), stdev = 0.513
[info]   CI (99.9%): [174.776, 178.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1974729.989 ops/s
[info] # Warmup Iteration   2: 4393245.201 ops/s
[info] # Warmup Iteration   3: 4705707.936 ops/s
[info] # Warmup Iteration   4: 4757649.432 ops/s
[info] # Warmup Iteration   5: 4755547.085 ops/s
[info] Iteration   1: 4626112.300 ops/s
[info]                  ·gc.alloc.rate:                   1256.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     455.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4746812.510 ops/s
[info]                  ·gc.alloc.rate:                   1296.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4716833.103 ops/s
[info]                  ·gc.alloc.rate:               1300.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 447.236 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4660988.795 ops/s
[info]                  ·gc.alloc.rate:                   1285.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4642275.698 ops/s
[info]                  ·gc.alloc.rate:                   1267.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4678604.481 ±(99.9%) 197280.075 ops/s [Average]
[info]   (min, avg, max) = (4626112.300, 4678604.481, 4746812.510), stdev = 51233.009
[info]   CI (99.9%): [4481324.407, 4875884.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1281.065 ±(99.9%) 73.013 MB/sec [Average]
[info]   (min, avg, max) = (1256.001, 1281.065, 1300.335), stdev = 18.961
[info]   CI (99.9%): [1208.052, 1354.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   430.824 ±(99.9%) 11.350 B/op [Average]
[info]   (min, avg, max) = (427.115, 430.824, 433.852), stdev = 2.948
[info]   CI (99.9%): [419.474, 442.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.743 ±(99.9%) 6.557 MB/sec [Average]
[info]   (min, avg, max) = (1337.738, 1339.743, 1342.251), stdev = 1.703
[info]   CI (99.9%): [1333.186, 1346.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   450.609 ±(99.9%) 18.450 B/op [Average]
[info]   (min, avg, max) = (443.969, 450.609, 455.326), stdev = 4.792
[info]   CI (99.9%): [432.159, 469.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.541), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.256 ±(99.9%) 2.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.256, 1.195), stdev = 0.526
[info]   CI (99.9%): [≈ 0, 2.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3823662.412 ops/s
[info] # Warmup Iteration   2: 5602092.783 ops/s
[info] # Warmup Iteration   3: 6013105.689 ops/s
[info] # Warmup Iteration   4: 6034414.787 ops/s
[info] # Warmup Iteration   5: 6014315.335 ops/s
[info] Iteration   1: 5967013.297 ops/s
[info]                  ·gc.alloc.rate:               593.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.934 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5989254.984 ops/s
[info]                  ·gc.alloc.rate:               602.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.276 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6030796.727 ops/s
[info]                  ·gc.alloc.rate:                   610.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              159.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6043323.974 ops/s
[info]                  ·gc.alloc.rate:               607.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6067640.607 ops/s
[info]                  ·gc.alloc.rate:      586.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6019605.918 ±(99.9%) 157385.793 ops/s [Average]
[info]   (min, avg, max) = (5967013.297, 6019605.918, 6067640.607), stdev = 40872.591
[info]   CI (99.9%): [5862220.124, 6176991.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   600.003 ±(99.9%) 38.744 MB/sec [Average]
[info]   (min, avg, max) = (586.095, 600.003, 610.213), stdev = 10.062
[info]   CI (99.9%): [561.259, 638.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.842 ±(99.9%) 11.063 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.842, 159.235), stdev = 2.873
[info]   CI (99.9%): [145.779, 167.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.069 ±(99.9%) 1156.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.069, 671.790), stdev = 300.231
[info]   CI (99.9%): [≈ 0, 1693.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   140.665 ±(99.9%) 302.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.665, 176.934), stdev = 78.639
[info]   CI (99.9%): [≈ 0, 443.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3560710.338 ops/s
[info] # Warmup Iteration   2: 5916733.334 ops/s
[info] # Warmup Iteration   3: 6386175.365 ops/s
[info] # Warmup Iteration   4: 6460396.001 ops/s
[info] # Warmup Iteration   5: 6458335.605 ops/s
[info] Iteration   1: 6459375.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6449575.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6455553.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6455249.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6453047.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6454560.569 ±(99.9%) 13855.030 ops/s [Average]
[info]   (min, avg, max) = (6449575.478, 6454560.569, 6459375.604), stdev = 3598.107
[info]   CI (99.9%): [6440705.539, 6468415.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1135606.858 ops/s
[info] # Warmup Iteration   2: 4651787.889 ops/s
[info] # Warmup Iteration   3: 4509896.493 ops/s
[info] # Warmup Iteration   4: 4653039.804 ops/s
[info] # Warmup Iteration   5: 4662518.936 ops/s
[info] Iteration   1: 4652954.062 ops/s
[info]                  ·gc.alloc.rate:                   1309.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4535672.078 ops/s
[info]                  ·gc.alloc.rate:                   1287.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              446.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4534341.886 ops/s
[info]                  ·gc.alloc.rate:                   1280.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4554565.560 ops/s
[info]                  ·gc.alloc.rate:                   1288.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4561461.522 ops/s
[info]                  ·gc.alloc.rate:               1304.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 461.954 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4567799.022 ±(99.9%) 188820.889 ops/s [Average]
[info]   (min, avg, max) = (4534341.886, 4567799.022, 4652954.062), stdev = 49036.185
[info]   CI (99.9%): [4378978.133, 4756619.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1294.086 ±(99.9%) 47.060 MB/sec [Average]
[info]   (min, avg, max) = (1280.611, 1294.086, 1309.236), stdev = 12.221
[info]   CI (99.9%): [1247.026, 1341.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   445.818 ±(99.9%) 10.552 B/op [Average]
[info]   (min, avg, max) = (442.793, 445.818, 450.061), stdev = 2.740
[info]   CI (99.9%): [435.265, 456.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.768 ±(99.9%) 5.150 MB/sec [Average]
[info]   (min, avg, max) = (1339.107, 1340.768, 1342.279), stdev = 1.338
[info]   CI (99.9%): [1335.618, 1345.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   461.932 ±(99.9%) 19.748 B/op [Average]
[info]   (min, avg, max) = (453.119, 461.932, 465.674), stdev = 5.129
[info]   CI (99.9%): [442.183, 481.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.601), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 6.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.256 ±(99.9%) 2.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.256, 1.244), stdev = 0.553
[info]   CI (99.9%): [≈ 0, 2.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 6.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375298.133 ops/s
[info] # Warmup Iteration   2: 1446915.996 ops/s
[info] # Warmup Iteration   3: 1508887.413 ops/s
[info] # Warmup Iteration   4: 1539606.426 ops/s
[info] # Warmup Iteration   5: 1538067.717 ops/s
[info] Iteration   1: 1548803.807 ops/s
[info]                  ·gc.alloc.rate:                   2179.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              2215.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2050.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1534349.568 ops/s
[info]                  ·gc.alloc.rate:                   2208.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              2265.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2752.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1527994.459 ops/s
[info]                  ·gc.alloc.rate:                   2163.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              2227.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2071.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1552269.733 ops/s
[info]                  ·gc.alloc.rate:               2210.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          2240.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2040.009 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1534983.057 ops/s
[info]                  ·gc.alloc.rate:               2185.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          2241.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2066.557 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1539680.125 ±(99.9%) 39867.271 ops/s [Average]
[info]   (min, avg, max) = (1527994.459, 1539680.125, 1552269.733), stdev = 10353.404
[info]   CI (99.9%): [1499812.853, 1579547.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2189.549 ±(99.9%) 76.275 MB/sec [Average]
[info]   (min, avg, max) = (2163.452, 2189.549, 2210.225), stdev = 19.808
[info]   CI (99.9%): [2113.274, 2265.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2238.021 ±(99.9%) 71.652 B/op [Average]
[info]   (min, avg, max) = (2215.052, 2238.021, 2265.057), stdev = 18.608
[info]   CI (99.9%): [2166.369, 2309.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2148.003 ±(99.9%) 1152.312 MB/sec [Average]
[info]   (min, avg, max) = (2011.394, 2148.003, 2683.300), stdev = 299.252
[info]   CI (99.9%): [995.690, 3300.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2196.073 ±(99.9%) 1198.131 B/op [Average]
[info]   (min, avg, max) = (2040.009, 2196.073, 2752.229), stdev = 311.151
[info]   CI (99.9%): [997.942, 3394.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.702 ±(99.9%) 5.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.300), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.713 ±(99.9%) 5.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.353), stdev = 1.477
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.580 ops/s
[info] # Warmup Iteration   2: 2773344.883 ops/s
[info] # Warmup Iteration   3: 2786983.305 ops/s
[info] # Warmup Iteration   4: 2786090.472 ops/s
[info] # Warmup Iteration   5: 2865198.721 ops/s
[info] Iteration   1: 2869615.849 ops/s
[info]                  ·gc.alloc.rate:               556.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2866389.636 ops/s
[info]                  ·gc.alloc.rate:               562.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.784 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2867574.534 ops/s
[info]                  ·gc.alloc.rate:               561.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2862550.921 ops/s
[info]                  ·gc.alloc.rate:      539.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.399 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2861287.743 ops/s
[info]                  ·gc.alloc.rate:                   557.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2865483.737 ±(99.9%) 13404.751 ops/s [Average]
[info]   (min, avg, max) = (2861287.743, 2865483.737, 2869615.849), stdev = 3481.171
[info]   CI (99.9%): [2852078.986, 2878888.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   555.422 ±(99.9%) 36.306 MB/sec [Average]
[info]   (min, avg, max) = (539.187, 555.422, 562.422), stdev = 9.428
[info]   CI (99.9%): [519.116, 591.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.043 ±(99.9%) 19.364 B/op [Average]
[info]   (min, avg, max) = (296.399, 305.043, 308.793), stdev = 5.029
[info]   CI (99.9%): [285.679, 324.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.097 ±(99.9%) 1147.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.097, 666.528), stdev = 298.010
[info]   CI (99.9%): [≈ 0, 1680.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   292.718 ±(99.9%) 630.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 292.718, 366.620), stdev = 163.635
[info]   CI (99.9%): [≈ 0, 922.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92340.153 ops/s
[info] # Warmup Iteration   2: 1589570.713 ops/s
[info] # Warmup Iteration   3: 1686800.641 ops/s
[info] # Warmup Iteration   4: 1719883.919 ops/s
[info] # Warmup Iteration   5: 1723995.875 ops/s
[info] Iteration   1: 1728170.293 ops/s
[info]                  ·gc.alloc.rate:                   946.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1711815.329 ops/s
[info]                  ·gc.alloc.rate:               941.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          865.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 614.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1712728.838 ops/s
[info]                  ·gc.alloc.rate:                   947.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              870.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1729495.682 ops/s
[info]                  ·gc.alloc.rate:               936.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          852.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 608.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1719465.628 ops/s
[info]                  ·gc.alloc.rate:               946.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          866.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1225.224 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1720335.154 ±(99.9%) 32015.055 ops/s [Average]
[info]   (min, avg, max) = (1711815.329, 1720335.154, 1729495.682), stdev = 8314.208
[info]   CI (99.9%): [1688320.099, 1752350.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   943.835 ±(99.9%) 17.155 MB/sec [Average]
[info]   (min, avg, max) = (936.945, 943.835, 947.401), stdev = 4.455
[info]   CI (99.9%): [926.679, 960.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   863.428 ±(99.9%) 26.141 B/op [Average]
[info]   (min, avg, max) = (852.645, 863.428, 870.572), stdev = 6.789
[info]   CI (99.9%): [837.287, 889.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.147 ±(99.9%) 1412.061 MB/sec [Average]
[info]   (min, avg, max) = (667.881, 936.147, 1338.703), stdev = 366.708
[info]   CI (99.9%): [≈ 0, 2348.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   856.995 ±(99.9%) 1300.314 B/op [Average]
[info]   (min, avg, max) = (608.204, 856.995, 1228.581), stdev = 337.687
[info]   CI (99.9%): [≈ 0, 2157.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1093144.125 ops/s
[info] # Warmup Iteration   2: 2213542.042 ops/s
[info] # Warmup Iteration   3: 2426293.760 ops/s
[info] # Warmup Iteration   4: 2425538.287 ops/s
[info] # Warmup Iteration   5: 2403529.306 ops/s
[info] Iteration   1: 2424341.068 ops/s
[info]                  ·gc.alloc.rate:                   475.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     332.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2384050.897 ops/s
[info]                  ·gc.alloc.rate:      466.250 MB/sec
[info]                  ·gc.alloc.rate.norm: 307.673 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2404408.005 ops/s
[info]                  ·gc.alloc.rate:               473.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          310.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 439.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2430858.356 ops/s
[info]                  ·gc.alloc.rate:                   471.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2398704.468 ops/s
[info]                  ·gc.alloc.rate:      451.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2408472.559 ±(99.9%) 73598.873 ops/s [Average]
[info]   (min, avg, max) = (2384050.897, 2408472.559, 2430858.356), stdev = 19113.393
[info]   CI (99.9%): [2334873.686, 2482071.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   467.741 ±(99.9%) 37.668 MB/sec [Average]
[info]   (min, avg, max) = (451.346, 467.741, 475.152), stdev = 9.782
[info]   CI (99.9%): [430.073, 505.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305.578 ±(99.9%) 21.442 B/op [Average]
[info]   (min, avg, max) = (296.057, 305.578, 310.188), stdev = 5.568
[info]   CI (99.9%): [284.135, 327.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.094 ±(99.9%) 1328.491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.094, 671.908), stdev = 345.005
[info]   CI (99.9%): [≈ 0, 1699.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   241.366 ±(99.9%) 864.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 241.366, 439.730), stdev = 224.490
[info]   CI (99.9%): [≈ 0, 1105.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.014), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234496.434 ops/s
[info] # Warmup Iteration   2: 1577200.599 ops/s
[info] # Warmup Iteration   3: 1690021.575 ops/s
[info] # Warmup Iteration   4: 1722295.563 ops/s
[info] # Warmup Iteration   5: 1730445.789 ops/s
[info] Iteration   1: 1730950.495 ops/s
[info]                  ·gc.alloc.rate:               982.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 607.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1725556.017 ops/s
[info]                  ·gc.alloc.rate:               988.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1220.066 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1687813.377 ops/s
[info]                  ·gc.alloc.rate:                   960.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1725679.698 ops/s
[info]                  ·gc.alloc.rate:                   997.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              909.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1221.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1733427.524 ops/s
[info]                  ·gc.alloc.rate:                   974.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              884.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1720685.422 ±(99.9%) 71960.946 ops/s [Average]
[info]   (min, avg, max) = (1687813.377, 1720685.422, 1733427.524), stdev = 18688.029
[info]   CI (99.9%): [1648724.476, 1792646.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   980.612 ±(99.9%) 53.802 MB/sec [Average]
[info]   (min, avg, max) = (960.838, 980.612, 997.301), stdev = 13.972
[info]   CI (99.9%): [926.809, 1034.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   896.920 ±(99.9%) 36.368 B/op [Average]
[info]   (min, avg, max) = (884.366, 896.920, 909.579), stdev = 9.445
[info]   CI (99.9%): [860.552, 933.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   936.915 ±(99.9%) 1411.273 MB/sec [Average]
[info]   (min, avg, max) = (668.458, 936.915, 1338.924), stdev = 366.503
[info]   CI (99.9%): [≈ 0, 2348.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   856.292 ±(99.9%) 1280.871 B/op [Average]
[info]   (min, avg, max) = (607.809, 856.292, 1221.153), stdev = 332.638
[info]   CI (99.9%): [≈ 0, 2137.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.049), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438684.257 ops/s
[info] # Warmup Iteration   2: 1660381.427 ops/s
[info] # Warmup Iteration   3: 1745323.630 ops/s
[info] # Warmup Iteration   4: 1748037.096 ops/s
[info] # Warmup Iteration   5: 1787251.151 ops/s
[info] Iteration   1: 1749649.660 ops/s
[info]                  ·gc.alloc.rate:                   1332.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1198.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1774600.552 ops/s
[info]                  ·gc.alloc.rate:               1357.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          1203.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1189.885 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1793778.927 ops/s
[info]                  ·gc.alloc.rate:                   1371.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1178.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1797374.627 ops/s
[info]                  ·gc.alloc.rate:                   1361.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1191.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1177.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1770465.476 ops/s
[info]                  ·gc.alloc.rate:                   1354.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1203.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1192.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1777173.849 ±(99.9%) 74393.333 ops/s [Average]
[info]   (min, avg, max) = (1749649.660, 1777173.849, 1797374.627), stdev = 19319.712
[info]   CI (99.9%): [1702780.515, 1851567.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1355.441 ±(99.9%) 54.855 MB/sec [Average]
[info]   (min, avg, max) = (1332.446, 1355.441, 1371.001), stdev = 14.246
[info]   CI (99.9%): [1300.586, 1410.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1200.130 ±(99.9%) 19.768 B/op [Average]
[info]   (min, avg, max) = (1191.794, 1200.130, 1203.940), stdev = 5.134
[info]   CI (99.9%): [1180.362, 1219.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.596 ±(99.9%) 5.342 MB/sec [Average]
[info]   (min, avg, max) = (1341.055, 1342.596, 1344.770), stdev = 1.387
[info]   CI (99.9%): [1337.253, 1347.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1188.848 ±(99.9%) 45.902 B/op [Average]
[info]   (min, avg, max) = (1177.111, 1188.848, 1206.278), stdev = 11.921
[info]   CI (99.9%): [1142.946, 1234.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 2.999), stdev = 1.312
[info]   CI (99.9%): [≈ 0, 5.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.577 ±(99.9%) 4.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.625), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 4.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.581 ops/s
[info] # Warmup Iteration   2: 2670833.307 ops/s
[info] # Warmup Iteration   3: 2795739.056 ops/s
[info] # Warmup Iteration   4: 2728396.969 ops/s
[info] # Warmup Iteration   5: 2815024.873 ops/s
[info] Iteration   1: 2813847.981 ops/s
[info]                  ·gc.alloc.rate:                   748.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2781882.546 ops/s
[info]                  ·gc.alloc.rate:               739.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 376.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2790893.949 ops/s
[info]                  ·gc.alloc.rate:                   756.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2811010.937 ops/s
[info]                  ·gc.alloc.rate:               745.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2812111.995 ops/s
[info]                  ·gc.alloc.rate:               746.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.401 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2801949.482 ±(99.9%) 56193.933 ops/s [Average]
[info]   (min, avg, max) = (2781882.546, 2801949.482, 2813847.981), stdev = 14593.386
[info]   CI (99.9%): [2745755.549, 2858143.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   747.367 ±(99.9%) 23.169 MB/sec [Average]
[info]   (min, avg, max) = (739.408, 747.367, 756.112), stdev = 6.017
[info]   CI (99.9%): [724.198, 770.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   419.762 ±(99.9%) 14.376 B/op [Average]
[info]   (min, avg, max) = (417.464, 419.762, 426.388), stdev = 3.733
[info]   CI (99.9%): [405.386, 434.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.917 ±(99.9%) 1147.444 MB/sec [Average]
[info]   (min, avg, max) = (666.141, 799.917, 1332.973), stdev = 297.988
[info]   CI (99.9%): [≈ 0, 1947.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   449.580 ±(99.9%) 650.348 B/op [Average]
[info]   (min, avg, max) = (372.592, 449.580, 751.692), stdev = 168.893
[info]   CI (99.9%): [≈ 0, 1099.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 511561.425 ops/s
[info] # Warmup Iteration   2: 2662884.778 ops/s
[info] # Warmup Iteration   3: 2959646.462 ops/s
[info] # Warmup Iteration   4: 2944726.262 ops/s
[info] # Warmup Iteration   5: 2986341.378 ops/s
[info] Iteration   1: 2979403.942 ops/s
[info]                  ·gc.alloc.rate:                   1305.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              689.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2955304.525 ops/s
[info]                  ·gc.alloc.rate:                   1291.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              687.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2993604.355 ops/s
[info]                  ·gc.alloc.rate:                   1317.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              692.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2906271.626 ops/s
[info]                  ·gc.alloc.rate:                   1282.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2972216.472 ops/s
[info]                  ·gc.alloc.rate:               1295.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          686.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 354.157 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2961360.184 ±(99.9%) 129934.885 ops/s [Average]
[info]   (min, avg, max) = (2906271.626, 2961360.184, 2993604.355), stdev = 33743.677
[info]   CI (99.9%): [2831425.299, 3091295.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1298.350 ±(99.9%) 51.392 MB/sec [Average]
[info]   (min, avg, max) = (1282.436, 1298.350, 1317.116), stdev = 13.346
[info]   CI (99.9%): [1246.958, 1349.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   689.890 ±(99.9%) 12.465 B/op [Average]
[info]   (min, avg, max) = (686.055, 689.890, 693.981), stdev = 3.237
[info]   CI (99.9%): [677.424, 702.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.787 ±(99.9%) 1153.783 MB/sec [Average]
[info]   (min, avg, max) = (668.788, 1204.787, 1340.144), stdev = 299.634
[info]   CI (99.9%): [51.004, 2358.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   640.475 ±(99.9%) 617.060 B/op [Average]
[info]   (min, avg, max) = (354.157, 640.475, 724.547), stdev = 160.248
[info]   CI (99.9%): [23.416, 1257.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.660), stdev = 1.630
[info]   CI (99.9%): [≈ 0, 7.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.403 ±(99.9%) 3.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 1.981), stdev = 0.882
[info]   CI (99.9%): [≈ 0, 3.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1292559.568 ops/s
[info] # Warmup Iteration   2: 3219227.255 ops/s
[info] # Warmup Iteration   3: 3382637.968 ops/s
[info] # Warmup Iteration   4: 3383573.424 ops/s
[info] # Warmup Iteration   5: 3379031.669 ops/s
[info] Iteration   1: 3387911.925 ops/s
[info]                  ·gc.alloc.rate:               901.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3361663.671 ops/s
[info]                  ·gc.alloc.rate:               890.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 314.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3320454.268 ops/s
[info]                  ·gc.alloc.rate:               905.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 636.548 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 3368411.721 ops/s
[info]                  ·gc.alloc.rate:               889.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.893 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3381087.994 ops/s
[info]                  ·gc.alloc.rate:               902.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          420.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3363905.916 ±(99.9%) 101603.163 ops/s [Average]
[info]   (min, avg, max) = (3320454.268, 3363905.916, 3387911.925), stdev = 26386.019
[info]   CI (99.9%): [3262302.753, 3465509.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   897.660 ±(99.9%) 28.515 MB/sec [Average]
[info]   (min, avg, max) = (889.234, 897.660, 905.133), stdev = 7.405
[info]   CI (99.9%): [869.144, 926.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   419.987 ±(99.9%) 20.643 B/op [Average]
[info]   (min, avg, max) = (415.390, 419.987, 429.008), stdev = 5.361
[info]   CI (99.9%): [399.343, 440.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.669 ±(99.9%) 1156.656 MB/sec [Average]
[info]   (min, avg, max) = (670.810, 805.669, 1343.004), stdev = 300.380
[info]   CI (99.9%): [≈ 0, 1962.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   377.763 ±(99.9%) 557.066 B/op [Average]
[info]   (min, avg, max) = (311.618, 377.763, 636.548), stdev = 144.668
[info]   CI (99.9%): [≈ 0, 934.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1331775.903 ops/s
[info] # Warmup Iteration   2: 3544923.900 ops/s
[info] # Warmup Iteration   3: 3638500.025 ops/s
[info] # Warmup Iteration   4: 3641106.532 ops/s
[info] # Warmup Iteration   5: 3637026.463 ops/s
[info] Iteration   1: 3639360.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3502689.695 ops/s
[info]                  ·gc.alloc.rate:      12.793 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.746 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3640764.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3641397.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3640832.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3613008.943 ±(99.9%) 237488.089 ops/s [Average]
[info]   (min, avg, max) = (3502689.695, 3613008.943, 3641397.576), stdev = 61674.903
[info]   CI (99.9%): [3375520.853, 3850497.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.559 ±(99.9%) 22.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.559, 12.793), stdev = 5.721
[info]   CI (99.9%): [≈ 0, 24.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.149 ±(99.9%) 9.894 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.149, 5.746), stdev = 2.570
[info]   CI (99.9%): [≈ 0, 11.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556666.638 ops/s
[info] # Warmup Iteration   2: 2653543.990 ops/s
[info] # Warmup Iteration   3: 2825362.654 ops/s
[info] # Warmup Iteration   4: 2880826.897 ops/s
[info] # Warmup Iteration   5: 2880166.012 ops/s
[info] Iteration   1: 2855903.496 ops/s
[info]                  ·gc.alloc.rate:                   1408.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              776.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     739.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2875405.785 ops/s
[info]                  ·gc.alloc.rate:                   1427.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2884789.989 ops/s
[info]                  ·gc.alloc.rate:                   1433.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              782.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2890900.679 ops/s
[info]                  ·gc.alloc.rate:                   1435.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2851464.736 ops/s
[info]                  ·gc.alloc.rate:               1430.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          789.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 739.415 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2871692.937 ±(99.9%) 67048.268 ops/s [Average]
[info]   (min, avg, max) = (2851464.736, 2871692.937, 2890900.679), stdev = 17412.222
[info]   CI (99.9%): [2804644.669, 2938741.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1427.109 ±(99.9%) 40.866 MB/sec [Average]
[info]   (min, avg, max) = (1408.825, 1427.109, 1435.189), stdev = 10.613
[info]   CI (99.9%): [1386.243, 1467.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   782.116 ±(99.9%) 17.518 B/op [Average]
[info]   (min, avg, max) = (776.395, 782.116, 789.129), stdev = 4.549
[info]   CI (99.9%): [764.599, 799.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.728 ±(99.9%) 4.800 MB/sec [Average]
[info]   (min, avg, max) = (1339.938, 1341.728, 1343.262), stdev = 1.247
[info]   CI (99.9%): [1336.928, 1346.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   735.338 ±(99.9%) 14.937 B/op [Average]
[info]   (min, avg, max) = (730.578, 735.338, 739.415), stdev = 3.879
[info]   CI (99.9%): [720.402, 750.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.706 ±(99.9%) 5.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.195), stdev = 1.395
[info]   CI (99.9%): [≈ 0, 6.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.385 ±(99.9%) 2.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.743), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3009.869 ops/s
[info] # Warmup Iteration   2: 8772.170 ops/s
[info] # Warmup Iteration   3: 11691.305 ops/s
[info] # Warmup Iteration   4: 11592.427 ops/s
[info] # Warmup Iteration   5: 11649.015 ops/s
[info] Iteration   1: 11736.321 ops/s
[info]                  ·gc.alloc.rate:               1379.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          184929.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179273.535 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 11717.363 ops/s
[info]                  ·gc.alloc.rate:               1372.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          184298.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179698.370 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 11745.766 ops/s
[info]                  ·gc.alloc.rate:                   1371.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              183778.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179359.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11882.912 ops/s
[info]                  ·gc.alloc.rate:                   1394.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              184700.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177144.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11751.565 ops/s
[info]                  ·gc.alloc.rate:                   1391.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              186290.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178777.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.788 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11766.785 ±(99.9%) 254.911 ops/s [Average]
[info]   (min, avg, max) = (11717.363, 11766.785, 11882.912), stdev = 66.200
[info]   CI (99.9%): [11511.874, 12021.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1381.867 ±(99.9%) 40.710 MB/sec [Average]
[info]   (min, avg, max) = (1371.716, 1381.867, 1394.580), stdev = 10.572
[info]   CI (99.9%): [1341.157, 1422.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   184799.510 ±(99.9%) 3624.223 B/op [Average]
[info]   (min, avg, max) = (183778.652, 184799.510, 186290.652), stdev = 941.199
[info]   CI (99.9%): [181175.286, 188423.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.349 ±(99.9%) 5.340 MB/sec [Average]
[info]   (min, avg, max) = (1335.119, 1337.349, 1338.731), stdev = 1.387
[info]   CI (99.9%): [1332.009, 1342.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   178850.591 ±(99.9%) 3885.272 B/op [Average]
[info]   (min, avg, max) = (177144.591, 178850.591, 179698.370), stdev = 1008.993
[info]   CI (99.9%): [174965.319, 182735.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.848 ±(99.9%) 5.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.848, 3.323), stdev = 1.436
[info]   CI (99.9%): [≈ 0, 6.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   113.346 ±(99.9%) 740.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.346, 445.203), stdev = 192.403
[info]   CI (99.9%): [≈ 0, 854.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3371.797 ops/s
[info] # Warmup Iteration   2: 18584.243 ops/s
[info] # Warmup Iteration   3: 21725.517 ops/s
[info] # Warmup Iteration   4: 20774.693 ops/s
[info] # Warmup Iteration   5: 21833.870 ops/s
[info] Iteration   1: 21435.054 ops/s
[info]                  ·gc.alloc.rate:               346.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          25418.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37562.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 21776.697 ops/s
[info]                  ·gc.alloc.rate:      327.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 23653.560 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21480.007 ops/s
[info]                  ·gc.alloc.rate:               333.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          24466.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37482.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 21965.435 ops/s
[info]                  ·gc.alloc.rate:      325.864 MB/sec
[info]                  ·gc.alloc.rate.norm: 23342.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21927.214 ops/s
[info]                  ·gc.alloc.rate:               337.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          24244.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47332.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   21716.881 ±(99.9%) 953.243 ops/s [Average]
[info]   (min, avg, max) = (21435.054, 21716.881, 21965.435), stdev = 247.554
[info]   CI (99.9%): [20763.638, 22670.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   334.246 ±(99.9%) 31.942 MB/sec [Average]
[info]   (min, avg, max) = (325.864, 334.246, 346.199), stdev = 8.295
[info]   CI (99.9%): [302.304, 366.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24225.138 ±(99.9%) 3098.735 B/op [Average]
[info]   (min, avg, max) = (23342.013, 24225.138, 25418.885), stdev = 804.732
[info]   CI (99.9%): [21126.403, 27323.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.586 ±(99.9%) 1205.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.586, 659.735), stdev = 313.155
[info]   CI (99.9%): [≈ 0, 1542.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24475.433 ±(99.9%) 87405.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24475.433, 47332.220), stdev = 22699.009
[info]   CI (99.9%): [≈ 0, 111881.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7510.928 ops/s
[info] # Warmup Iteration   2: 21857.461 ops/s
[info] # Warmup Iteration   3: 22375.404 ops/s
[info] # Warmup Iteration   4: 22345.590 ops/s
[info] # Warmup Iteration   5: 22406.838 ops/s
[info] Iteration   1: 22243.252 ops/s
[info]                  ·gc.alloc.rate:               260.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          18419.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36200.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 22553.562 ops/s
[info]                  ·gc.alloc.rate:      245.115 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22456.793 ops/s
[info]                  ·gc.alloc.rate:                   260.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              18264.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35856.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.459 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22523.648 ops/s
[info]                  ·gc.alloc.rate:      244.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22400.406 ops/s
[info]                  ·gc.alloc.rate:                   254.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              17893.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35946.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.463 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22435.532 ±(99.9%) 472.990 ops/s [Average]
[info]   (min, avg, max) = (22243.252, 22435.532, 22553.562), stdev = 122.834
[info]   CI (99.9%): [21962.542, 22908.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.118 ±(99.9%) 30.137 MB/sec [Average]
[info]   (min, avg, max) = (244.790, 253.118, 260.684), stdev = 7.827
[info]   CI (99.9%): [222.981, 283.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17756.956 ±(99.9%) 2410.297 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17756.956, 18419.375), stdev = 625.947
[info]   CI (99.9%): [15346.659, 20167.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.007 ±(99.9%) 1079.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.007, 511.784), stdev = 280.258
[info]   CI (99.9%): [≈ 0, 1386.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21600.630 ±(99.9%) 75930.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21600.630, 36200.053), stdev = 19718.989
[info]   CI (99.9%): [≈ 0, 97531.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.584 ±(99.9%) 3.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 1.463), stdev = 0.800
[info]   CI (99.9%): [≈ 0, 3.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65.970 ops/s
[info] # Warmup Iteration   2: 2321.069 ops/s
[info] # Warmup Iteration   3: 5410.472 ops/s
[info] # Warmup Iteration   4: 6132.777 ops/s
[info] # Warmup Iteration   5: 6105.798 ops/s
[info] Iteration   1: 6232.621 ops/s
[info]                  ·gc.alloc.rate:                   1951.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              492705.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     505701.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6274.919 ops/s
[info]                  ·gc.alloc.rate:                   1940.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              486569.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335657.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6250.942 ops/s
[info]                  ·gc.alloc.rate:                   1968.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              495586.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     505671.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6249.120 ops/s
[info]                  ·gc.alloc.rate:                   1970.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              496153.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     506087.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6223.992 ops/s
[info]                  ·gc.alloc.rate:               1948.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          492840.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 508790.973 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   6246.319 ±(99.9%) 75.391 ops/s [Average]
[info]   (min, avg, max) = (6223.992, 6246.319, 6274.919), stdev = 19.579
[info]   CI (99.9%): [6170.928, 6321.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1955.698 ±(99.9%) 50.147 MB/sec [Average]
[info]   (min, avg, max) = (1940.009, 1955.698, 1970.111), stdev = 13.023
[info]   CI (99.9%): [1905.550, 2005.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   492771.246 ±(99.9%) 14642.044 B/op [Average]
[info]   (min, avg, max) = (486569.604, 492771.246, 496153.403), stdev = 3802.492
[info]   CI (99.9%): [478129.202, 507413.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.165 ±(99.9%) 1153.549 MB/sec [Average]
[info]   (min, avg, max) = (1338.307, 1874.165, 2011.961), stdev = 299.573
[info]   CI (99.9%): [720.616, 3027.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   472381.876 ±(99.9%) 294350.959 B/op [Average]
[info]   (min, avg, max) = (335657.932, 472381.876, 508790.973), stdev = 76442.009
[info]   CI (99.9%): [178030.918, 766732.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 2.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.665), stdev = 0.699
[info]   CI (99.9%): [≈ 0, 3.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   107.657 ±(99.9%) 675.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.657, 417.698), stdev = 175.381
[info]   CI (99.9%): [≈ 0, 782.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10853.351 ops/s
[info] # Warmup Iteration   2: 57062.121 ops/s
[info] # Warmup Iteration   3: 60817.443 ops/s
[info] # Warmup Iteration   4: 62766.402 ops/s
[info] # Warmup Iteration   5: 62988.947 ops/s
[info] Iteration   1: 63314.440 ops/s
[info]                  ·gc.alloc.rate:                   818.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              20335.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16468.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 63225.903 ops/s
[info]                  ·gc.alloc.rate:                   834.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              20765.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33048.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 63333.466 ops/s
[info]                  ·gc.alloc.rate:                   814.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              20240.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16521.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 63397.618 ops/s
[info]                  ·gc.alloc.rate:                   813.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              20188.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16503.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 63483.323 ops/s
[info]                  ·gc.alloc.rate:               814.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          20192.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16498.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   63350.950 ±(99.9%) 370.222 ops/s [Average]
[info]   (min, avg, max) = (63225.903, 63350.950, 63483.323), stdev = 96.145
[info]   CI (99.9%): [62980.728, 63721.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   818.920 ±(99.9%) 33.840 MB/sec [Average]
[info]   (min, avg, max) = (813.261, 818.920, 834.307), stdev = 8.788
[info]   CI (99.9%): [785.079, 852.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20344.543 ±(99.9%) 933.685 B/op [Average]
[info]   (min, avg, max) = (20188.921, 20344.543, 20765.159), stdev = 242.475
[info]   CI (99.9%): [19410.858, 21278.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.082 ±(99.9%) 1142.470 MB/sec [Average]
[info]   (min, avg, max) = (662.480, 797.082, 1327.824), stdev = 296.696
[info]   CI (99.9%): [≈ 0, 1939.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19807.946 ±(99.9%) 28501.048 B/op [Average]
[info]   (min, avg, max) = (16468.090, 19807.946, 33048.343), stdev = 7401.632
[info]   CI (99.9%): [≈ 0, 48308.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.518 ±(99.9%) 1.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.518, 1.036), stdev = 0.486
[info]   CI (99.9%): [≈ 0, 2.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26690.047 ops/s
[info] # Warmup Iteration   2: 65951.712 ops/s
[info] # Warmup Iteration   3: 67977.704 ops/s
[info] # Warmup Iteration   4: 68458.603 ops/s
[info] # Warmup Iteration   5: 68741.966 ops/s
[info] Iteration   1: 68419.273 ops/s
[info]                  ·gc.alloc.rate:                   459.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              10572.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11768.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 68444.847 ops/s
[info]                  ·gc.alloc.rate:               463.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          10652.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15264.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 68903.911 ops/s
[info]                  ·gc.alloc.rate:      449.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 10256.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 66516.474 ops/s
[info]                  ·gc.alloc.rate:                   456.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              10794.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15706.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68547.312 ops/s
[info]                  ·gc.alloc.rate:               472.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          10860.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15271.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   68166.363 ±(99.9%) 3628.989 ops/s [Average]
[info]   (min, avg, max) = (66516.474, 68166.363, 68903.911), stdev = 942.437
[info]   CI (99.9%): [64537.375, 71795.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   460.235 ±(99.9%) 34.065 MB/sec [Average]
[info]   (min, avg, max) = (449.081, 460.235, 472.991), stdev = 8.847
[info]   CI (99.9%): [426.171, 494.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10627.192 ±(99.9%) 910.654 B/op [Average]
[info]   (min, avg, max) = (10256.007, 10627.192, 10860.465), stdev = 236.494
[info]   CI (99.9%): [9716.538, 11537.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   500.872 ±(99.9%) 1107.806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 500.872, 665.112), stdev = 287.694
[info]   CI (99.9%): [≈ 0, 1608.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11602.147 ±(99.9%) 25712.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11602.147, 15706.495), stdev = 6677.564
[info]   CI (99.9%): [≈ 0, 37315.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.194 ±(99.9%) 1.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.493), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32553.400 ops/s
[info] # Warmup Iteration   2: 73849.165 ops/s
[info] # Warmup Iteration   3: 75050.688 ops/s
[info] # Warmup Iteration   4: 75219.389 ops/s
[info] # Warmup Iteration   5: 75200.111 ops/s
[info] Iteration   1: 74657.396 ops/s
[info]                  ·gc.alloc.rate:               36.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          769.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10785.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 74959.580 ops/s
[info]                  ·gc.alloc.rate:      14.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74976.138 ops/s
[info]                  ·gc.alloc.rate:      14.482 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74906.365 ops/s
[info]                  ·gc.alloc.rate:      14.470 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75003.965 ops/s
[info]                  ·gc.alloc.rate:      14.626 MB/sec
[info]                  ·gc.alloc.rate.norm: 306.924 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   74900.689 ±(99.9%) 541.321 ops/s [Average]
[info]   (min, avg, max) = (74657.396, 74900.689, 75003.965), stdev = 140.579
[info]   CI (99.9%): [74359.368, 75442.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.916 ±(99.9%) 37.897 MB/sec [Average]
[info]   (min, avg, max) = (14.470, 18.916, 36.521), stdev = 9.842
[info]   CI (99.9%): [≈ 0, 56.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   397.776 ±(99.9%) 801.127 B/op [Average]
[info]   (min, avg, max) = (304.006, 397.776, 769.941), stdev = 208.050
[info]   CI (99.9%): [≈ 0, 1198.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.313 ±(99.9%) 880.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.313, 511.565), stdev = 228.779
[info]   CI (99.9%): [≈ 0, 983.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2157.003 ±(99.9%) 18572.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2157.003, 10785.016), stdev = 4823.206
[info]   CI (99.9%): [≈ 0, 20729.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65167.692 ops/s
[info] # Warmup Iteration   2: 286438.050 ops/s
[info] # Warmup Iteration   3: 303430.196 ops/s
[info] # Warmup Iteration   4: 313402.361 ops/s
[info] # Warmup Iteration   5: 314458.814 ops/s
[info] Iteration   1: 311028.287 ops/s
[info]                  ·gc.alloc.rate:                   1841.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              9316.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10200.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 313371.290 ops/s
[info]                  ·gc.alloc.rate:                   1878.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              9434.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10120.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 310518.277 ops/s
[info]                  ·gc.alloc.rate:               1849.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          9372.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6793.237 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 314083.448 ops/s
[info]                  ·gc.alloc.rate:                   1882.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              9431.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10064.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 313944.891 ops/s
[info]                  ·gc.alloc.rate:                   1895.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              9504.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10072.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   312589.239 ±(99.9%) 6502.776 ops/s [Average]
[info]   (min, avg, max) = (310518.277, 312589.239, 314083.448), stdev = 1688.750
[info]   CI (99.9%): [306086.463, 319092.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1869.422 ±(99.9%) 89.130 MB/sec [Average]
[info]   (min, avg, max) = (1841.372, 1869.422, 1895.802), stdev = 23.147
[info]   CI (99.9%): [1780.291, 1958.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9411.617 ±(99.9%) 273.203 B/op [Average]
[info]   (min, avg, max) = (9316.172, 9411.617, 9504.357), stdev = 70.950
[info]   CI (99.9%): [9138.414, 9684.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.851 ±(99.9%) 1157.221 MB/sec [Average]
[info]   (min, avg, max) = (1340.286, 1877.851, 2016.125), stdev = 300.527
[info]   CI (99.9%): [720.630, 3035.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9450.039 ±(99.9%) 5722.771 B/op [Average]
[info]   (min, avg, max) = (6793.237, 9450.039, 10200.313), stdev = 1486.185
[info]   CI (99.9%): [3727.268, 15172.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.622), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.848 ±(99.9%) 30.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.848, 18.192), stdev = 8.021
[info]   CI (99.9%): [≈ 0, 34.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117972.488 ops/s
[info] # Warmup Iteration   2: 464248.402 ops/s
[info] # Warmup Iteration   3: 495780.645 ops/s
[info] # Warmup Iteration   4: 496967.549 ops/s
[info] # Warmup Iteration   5: 495536.122 ops/s
[info] Iteration   1: 496030.131 ops/s
[info]                  ·gc.alloc.rate:               568.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          1804.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2111.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 497476.554 ops/s
[info]                  ·gc.alloc.rate:      553.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 1752.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 491096.626 ops/s
[info]                  ·gc.alloc.rate:               577.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          1851.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2132.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 496539.378 ops/s
[info]                  ·gc.alloc.rate:               576.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          1827.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2112.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 495810.107 ops/s
[info]                  ·gc.alloc.rate:                   572.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              1818.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2115.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   495390.559 ±(99.9%) 9567.532 ops/s [Average]
[info]   (min, avg, max) = (491096.626, 495390.559, 497476.554), stdev = 2484.658
[info]   CI (99.9%): [485823.027, 504958.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   569.985 ±(99.9%) 37.368 MB/sec [Average]
[info]   (min, avg, max) = (553.797, 569.985, 577.739), stdev = 9.704
[info]   CI (99.9%): [532.617, 607.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1810.940 ±(99.9%) 142.806 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1810.940, 1851.515), stdev = 37.086
[info]   CI (99.9%): [1668.134, 1953.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.785 ±(99.9%) 1146.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.785, 666.475), stdev = 297.836
[info]   CI (99.9%): [≈ 0, 1679.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1694.460 ±(99.9%) 3647.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1694.460, 2132.710), stdev = 947.271
[info]   CI (99.9%): [≈ 0, 5342.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.132), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 621155.254 ops/s
[info] # Warmup Iteration   2: 1196612.262 ops/s
[info] # Warmup Iteration   3: 1251284.133 ops/s
[info] # Warmup Iteration   4: 1220594.685 ops/s
[info] # Warmup Iteration   5: 1251590.000 ops/s
[info] Iteration   1: 1247879.890 ops/s
[info]                  ·gc.alloc.rate:               669.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          843.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 846.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1256002.257 ops/s
[info]                  ·gc.alloc.rate:               679.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          851.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840.566 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1268972.112 ops/s
[info]                  ·gc.alloc.rate:               688.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          854.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 832.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1272706.230 ops/s
[info]                  ·gc.alloc.rate:               686.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 829.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1268626.356 ops/s
[info]                  ·gc.alloc.rate:                   681.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              845.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1262837.369 ±(99.9%) 40339.369 ops/s [Average]
[info]   (min, avg, max) = (1247879.890, 1262837.369, 1272706.230), stdev = 10476.006
[info]   CI (99.9%): [1222498.000, 1303176.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   681.078 ±(99.9%) 29.338 MB/sec [Average]
[info]   (min, avg, max) = (669.058, 681.078, 688.904), stdev = 7.619
[info]   CI (99.9%): [651.740, 710.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   848.743 ±(99.9%) 16.918 B/op [Average]
[info]   (min, avg, max) = (843.832, 848.743, 854.425), stdev = 4.394
[info]   CI (99.9%): [831.825, 865.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.123 ±(99.9%) 1.200 MB/sec [Average]
[info]   (min, avg, max) = (670.782, 671.123, 671.442), stdev = 0.312
[info]   CI (99.9%): [669.923, 672.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   836.392 ±(99.9%) 25.732 B/op [Average]
[info]   (min, avg, max) = (829.935, 836.392, 846.007), stdev = 6.683
[info]   CI (99.9%): [810.660, 862.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10717.276 ops/s
[info] # Warmup Iteration   2: 91697.387 ops/s
[info] # Warmup Iteration   3: 98275.226 ops/s
[info] # Warmup Iteration   4: 102226.019 ops/s
[info] # Warmup Iteration   5: 103667.134 ops/s
[info] Iteration   1: 104059.542 ops/s
[info]                  ·gc.alloc.rate:                   3302.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              49953.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50477.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.889 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 103127.317 ops/s
[info]                  ·gc.alloc.rate:                   3316.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              50596.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51055.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104168.488 ops/s
[info]                  ·gc.alloc.rate:               3350.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          50591.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50727.321 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 102573.639 ops/s
[info]                  ·gc.alloc.rate:               3272.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          50212.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41354.308 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 103269.578 ops/s
[info]                  ·gc.alloc.rate:               3321.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          50624.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51500.911 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   103439.713 ±(99.9%) 2577.288 ops/s [Average]
[info]   (min, avg, max) = (102573.639, 103439.713, 104168.488), stdev = 669.314
[info]   CI (99.9%): [100862.425, 106017.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3312.721 ±(99.9%) 108.840 MB/sec [Average]
[info]   (min, avg, max) = (3272.721, 3312.721, 3350.173), stdev = 28.265
[info]   CI (99.9%): [3203.881, 3421.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50395.795 ±(99.9%) 1154.535 B/op [Average]
[info]   (min, avg, max) = (49953.967, 50395.795, 50624.085), stdev = 299.829
[info]   CI (99.9%): [49241.260, 51550.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3223.497 ±(99.9%) 1138.472 MB/sec [Average]
[info]   (min, avg, max) = (2695.361, 3223.497, 3379.317), stdev = 295.657
[info]   CI (99.9%): [2085.025, 4361.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49023.213 ±(99.9%) 16573.668 B/op [Average]
[info]   (min, avg, max) = (41354.308, 49023.213, 51500.911), stdev = 4304.129
[info]   CI (99.9%): [32449.544, 65596.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 3.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 1.889), stdev = 0.821
[info]   CI (99.9%): [≈ 0, 3.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87740.061 ops/s
[info] # Warmup Iteration   2: 273691.503 ops/s
[info] # Warmup Iteration   3: 291731.479 ops/s
[info] # Warmup Iteration   4: 299533.098 ops/s
[info] # Warmup Iteration   5: 302616.141 ops/s
[info] Iteration   1: 306116.878 ops/s
[info]                  ·gc.alloc.rate:                   1058.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3443.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 303353.243 ops/s
[info]                  ·gc.alloc.rate:                   1074.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              5573.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6953.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 306004.278 ops/s
[info]                  ·gc.alloc.rate:                   1054.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              5423.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3450.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 304723.076 ops/s
[info]                  ·gc.alloc.rate:                   1075.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6930.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 306077.714 ops/s
[info]                  ·gc.alloc.rate:               1052.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          5414.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3450.886 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   305255.038 ±(99.9%) 4668.948 ops/s [Average]
[info]   (min, avg, max) = (303353.243, 305255.038, 306116.878), stdev = 1212.511
[info]   CI (99.9%): [300586.090, 309923.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1063.086 ±(99.9%) 42.065 MB/sec [Average]
[info]   (min, avg, max) = (1052.878, 1063.086, 1075.087), stdev = 10.924
[info]   CI (99.9%): [1021.021, 1105.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5480.822 ±(99.9%) 292.457 B/op [Average]
[info]   (min, avg, max) = (5414.013, 5480.822, 5573.123), stdev = 75.950
[info]   CI (99.9%): [5188.364, 5773.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   938.901 ±(99.9%) 1414.643 MB/sec [Average]
[info]   (min, avg, max) = (669.920, 938.901, 1341.871), stdev = 367.378
[info]   CI (99.9%): [≈ 0, 2353.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4845.850 ±(99.9%) 7369.239 B/op [Average]
[info]   (min, avg, max) = (3443.720, 4845.850, 6953.711), stdev = 1913.768
[info]   CI (99.9%): [≈ 0, 12215.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.129 ±(99.9%) 0.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.321), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232576.617 ops/s
[info] # Warmup Iteration   2: 712866.037 ops/s
[info] # Warmup Iteration   3: 714864.805 ops/s
[info] # Warmup Iteration   4: 750941.048 ops/s
[info] # Warmup Iteration   5: 753545.587 ops/s
[info] Iteration   1: 747430.021 ops/s
[info]                  ·gc.alloc.rate:               586.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          1235.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1403.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 704826.883 ops/s
[info]                  ·gc.alloc.rate:      537.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 701291.639 ops/s
[info]                  ·gc.alloc.rate:               556.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1495.768 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 717797.544 ops/s
[info]                  ·gc.alloc.rate:                   565.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              1239.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1462.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 729801.515 ops/s
[info]                  ·gc.alloc.rate:               571.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1438.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   720229.520 ±(99.9%) 72890.398 ops/s [Average]
[info]   (min, avg, max) = (701291.639, 720229.520, 747430.021), stdev = 18929.405
[info]   CI (99.9%): [647339.123, 793119.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   563.572 ±(99.9%) 70.294 MB/sec [Average]
[info]   (min, avg, max) = (537.395, 563.572, 586.767), stdev = 18.255
[info]   CI (99.9%): [493.278, 633.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1231.468 ±(99.9%) 72.316 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1231.468, 1249.829), stdev = 18.780
[info]   CI (99.9%): [1159.153, 1303.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.452 ±(99.9%) 1148.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.452, 667.152), stdev = 298.209
[info]   CI (99.9%): [≈ 0, 1681.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1160.142 ±(99.9%) 2500.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1160.142, 1495.768), stdev = 649.416
[info]   CI (99.9%): [≈ 0, 3660.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704212.264 ops/s
[info] # Warmup Iteration   2: 1557878.330 ops/s
[info] # Warmup Iteration   3: 1619285.648 ops/s
[info] # Warmup Iteration   4: 1598797.037 ops/s
[info] # Warmup Iteration   5: 1598453.449 ops/s
[info] Iteration   1: 1600515.741 ops/s
[info]                  ·gc.alloc.rate:               771.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          758.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 659.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1582450.432 ops/s
[info]                  ·gc.alloc.rate:               755.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 667.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1569961.252 ops/s
[info]                  ·gc.alloc.rate:               745.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 672.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1571177.401 ops/s
[info]                  ·gc.alloc.rate:               744.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 672.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1569653.804 ops/s
[info]                  ·gc.alloc.rate:                   742.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1578751.726 ±(99.9%) 51112.414 ops/s [Average]
[info]   (min, avg, max) = (1569653.804, 1578751.726, 1600515.741), stdev = 13273.732
[info]   CI (99.9%): [1527639.312, 1629864.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   751.761 ±(99.9%) 47.176 MB/sec [Average]
[info]   (min, avg, max) = (742.139, 751.761, 771.545), stdev = 12.251
[info]   CI (99.9%): [704.585, 798.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.302 ±(99.9%) 22.435 B/op [Average]
[info]   (min, avg, max) = (744.111, 749.302, 758.474), stdev = 5.826
[info]   CI (99.9%): [726.867, 771.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.115 ±(99.9%) 1.432 MB/sec [Average]
[info]   (min, avg, max) = (670.703, 671.115, 671.509), stdev = 0.372
[info]   CI (99.9%): [669.683, 672.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   668.995 ±(99.9%) 22.834 B/op [Average]
[info]   (min, avg, max) = (659.340, 668.995, 673.291), stdev = 5.930
[info]   CI (99.9%): [646.161, 691.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025114.987 ops/s
[info] # Warmup Iteration   2: 1632102.791 ops/s
[info] # Warmup Iteration   3: 1730760.072 ops/s
[info] # Warmup Iteration   4: 1728343.765 ops/s
[info] # Warmup Iteration   5: 1727896.494 ops/s
[info] Iteration   1: 1729158.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1728134.057 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1729142.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1729452.059 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1729977.427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1729172.800 ±(99.9%) 2587.064 ops/s [Average]
[info]   (min, avg, max) = (1728134.057, 1729172.800, 1729977.427), stdev = 671.852
[info]   CI (99.9%): [1726585.736, 1731759.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134833.099 ops/s
[info] # Warmup Iteration   2: 437060.133 ops/s
[info] # Warmup Iteration   3: 460805.122 ops/s
[info] # Warmup Iteration   4: 457843.605 ops/s
[info] # Warmup Iteration   5: 460667.638 ops/s
[info] Iteration   1: 460779.532 ops/s
[info]                  ·gc.alloc.rate:                   702.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2278.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 461512.397 ops/s
[info]                  ·gc.alloc.rate:               698.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          2380.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2278.594 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 459959.609 ops/s
[info]                  ·gc.alloc.rate:               703.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          2407.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2286.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 460020.698 ops/s
[info]                  ·gc.alloc.rate:               700.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          2396.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2288.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 458939.624 ops/s
[info]                  ·gc.alloc.rate:               698.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          2394.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2293.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   460242.372 ±(99.9%) 3717.293 ops/s [Average]
[info]   (min, avg, max) = (458939.624, 460242.372, 461512.397), stdev = 965.369
[info]   CI (99.9%): [456525.080, 463959.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   700.638 ±(99.9%) 9.639 MB/sec [Average]
[info]   (min, avg, max) = (698.168, 700.638, 703.634), stdev = 2.503
[info]   CI (99.9%): [690.998, 710.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2395.882 ±(99.9%) 38.109 B/op [Average]
[info]   (min, avg, max) = (2380.592, 2395.882, 2407.496), stdev = 9.897
[info]   CI (99.9%): [2357.773, 2433.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.230 ±(99.9%) 2.665 MB/sec [Average]
[info]   (min, avg, max) = (667.099, 668.230, 668.800), stdev = 0.692
[info]   CI (99.9%): [665.565, 670.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2285.064 ±(99.9%) 24.633 B/op [Average]
[info]   (min, avg, max) = (2278.594, 2285.064, 2293.502), stdev = 6.397
[info]   CI (99.9%): [2260.431, 2309.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.142), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:03
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    790756.985 ±   53393.576   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2291.327 ±     172.023  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4559.703 ±      36.996    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2141.276 ±    1142.143  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4259.442 ±    2171.521    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.791 ±       6.677  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.621 ±      13.687    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1855069.675 ±  219354.697   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1234.433 ±     173.509  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1047.116 ±      29.623    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.707 ±    1150.019  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1019.382 ±     962.396    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.851 ±       7.241  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.707 ±       6.007    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   6104612.931 ±  286832.834   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       416.837 ±      17.225  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.472 ±       7.684    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       473.436 ±    1064.748  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       122.320 ±     273.644    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.001 ±       0.009    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    267030.113 ±   19710.612   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2341.800 ±     205.257  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13800.755 ±     324.023    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2286.993 ±    1434.291  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13474.559 ±    8265.855    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.225 ±       1.246  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         1.340 ±       7.392    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        26.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    907007.207 ±   39173.749   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2435.550 ±     145.014  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4225.731 ±     100.114    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2410.980 ±    1419.758  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4181.949 ±    2418.449    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.754 ±       6.444  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.301 ±      11.122    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2708826.399 ±   53018.726   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1155.468 ±      33.527  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       671.319 ±      27.273    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1069.799 ±    1409.521  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       622.227 ±     827.387    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.793 ±       6.561  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.461 ±       3.811    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        26.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14766092.927 ±  282015.397   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       772.153 ±      38.526  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.299 ±       4.173    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       671.170 ±       1.377  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        71.536 ±       1.417    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.008    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        14.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17177437.714 ±   29022.691   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    684474.204 ±   70386.038   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2031.901 ±     223.452  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4671.256 ±      38.025    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2014.541 ±      26.707  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4633.884 ±     425.038    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.156 ±       1.255  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.368 ±       2.970    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2112245.131 ±   76309.658   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2943.281 ±      62.802  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2193.041 ±      46.925    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2818.950 ±    1169.992  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2101.927 ±     946.449    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.009 ±       0.033    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10170570.331 ± 1221435.367   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1279.713 ±     132.029  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       198.019 ±       4.708    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1334.799 ±       4.056  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       206.682 ±      25.265    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.984 ±       8.269  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.157 ±       1.319    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3300323.951 ±  155624.595   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2069.629 ±     119.212  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       986.934 ±      12.266    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2003.529 ±      10.488  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       955.549 ±      44.011    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.841 ±       7.020  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.402 ±       3.353    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13161951.406 ±  957540.085   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1725.173 ±      97.575  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.281 ±       6.766    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1615.362 ±    1421.096  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       193.496 ±     177.296    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.600 ±       4.941  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.073 ±       0.599    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        21.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1224832.372 ±    7067.677   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      3106.511 ±      58.332  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3991.600 ±      83.153    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2941.813 ±    1401.293  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3780.027 ±    1802.786    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.087 ±       0.709  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.112 ±       0.909    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2389234.188 ±  212004.949   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2112.788 ±     171.022  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1391.657 ±      24.057    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2009.467 ±      10.942  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1324.120 ±     120.288    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.733 ±       6.176  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.494 ±       4.163    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  19275461.229 ± 2661177.522   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       607.493 ±      79.572  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.600 ±       1.333    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666.239 ±       1.454  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        54.448 ±       7.461    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.009 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.004    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6216798.011 ±  600315.612   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1758.252 ±     167.083  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445.100 ±      12.891    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1603.813 ±    1411.735  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       405.947 ±     353.895    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.777 ±       6.596  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.192 ±       1.633    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28248602.430 ±  404433.073   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       887.992 ±      45.704  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.462 ±       2.293    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       939.890 ±    1414.966  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        52.355 ±      78.840    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.015 ±       0.088  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        20.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  33320102.637 ±   42723.976   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1802703.097 ±  120701.095   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2969.791 ±     232.899  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2592.496 ±      34.235    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2945.804 ±    1422.372  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2570.040 ±    1162.233    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.007 ±       0.039    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        33.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    314582.830 ±    3699.798   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1930.082 ±      64.867  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9654.956 ±     297.422    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1877.867 ±    1151.236  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9395.412 ±    5797.724    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.712 ±       4.971  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.574 ±      24.986    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    503504.685 ±    2668.803   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       662.542 ±      11.569  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2070.902 ±      31.406    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       666.368 ±       2.075  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2082.865 ±      11.480    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.026 ±       0.137    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1335400.843 ±   14970.524   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       915.789 ±      32.087  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1079.121 ±      47.686    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941.157 ±    1417.837  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1109.952 ±    1684.150    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.025 ±       0.094    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    117377.827 ±    7645.033   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3577.673 ±     284.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     47956.797 ±     940.645    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3499.560 ±    1161.540  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     46895.888 ±   14146.824    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.220 ±       0.887    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    346136.343 ±   11009.630   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1189.559 ±      62.887  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5408.451 ±     142.673    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1073.735 ±    1415.726  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4874.707 ±    6344.949    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.691 ±       5.818  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.138 ±      26.406    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    901289.871 ±   18334.792   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       668.091 ±      11.489  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1166.549 ±      15.931    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       667.068 ±       2.221  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1164.780 ±      23.487    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.029 ±       0.250    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2464444.610 ±  222787.668   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1170.609 ±     114.681  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       747.587 ±      25.474    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1075.695 ±    1417.365  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       687.949 ±     915.984    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.604 ±       4.634  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.376 ±       2.883    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2782873.365 ±  479886.540   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    453990.579 ±   11285.250   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       675.778 ±      11.599  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2342.522 ±      61.146    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.348 ±       1.901  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2316.780 ±      56.689    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.014 ±       0.124    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17053.826 ±    1224.301   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1375.906 ±      70.940  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126967.239 ±    4243.361    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.752 ±       4.669  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    123931.640 ±    9319.103    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.753 ±       4.906  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        69.421 ±     453.026    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     35631.480 ±    2784.437   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       978.632 ±      94.009  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43217.175 ±    1723.728    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       935.180 ±    1408.158  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     41181.839 ±   60477.470    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.743 ±       3.917    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     44769.925 ±    4042.079   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       623.761 ±      61.250  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     21925.458 ±     612.648    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671.398 ±       2.024  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     23611.117 ±    2203.322    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        14.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30089.073 ±     506.546   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1518.150 ±      40.915  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79399.834 ±    1783.887    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1471.538 ±    1156.683  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     77013.002 ±   61997.818    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.933 ±       7.588  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        48.685 ±     395.980    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     25003.128 ±     721.232   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1809.280 ±      60.886  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    113872.716 ±    2377.331    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1742.449 ±    1424.605  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    109691.730 ±   90155.560    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.830 ±       4.492    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        19.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     25222.113 ±     597.165   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1570.978 ±      57.814  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     98007.392 ±    2187.199    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1469.014 ±    1154.950  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     91630.649 ±   71509.549    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.850 ±       7.136  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        52.881 ±     444.174    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27133.646 ±    1136.881   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1611.363 ±      90.646  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93452.513 ±    3132.532    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1611.858 ±    1414.928  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     93457.332 ±   81387.285    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.725 ±       4.093  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        41.760 ±     235.589    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27357.906 ±    1465.334   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1569.348 ±     102.401  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     90273.159 ±    3242.202    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1473.440 ±    1151.857  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     84729.499 ±   65189.619    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.722 ±       2.539    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7852.666 ±     119.082   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1170.787 ±      38.232  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234615.479 ±    9573.229    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1072.204 ±    1414.406  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    215069.399 ±  286032.761    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.775 ±       6.446  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       155.354 ±    1292.743    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17772.714 ±    1762.512   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1631.576 ±     154.878  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144481.781 ±    6791.849    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.771 ±    1413.108  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    142704.611 ±  128212.690    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.749 ±       4.779  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        67.852 ±     437.279    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     43489.220 ±     540.644   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1235.930 ±      39.954  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44715.816 ±    1791.972    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1206.219 ±    1154.224  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     43663.387 ±   42057.617    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.808 ±       5.201  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        29.241 ±     188.304    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     66942.080 ±    5194.228   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       768.347 ±      16.697  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     18066.534 ±    1286.075    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       806.232 ±    1158.355  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19073.806 ±   29476.420    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.097 ±       0.833    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     33395.715 ±     520.168   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2209.135 ±      35.158  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    104102.733 ±    1434.072    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2151.079 ±    1157.457  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    101352.485 ±   53933.175    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.225 ±       1.640  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        10.599 ±      77.382    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27980.119 ±     423.571   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1795.523 ±      26.471  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    100986.717 ±    1362.371    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1738.411 ±    1413.771  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     97832.300 ±   80721.779    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.804 ±       6.829  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        45.326 ±     385.226    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34396.195 ±     709.800   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1553.643 ±      37.143  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     71082.191 ±    2359.081    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1479.448 ±    1162.111  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67743.002 ±   54839.454    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.645 ±       5.379  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        29.786 ±     248.312    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     35242.502 ±     231.763   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1528.194 ±      44.204  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68239.584 ±    1927.924    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1478.292 ±    1152.547  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66011.355 ±   51465.075    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.716 ±       5.636  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        31.962 ±     251.395    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    327843.524 ±   30319.512   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1859.447 ±     213.178  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8925.186 ±     355.586    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1742.566 ±    1414.167  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8365.196 ±    6759.010    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.762 ±       6.516  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.747 ±      32.050    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1522951.113 ±   10749.039   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       490.022 ±      32.775  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       506.335 ±      36.771    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.429 ±    1404.048  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       413.216 ±    1452.513    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.009 ±       0.079  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.010 ±       0.082    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    683434.055 ±    4937.653   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       542.452 ±      32.751  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1249.103 ±      79.002    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       533.512 ±    1148.425  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1229.114 ±    2645.774    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.083    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1861201.452 ±  136396.357   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       369.143 ±      52.100  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.049 ±      27.842    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.862 ±    1217.139  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       284.449 ±    1021.324    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.010 ±       0.090    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5     97367.481 ±    1854.119   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3247.499 ±      20.549  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52487.469 ±    1084.819    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2970.813 ±    1446.564  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     48020.507 ±   23587.169    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.067 ±       0.576    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        22.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        29.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    364187.370 ±   13071.775   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1257.486 ±      71.479  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5433.859 ±     172.668    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1207.661 ±    1154.030  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5209.344 ±    4861.682    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.708 ±       5.042  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.101 ±      22.163    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1530046.118 ±  156984.717   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       733.296 ±      66.433  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       754.068 ±      26.240    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       798.907 ±    1143.585  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       823.613 ±    1211.241    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.005 ±       0.043  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.005 ±       0.045    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5    990960.725 ±   56627.279   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       717.612 ±      41.381  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1139.618 ±      15.425    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.682 ±       2.075  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1062.107 ±      63.915    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2800512.009 ±   51317.521   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1337.353 ±      43.609  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       751.348 ±      14.661    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1210.201 ±    1159.045  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       679.709 ±     648.448    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.625 ±       4.484  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.350 ±       2.508    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3191902.096 ±  129776.775   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.011 ±       0.095  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.006 ±       0.047    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    464823.561 ±    4864.183   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       552.255 ±      38.441  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1869.684 ±     143.824    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.741 ±    1151.071  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1812.024 ±    3900.544    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.014 ±       0.121    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    159461.386 ±    8642.747   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2013.631 ±     150.824  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19868.586 ±     588.702    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.026 ±    1158.150  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     18491.570 ±   10654.146    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.745 ±       6.239  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.302 ±      61.137    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    448306.234 ±   34934.411   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       371.662 ±      60.143  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1304.209 ±     135.640    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       338.016 ±    1212.936  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1177.817 ±    4219.034    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.015 ±       0.126    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1241312.083 ±  121586.270   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       244.596 ±      37.788  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       310.081 ±      32.127    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       204.660 ±    1079.114  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       258.721 ±    1364.801    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.005 ±       0.046    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     79819.808 ±    6364.592   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3202.648 ±     257.968  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63149.729 ±    2011.061    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3085.721 ±    1428.480  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60900.334 ±   29945.399    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.149 ±       3.069    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        23.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    304662.031 ±   17534.018   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1716.948 ±     136.571  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8868.164 ±     263.258    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1608.562 ±    1415.031  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8299.564 ±    7073.623    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.708 ±       6.005  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.639 ±      30.865    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1927622.693 ±   57701.307   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1017.419 ±      58.349  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       830.566 ±      32.109    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.888 ±    1411.787  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       874.525 ±    1155.755    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.010 ±       0.036    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2846708.310 ±  225753.613   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       789.346 ±      80.304  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       436.343 ±      20.269    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       805.974 ±    1156.043  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       445.580 ±     637.404    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.007 ±       0.024    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3095172.398 ±    3563.616   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.057 ±       0.490  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.029 ±       0.249    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     48620.072 ±    2361.801   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2203.917 ±      74.618  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71335.772 ±    1959.679    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2142.779 ±    1149.702  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69362.089 ±   37344.673    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.795 ±       6.669  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        26.300 ±     220.691    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    243802.265 ±    5830.243   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2675.957 ±      69.158  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17272.762 ±     339.046    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2551.686 ±    1140.156  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16476.648 ±    7565.575    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.087 ±       0.502  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.566 ±       3.248    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    379893.579 ±   21065.710   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1963.464 ±     108.311  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8133.581 ±     232.904    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2005.400 ±      10.371  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      8308.562 ±     488.201    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.812 ±       5.742  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.382 ±      23.991    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2252280.584 ±  240826.508   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       799.327 ±      93.852  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       558.462 ±      21.344    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.307 ±    1156.990  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       561.850 ±     774.432    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.011 ±       0.060    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     85649.780 ±    4145.018   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3379.502 ±     150.602  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62098.326 ±    2202.805    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3247.105 ±    1194.987  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     59696.390 ±   23264.884    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.458 ±       2.395    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        35.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    257418.361 ±    5125.640   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2083.209 ±      87.248  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12736.014 ±     340.513    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2010.322 ±       9.756  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12290.928 ±     287.618    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.720 ±       5.893  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.438 ±      36.317    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1471064.205 ±  139033.954   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       885.101 ±      87.098  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       946.766 ±      18.772    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.938 ±    1152.216  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       856.056 ±    1171.546    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.004 ±       0.037    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2817794.487 ±  163192.477   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       983.291 ±      77.581  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       549.121 ±      14.568    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       940.777 ±    1418.914  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       524.518 ±     778.978    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.009 ±       0.058    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3179783.701 ±   22494.515   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    396584.409 ±    4061.180   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2557.329 ±      72.683  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10148.557 ±     361.687    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2416.643 ±    1405.906  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9592.813 ±    5658.991    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.090 ±       0.664  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.355 ±       2.629    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     26036.592 ±    1527.181   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1675.949 ±     114.337  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101281.173 ±    3125.927    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.714 ±    1421.581  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     97214.506 ±   82794.220    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.783 ±       4.475  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        46.661 ±     266.641    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     99363.079 ±    5010.028   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       964.581 ±      47.718  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15277.655 ±     690.719    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       928.460 ±    1399.781  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14746.662 ±   22748.471    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.131 ±       0.691    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     69547.573 ±     972.720   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1245.413 ±      34.125  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28183.426 ±     780.776    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.713 ±    1153.565  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27299.469 ±   26291.613    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.833 ±       5.279  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.870 ±     119.776    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    133887.346 ±    8899.329   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       928.346 ±      44.901  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10912.589 ±     579.694    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941.182 ±    1418.677  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11102.479 ±   17229.158    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.150 ±       0.866    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     36550.533 ±    1585.380   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1795.124 ±      71.155  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     77294.760 ±    2385.181    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1737.190 ±    1405.067  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     74830.263 ±   61153.651    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.916 ±       7.529  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        40.169 ±     330.528    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32363.170 ±     573.373   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       533.055 ±      39.075  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25922.953 ±    1981.307    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       503.937 ±    1116.210  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     24522.874 ±   54231.451    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.202 ±       1.738    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32537.381 ±     960.190   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       408.418 ±      20.997  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19753.925 ±    1167.370    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       471.640 ±    1058.696  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22836.604 ±   51119.921    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.402 ±       3.459    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     33968.713 ±    1392.086   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       419.421 ±      30.709  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19434.438 ±    2040.156    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.705 ±    1326.935  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     17275.899 ±   61900.408    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.196 ±       1.691    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34936.189 ±     421.801   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       392.797 ±      26.958  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17694.012 ±    1391.626    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       472.884 ±    1062.868  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     21322.644 ±   47930.265    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.375 ±       1.976    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15278.389 ±    1110.327   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1123.076 ±      60.562  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    115686.934 ±    5969.184    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1073.416 ±    1414.300  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    110977.486 ±  150682.638    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.708 ±       6.004  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        71.493 ±     606.369    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15319.013 ±    1167.504   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       997.927 ±     104.098  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    102507.037 ±    5686.377    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1069.831 ±    1410.027  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    109804.516 ±  143629.809    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.013 ±       0.074  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.381 ±       7.698    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    107525.279 ±    1344.933   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       285.140 ±      25.533  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4173.668 ±     424.873    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.649 ±    1079.053  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3005.064 ±   15844.865    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13632.242 ±     719.117   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1343.057 ±      72.049  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    155040.106 ±    4050.657    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1336.903 ±       5.670  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    154352.216 ±    8810.042    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.891 ±       6.879  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       105.035 ±     813.267    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45495.084 ±    1083.482   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1160.294 ±      16.576  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40136.125 ±     818.838    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.230 ±    1156.090  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41819.015 ±   40318.334    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.704 ±       5.837  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24.578 ±     203.913    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     63319.102 ±    2602.797   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1111.734 ±      74.400  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27630.001 ±    1348.220    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1071.228 ±    1411.074  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26606.847 ±   34855.422    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.676 ±       5.677  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        16.693 ±     140.161    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        25.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    174100.017 ±    2307.417   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       285.534 ±      31.043  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2581.355 ±     313.685    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.976 ±    1079.064  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2781.152 ±    9776.179    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.030 ±       0.255    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        10.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    185105.174 ±     430.710   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.017 ±       0.145  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.145 ±       1.231    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     58069.785 ±     285.461   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1123.388 ±      28.472  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30444.829 ±     791.701    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1073.390 ±    1414.659  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29090.323 ±   38344.761    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.633 ±       5.315  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        17.166 ±     144.190    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     99365.653 ±    6613.578   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2075.373 ±     152.481  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     32869.214 ±     552.555    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2006.397 ±      14.474  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     31785.294 ±    2217.483    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.841 ±       5.490  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.535 ±      88.612    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    118275.481 ±    6539.081   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1666.061 ±      86.335  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22166.680 ±     352.644    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1603.666 ±    1414.142  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21370.616 ±   19540.612    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.870 ±       6.620  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        11.658 ±      88.730    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    165447.482 ±    6509.765   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1553.939 ±      91.630  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14781.186 ±     422.240    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1473.428 ±    1151.624  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14007.732 ±   10686.822    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.039 ±       0.338    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     51061.104 ±    1092.065   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2743.409 ±     106.056  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84554.096 ±    2098.803    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2560.837 ±    1140.712  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     78892.041 ±   33831.006    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.153 ±       6.141    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    184033.077 ±    7038.541   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1229.067 ±      21.183  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10511.207 ±     411.913    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.501 ±    1415.508  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9195.106 ±   12286.482    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.687 ±       5.648  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         5.858 ±      48.162    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    530762.366 ±   40081.643   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       554.410 ±      71.437  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1643.657 ±     116.617    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       534.014 ±    1149.506  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1575.482 ±    3393.397    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.024 ±       0.128    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    705705.876 ±    6506.667   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       560.745 ±      20.917  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1250.413 ±      54.117    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.545 ±    1154.953  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1197.676 ±    2578.097    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.019 ±       0.160    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    780258.875 ±     601.620   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    332483.065 ±   26416.569   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       942.791 ±      81.995  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4462.758 ±     176.333    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       930.973 ±    1407.002  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4400.038 ±    6551.565    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.015 ±       0.087  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.068 ±       0.409    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     37764.119 ±     413.773   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1931.170 ±      76.592  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80465.129 ±    2821.198    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.339 ±    1147.399  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     78201.364 ±   47290.874    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.779 ±       6.346  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        32.364 ±     263.736    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    296506.168 ±    5835.674   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       317.799 ±      38.113  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1686.869 ±     215.132    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.812 ±    1211.946  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1796.508 ±    6439.007    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.017 ±       0.149    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    115320.234 ±    1274.329   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1374.528 ±      15.058  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18758.975 ±     227.956    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1471.395 ±    1144.699  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     20089.918 ±   15892.050    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.841 ±       6.842  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.450 ±      93.120    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    536400.977 ±   40563.073   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       357.777 ±      30.950  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1049.751 ±      90.988    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.779 ±    1216.771  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1004.140 ±    3632.888    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.012 ±       0.105    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     41171.664 ±    2970.385   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2046.336 ±     164.822  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78215.740 ±    1739.574    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2003.994 ±      14.287  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     76620.628 ±    5596.582    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.908 ±       5.798  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34.998 ±     224.896    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     75277.260 ±     354.788   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       617.535 ±      28.543  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12909.023 ±     585.097    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       669.246 ±       1.760  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     13990.029 ±      40.530    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.261 ±       1.499    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        16.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     87478.963 ±    3707.981   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       510.972 ±      39.215  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9192.515 ±     677.513    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       532.716 ±    1146.712  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9602.236 ±   20675.356    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.151 ±       0.796    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     77804.304 ±     591.668   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       474.042 ±      38.272  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9587.211 ±     760.632    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.053 ±    1113.804  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10175.564 ±   22512.462    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.168 ±       1.450    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     87049.344 ±    1749.041   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       507.297 ±      34.344  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9172.666 ±     768.208    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.726 ±    1118.374  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9140.609 ±   20259.332    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.151 ±       1.297    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     87665.991 ±    1363.063   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       436.264 ±      29.976  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7832.114 ±     651.093    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.651 ±    1326.724  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6666.469 ±   23843.186    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.150 ±       0.788    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10434.429 ±      76.175   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1717.751 ±      26.057  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    259039.537 ±    5114.672    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1742.693 ±    1412.729  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    262851.414 ±  214140.289    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.816 ±       5.202  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       122.986 ±     783.332    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9792.898 ±     605.389   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1545.935 ±      91.557  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    248417.838 ±    5797.890    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1470.507 ±    1155.867  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    236184.126 ±  181545.622    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.918 ±       6.685  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       146.315 ±    1065.725    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    155049.489 ±    6773.573   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       413.913 ±      53.324  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4200.095 ±     399.161    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.863 ±    1327.585  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3752.319 ±   13409.343    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.085 ±       0.732    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5921.446 ±     395.451   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1554.942 ±      80.370  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    413229.954 ±   14426.376    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1603.670 ±    1402.360  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    427262.210 ±  396675.962    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.958 ±       7.331  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       251.695 ±    1923.878    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     19983.979 ±    1022.831   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1556.271 ±     103.868  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122557.766 ±    3796.393    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1473.960 ±    1149.282  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    115996.742 ±   87681.556    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.774 ±       6.579  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        61.334 ±     520.980    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23326.326 ±     442.984   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1582.219 ±      22.747  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106748.900 ±    2060.322    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1606.146 ±    1410.113  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    108349.916 ±   94842.303    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.822 ±       5.346  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        55.500 ±     361.634    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    133440.571 ±   10401.906   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       302.915 ±      27.037  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3573.819 ±     428.212    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.638 ±    1078.997  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2448.113 ±   12913.343    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    141143.677 ±    1249.144   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.003 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23298.188 ±    1033.211   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1619.738 ±      97.191  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109390.413 ±    2622.939    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1474.121 ±    1156.108  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     99502.707 ±   76169.381    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.822 ±       5.175  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        55.128 ±     347.141    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    124433.943 ±    3085.764   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1771.581 ±      43.823  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22405.428 ±     642.735    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.358 ±    1411.653  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22063.497 ±   18168.561    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.754 ±       5.742  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.547 ±      72.765    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    561557.923 ±   13402.910   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       600.563 ±      21.263  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1682.993 ±      30.530    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       666.074 ±       2.209  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1866.654 ±      43.125    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.046  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.023 ±       0.128    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    327578.022 ±    4243.663   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       454.200 ±      28.838  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2182.318 ±     166.106    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.914 ±    1319.441  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1776.356 ±    6351.448    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.173    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    756442.928 ±   27700.918   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       509.718 ±      41.419  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1060.450 ±      87.980    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.822 ±    1118.620  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1052.044 ±    2332.107    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.018 ±       0.152    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     77186.361 ±    2461.014   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3195.528 ±      68.657  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65157.377 ±    1261.603    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3083.891 ±    1382.828  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     62910.856 ±   29367.974    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.511 ±       2.134    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    200831.607 ±    3373.040   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1475.980 ±      46.807  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11567.189 ±     430.860    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1474.568 ±    1146.174  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11563.440 ±    9205.328    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.741 ±       5.478  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.788 ±      42.778    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    654603.222 ±   11914.370   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       366.996 ±      39.374  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       882.290 ±     100.533    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.677 ±    1318.451  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       887.957 ±    3176.970    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.003 ±       0.030  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.008 ±       0.072    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    658141.658 ±   27105.845   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       503.572 ±      27.220  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1204.361 ±      85.394    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.705 ±    1148.842  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1278.978 ±    2753.732    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.699 ±       5.755  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.663 ±      13.678    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1120246.443 ±   83776.403   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       631.379 ±      50.053  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       886.993 ±      15.931    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       670.972 ±       1.882  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       942.896 ±      67.362    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.051    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1195472.464 ±    2460.829   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     33746.064 ±    1943.451   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1925.703 ±      84.534  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89804.287 ±    2822.762    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1874.437 ±    1145.438  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     87500.474 ±   55452.873    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.854 ±       7.038  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        39.189 ±     322.703    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    129264.731 ±    7207.769   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1661.918 ±      95.712  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20235.244 ±     635.315    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.520 ±    1417.999  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     19553.249 ±   16779.857    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.799 ±       5.218  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.617 ±      62.561    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    195073.986 ±    3972.959   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1177.337 ±      62.971  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9495.797 ±     429.170    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1069.664 ±    1408.269  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8630.826 ±   11399.570    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.835 ±       6.013  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.764 ±      48.785    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    253254.704 ±   19640.962   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1358.546 ±     103.754  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8442.193 ±      41.246    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345.022 ±       3.555  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8360.817 ±     648.619    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.641 ±       4.284  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.948 ±      26.340    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     69741.447 ±    5466.816   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2815.417 ±     196.495  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63532.509 ±    1209.211    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2695.172 ±      37.407  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60839.812 ±    5581.063    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.465 ±       1.792    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    182371.003 ±   10632.362   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1210.634 ±      47.158  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10447.390 ±     362.297    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.986 ±    1416.131  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9299.027 ±   12597.574    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.683 ±       5.180  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.968 ±      45.405    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    680233.732 ±  122206.495   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       706.773 ±     132.898  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1634.964 ±      25.880    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.485 ±       2.891  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1546.881 ±     277.370    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.029 ±       0.169    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    676479.191 ±   31684.355   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       534.607 ±      31.643  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1243.842 ±      94.811    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       402.604 ±    1415.209  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       938.844 ±    3300.626    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.010 ±       0.084    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    778227.564 ±   30000.219   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    339218.173 ±   33203.224   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       964.533 ±      73.790  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4474.927 ±     199.386    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       934.967 ±    1407.546  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4340.607 ±    6561.296    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.096 ±       0.373    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11376.571 ±     652.962   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1446.125 ±      50.520  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    200056.035 ±    7575.591    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1342.619 ±       7.568  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    185754.167 ±   11273.006    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.795 ±       5.047  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       109.528 ±     696.218    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10418.313 ±     220.356   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1214.644 ±      50.557  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    183481.425 ±   10524.212    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1071.100 ±    1411.887  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    161979.128 ±  215573.555    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.817 ±       6.552  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       124.378 ±     997.590    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    280797.530 ±   23017.266   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1890.567 ±     154.940  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10595.630 ±     267.765    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1882.220 ±    1160.857  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10560.400 ±    6757.419    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.650 ±       4.078  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.743 ±      23.793    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8505.173 ±     150.992   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1536.178 ±      33.642  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    284234.842 ±    7975.494    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1469.840 ±    1154.644  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    272090.261 ±  217551.293    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.946 ±       7.278  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       175.621 ±    1352.760    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     26240.463 ±    1986.398   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1382.869 ±      63.274  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82935.263 ±    2642.043    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.792 ±       5.326  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     80486.040 ±    6011.473    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.712 ±       5.025  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        42.327 ±     298.537    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     28380.986 ±    3158.177   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1189.843 ±     142.477  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65985.121 ±    4735.586    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.451 ±    1152.316  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     66720.915 ±   62221.565    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.804 ±       6.788  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        46.349 ±     391.696    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    625048.935 ±    9278.161   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1156.126 ±      47.776  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2910.996 ±     127.333    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1076.146 ±    1418.973  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2710.268 ±    3580.967    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.625 ±       5.292  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.577 ±      13.357    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    786485.696 ±    1352.553   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.036 ±       0.310  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.073 ±       0.621    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     29569.808 ±    2273.217   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1348.706 ±     114.612  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71773.842 ±    2271.822    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1206.287 ±    1156.532  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     64255.964 ±   62330.251    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.821 ±       5.488  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        44.899 ±     302.177    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     33678.942 ±     738.427   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1783.010 ±      49.952  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83313.988 ±    1673.488    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.914 ±    1419.614  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     81480.694 ±   67160.158    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.816 ±       6.892  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        38.235 ±     322.933    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     33616.864 ±    3111.750   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1488.614 ±     168.761  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69683.218 ±    2329.936    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1470.199 ±    1143.017  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     68637.642 ±   46956.105    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.871 ±       6.179  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        41.322 ±     294.753    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    473174.707 ±   24150.454   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1275.246 ±      74.690  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4241.136 ±     117.193    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1345.544 ±       3.932  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4475.585 ±     235.746    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.575 ±       4.679  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.928 ±      15.705    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     19115.283 ±    1569.490   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1854.652 ±     153.109  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    152698.781 ±    6162.384    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1869.055 ±    1152.657  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    154153.339 ±  100730.116    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.941 ±       7.837  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        76.912 ±     640.202    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     55352.437 ±    2671.332   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1699.656 ±     102.286  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48316.909 ±    1144.044    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1741.880 ±    1412.496  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     49570.756 ±   41211.889    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.758 ±       5.587  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        21.505 ±     158.533    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    157463.766 ±   15277.489   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1912.624 ±     178.647  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19116.634 ±     524.158    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.256 ±    1155.615  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18709.879 ±   11188.390    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.733 ±       5.074  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.538 ±      52.686    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1171950.447 ±  105762.328   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1295.116 ±     116.360  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1739.060 ±      48.556    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.407 ±    1159.836  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1630.840 ±    1625.259    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.650 ±       5.462  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.862 ±       7.240    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1381604.463 ±   26573.737   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     66108.231 ±    6879.000   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1672.987 ±     156.335  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39824.276 ±     666.437    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1740.828 ±    1409.797  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     41514.517 ±   35013.658    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.820 ±       5.466  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.127 ±     127.354    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     17395.621 ±     760.899   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1520.639 ±      52.455  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    137571.053 ±    5122.614    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1474.732 ±    1161.683  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    133648.637 ±  111856.450    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.812 ±       6.769  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        74.783 ±     623.767    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     16991.411 ±    1316.360   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1402.352 ±     145.482  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    129861.510 ±    5388.145    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1338.089 ±       6.078  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    123960.744 ±    9586.270    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.921 ±       6.465  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        84.044 ±     586.289    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    677559.506 ±   34233.699   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1819.293 ±      82.385  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4225.724 ±      97.688    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1882.064 ±    1159.152  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4374.504 ±    2760.271    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.612 ±       4.960  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.406 ±      11.375    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     13293.659 ±     430.240   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1810.977 ±      61.797  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    214382.826 ±    5380.822    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1601.226 ±    1399.784  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    189680.152 ±  168590.989    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.937 ±       7.000  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       110.263 ±     821.646    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     44121.427 ±    2458.778   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1726.393 ±     117.874  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61576.336 ±    1219.673    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1742.124 ±    1419.241  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     62034.360 ±   48261.393    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.754 ±       6.309  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        26.436 ±     221.235    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     57968.489 ±     514.970   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1782.647 ±      32.488  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48399.575 ±     539.999    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1740.015 ±    1408.709  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     47232.104 ±   38030.180    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.768 ±       6.295  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.913 ±     171.382    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1345322.229 ±   64165.548   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1261.362 ±      30.990  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1475.488 ±      46.454    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.442 ±    1159.734  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1418.273 ±    1387.242    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.654 ±       5.545  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.774 ±       6.555    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1582322.835 ±     730.907   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3788.444 ±     164.885   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       516.132 ±      22.375  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    214403.435 ±    8474.310    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       401.431 ±    1411.087  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    167234.240 ±  587911.931    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.745 ±      15.024    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    124942.874 ±    2239.191   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1982.462 ±      83.218  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     24972.052 ±     824.335    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.352 ±    1159.047  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     23652.814 ±   14704.845    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.770 ±       4.625  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.738 ±      58.565    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        25.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    381325.385 ±    2763.123   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       784.110 ±      19.777  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3236.328 ±      96.919    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       799.822 ±    1145.326  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3302.149 ±    4746.425    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.065  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.048 ±       0.268    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    251872.235 ±   14884.094   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       554.436 ±      52.896  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3464.140 ±     222.239    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       532.913 ±    1147.136  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3326.194 ±    7163.643    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.051 ±       0.436    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    513404.657 ±   33991.541   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       668.791 ±      29.443  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2050.115 ±      52.228    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       669.358 ±       1.579  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2052.186 ±     140.902    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.616 ±       5.261  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.918 ±      16.380    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     73973.696 ±    3088.853   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3119.419 ±     175.574  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66354.823 ±    1652.995    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2949.408 ±    1409.741  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     62734.543 ±   29652.627    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.266 ±       1.517    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        30.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    135087.774 ±    9293.364   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1184.387 ±      97.071  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13796.883 ±     563.420    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.643 ±    1415.062  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12543.714 ±   16926.918    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.754 ±       5.155  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         9.001 ±      62.099    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    208054.432 ±    2487.955   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       167.346 ±      21.598  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1265.873 ±     176.297    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.655 ±    1079.087  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1552.216 ±    8184.394    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.376 ±       3.242  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.853 ±      24.562    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    425935.145 ±    4822.141   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       426.623 ±      28.523  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1576.387 ±     117.488    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.194 ±    1320.620  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1366.572 ±    4888.445    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.015 ±       0.133    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    456497.522 ±   20915.325   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       369.450 ±      32.494  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1273.973 ±     155.666    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370.094 ±    1324.403  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1283.567 ±    4590.675    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.612 ±       5.270  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.137 ±      18.398    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    496595.264 ±    4643.854   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     28270.052 ±    1888.751   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1596.547 ±      75.189  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88871.724 ±    2148.455    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.297 ±    1411.467  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     89673.742 ±   82999.673    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.816 ±       5.203  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        45.851 ±     294.501    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8248.422 ±     478.855   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1175.376 ±      66.380  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    224251.821 ±    9087.414    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1208.194 ±    1156.237  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    230904.163 ±  225639.910    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.745 ±       6.328  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       141.104 ±    1197.768    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8436.787 ±     210.052   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1105.639 ±      54.463  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    206218.472 ±    5430.269    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1070.080 ±    1411.581  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    199350.846 ±  260276.545    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.775 ±       6.627  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       144.813 ±    1238.583    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    184618.772 ±    6552.438   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1852.464 ±      45.770  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15788.067 ±     378.420    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1747.257 ±    1415.771  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     14912.707 ±   12508.218    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.641 ±       4.302  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.503 ±      37.096    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7951.401 ±     504.645   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1298.217 ±     130.364  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    256887.979 ±   10189.292    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1202.512 ±    1148.869  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    237238.305 ±  217136.200    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.946 ±       7.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       192.005 ±    1449.750    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     21532.790 ±     807.459   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1220.490 ±      70.120  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89194.166 ±    2447.872    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1073.917 ±    1415.695  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     78333.932 ±  101550.720    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.775 ±       5.048  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        56.558 ±     367.177    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     26126.086 ±     298.415   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1155.799 ±      26.621  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69623.804 ±    2246.399    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1071.698 ±    1411.646  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     64587.807 ±   85416.676    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.667 ±       5.516  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        40.083 ±     331.654    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    377502.728 ±   14651.634   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       881.059 ±      76.703  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3672.773 ±     233.609    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       937.275 ±    1412.477  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3902.512 ±    5817.489    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.052 ±       0.183    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    433434.258 ±    2310.564   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.034 ±       0.290  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.124 ±       1.051    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     24241.892 ±    1711.552   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1171.730 ±     114.815  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     76048.547 ±    2551.832    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1205.673 ±    1154.148  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     78183.927 ±   73909.346    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.825 ±       6.926  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        52.719 ±     442.160    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13612.173 ±    1287.933   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1332.349 ±      75.819  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    154064.563 ±    7258.790    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1336.473 ±       6.865  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    154586.574 ±   15443.561    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.475 ±       4.089    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        13.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13066.010 ±    1041.871   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1170.194 ±      76.195  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    140975.067 ±    5033.002    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.005 ±    1151.442  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    145312.489 ±  143619.160    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.853 ±       7.301  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       104.735 ±     896.530    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    274117.399 ±   23880.665   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1641.717 ±     109.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9426.616 ±     423.446    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1613.378 ±    1416.673  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9303.418 ±    8986.099    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.641 ±       4.500  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.651 ±      25.572    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12593.028 ±     852.163   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1530.980 ±     138.662  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    191303.248 ±    8429.580    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1469.980 ±    1167.304  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    183577.129 ±  141656.852    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.129 ±       0.890  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        15.964 ±     109.631    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33042.807 ±    2048.252   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1428.227 ±     106.605  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68022.504 ±    1248.425    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1340.710 ±       5.479  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     63870.290 ±    4052.807    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.741 ±       5.938  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        34.943 ±     279.941    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     81085.781 ±    2297.592   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2045.388 ±      38.108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39693.910 ±     634.442    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2008.736 ±      10.492  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     38983.727 ±    1224.638    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.749 ±       5.630  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.530 ±     109.193    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    629712.341 ±   14432.524   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       888.823 ±      20.764  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2221.306 ±      75.536    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.284 ±    1156.805  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2017.060 ±    2930.663    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.010 ±       0.090    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    716476.244 ±    2927.142   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     73284.572 ±    4450.896   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2127.962 ±     149.413  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45689.491 ±     605.978    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2004.710 ±      12.299  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     43053.091 ±    2670.190    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.862 ±       7.023  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        18.753 ±     152.861    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     16825.946 ±    1601.044   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       897.246 ±     112.898  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83927.885 ±    9765.850    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       805.234 ±    1155.720  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     75381.111 ±  109009.199    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.769 ±       4.055    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17268.967 ±     589.228   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       762.169 ±       8.699  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69460.991 ±    3049.643    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       668.069 ±       1.539  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     60884.007 ±    2033.704    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    122006.405 ±    1384.934   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       315.614 ±      32.157  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4071.170 ±     454.366    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       338.851 ±    1217.089  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4378.104 ±   15737.663    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.054 ±       0.463    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14324.594 ±     856.291   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1090.303 ±      55.463  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    119775.992 ±    2922.817    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1069.418 ±    1410.415  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    117625.115 ±  156731.813    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.779 ±       6.483  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        87.714 ±     730.908    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     46979.534 ±    1712.249   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1443.849 ±      61.010  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48366.615 ±     515.084    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1342.523 ±       4.300  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     44976.164 ±    1733.917    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.691 ±       4.847  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        23.341 ±     164.245    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     76441.375 ±    1052.155   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1626.583 ±      30.294  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33488.280 ±     866.387    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1606.060 ±    1410.944  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     33073.667 ±   29234.364    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.758 ±       5.747  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        15.624 ±     118.488    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    295440.747 ±   32027.589   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       581.697 ±      55.221  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3099.349 ±     188.064    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       536.771 ±    1155.440  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2878.588 ±    6206.136    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.077  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.066 ±       0.405    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    362680.454 ±    1800.130   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.059 ±       0.504  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.255 ±       2.188    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     67824.852 ±    3716.665   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1564.480 ±     105.206  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36298.752 ±    1637.913    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1474.528 ±    1158.849  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     34255.825 ±   28099.304    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.775 ±       6.490  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.195 ±     152.482    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    143487.398 ±    5239.452   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1875.910 ±      68.059  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20575.140 ±     262.593    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.102 ±    1156.948  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     20591.160 ±   12754.151    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.766 ±       5.884  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.337 ±      63.965    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    857806.457 ±    9619.590   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       486.186 ±      35.540  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       892.030 ±      74.757    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.791 ±    1405.321  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       734.866 ±    2583.162    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.014 ±       0.078  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.027 ±       0.143    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    393024.528 ±    3060.539   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       404.188 ±      30.304  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1618.584 ±     131.377    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.221 ±    1057.262  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1888.732 ±    4237.697    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.067 ±       0.419    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1144590.683 ±  101402.691   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       407.256 ±      43.106  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       559.903 ±      36.429    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       473.066 ±    1063.501  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       651.735 ±    1451.219    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.006 ±       0.049    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     79111.999 ±    1779.928   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3087.975 ±      88.222  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     61420.665 ±     420.226    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2949.459 ±    1384.392  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     58647.275 ±   26721.247    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.067 ±       0.530  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.326 ±      10.545    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        22.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    269654.725 ±   18879.138   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1645.856 ±     125.232  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9604.776 ±     117.682    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.647 ±    1414.039  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9401.368 ±    8535.755    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.737 ±       5.108  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.403 ±      30.625    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1242136.529 ±   23454.513   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       437.595 ±      34.850  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       554.411 ±      40.122    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       501.711 ±    1110.110  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       635.376 ±    1408.179    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.005 ±       0.028  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.035    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5    892860.913 ±    6466.675   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       539.864 ±      37.900  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       951.632 ±      69.480    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       533.982 ±    1149.438  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       941.739 ±    2027.177    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1902205.705 ±   54514.244   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       668.853 ±      35.151  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       553.294 ±      17.657    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.125 ±       2.041  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       555.210 ±      14.607    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.007 ±       0.059    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2050695.475 ±   18902.542   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0.189 ±       1.621  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.145 ±       1.250    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     41475.802 ±    2313.880   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2072.597 ±      91.916  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78639.631 ±    1244.099    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2007.871 ±      12.733  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     76193.277 ±    4131.810    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.829 ±       6.999  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        31.001 ±     261.820    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     15779.185 ±     824.828   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1950.408 ±      65.778  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    194507.419 ±    4724.593    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1879.299 ±    1155.849  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    187248.418 ±  111258.149    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1.659 ±       6.705    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        20.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     98058.728 ±    9334.361   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1319.141 ±     107.418  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21171.176 ±     490.829    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1337.939 ±       5.603  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21481.264 ±    1975.463    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.829 ±       6.516  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.078 ±     102.450    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    251754.682 ±   25929.922   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       841.951 ±      47.141  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5263.628 ±     269.645    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       805.243 ±    1149.190  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5070.887 ±    7874.611    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.132 ±       0.726    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13066.713 ±     634.057   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      1997.331 ±     101.243  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    240540.239 ±    4468.201    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2004.279 ±      15.630  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    241409.031 ±   12704.001    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.904 ±       5.557  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       110.097 ±     681.522    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     33395.497 ±     832.526   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2799.118 ±      99.099  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    131901.880 ±    2202.621    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2686.015 ±      31.054  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    126576.549 ±    2653.771    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.037 ±       0.191  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         1.763 ±       8.985    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    105873.379 ±    2584.932   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1499.034 ±      51.022  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22280.053 ±     340.681    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472.885 ±    1153.585  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21891.576 ±   17130.068    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.766 ±       6.507  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.451 ±      97.258    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    178122.765 ±    3491.159   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       585.390 ±      25.688  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5172.412 ±     203.678    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.912 ±    1155.744  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4749.443 ±   10224.146    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.074 ±       0.388    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    194757.403 ±     371.658   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.189 ±       1.621  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.525 ±      13.111    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     47785.482 ±    1745.062   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3376.924 ±     132.211  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111206.955 ±    2439.382    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3228.337 ±    1125.627  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    106263.700 ±   34521.414    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.050 ±       0.348  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.639 ±      11.416    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     26465.012 ±    1066.323   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1422.086 ±      73.328  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84554.424 ±    2485.869    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.988 ±       5.722  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79799.328 ±    3199.914    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.770 ±       5.168  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        45.467 ±     305.124    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     30139.826 ±     964.945   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1228.730 ±      27.210  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64160.423 ±    1468.929    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1204.582 ±    1153.859  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     62956.464 ±   60994.318    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.866 ±       5.555  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        45.158 ±     289.955    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    635729.548 ±   46593.314   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1702.786 ±      73.243  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4215.755 ±     163.652    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1613.389 ±    1419.090  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4004.439 ±    3737.833    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.621 ±       5.120  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.585 ±      13.094    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     24205.412 ±    1941.196   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1784.959 ±     100.150  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    116070.167 ±    4598.448    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1741.916 ±    1412.816  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    113670.965 ±   99880.856    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.108 ±       0.759  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         7.125 ±      50.117    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     72254.385 ±    1348.170   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1918.991 ±      75.303  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41797.352 ±    1009.643    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1875.819 ±    1158.548  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     40839.634 ±   24799.560    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.745 ±       4.763  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        16.274 ±     104.132    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    179700.376 ±   13221.197   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2018.263 ±     130.342  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17675.615 ±     280.737    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2007.382 ±      11.458  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17584.740 ±    1299.836    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.754 ±       5.472  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.533 ±      47.431    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1501383.826 ±   94395.194   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1285.240 ±      66.241  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1347.271 ±      46.761    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.387 ±       4.260  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1409.488 ±      92.254    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.637 ±       5.173  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.662 ±       5.375    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1759334.393 ±    8705.830   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    154625.813 ±     672.646   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2009.150 ±      39.856  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20449.747 ±     385.373    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2015.697 ±      32.540  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20516.424 ±     344.561    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.042 ±       0.272  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.424 ±       2.769    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     42786.995 ±    1886.466   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1572.214 ±      84.638  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     57828.907 ±    1500.989    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1471.051 ±    1147.433  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     54083.048 ±   41331.694    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.854 ±       7.081  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.093 ±     257.876    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    772525.787 ±   41085.852   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1556.250 ±      84.709  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3170.439 ±      60.929    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1613.849 ±    1415.635  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3287.327 ±    2871.357    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.650 ±       4.257  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.319 ±       8.647    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     32944.030 ±    1595.701   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2364.775 ±     176.672  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    112944.670 ±    3627.809    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2286.265 ±    1441.577  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    109105.849 ±   65578.605    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.071 ±       0.566  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.447 ±      27.584    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    383490.581 ±    7887.112   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1095.544 ±      32.555  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4496.271 ±     160.762    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1071.152 ±    1411.405  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4399.769 ±    5837.543    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.641 ±       5.386  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.617 ±      21.977    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1878339.393 ±   70736.207   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1140.935 ±      44.307  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       956.003 ±      47.658    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210.200 ±    1158.190  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1014.693 ±     979.569    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.662 ±       5.610  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.551 ±       4.673    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2254312.637 ±    1517.685   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.016 ±       0.135  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.011 ±       0.094    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    247111.305 ±    7919.050   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1636.227 ±      56.312  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10420.229 ±      89.084    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1469.688 ±    1153.067  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9355.584 ±    7209.192    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.812 ±       5.773  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         5.228 ±      37.201    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     70593.508 ±    2427.848   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1557.696 ±      65.643  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34727.727 ±    1325.684    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1474.766 ±    1150.269  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     32890.140 ±   25968.917    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.779 ±       5.968  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        17.207 ±     131.687    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     76790.195 ±    5730.392   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1000.622 ±      67.788  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20508.559 ±     827.274    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       935.508 ±    1411.352  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19164.154 ±   28792.580    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.336 ±       2.089    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     90040.239 ±    4546.787   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1109.417 ±      81.434  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19388.086 ±     590.080    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1075.048 ±    1416.309  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18740.393 ±   24145.398    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.624 ±       5.198  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        11.029 ±      91.842    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     44768.665 ±    1840.915   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2098.626 ±     101.980  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73768.330 ±    1526.727    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2001.938 ±      12.895  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     70375.636 ±    2473.335    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.912 ±       7.584  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        31.651 ±     263.019    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    115387.309 ±    2686.166   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1105.503 ±      42.240  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15076.289 ±     468.707    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1072.491 ±    1413.569  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14616.134 ±   19151.522    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.687 ±       5.781  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.466 ±      79.678    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    302981.880 ±    7217.121   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       466.998 ±      34.156  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2425.630 ±     201.708    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.457 ±    1112.148  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2613.997 ±    5789.137    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.087 ±       0.458    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    648887.717 ±   36524.367   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       826.441 ±      48.162  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2004.459 ±      68.861    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       805.968 ±    1157.586  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1959.493 ±    2894.367    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.040 ±       0.164    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    746487.634 ±   14562.864   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.011 ±       0.088  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.022 ±       0.187    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    266237.838 ±    8759.377   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       875.935 ±      51.458  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5177.543 ±     187.859    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.376 ±    1151.033  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4741.547 ±    6773.999    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.124 ±       0.589    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        21.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    125805.143 ±    5855.239   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1771.951 ±     125.990  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22165.364 ±     616.610    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1607.200 ±    1413.858  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20067.013 ±   16757.624    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.824 ±       6.254  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.214 ±      77.399    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    178997.888 ±   11832.141   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1089.852 ±      61.922  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9583.154 ±     461.547    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1069.991 ±    1410.567  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9424.296 ±   12596.065    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.733 ±       6.175  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.524 ±      55.008    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    466385.514 ±    3690.940   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       933.751 ±      56.691  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3150.787 ±     200.397    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       940.952 ±    1418.092  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3176.413 ±    4804.165    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.042 ±       0.148    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     68170.140 ±    1818.561   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2757.882 ±      71.827  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63661.840 ±     573.876    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2694.430 ±      33.642  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     62198.582 ±    1266.368    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.300 ±       2.141  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.978 ±      49.932    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    182120.338 ±    9497.896   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1182.540 ±      38.232  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10217.968 ±     294.033    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1073.950 ±    1415.982  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9303.441 ±   12525.058    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.712 ±       5.039  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.117 ±      43.244    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    541068.314 ±   23772.038   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       552.304 ±      54.294  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1606.359 ±     118.981    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       533.893 ±    1149.246  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1550.672 ±    3339.000    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.104    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1150989.159 ±   30907.531   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       877.863 ±      45.409  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1200.219 ±      36.331    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.152 ±    1157.875  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1100.949 ±    1558.124    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±       0.060    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1271353.333 ±    5577.956   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    356619.451 ±   11323.888   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       995.943 ±      40.499  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4394.661 ±     145.968    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       930.484 ±    1401.131  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4104.632 ±    6164.252    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.110 ±       0.631    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       596.914 ±      19.926   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1275.763 ±      26.412  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3362567.286 ±   71086.821    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1204.399 ±    1154.203  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3173513.995 ± 3030641.419    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.791 ±       6.199  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2066.955 ±   16172.541    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       585.826 ±      46.054   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1246.393 ±     144.730  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3346289.781 ±  158506.303    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1198.042 ±    1146.171  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3205055.377 ± 2911783.190    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.178 ±       9.223  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3118.901 ±   24405.469    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     50716.999 ±     790.909   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       845.120 ±      32.535  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26224.235 ±     631.744    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.818 ±    1155.406  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24915.690 ±   35317.797    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.387 ±       2.225    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       577.567 ±      44.672   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1267.382 ±      92.948  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3451820.701 ±   80424.903    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1200.896 ±    1148.619  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3271700.087 ± 3141620.432    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.953 ±       6.021  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2542.275 ±   16046.662    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14737.701 ±     685.271   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1166.070 ±      50.947  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    124504.492 ±    3999.786    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1202.053 ±    1148.847  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    128515.812 ±  124856.280    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.091 ±       9.302  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       117.611 ±    1003.127    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     18041.745 ±     323.128   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1091.587 ±      26.573  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     95222.208 ±    3156.935    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1067.369 ±    1406.648  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     93138.802 ±  123078.669    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.049 ±       8.765  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        91.346 ±     763.126    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    216050.833 ±    9351.441   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       781.936 ±      57.607  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5695.818 ±     260.871    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       802.526 ±    1150.683  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5838.495 ±    8228.184    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.061 ±       0.322    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    245358.954 ±    3143.695   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     17862.367 ±    1573.482   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1154.663 ±      84.701  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    101746.786 ±    8081.055    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1069.049 ±    1410.272  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     94743.867 ±  130804.104    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.124 ±       9.634  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       100.682 ±     863.071    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        30.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1549085.618 ±   48406.678   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        68.319 ±      36.194  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        69.450 ±      38.446    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.337 ±     881.155  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       104.850 ±     902.789    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     82134.158 ±    4315.100   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3395.556 ±     182.373  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     65055.788 ±    1328.480    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3246.720 ±    1149.745  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     62172.373 ±   20346.903    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.033 ±       0.244  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.633 ±       4.649    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        24.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        34.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1842154.336 ±   56415.385   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       994.716 ±      52.242  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       849.694 ±      31.335    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1069.201 ±    1409.211  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       913.344 ±    1203.772    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.011 ±       0.061    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2242817.197 ±   16015.359   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       645.075 ±      14.166  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       452.633 ±       7.387    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       670.872 ±       1.354  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       470.738 ±       3.461    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.009 ±       0.050    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2401323.661 ±   12300.832   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.414 ±       0.129  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51188.239 ±    3013.677   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2203.244 ±     144.184  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     67729.403 ±    1710.935    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2271.250 ±    1421.003  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     69885.472 ±   45528.646    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.887 ±       7.189  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        27.887 ±     226.440    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        17.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    858137.202 ±   46617.831   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2783.102 ±     161.440  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5103.886 ±      60.186    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2681.196 ±      32.988  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      4917.786 ±     261.226    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.015 ±       0.081    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        20.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   4942802.360 ±  661309.769   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       311.094 ±      27.644  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        99.106 ±      10.686    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       337.871 ±    1212.256  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       109.221 ±     388.577    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.012 ±       0.068  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.004 ±       0.022    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5    991248.832 ±   38881.326   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1160.621 ±      62.214  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1842.666 ±      64.200    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1069.208 ±    1409.625  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1698.304 ±    2246.963    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.847 ±       7.183  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.331 ±      11.278    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        31.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9054741.407 ±  561170.602   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       431.321 ±      38.264  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.993 ±      10.194    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       473.424 ±    1064.796  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        82.600 ±     186.788    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.001 ±       0.006    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    501053.018 ±   26675.249   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2168.651 ±     118.521  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      6811.819 ±     125.480    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2148.795 ±    1151.208  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6746.950 ±    3486.202    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.246 ±       2.071  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.765 ±       6.449    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4531.274 ±      74.552   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2277.704 ±      60.963  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    790959.519 ±   17918.928    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2266.903 ±    1407.252  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    787210.615 ±  488544.182    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         1.034 ±       7.318  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       358.877 ±    2539.209    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        31.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6694.055 ±     408.969   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2289.125 ±     159.500  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    538143.261 ±   15468.807    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2281.977 ±    1414.952  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    536887.100 ±  343817.953    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.229 ±       1.676  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        54.680 ±     399.930    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     45838.253 ±    2569.970   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       760.881 ±      55.928  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26118.655 ±    1042.979    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       805.963 ±    1156.960  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     27623.075 ±   38805.605    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.021 ±       0.080  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.713 ±       2.753    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        16.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4798.486 ±      72.610   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1047.804 ±      42.541  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    343666.389 ±   14741.487    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       936.913 ±    1411.330  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    307487.519 ±  465621.358    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.042 ±       0.150  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        13.665 ±      49.126    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        28.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5011.558 ±      77.943   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       658.032 ±      10.544  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    206632.787 ±    2323.755    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       660.882 ±       4.920  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    207530.740 ±    4408.801    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.043  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         3.879 ±      13.627    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         8.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6538.783 ±     156.719   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       329.429 ±      32.567  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79275.620 ±    9363.633    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.848 ±    1217.039  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81866.097 ±  294097.015    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6614.260 ±     112.360   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       283.250 ±      40.648  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67405.150 ±   10588.168    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.627 ±    1078.941  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     48847.580 ±  257561.064    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7890.625 ±     444.389   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1675.420 ±      94.150  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334163.124 ±   10818.533    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1606.801 ±    1413.728  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    320794.678 ±  288583.260    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.826 ±       6.239  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       164.659 ±    1247.329    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     18945.959 ±     567.242   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       481.340 ±      33.494  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39983.878 ±    3557.991    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       398.843 ±    1401.989  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     33216.964 ±  116769.129    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.011 ±       0.056  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.885 ±       4.678    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15553.920 ±     681.098   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       427.550 ±      53.483  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43262.026 ±    5558.131    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       365.693 ±    1306.032  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     37010.084 ±  132598.223    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.414 ±       3.561    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     22807.930 ±    2170.873   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       434.706 ±      52.650  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     30002.969 ±    4369.424    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.353 ±    1325.802  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     25553.376 ±   90923.637    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.283 ±       2.434    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      3626.932 ±      31.193   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2265.849 ±      65.404  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    983194.655 ±   32936.454    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2279.393 ±    1409.653  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    989041.024 ±  610930.466    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.502 ±       3.593  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       217.219 ±    1555.519    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5      9813.811 ±     206.445   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2102.893 ±      59.941  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    337233.069 ±    7487.083    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2007.707 ±      11.156  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    321976.783 ±    8342.526    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.807 ±       5.961  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       130.462 ±     965.175    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     54911.349 ±    2572.797   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       526.942 ±      39.030  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15102.109 ±     892.538    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       532.013 ±    1145.199  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     15239.540 ±   32815.595    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.003 ±       0.023  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.078 ±       0.676    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     44921.412 ±    3168.872   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       665.790 ±      54.131  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23322.184 ±     278.275    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       662.843 ±       6.730  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     23226.359 ±    1712.245    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.002 ±       0.017  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.070 ±       0.604    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     89749.225 ±    5786.423   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       695.193 ±      55.336  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12188.958 ±     507.434    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       804.342 ±    1153.453  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     14096.470 ±   20057.119    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.148 ±       0.780    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        18.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    105195.249 ±     211.506   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.058 ±       0.496  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.865 ±       7.415    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7549.839 ±      43.790   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2410.261 ±      79.523  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    502418.102 ±   14435.781    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2285.414 ±    1418.933  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    476344.938 ±  294127.291    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.194 ±       1.363  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        40.431 ±     284.551    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   8449448.123 ±  312694.263   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4645.228 ±     189.403  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       865.119 ±      10.329    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4467.976 ±    1410.306  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       831.979 ±     253.349    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.033 ±       0.072  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.006 ±       0.013    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        33.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38251383.979 ±  126216.800   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  11109374.150 ±  196362.498   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3804.542 ±      79.247  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       538.927 ±      18.480    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3639.985 ±    1441.049  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       515.754 ±     211.089    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.050 ±       0.166  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.007 ±       0.024    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        38.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48912204.725 ±   58185.795   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         0.036 ±       0.309  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.001 ±       0.010    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31600234.641 ±  532296.169   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       826.607 ±      29.411  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.172 ±       2.149    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.688 ±    1157.205  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.230 ±      58.631    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.017 ±       0.143  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.001 ±       0.007    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   8861766.781 ±  157769.711   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3983.573 ±      83.722  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       707.354 ±       8.310    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3914.352 ±    1157.774  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       695.084 ±     206.401    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.025 ±       0.036  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.004 ±       0.006    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        29.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        40.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  13756454.436 ±  221996.032   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1653.790 ±      49.611  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       189.208 ±       5.016    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1609.267 ±    1414.239  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       184.186 ±     163.388    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.704 ±       5.353  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.081 ±       0.614    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42392057.564 ±  868968.198   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       886.113 ±      44.928  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.897 ±       1.805    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       800.499 ±    1147.782  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        29.744 ±      43.105    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.014 ±       0.049  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.001 ±       0.002    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        18.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13177630.830 ±  163820.837   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2704.745 ±      85.675  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.035 ±       9.208    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2546.323 ±    1164.088  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       304.149 ±     140.144    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        19.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  48336356.222 ± 4709872.225   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1010.513 ±      96.014  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.903 ±       0.949    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1074.540 ±    1416.232  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        35.062 ±      46.951    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.006 ±       0.036  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  61440771.146 ± 2444946.481   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17813822.003 ±  734274.883   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1681.112 ±      45.177  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.538 ±       7.513    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1620.265 ±    1425.323  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       143.426 ±     131.993    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.158 ±       0.815  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.014 ±       0.073    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        17.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2690066.621 ±  168700.790   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2168.191 ±     184.751  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1268.283 ±      42.590    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2145.861 ±    1150.779  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1254.390 ±     628.635    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.708 ±       6.007  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.418 ±       3.543    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    171682.159 ±    1882.466   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3266.510 ±      50.188  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     29951.913 ±     411.918    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3100.405 ±    1395.598  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28427.077 ±   12727.884    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.114 ±       0.402    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     35343.338 ±    1151.492   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2538.267 ±     131.861  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    113008.617 ±    2992.328    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2420.403 ±    1408.937  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    107707.870 ±   60932.391    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.185 ±       1.552  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         8.294 ±      69.414    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    143446.662 ±    2176.424   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1242.423 ±      24.044  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13630.706 ±     329.368    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.403 ±    1150.391  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13208.945 ±   12704.108    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.845 ±       6.200  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.273 ±      67.974    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    441554.392 ±   10154.769   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1767.882 ±      61.080  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6301.458 ±     176.597    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1610.171 ±    1415.042  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      5741.107 ±    5083.635    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.683 ±       5.790  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.420 ±      20.517    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    481088.279 ±   23610.749   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1382.455 ±      67.749  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4521.617 ±      97.377    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1343.911 ±       5.079  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4396.074 ±     220.011    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.646 ±       4.787  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.145 ±      15.955    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     75057.578 ±    1552.969   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1563.739 ±      33.279  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     32788.267 ±    1058.175    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472.629 ±    1146.033  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     30899.226 ±   24680.386    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.133 ±       0.793  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.784 ±      16.549    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    326956.791 ±    8425.180   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2443.435 ±      38.989  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11761.365 ±     273.189    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2280.357 ±    1409.519  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     10982.029 ±    6965.378    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.129 ±       1.067  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.621 ±       5.135    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    495344.330 ±   28988.545   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1315.595 ±      63.127  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4179.591 ±      67.161    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1336.615 ±       5.917  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4247.003 ±     252.032    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.887 ±       7.458  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.866 ±      24.113    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1370650.961 ±   21851.446   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2778.739 ±      52.458  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3191.124 ±      31.592    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2693.852 ±      31.675  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3093.674 ±      52.972    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.014 ±       0.051    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    107916.461 ±    5717.558   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3467.124 ±     171.227  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     50561.994 ±     877.800    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3226.002 ±    1121.202  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     47026.824 ±   15347.411    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.054 ±       0.379  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.777 ±       5.411    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        24.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        32.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    346064.696 ±   15813.872   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1195.850 ±      41.671  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5438.497 ±     234.929    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1207.714 ±    1155.025  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5498.108 ±    5329.239    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.695 ±       5.854  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.142 ±      26.437    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    829289.098 ±   44841.250   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       615.138 ±      43.014  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1167.407 ±      73.058    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       533.446 ±    1148.284  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1016.518 ±    2188.781    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2085237.718 ±  143408.823   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       987.395 ±      85.399  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       745.160 ±      22.857    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941.056 ±    1418.582  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       710.746 ±    1076.855    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.066    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        20.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2351900.676 ±   52856.888   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.294 ±       2.533  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.197 ±       1.693    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    470566.384 ±   27887.337   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       696.840 ±      42.815  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2330.561 ±      36.118    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       668.965 ±       1.988  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2237.780 ±     138.709    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.014 ±       0.119    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     60201.926 ±     179.947   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2114.607 ±      26.506  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55271.523 ±     761.910    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2011.288 ±      12.553  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     52570.886 ±     186.143    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.750 ±       6.143  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        19.571 ±     160.359    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     93029.192 ±    3310.925   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1713.100 ±      50.985  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     28979.899 ±     632.441    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1736.276 ±    1409.018  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     29387.633 ±   24156.436    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.949 ±       6.041  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.913 ±     100.736    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        30.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    165364.514 ±    6910.435   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2630.078 ±     103.503  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25031.439 ±     433.057    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2553.787 ±    1161.238  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24306.192 ±   11066.926    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.118 ±       0.678    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        30.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     33243.352 ±     213.453   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2230.199 ±      50.728  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105562.892 ±    2301.681    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2148.246 ±    1171.573  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    101684.976 ±   55500.091    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.129 ±       0.978  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6.104 ±      46.224    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    160524.072 ±    7172.614   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1075.560 ±      24.919  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10546.339 ±     686.094    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       933.248 ±    1406.507  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9182.422 ±   14240.547    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.082 ±       0.430    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    460624.032 ±    7207.932   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       522.850 ±      29.681  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1786.438 ±     113.069    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.552 ±    1117.887  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1724.971 ±    3816.766    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.014 ±       0.122    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        13.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    505513.828 ±   45040.053   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.140 ±       0.455  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     75377.684 ±    1144.109   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1351.901 ±      24.409  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     28221.631 ±     567.164    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1334.503 ±      15.217  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     27858.693 ±     641.590    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.212 ±       1.650  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         4.458 ±      34.667    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2871759.924 ±   73816.268   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3706.141 ±      51.337  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2031.102 ±      31.921    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3637.988 ±    1402.333  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1994.710 ±     815.160    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.009 ±       0.037    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        27.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        36.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    804738.006 ±   46489.063   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       471.421 ±      45.952  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       921.799 ±      51.931    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.837 ±    1405.485  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       778.623 ±    2737.656    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.010 ±       0.058  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.019 ±       0.114    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    359787.595 ±   12270.836   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       847.515 ±      86.223  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3706.394 ±     291.814    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.561 ±    1149.492  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3496.926 ±    4938.793    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.010 ±       0.057  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.045 ±       0.247    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    730543.452 ±   34842.953   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       664.699 ±      64.296  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1431.816 ±      83.934    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.294 ±       1.573  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1448.500 ±      69.996    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.009 ±       0.077    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        13.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3336270.948 ±  135539.420   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      2023.896 ±      79.256  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       954.736 ±      13.929    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2020.329 ±       6.441  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       953.130 ±      39.272    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.537 ±       4.269  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.252 ±       2.002    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        25.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   7403214.095 ±  640599.506   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       811.255 ±      63.653  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       172.465 ±       5.587    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       806.904 ±    1155.768  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       172.498 ±     263.354    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.002 ±       0.016    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        14.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    224706.167 ±   10697.524   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1992.867 ±      82.953  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13958.320 ±     233.282    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2013.930 ±      19.873  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     14107.509 ±     772.912    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.254 ±       1.444  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.786 ±      10.138    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        25.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1572958.154 ±   11183.841   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        90.604 ±      23.449  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        90.649 ±      22.805    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.315 ±     880.964  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       102.059 ±     878.756    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.134 ±       1.157  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.134 ±       1.154    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     74393.676 ±    3152.282   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3281.513 ±     191.445  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69415.624 ±    2010.194    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3103.207 ±    1442.243  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     65639.664 ±   30210.506    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.046 ±       0.280  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.975 ±       5.980    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1577091.123 ±   87683.078   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       850.764 ±      43.176  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       849.065 ±      43.439    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       934.844 ±    1407.682  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       935.475 ±    1439.568    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.008 ±       0.044    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1667026.824 ±  114711.898   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       482.694 ±      24.693  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       455.828 ±      36.588    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.878 ±    1118.774  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       479.389 ±    1067.383    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.004 ±       0.035    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1804150.805 ±   28923.978   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.342 ±       0.297  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     51589.484 ±    1852.769   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2221.591 ±     118.167  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67772.152 ±    1350.206    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2136.879 ±    1140.379  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     65185.960 ±   34507.303    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.870 ±       7.313  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        26.935 ±     226.462    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    273832.797 ±    3949.460   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1105.578 ±      48.491  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6354.305 ±     327.978    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.638 ±    1417.614  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6187.732 ±    8216.648    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.600 ±       4.894  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.455 ±      28.206    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     40351.829 ±    1851.691   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1997.456 ±     145.655  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     77899.206 ±    2555.410    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1880.212 ±    1156.552  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     73348.703 ±   45469.389    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.239 ±       1.929  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         9.379 ±      75.526    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        23.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    113218.237 ±    8056.384   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1141.480 ±      65.262  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15868.660 ±     370.978    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1203.413 ±    1151.501  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16759.009 ±   16392.786    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.824 ±       6.829  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.488 ±      95.198    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    330795.959 ±   28105.831   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       460.998 ±      45.739  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2193.153 ±     173.402    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       504.781 ±    1118.426  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2410.789 ±    5371.733    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.039 ±       0.338    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        11.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    365069.475 ±    6572.920   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         4.715 ±       8.306  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        20.363 ±      36.387    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     59213.399 ±     444.279   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1424.234 ±      11.465  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     37850.239 ±     477.699    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1339.463 ±      13.803  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     35597.399 ±     514.949    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.146 ±       0.988  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.884 ±      26.363    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        17.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     71141.842 ±    3999.161   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1659.966 ±      44.041  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     36726.550 ±    1262.844    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1610.208 ±    1416.207  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     35706.154 ±   33143.690    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.754 ±       4.529  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.659 ±     100.258    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        28.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    133097.994 ±    1103.823   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       909.344 ±      34.923  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10752.791 ±     459.956    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       800.580 ±    1148.940  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      9469.570 ±   13643.479    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.148 ±       0.847    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    260318.689 ±    6042.303   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1105.298 ±      54.662  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6682.519 ±     305.856    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075.451 ±    1417.693  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6500.314 ±    8548.794    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.595 ±       4.993  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.582 ±      30.028    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     33396.915 ±    1087.521   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1671.445 ±      74.335  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     78762.760 ±    1395.104    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1607.605 ±    1414.378  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     75675.838 ±   64747.070    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.173 ±       1.400  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         8.109 ±      65.704    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        20.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    175922.017 ±    9035.721   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1001.507 ±      81.808  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8958.592 ±     336.836    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1069.090 ±    1408.912  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      9559.830 ±   12551.119    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.150 ±       0.607    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    463898.772 ±   30831.037   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1398.482 ±      77.134  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4744.272 ±     144.158    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1343.922 ±       4.525  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4559.983 ±     302.573    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.691 ±       4.893  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         2.349 ±      16.586    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    506986.605 ±   37130.933   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       960.764 ±      49.685  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2982.492 ±     200.285    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       940.570 ±    1416.329  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2933.624 ±    4590.488    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.026 ±       0.135    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     74699.155 ±    3940.306   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1341.393 ±      79.666  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     28255.208 ±     404.407    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1338.339 ±      15.153  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     28194.761 ±    1236.245    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.162 ±       1.223  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3.379 ±      25.391    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        17.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     98829.227 ±    3164.238   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1621.898 ±      62.161  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25825.542 ±     899.663    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1610.538 ±    1413.283  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25657.742 ±   22794.412    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.758 ±       4.617  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.052 ±      73.405    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    174744.854 ±    1567.565   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       741.278 ±      15.654  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6676.375 ±     103.920    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.612 ±       2.206  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      6003.937 ±      65.587    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.075 ±       0.645    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    279825.866 ±    2688.757   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1022.940 ±      38.510  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5753.284 ±     259.711    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       940.945 ±    1417.722  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5294.380 ±    8006.396    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.070 ±       0.404    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     69153.600 ±    3943.280   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2614.846 ±     174.073  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     59499.391 ±    1371.970    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2541.075 ±    1133.850  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57852.895 ±   26755.397    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.229 ±       1.637  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.329 ±      38.264    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    204361.527 ±    6341.609   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1428.742 ±      27.021  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     11001.828 ±     221.189    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.634 ±       4.886  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10331.275 ±     293.535    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.729 ±       5.081  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.584 ±      38.871    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    493470.713 ±   20044.943   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       403.245 ±      39.121  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1285.959 ±     107.467    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.128 ±    1056.929  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1500.510 ±    3358.113    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    624801.671 ±   40972.850   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       346.267 ±      46.388  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       872.056 ±      82.258    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.856 ±    1217.193  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       848.563 ±    3042.853    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.010 ±       0.090    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    685198.544 ±    7182.390   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         6.967 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35049.714 ±    1978.155   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1905.860 ±      99.486  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85567.216 ±    2331.827    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1874.869 ±    1158.817  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     84252.682 ±   53782.938    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.833 ±       6.593  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        38.239 ±     303.447    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    844256.623 ±   34966.276   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2271.764 ±      66.880  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4234.389 ±      61.069    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2142.181 ±    1141.831  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3991.976 ±    2086.982    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.820 ±       6.666  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.529 ±      12.437    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1857606.336 ±   48651.035   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1231.806 ±      15.158  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1043.691 ±      23.906    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1202.232 ±    1149.710  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      1019.668 ±     987.591    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.885 ±       7.505  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.749 ±       6.354    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        31.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8552148.599 ±   86909.370   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       270.093 ±      31.790  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.703 ±       6.297    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.992 ±    1079.121  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        56.577 ±     198.878    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    356024.905 ±   14314.646   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2416.636 ±     134.736  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10682.003 ±     329.407    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2285.564 ±    1415.964  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5     10097.522 ±    6075.042    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.333 ±       2.779  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.493 ±      12.466    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1091019.389 ±   53481.756   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1779.916 ±      86.537  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2567.495 ±      86.817    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1739.320 ±    1412.722  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2510.110 ±    2060.740    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.841 ±       7.018  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.200 ±      10.012    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        25.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2720860.628 ±  129844.299   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1199.203 ±      75.902  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       693.667 ±      18.485    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1203.965 ±    1152.010  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       696.018 ±     660.920    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.799 ±       6.748  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.465 ±       3.923    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6322435.493 ±  498369.788   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       727.763 ±      41.217  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       181.178 ±       5.759    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       805.022 ±    1153.994  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       201.392 ±     305.617    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.002 ±       0.018    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6839682.202 ±   56730.625   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       430.301 ±      27.647  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        99.019 ±       7.106    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       370.509 ±    1326.126  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5        85.376 ±     305.543    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.600 ±       5.162  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.138 ±       1.190    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    426012.868 ±   20877.590   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2382.913 ±      87.687  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8803.829 ±     256.054    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2267.798 ±    1407.274  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8380.978 ±    5273.967    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.974 ±       8.165  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         3.542 ±      29.680    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     79928.064 ±    3921.039   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2237.967 ±     156.564  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44058.028 ±    1116.706    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2144.192 ±    1145.983  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     42199.910 ±   21836.195    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.770 ±       6.279  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        15.412 ±     125.748    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    125878.303 ±    5749.473   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1991.419 ±     116.519  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24897.862 ±     482.182    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2001.970 ±      14.173  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25033.458 ±    1238.608    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.924 ±       6.239  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.691 ±      79.095    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    177930.499 ±   11160.772   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2704.836 ±     138.341  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23924.645 ±     549.182    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2555.325 ±    1161.656  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     22607.576 ±   10446.473    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.067 ±       0.268  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.586 ±       2.339    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     60337.033 ±    3203.745   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3059.410 ±     160.120  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79799.915 ±    2063.567    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2947.994 ±    1427.557  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     76941.576 ±   38979.262    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.042 ±       0.247  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1.083 ±       6.403    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    185367.262 ±    4786.538   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1314.346 ±      35.163  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11158.256 ±     219.428    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1341.348 ±       6.599  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     11387.859 ±     341.063    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.750 ±       6.189  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         6.391 ±      52.784    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    457973.372 ±   20793.562   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       412.709 ±      32.995  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1418.512 ±     135.154    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       470.964 ±    1056.358  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1623.125 ±    3625.201    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    648832.452 ±   31231.432   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       360.902 ±      30.796  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       875.627 ±     100.041    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.727 ±    1216.570  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       825.997 ±    2959.608    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.010 ±       0.087    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    692905.842 ±   15068.024   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.143 ±       0.792  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.224 ±       1.923    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35056.864 ±    1238.792   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1910.502 ±      63.696  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85754.726 ±    1152.848    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1873.489 ±    1153.887  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     84067.810 ±   51163.287    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.816 ±       6.668  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.975 ±     302.330    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3720111.621 ±  205355.841   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      3005.951 ±     133.745  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1271.523 ±      22.621    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2960.418 ±    1409.589  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1254.211 ±     669.096    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.025 ±       0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.011 ±       0.038    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        22.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        32.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   5862809.653 ±  111300.035   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1135.967 ±      18.184  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       304.925 ±       6.931    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1068.519 ±    1409.571  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       287.105 ±     381.863    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.864 ±       7.407  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.232 ±       1.991    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4093332.552 ±  191117.478   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2261.526 ±      95.075  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       869.475 ±       9.554    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2140.649 ±    1142.554  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       822.982 ±     436.427    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.787 ±       6.596  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.300 ±       2.510    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6829880.962 ±  358488.307   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1320.045 ±      54.479  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       304.203 ±       6.011    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.670 ±    1159.303  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       279.315 ±     271.319    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.625 ±       4.358  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.146 ±       1.022    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4273753.996 ±  227828.946   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2452.591 ±     151.026  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       903.161 ±      29.168    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2409.068 ±    1417.310  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       886.228 ±     492.117    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.083 ±       0.629  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.030 ±       0.229    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2187421.036 ±   70619.206   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1309.818 ±      53.996  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       942.368 ±      29.334    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1208.029 ±    1157.352  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       869.878 ±     842.187    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.658 ±       5.485  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.472 ±       3.932    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5922680.006 ±   63396.408   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       592.088 ±      13.990  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       157.309 ±       4.477    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       665.268 ±       1.919  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       176.751 ±       1.975    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.011 ±       0.095  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.003 ±       0.025    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4678604.481 ±  197280.075   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1281.065 ±      73.013  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       430.824 ±      11.350    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1339.743 ±       6.557  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       450.609 ±      18.450    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.758 ±       5.996  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.256 ±       2.024    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6019605.918 ±  157385.793   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       600.003 ±      38.744  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.842 ±      11.063    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       537.069 ±    1156.081  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       140.665 ±     302.809    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.001 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6454560.569 ±   13855.030   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4567799.022 ±  188820.889   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1294.086 ±      47.060  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       445.818 ±      10.552    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1340.768 ±       5.150  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       461.932 ±      19.748    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.741 ±       6.158  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.256 ±       2.128    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1539680.125 ±   39867.271   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2189.549 ±      76.275  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2238.021 ±      71.652    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2148.003 ±    1152.312  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2196.073 ±    1198.131    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.702 ±       5.599  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.713 ±       5.688    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2865483.737 ±   13404.751   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       555.422 ±      36.306  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       305.043 ±      19.364    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       533.097 ±    1147.531  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       292.718 ±     630.099    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.009 ±       0.081  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.005 ±       0.044    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1720335.154 ±   32015.055   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       943.835 ±      17.155  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       863.428 ±      26.141    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       936.147 ±    1412.061  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       856.995 ±    1300.314    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.066  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±       0.060    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2408472.559 ±   73598.873   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       467.741 ±      37.668  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       305.578 ±      21.442    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.094 ±    1328.491  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       241.366 ±     864.432    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.028    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1720685.422 ±   71960.946   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       980.612 ±      53.802  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       896.920 ±      36.368    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       936.915 ±    1411.273  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       856.292 ±    1280.871    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.015 ±       0.083  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.013 ±       0.078    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1777173.849 ±   74393.333   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1355.441 ±      54.855  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1200.130 ±      19.768    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1342.596 ±       5.342  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1188.848 ±      45.902    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.658 ±       5.054  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.577 ±       4.423    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2801949.482 ±   56193.933   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       747.367 ±      23.169  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       419.762 ±      14.376    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       799.917 ±    1147.444  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       449.580 ±     650.348    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.006 ±       0.035  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.003 ±       0.020    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2961360.184 ±  129934.885   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1298.350 ±      51.392  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       689.890 ±      12.465    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1204.787 ±    1153.783  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       640.475 ±     617.060    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.745 ±       6.276  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.403 ±       3.397    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3363905.916 ±  101603.163   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       897.660 ±      28.515  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       419.987 ±      20.643    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       805.669 ±    1156.656  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       377.763 ±     557.066    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3613008.943 ±  237488.089   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         2.559 ±      22.029  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.149 ±       9.894    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2871692.937 ±   67048.268   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1427.109 ±      40.866  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       782.116 ±      17.518    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1341.728 ±       4.800  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       735.338 ±      14.937    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.706 ±       5.373  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.385 ±       2.931    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11766.785 ±     254.911   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1381.867 ±      40.710  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    184799.510 ±    3624.223    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1337.349 ±       5.340  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    178850.591 ±    3885.272    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.848 ±       5.530  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       113.346 ±     740.875    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     21716.881 ±     953.243   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       334.246 ±      31.942  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24225.138 ±    3098.735    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.586 ±    1205.849  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     24475.433 ±   87405.801    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22435.532 ±     472.990   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       253.118 ±      30.137  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17756.956 ±    2410.297    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.007 ±    1079.173  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21600.630 ±   75930.805    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.584 ±       3.081    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      6246.319 ±      75.391   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1955.698 ±      50.147  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    492771.246 ±   14642.044    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1874.165 ±    1153.549  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    472381.876 ±  294350.959    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.429 ±       2.693  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       107.657 ±     675.329    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     63350.950 ±     370.222   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       818.920 ±      33.840  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20344.543 ±     933.685    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       797.082 ±    1142.470  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     19807.946 ±   28501.048    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.021 ±       0.075  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.518 ±       1.873    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     68166.363 ±    3628.989   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       460.235 ±      34.065  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10627.192 ±     910.654    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       500.872 ±    1107.806  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11602.147 ±   25712.923    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.194 ±       1.025    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     74900.689 ±     541.321   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        18.916 ±      37.897  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       397.776 ±     801.127    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       102.313 ±     880.946  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5      2157.003 ±   18572.448    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    312589.239 ±    6502.776   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1869.422 ±      89.130  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9411.617 ±     273.203    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1877.851 ±    1157.221  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9450.039 ±    5722.771    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.766 ±       6.150  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.848 ±      30.885    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    495390.559 ±    9567.532   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       569.985 ±      37.368  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1810.940 ±     142.806    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       532.785 ±    1146.861  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1694.460 ±    3647.604    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.026 ±       0.228    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1262837.369 ±   40339.369   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       681.078 ±      29.338  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       848.743 ±      16.918    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671.123 ±       1.200  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       836.392 ±      25.732    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.005 ±       0.044    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    103439.713 ±    2577.288   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3312.721 ±     108.840  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50395.795 ±    1154.535    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3223.497 ±    1138.472  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     49023.213 ±   16573.668    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.029 ±       0.209  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.441 ±       3.161    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        33.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    305255.038 ±    4668.948   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1063.086 ±      42.065  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5480.822 ±     292.457    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       938.901 ±    1414.643  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4845.850 ±    7369.239    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.025 ±       0.088  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.129 ±       0.451    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    720229.520 ±   72890.398   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       563.572 ±      70.294  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1231.468 ±      72.316    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.452 ±    1148.296  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1160.142 ±    2500.670    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.018 ±       0.157    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1578751.726 ±   51112.414   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       751.761 ±      47.176  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       749.302 ±      22.435    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671.115 ±       1.432  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       668.995 ±      22.834    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.004 ±       0.036    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1729172.800 ±    2587.064   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    460242.372 ±    3717.293   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       700.638 ±       9.639  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2395.882 ±      38.109    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       668.230 ±       2.665  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2285.064 ±      24.633    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.028 ±       0.245    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 7079 s, completed May 13, 2018 9:36:33 PM
