[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 2 projects.
[info] Excluded 2 projects, run ++ 2.12.6 -v for more details.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 30, 2018 11:20:09 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/ArrayOfFloatsBenchmark.scala:10:74: Unused import
[warn] import com.github.plokhotnyuk.jsoniter_scala.macros.UPickleReaderWriters._
[warn]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d5(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d9(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d8(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e9(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:12:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:33:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:42:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:48:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:60:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 64 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20862.326 ops/s
[info] # Warmup Iteration   2: 580386.445 ops/s
[info] # Warmup Iteration   3: 809154.636 ops/s
[info] # Warmup Iteration   4: 817227.087 ops/s
[info] # Warmup Iteration   5: 806565.060 ops/s
[info] Iteration   1: 818349.142 ops/s
[info]                  ·gc.alloc.rate:                   2350.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              4520.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3867.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 836163.509 ops/s
[info]                  ·gc.alloc.rate:                   2442.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              4596.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5032.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 835831.908 ops/s
[info]                  ·gc.alloc.rate:                   2389.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              4499.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3774.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 837990.898 ops/s
[info]                  ·gc.alloc.rate:                   2449.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              4600.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5026.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 828551.530 ops/s
[info]                  ·gc.alloc.rate:                   2395.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              4550.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3821.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   831377.397 ±(99.9%) 31295.153 ops/s [Average]
[info]   (min, avg, max) = (818349.142, 831377.397, 837990.898), stdev = 8127.252
[info]   CI (99.9%): [800082.244, 862672.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2405.718 ±(99.9%) 157.537 MB/sec [Average]
[info]   (min, avg, max) = (2350.508, 2405.718, 2449.774), stdev = 40.912
[info]   CI (99.9%): [2248.181, 2563.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4553.284 ±(99.9%) 172.848 B/op [Average]
[info]   (min, avg, max) = (4499.276, 4553.284, 4600.149), stdev = 44.888
[info]   CI (99.9%): [4380.436, 4726.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.983 ±(99.9%) 1405.416 MB/sec [Average]
[info]   (min, avg, max) = (2005.114, 2275.983, 2677.051), stdev = 364.982
[info]   CI (99.9%): [870.568, 3681.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4304.748 ±(99.9%) 2551.733 B/op [Average]
[info]   (min, avg, max) = (3774.897, 4304.748, 5032.641), stdev = 662.677
[info]   CI (99.9%): [1753.015, 6856.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.524 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.810), stdev = 1.694
[info]   CI (99.9%): [≈ 0, 7.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.497 ±(99.9%) 12.548 B/op [Average]
[info]   (min, avg, max) = (0.039, 1.497, 7.326), stdev = 3.259
[info]   CI (99.9%): [≈ 0, 14.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.483
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.20% complete, ETA 02:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49558.088 ops/s
[info] # Warmup Iteration   2: 1421331.010 ops/s
[info] # Warmup Iteration   3: 1897615.547 ops/s
[info] # Warmup Iteration   4: 1842319.282 ops/s
[info] # Warmup Iteration   5: 1848903.856 ops/s
[info] Iteration   1: 1850688.748 ops/s
[info]                  ·gc.alloc.rate:                   1234.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              1050.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1134.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1858824.154 ops/s
[info]                  ·gc.alloc.rate:                   1233.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1044.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1130.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1861371.351 ops/s
[info]                  ·gc.alloc.rate:               1226.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          1036.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 564.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1928383.922 ops/s
[info]                  ·gc.alloc.rate:                   1273.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              1038.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1909256.312 ops/s
[info]                  ·gc.alloc.rate:                   1271.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1047.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1103.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1881704.897 ±(99.9%) 133903.268 ops/s [Average]
[info]   (min, avg, max) = (1850688.748, 1881704.897, 1928383.922), stdev = 34774.254
[info]   CI (99.9%): [1747801.629, 2015608.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1247.660 ±(99.9%) 86.899 MB/sec [Average]
[info]   (min, avg, max) = (1226.049, 1247.660, 1273.052), stdev = 22.567
[info]   CI (99.9%): [1160.761, 1334.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1043.480 ±(99.9%) 22.039 B/op [Average]
[info]   (min, avg, max) = (1036.581, 1043.480, 1050.050), stdev = 5.723
[info]   CI (99.9%): [1021.441, 1065.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.686 ±(99.9%) 1150.574 MB/sec [Average]
[info]   (min, avg, max) = (668.182, 1202.686, 1338.257), stdev = 298.800
[info]   CI (99.9%): [52.112, 2353.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1004.917 ±(99.9%) 949.745 B/op [Average]
[info]   (min, avg, max) = (564.924, 1004.917, 1134.623), stdev = 246.646
[info]   CI (99.9%): [55.172, 1954.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 7.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 4.226), stdev = 1.881
[info]   CI (99.9%): [≈ 0, 8.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.711 ±(99.9%) 5.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.711, 3.483), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.40% complete, ETA 02:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1848494.704 ops/s
[info] # Warmup Iteration   2: 5509671.647 ops/s
[info] # Warmup Iteration   3: 6038030.438 ops/s
[info] # Warmup Iteration   4: 6085582.570 ops/s
[info] # Warmup Iteration   5: 6102819.026 ops/s
[info] Iteration   1: 6075226.555 ops/s
[info]                  ·gc.alloc.rate:               412.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          106.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6069478.157 ops/s
[info]                  ·gc.alloc.rate:               425.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6116522.309 ops/s
[info]                  ·gc.alloc.rate:      404.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6076220.319 ops/s
[info]                  ·gc.alloc.rate:               423.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5834301.479 ops/s
[info]                  ·gc.alloc.rate:               411.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          111.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   6034349.764 ±(99.9%) 436626.784 ops/s [Average]
[info]   (min, avg, max) = (5834301.479, 6034349.764, 6116522.309), stdev = 113390.589
[info]   CI (99.9%): [5597722.980, 6470976.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   415.303 ±(99.9%) 33.900 MB/sec [Average]
[info]   (min, avg, max) = (404.204, 415.303, 425.374), stdev = 8.804
[info]   CI (99.9%): [381.403, 449.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   108.337 ±(99.9%) 11.191 B/op [Average]
[info]   (min, avg, max) = (104.000, 108.337, 111.010), stdev = 2.906
[info]   CI (99.9%): [97.145, 119.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.252 ±(99.9%) 1064.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.252, 671.511), stdev = 276.369
[info]   CI (99.9%): [≈ 0, 1537.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   124.047 ±(99.9%) 280.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.047, 181.131), stdev = 72.937
[info]   CI (99.9%): [≈ 0, 404.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.60% complete, ETA 02:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2057.193 ops/s
[info] # Warmup Iteration   2: 204308.006 ops/s
[info] # Warmup Iteration   3: 311996.037 ops/s
[info] # Warmup Iteration   4: 318652.205 ops/s
[info] # Warmup Iteration   5: 319494.532 ops/s
[info] Iteration   1: 318329.439 ops/s
[info]                  ·gc.alloc.rate:                   2806.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              13876.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13269.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.618 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 308835.426 ops/s
[info]                  ·gc.alloc.rate:                   2713.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              13824.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13697.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 308967.568 ops/s
[info]                  ·gc.alloc.rate:               2741.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          13963.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13722.001 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 308677.781 ops/s
[info]                  ·gc.alloc.rate:               2711.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          13825.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10325.109 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 312528.056 ops/s
[info]                  ·gc.alloc.rate:               2772.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          13959.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13619.613 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   311467.654 ±(99.9%) 16012.729 ops/s [Average]
[info]   (min, avg, max) = (308677.781, 311467.654, 318329.439), stdev = 4158.455
[info]   CI (99.9%): [295454.924, 327480.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2749.064 ±(99.9%) 156.616 MB/sec [Average]
[info]   (min, avg, max) = (2711.631, 2749.064, 2806.719), stdev = 40.673
[info]   CI (99.9%): [2592.448, 2905.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13889.809 ±(99.9%) 264.563 B/op [Average]
[info]   (min, avg, max) = (13824.760, 13889.809, 13963.159), stdev = 68.706
[info]   CI (99.9%): [13625.247, 14154.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2559.217 ±(99.9%) 1150.021 MB/sec [Average]
[info]   (min, avg, max) = (2025.148, 2559.217, 2704.781), stdev = 298.657
[info]   CI (99.9%): [1409.196, 3709.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12926.593 ±(99.9%) 5643.395 B/op [Average]
[info]   (min, avg, max) = (10325.109, 12926.593, 13722.001), stdev = 1465.572
[info]   CI (99.9%): [7283.197, 18569.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.145 ±(99.9%) 1.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.618), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.80% complete, ETA 02:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37996.545 ops/s
[info] # Warmup Iteration   2: 813635.315 ops/s
[info] # Warmup Iteration   3: 919593.066 ops/s
[info] # Warmup Iteration   4: 899706.264 ops/s
[info] # Warmup Iteration   5: 889796.927 ops/s
[info] Iteration   1: 910442.179 ops/s
[info]                  ·gc.alloc.rate:                   2440.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4633.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 905360.797 ops/s
[info]                  ·gc.alloc.rate:                   2423.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              4213.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3484.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 918987.578 ops/s
[info]                  ·gc.alloc.rate:                   2475.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              4239.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4579.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 922334.882 ops/s
[info]                  ·gc.alloc.rate:                   2471.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3428.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 920138.763 ops/s
[info]                  ·gc.alloc.rate:               2491.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          4262.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4595.160 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   915452.840 ±(99.9%) 27818.792 ops/s [Average]
[info]   (min, avg, max) = (905360.797, 915452.840, 922334.882), stdev = 7224.452
[info]   CI (99.9%): [887634.048, 943271.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2460.541 ±(99.9%) 106.773 MB/sec [Average]
[info]   (min, avg, max) = (2423.893, 2460.541, 2491.943), stdev = 27.729
[info]   CI (99.9%): [2353.768, 2567.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4229.291 ±(99.9%) 81.518 B/op [Average]
[info]   (min, avg, max) = (4213.006, 4229.291, 4262.188), stdev = 21.170
[info]   CI (99.9%): [4147.773, 4310.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2411.427 ±(99.9%) 1420.394 MB/sec [Average]
[info]   (min, avg, max) = (2004.700, 2411.427, 2686.619), stdev = 368.872
[info]   CI (99.9%): [991.033, 3831.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4144.325 ±(99.9%) 2420.015 B/op [Average]
[info]   (min, avg, max) = (3428.695, 4144.325, 4633.755), stdev = 628.470
[info]   CI (99.9%): [1724.310, 6564.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.832), stdev = 1.704
[info]   CI (99.9%): [≈ 0, 7.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.353 ±(99.9%) 11.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.353, 6.621), stdev = 2.945
[info]   CI (99.9%): [≈ 0, 12.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.00% complete, ETA 02:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152889.555 ops/s
[info] # Warmup Iteration   2: 2400093.238 ops/s
[info] # Warmup Iteration   3: 2797412.275 ops/s
[info] # Warmup Iteration   4: 2802463.839 ops/s
[info] # Warmup Iteration   5: 2841848.891 ops/s
[info] Iteration   1: 2885585.628 ops/s
[info]                  ·gc.alloc.rate:                   1239.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              676.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2869954.722 ops/s
[info]                  ·gc.alloc.rate:               1226.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          672.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 733.351 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2807643.669 ops/s
[info]                  ·gc.alloc.rate:                   1185.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     374.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2741710.427 ops/s
[info]                  ·gc.alloc.rate:                   1182.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              678.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 2766040.694 ops/s
[info]                  ·gc.alloc.rate:                   1191.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              677.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2814187.028 ±(99.9%) 242174.115 ops/s [Average]
[info]   (min, avg, max) = (2741710.427, 2814187.028, 2885585.628), stdev = 62891.849
[info]   CI (99.9%): [2572012.913, 3056361.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1205.075 ±(99.9%) 100.959 MB/sec [Average]
[info]   (min, avg, max) = (1182.552, 1205.075, 1239.691), stdev = 26.219
[info]   CI (99.9%): [1104.116, 1306.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   673.916 ±(99.9%) 22.767 B/op [Average]
[info]   (min, avg, max) = (664.246, 673.916, 678.780), stdev = 5.912
[info]   CI (99.9%): [651.149, 696.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.406 ±(99.9%) 1152.896 MB/sec [Average]
[info]   (min, avg, max) = (668.824, 1204.406, 1340.286), stdev = 299.403
[info]   CI (99.9%): [51.510, 2357.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   673.649 ±(99.9%) 646.592 B/op [Average]
[info]   (min, avg, max) = (374.894, 673.649, 768.610), stdev = 167.918
[info]   CI (99.9%): [27.057, 1320.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.820), stdev = 1.705
[info]   CI (99.9%): [≈ 0, 7.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.438 ±(99.9%) 3.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.173), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.20% complete, ETA 02:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1282121.040 ops/s
[info] # Warmup Iteration   2: 13264298.952 ops/s
[info] # Warmup Iteration   3: 14327934.173 ops/s
[info] # Warmup Iteration   4: 13504151.296 ops/s
[info] # Warmup Iteration   5: 13638992.821 ops/s
[info] Iteration   1: 13269831.187 ops/s
[info]                  ·gc.alloc.rate:               729.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          86.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 14283002.817 ops/s
[info]                  ·gc.alloc.rate:               764.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          84.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.832 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 14742152.667 ops/s
[info]                  ·gc.alloc.rate:                   771.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14806158.330 ops/s
[info]                  ·gc.alloc.rate:               770.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 14817362.578 ops/s
[info]                  ·gc.alloc.rate:               768.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.393 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14383701.516 ±(99.9%) 2543951.627 ops/s [Average]
[info]   (min, avg, max) = (13269831.187, 14383701.516, 14817362.578), stdev = 660656.159
[info]   CI (99.9%): [11839749.889, 16927653.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   760.783 ±(99.9%) 69.299 MB/sec [Average]
[info]   (min, avg, max) = (729.001, 760.783, 771.594), stdev = 17.997
[info]   CI (99.9%): [691.484, 830.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   83.309 ±(99.9%) 7.766 B/op [Average]
[info]   (min, avg, max) = (81.608, 83.309, 86.437), stdev = 2.017
[info]   CI (99.9%): [75.543, 91.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.571 ±(99.9%) 1154.018 MB/sec [Average]
[info]   (min, avg, max) = (670.666, 805.571, 1341.680), stdev = 299.695
[info]   CI (99.9%): [≈ 0, 1959.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   88.368 ±(99.9%) 128.699 B/op [Average]
[info]   (min, avg, max) = (71.393, 88.368, 147.832), stdev = 33.423
[info]   CI (99.9%): [≈ 0, 217.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.41% complete, ETA 02:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1589843.605 ops/s
[info] # Warmup Iteration   2: 16550675.346 ops/s
[info] # Warmup Iteration   3: 17220156.644 ops/s
[info] # Warmup Iteration   4: 17170906.236 ops/s
[info] # Warmup Iteration   5: 17186429.919 ops/s
[info] Iteration   1: 17178809.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17244211.821 ops/s
[info]                  ·gc.alloc.rate:      1.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.104 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17173925.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17115208.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17183581.705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17179147.374 ±(99.9%) 176128.898 ops/s [Average]
[info]   (min, avg, max) = (17115208.310, 17179147.374, 17244211.821), stdev = 45740.115
[info]   CI (99.9%): [17003018.477, 17355276.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.229 ±(99.9%) 1.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.229, 1.144), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.021 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.61% complete, ETA 02:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1656.228 ops/s
[info] # Warmup Iteration   2: 91249.766 ops/s
[info] # Warmup Iteration   3: 423226.878 ops/s
[info] # Warmup Iteration   4: 488534.236 ops/s
[info] # Warmup Iteration   5: 483304.776 ops/s
[info] Iteration   1: 487978.916 ops/s
[info]                  ·gc.alloc.rate:               1488.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          4799.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4299.036 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 482554.225 ops/s
[info]                  ·gc.alloc.rate:                   1492.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              4867.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6538.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 471672.328 ops/s
[info]                  ·gc.alloc.rate:                   1445.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              4821.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4467.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 471022.646 ops/s
[info]                  ·gc.alloc.rate:                   1444.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              4825.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4479.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 473479.537 ops/s
[info]                  ·gc.alloc.rate:               1462.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          4861.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4460.363 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   477341.530 ±(99.9%) 29027.656 ops/s [Average]
[info]   (min, avg, max) = (471022.646, 477341.530, 487978.916), stdev = 7538.390
[info]   CI (99.9%): [448313.874, 506369.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1466.701 ±(99.9%) 88.857 MB/sec [Average]
[info]   (min, avg, max) = (1444.361, 1466.701, 1492.931), stdev = 23.076
[info]   CI (99.9%): [1377.844, 1555.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4835.230 ±(99.9%) 110.175 B/op [Average]
[info]   (min, avg, max) = (4799.520, 4835.230, 4867.421), stdev = 28.612
[info]   CI (99.9%): [4725.055, 4945.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.012 ±(99.9%) 1148.123 MB/sec [Average]
[info]   (min, avg, max) = (1333.094, 1472.012, 2005.350), stdev = 298.164
[info]   CI (99.9%): [323.889, 2620.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4848.824 ±(99.9%) 3647.340 B/op [Average]
[info]   (min, avg, max) = (4299.036, 4848.824, 6538.067), stdev = 947.203
[info]   CI (99.9%): [1201.484, 8496.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.319 ±(99.9%) 2.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.509), stdev = 0.666
[info]   CI (99.9%): [≈ 0, 2.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.063 ±(99.9%) 8.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.063, 5.042), stdev = 2.226
[info]   CI (99.9%): [≈ 0, 9.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1.81% complete, ETA 02:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188682.807 ops/s
[info] # Warmup Iteration   2: 1645208.685 ops/s
[info] # Warmup Iteration   3: 1949673.740 ops/s
[info] # Warmup Iteration   4: 2039953.727 ops/s
[info] # Warmup Iteration   5: 2050227.531 ops/s
[info] Iteration   1: 2059386.497 ops/s
[info]                  ·gc.alloc.rate:                   2974.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2047.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2042489.286 ops/s
[info]                  ·gc.alloc.rate:                   2937.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              2262.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2063.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2009343.286 ops/s
[info]                  ·gc.alloc.rate:                   2920.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              2285.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2622.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 2035667.208 ops/s
[info]                  ·gc.alloc.rate:                   2942.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              2274.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2081.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2047262.793 ops/s
[info]                  ·gc.alloc.rate:                   2959.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              2274.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2074.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2038829.814 ±(99.9%) 71691.852 ops/s [Average]
[info]   (min, avg, max) = (2009343.286, 2038829.814, 2059386.497), stdev = 18618.146
[info]   CI (99.9%): [1967137.962, 2110521.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2946.726 ±(99.9%) 79.907 MB/sec [Average]
[info]   (min, avg, max) = (2920.323, 2946.726, 2974.428), stdev = 20.752
[info]   CI (99.9%): [2866.818, 3026.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2274.114 ±(99.9%) 30.737 B/op [Average]
[info]   (min, avg, max) = (2262.989, 2274.114, 2285.478), stdev = 7.982
[info]   CI (99.9%): [2243.377, 2304.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2819.995 ±(99.9%) 1143.392 MB/sec [Average]
[info]   (min, avg, max) = (2678.839, 2819.995, 3350.936), stdev = 296.935
[info]   CI (99.9%): [1676.603, 3963.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2177.858 ±(99.9%) 958.388 B/op [Average]
[info]   (min, avg, max) = (2047.036, 2177.858, 2622.481), stdev = 248.890
[info]   CI (99.9%): [1219.470, 3136.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.042, 0.080), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.01% complete, ETA 02:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.713 ops/s
[info] # Warmup Iteration   2: 8047931.328 ops/s
[info] # Warmup Iteration   3: 9738497.365 ops/s
[info] # Warmup Iteration   4: 9936406.674 ops/s
[info] # Warmup Iteration   5: 9999797.725 ops/s
[info] Iteration   1: 9653715.025 ops/s
[info]                  ·gc.alloc.rate:                   1217.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9763743.868 ops/s
[info]                  ·gc.alloc.rate:               1214.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          195.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9895477.710 ops/s
[info]                  ·gc.alloc.rate:                   1247.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9898401.910 ops/s
[info]                  ·gc.alloc.rate:                   1247.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9883601.249 ops/s
[info]                  ·gc.alloc.rate:                   1243.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9818987.952 ±(99.9%) 416061.974 ops/s [Average]
[info]   (min, avg, max) = (9653715.025, 9818987.952, 9898401.910), stdev = 108049.973
[info]   CI (99.9%): [9402925.979, 10235049.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1234.243 ±(99.9%) 64.386 MB/sec [Average]
[info]   (min, avg, max) = (1214.819, 1234.243, 1247.828), stdev = 16.721
[info]   CI (99.9%): [1169.858, 1298.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.799 ±(99.9%) 4.340 B/op [Average]
[info]   (min, avg, max) = (195.800, 197.799, 198.392), stdev = 1.127
[info]   CI (99.9%): [193.459, 202.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1202.208 ±(99.9%) 1150.982 MB/sec [Average]
[info]   (min, avg, max) = (667.510, 1202.208, 1336.860), stdev = 298.906
[info]   CI (99.9%): [51.226, 2353.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   192.565 ±(99.9%) 183.109 B/op [Average]
[info]   (min, avg, max) = (107.587, 192.565, 217.531), stdev = 47.553
[info]   CI (99.9%): [9.456, 375.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.886 ±(99.9%) 7.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.886, 4.326), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 8.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 1.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.689), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.21% complete, ETA 02:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120945.654 ops/s
[info] # Warmup Iteration   2: 2816297.632 ops/s
[info] # Warmup Iteration   3: 3211888.353 ops/s
[info] # Warmup Iteration   4: 3284552.501 ops/s
[info] # Warmup Iteration   5: 3289773.231 ops/s
[info] Iteration   1: 3272704.957 ops/s
[info]                  ·gc.alloc.rate:                   2045.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              983.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3266354.884 ops/s
[info]                  ·gc.alloc.rate:                   2029.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              977.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3260640.275 ops/s
[info]                  ·gc.alloc.rate:               2034.742 MB/sec
[info]                  ·gc.alloc.rate.norm:          982.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 965.564 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3264623.823 ops/s
[info]                  ·gc.alloc.rate:               2054.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          990.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 964.655 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3263996.979 ops/s
[info]                  ·gc.alloc.rate:                   2054.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              990.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3265664.184 ±(99.9%) 17128.998 ops/s [Average]
[info]   (min, avg, max) = (3260640.275, 3265664.184, 3272704.957), stdev = 4448.346
[info]   CI (99.9%): [3248535.186, 3282793.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2043.847 ±(99.9%) 43.840 MB/sec [Average]
[info]   (min, avg, max) = (2029.537, 2043.847, 2054.662), stdev = 11.385
[info]   CI (99.9%): [2000.007, 2087.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   984.937 ±(99.9%) 21.201 B/op [Average]
[info]   (min, avg, max) = (977.831, 984.937, 990.662), stdev = 5.506
[info]   CI (99.9%): [963.736, 1006.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2003.616 ±(99.9%) 10.535 MB/sec [Average]
[info]   (min, avg, max) = (2000.558, 2003.616, 2007.136), stdev = 2.736
[info]   CI (99.9%): [1993.082, 2014.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   965.549 ±(99.9%) 2.799 B/op [Average]
[info]   (min, avg, max) = (964.655, 965.549, 966.608), stdev = 0.727
[info]   CI (99.9%): [962.749, 968.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 7.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 4.111), stdev = 1.834
[info]   CI (99.9%): [≈ 0, 7.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.399 ±(99.9%) 3.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 1.977), stdev = 0.882
[info]   CI (99.9%): [≈ 0, 3.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.41% complete, ETA 02:09:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4293503.521 ops/s
[info] # Warmup Iteration   2: 12289629.456 ops/s
[info] # Warmup Iteration   3: 13610521.251 ops/s
[info] # Warmup Iteration   4: 13719360.734 ops/s
[info] # Warmup Iteration   5: 13321349.719 ops/s
[info] Iteration   1: 13087412.623 ops/s
[info]                  ·gc.alloc.rate:               1701.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161.970 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 13033321.677 ops/s
[info]                  ·gc.alloc.rate:                   1709.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13132984.361 ops/s
[info]                  ·gc.alloc.rate:               1707.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161.248 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13323792.777 ops/s
[info]                  ·gc.alloc.rate:                   1773.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              209.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13781749.873 ops/s
[info]                  ·gc.alloc.rate:                   1803.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13271852.262 ±(99.9%) 1175696.410 ops/s [Average]
[info]   (min, avg, max) = (13033321.677, 13271852.262, 13781749.873), stdev = 305324.624
[info]   CI (99.9%): [12096155.852, 14447548.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1739.058 ±(99.9%) 179.373 MB/sec [Average]
[info]   (min, avg, max) = (1701.824, 1739.058, 1803.753), stdev = 46.583
[info]   CI (99.9%): [1559.685, 1918.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.193 ±(99.9%) 7.730 B/op [Average]
[info]   (min, avg, max) = (204.567, 206.193, 209.478), stdev = 2.007
[info]   CI (99.9%): [198.463, 213.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1614.500 ±(99.9%) 1418.744 MB/sec [Average]
[info]   (min, avg, max) = (1343.281, 1614.500, 2021.720), stdev = 368.443
[info]   CI (99.9%): [195.756, 3033.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   191.734 ±(99.9%) 173.971 B/op [Average]
[info]   (min, avg, max) = (153.392, 191.734, 244.124), stdev = 45.180
[info]   CI (99.9%): [17.763, 365.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 5.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 3.039), stdev = 1.355
[info]   CI (99.9%): [≈ 0, 5.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.367), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2.61% complete, ETA 02:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9307.459 ops/s
[info] # Warmup Iteration   2: 225211.859 ops/s
[info] # Warmup Iteration   3: 482902.203 ops/s
[info] # Warmup Iteration   4: 998801.015 ops/s
[info] # Warmup Iteration   5: 1132828.715 ops/s
[info] Iteration   1: 1153402.798 ops/s
[info]                  ·gc.alloc.rate:                   2584.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              3526.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3655.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1203503.866 ops/s
[info]                  ·gc.alloc.rate:                   2656.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              3473.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2633.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1199325.456 ops/s
[info]                  ·gc.alloc.rate:                   2671.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              3505.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3529.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1174855.480 ops/s
[info]                  ·gc.alloc.rate:               2629.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          3522.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3610.597 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1158496.566 ops/s
[info]                  ·gc.alloc.rate:               2622.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          3562.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3668.716 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1177916.833 ±(99.9%) 88239.460 ops/s [Average]
[info]   (min, avg, max) = (1153402.798, 1177916.833, 1203503.866), stdev = 22915.508
[info]   CI (99.9%): [1089677.373, 1266156.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2632.976 ±(99.9%) 129.375 MB/sec [Average]
[info]   (min, avg, max) = (2584.408, 2632.976, 2671.694), stdev = 33.598
[info]   CI (99.9%): [2503.601, 2762.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3518.041 ±(99.9%) 124.725 B/op [Average]
[info]   (min, avg, max) = (3473.448, 3518.041, 3562.442), stdev = 32.391
[info]   CI (99.9%): [3393.316, 3642.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2556.038 ±(99.9%) 1166.901 MB/sec [Average]
[info]   (min, avg, max) = (2014.132, 2556.038, 2701.096), stdev = 303.041
[info]   CI (99.9%): [1389.137, 3722.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3419.742 ±(99.9%) 1704.827 B/op [Average]
[info]   (min, avg, max) = (2633.738, 3419.742, 3668.716), stdev = 442.738
[info]   CI (99.9%): [1714.915, 5124.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.233 ±(99.9%) 1.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 0.666), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 1.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 0.909), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2.81% complete, ETA 02:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257610.710 ops/s
[info] # Warmup Iteration   2: 2073081.743 ops/s
[info] # Warmup Iteration   3: 2434826.977 ops/s
[info] # Warmup Iteration   4: 2444453.545 ops/s
[info] # Warmup Iteration   5: 2449598.046 ops/s
[info] Iteration   1: 2471977.078 ops/s
[info]                  ·gc.alloc.rate:               2186.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          1392.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1700.713 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2495442.027 ops/s
[info]                  ·gc.alloc.rate:                   2207.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1266.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2487604.816 ops/s
[info]                  ·gc.alloc.rate:                   2190.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1385.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1274.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2502171.611 ops/s
[info]                  ·gc.alloc.rate:               2216.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          1393.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1269.563 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2482703.253 ops/s
[info]                  ·gc.alloc.rate:               2200.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          1395.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1282.964 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2487979.757 ±(99.9%) 44788.552 ops/s [Average]
[info]   (min, avg, max) = (2471977.078, 2487979.757, 2502171.611), stdev = 11631.445
[info]   CI (99.9%): [2443191.205, 2532768.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2200.386 ±(99.9%) 46.189 MB/sec [Average]
[info]   (min, avg, max) = (2186.998, 2200.386, 2216.243), stdev = 11.995
[info]   CI (99.9%): [2154.197, 2246.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1391.744 ±(99.9%) 13.630 B/op [Average]
[info]   (min, avg, max) = (1385.818, 1391.744, 1395.086), stdev = 3.540
[info]   CI (99.9%): [1378.113, 1405.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2147.517 ±(99.9%) 1127.753 MB/sec [Average]
[info]   (min, avg, max) = (2008.793, 2147.517, 2671.330), stdev = 292.874
[info]   CI (99.9%): [1019.764, 3275.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1358.875 ±(99.9%) 736.216 B/op [Average]
[info]   (min, avg, max) = (1266.690, 1358.875, 1700.713), stdev = 191.193
[info]   CI (99.9%): [622.659, 2095.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.01% complete, ETA 02:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.604 ops/s
[info] # Warmup Iteration   2: 18873521.123 ops/s
[info] # Warmup Iteration   3: 18088196.909 ops/s
[info] # Warmup Iteration   4: 19620783.884 ops/s
[info] # Warmup Iteration   5: 19690320.901 ops/s
[info] Iteration   1: 19796206.500 ops/s
[info]                  ·gc.alloc.rate:      603.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19776818.483 ops/s
[info]                  ·gc.alloc.rate:                   616.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18809975.479 ops/s
[info]                  ·gc.alloc.rate:                   595.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19697609.263 ops/s
[info]                  ·gc.alloc.rate:                   615.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19041725.878 ops/s
[info]                  ·gc.alloc.rate:               601.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.057 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   19424467.120 ±(99.9%) 1786548.480 ops/s [Average]
[info]   (min, avg, max) = (18809975.479, 19424467.120, 19796206.500), stdev = 463960.967
[info]   CI (99.9%): [17637918.640, 21211015.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   606.516 ±(99.9%) 34.063 MB/sec [Average]
[info]   (min, avg, max) = (595.936, 606.516, 616.167), stdev = 8.846
[info]   CI (99.9%): [572.453, 640.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.148 ±(99.9%) 2.815 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.148, 49.846), stdev = 0.731
[info]   CI (99.9%): [46.334, 51.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.444 ±(99.9%) 1146.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.444, 666.176), stdev = 297.646
[info]   CI (99.9%): [≈ 0, 1678.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   43.363 ±(99.9%) 93.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.363, 55.679), stdev = 24.270
[info]   CI (99.9%): [≈ 0, 136.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.21% complete, ETA 02:08:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604091.705 ops/s
[info] # Warmup Iteration   2: 5456173.825 ops/s
[info] # Warmup Iteration   3: 5925965.024 ops/s
[info] # Warmup Iteration   4: 6070283.436 ops/s
[info] # Warmup Iteration   5: 5910842.142 ops/s
[info] Iteration   1: 6098011.894 ops/s
[info]                  ·gc.alloc.rate:                   1728.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              446.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6278738.548 ops/s
[info]                  ·gc.alloc.rate:                   1758.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6105147.232 ops/s
[info]                  ·gc.alloc.rate:                   1739.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6118426.254 ops/s
[info]                  ·gc.alloc.rate:               1730.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 343.359 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6142617.588 ops/s
[info]                  ·gc.alloc.rate:               1752.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          449.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 513.227 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6148588.303 ±(99.9%) 287702.535 ops/s [Average]
[info]   (min, avg, max) = (6098011.894, 6148588.303, 6278738.548), stdev = 74715.435
[info]   CI (99.9%): [5860885.768, 6436290.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1742.019 ±(99.9%) 50.802 MB/sec [Average]
[info]   (min, avg, max) = (1728.917, 1742.019, 1758.357), stdev = 13.193
[info]   CI (99.9%): [1691.216, 1792.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445.883 ±(99.9%) 12.818 B/op [Average]
[info]   (min, avg, max) = (440.720, 445.883, 449.029), stdev = 3.329
[info]   CI (99.9%): [433.065, 458.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.560 ±(99.9%) 1409.131 MB/sec [Average]
[info]   (min, avg, max) = (1334.974, 1737.560, 2005.873), stdev = 365.947
[info]   CI (99.9%): [328.428, 3146.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   445.314 ±(99.9%) 372.476 B/op [Average]
[info]   (min, avg, max) = (335.461, 445.314, 517.460), stdev = 96.731
[info]   CI (99.9%): [72.838, 817.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.764 ±(99.9%) 6.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.602), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 6.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.903), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.41% complete, ETA 02:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5954596.259 ops/s
[info] # Warmup Iteration   2: 26265903.270 ops/s
[info] # Warmup Iteration   3: 27174548.652 ops/s
[info] # Warmup Iteration   4: 28491812.727 ops/s
[info] # Warmup Iteration   5: 25950738.784 ops/s
[info] Iteration   1: 27748425.025 ops/s
[info]                  ·gc.alloc.rate:                   892.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28261068.192 ops/s
[info]                  ·gc.alloc.rate:               877.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 26497923.326 ops/s
[info]                  ·gc.alloc.rate:                   823.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26724940.211 ops/s
[info]                  ·gc.alloc.rate:               830.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 27620440.843 ops/s
[info]                  ·gc.alloc.rate:                   885.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   27370559.519 ±(99.9%) 2840451.533 ops/s [Average]
[info]   (min, avg, max) = (26497923.326, 27370559.519, 28261068.192), stdev = 737656.243
[info]   CI (99.9%): [24530107.986, 30211011.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   861.843 ±(99.9%) 124.086 MB/sec [Average]
[info]   (min, avg, max) = (823.293, 861.843, 892.037), stdev = 32.225
[info]   CI (99.9%): [737.757, 985.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.540 ±(99.9%) 3.407 B/op [Average]
[info]   (min, avg, max) = (48.862, 49.540, 50.589), stdev = 0.885
[info]   CI (99.9%): [46.133, 52.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.180 ±(99.9%) 1416.816 MB/sec [Average]
[info]   (min, avg, max) = (671.395, 940.180, 1344.655), stdev = 367.943
[info]   CI (99.9%): [≈ 0, 2356.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   53.898 ±(99.9%) 78.995 B/op [Average]
[info]   (min, avg, max) = (37.377, 53.898, 76.595), stdev = 20.515
[info]   CI (99.9%): [≈ 0, 132.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3.61% complete, ETA 02:07:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6502071.095 ops/s
[info] # Warmup Iteration   2: 33098333.997 ops/s
[info] # Warmup Iteration   3: 34599404.143 ops/s
[info] # Warmup Iteration   4: 34604248.892 ops/s
[info] # Warmup Iteration   5: 34422994.889 ops/s
[info] Iteration   1: 33859278.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34553894.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34516117.538 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34505261.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34616337.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34410177.882 ±(99.9%) 1197590.857 ops/s [Average]
[info]   (min, avg, max) = (33859278.645, 34410177.882, 34616337.504), stdev = 311010.543
[info]   CI (99.9%): [33212587.025, 35607768.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3.82% complete, ETA 02:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63947.559 ops/s
[info] # Warmup Iteration   2: 1462045.245 ops/s
[info] # Warmup Iteration   3: 1738726.782 ops/s
[info] # Warmup Iteration   4: 1803545.723 ops/s
[info] # Warmup Iteration   5: 1819926.773 ops/s
[info] Iteration   1: 1790005.566 ops/s
[info]                  ·gc.alloc.rate:               2813.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          2473.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2666.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2343.986 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1774335.386 ops/s
[info]                  ·gc.alloc.rate:                   2765.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              2452.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2364.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1830747.918 ops/s
[info]                  ·gc.alloc.rate:                   2878.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              2474.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2296.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1772728.115 ops/s
[info]                  ·gc.alloc.rate:               2791.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          2478.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2380.400 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1763721.724 ops/s
[info]                  ·gc.alloc.rate:                   2778.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              2479.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2400.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1786307.742 ±(99.9%) 102358.977 ops/s [Average]
[info]   (min, avg, max) = (1763721.724, 1786307.742, 1830747.918), stdev = 26582.301
[info]   CI (99.9%): [1683948.765, 1888666.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2805.473 ±(99.9%) 170.269 MB/sec [Average]
[info]   (min, avg, max) = (2765.612, 2805.473, 2878.051), stdev = 44.218
[info]   CI (99.9%): [2635.204, 2975.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2471.658 ±(99.9%) 41.500 B/op [Average]
[info]   (min, avg, max) = (2452.965, 2471.658, 2479.358), stdev = 10.777
[info]   CI (99.9%): [2430.158, 2513.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2674.904 ±(99.9%) 40.689 MB/sec [Average]
[info]   (min, avg, max) = (2665.326, 2674.904, 2689.966), stdev = 10.567
[info]   CI (99.9%): [2634.215, 2715.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2357.091 ±(99.9%) 152.174 B/op [Average]
[info]   (min, avg, max) = (2296.868, 2357.091, 2400.187), stdev = 39.519
[info]   CI (99.9%): [2204.917, 2509.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.019), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.02% complete, ETA 02:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83456.238 ops/s
[info] # Warmup Iteration   2: 286920.670 ops/s
[info] # Warmup Iteration   3: 307966.629 ops/s
[info] # Warmup Iteration   4: 307112.077 ops/s
[info] # Warmup Iteration   5: 308309.477 ops/s
[info] Iteration   1: 312003.485 ops/s
[info]                  ·gc.alloc.rate:               1893.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          9548.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6777.320 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 310185.255 ops/s
[info]                  ·gc.alloc.rate:                   1909.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              9686.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10223.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.850 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 310702.992 ops/s
[info]                  ·gc.alloc.rate:                   1912.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              9686.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10180.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 312893.802 ops/s
[info]                  ·gc.alloc.rate:               1925.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          9683.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10103.305 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 311746.264 ops/s
[info]                  ·gc.alloc.rate:               1933.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          9756.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10143.206 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   311506.360 ±(99.9%) 4138.502 ops/s [Average]
[info]   (min, avg, max) = (310185.255, 311506.360, 312893.802), stdev = 1074.756
[info]   CI (99.9%): [307367.858, 315644.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1914.641 ±(99.9%) 59.146 MB/sec [Average]
[info]   (min, avg, max) = (1893.272, 1914.641, 1933.004), stdev = 15.360
[info]   CI (99.9%): [1855.495, 1973.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9672.159 ±(99.9%) 291.830 B/op [Average]
[info]   (min, avg, max) = (9548.137, 9672.159, 9756.153), stdev = 75.787
[info]   CI (99.9%): [9380.329, 9963.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.471 ±(99.9%) 1148.691 MB/sec [Average]
[info]   (min, avg, max) = (1343.855, 1877.471, 2015.220), stdev = 298.312
[info]   CI (99.9%): [728.780, 3026.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9485.608 ±(99.9%) 5832.329 B/op [Average]
[info]   (min, avg, max) = (6777.320, 9485.608, 10223.992), stdev = 1514.637
[info]   CI (99.9%): [3653.279, 15317.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 6.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.518), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.612 ±(99.9%) 30.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.612, 17.850), stdev = 7.960
[info]   CI (99.9%): [≈ 0, 34.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.22% complete, ETA 02:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60039.135 ops/s
[info] # Warmup Iteration   2: 455482.952 ops/s
[info] # Warmup Iteration   3: 491069.455 ops/s
[info] # Warmup Iteration   4: 512117.202 ops/s
[info] # Warmup Iteration   5: 511078.040 ops/s
[info] Iteration   1: 506241.364 ops/s
[info]                  ·gc.alloc.rate:                   660.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              2052.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.849 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 506035.452 ops/s
[info]                  ·gc.alloc.rate:               662.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          2059.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2069.738 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 512333.004 ops/s
[info]                  ·gc.alloc.rate:               667.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          2049.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2044.183 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 511257.944 ops/s
[info]                  ·gc.alloc.rate:               663.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          2042.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2044.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 510861.495 ops/s
[info]                  ·gc.alloc.rate:               660.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          2035.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2046.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   509345.852 ±(99.9%) 11467.056 ops/s [Average]
[info]   (min, avg, max) = (506035.452, 509345.852, 512333.004), stdev = 2977.958
[info]   CI (99.9%): [497878.795, 520812.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   662.916 ±(99.9%) 11.142 MB/sec [Average]
[info]   (min, avg, max) = (660.278, 662.916, 667.559), stdev = 2.894
[info]   CI (99.9%): [651.774, 674.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2048.100 ±(99.9%) 35.472 B/op [Average]
[info]   (min, avg, max) = (2035.857, 2048.100, 2059.774), stdev = 9.212
[info]   CI (99.9%): [2012.629, 2083.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.087 ±(99.9%) 3.271 MB/sec [Average]
[info]   (min, avg, max) = (664.162, 665.087, 665.880), stdev = 0.849
[info]   CI (99.9%): [661.816, 668.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2054.842 ±(99.9%) 52.582 B/op [Average]
[info]   (min, avg, max) = (2044.183, 2054.842, 2069.821), stdev = 13.655
[info]   CI (99.9%): [2002.260, 2107.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 7.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 4.455), stdev = 1.992
[info]   CI (99.9%): [≈ 0, 8.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.770 ±(99.9%) 23.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.770, 13.849), stdev = 6.193
[info]   CI (99.9%): [≈ 0, 26.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.42% complete, ETA 02:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640273.149 ops/s
[info] # Warmup Iteration   2: 1213386.910 ops/s
[info] # Warmup Iteration   3: 1273303.532 ops/s
[info] # Warmup Iteration   4: 1303792.273 ops/s
[info] # Warmup Iteration   5: 1296629.859 ops/s
[info] Iteration   1: 1306167.481 ops/s
[info]                  ·gc.alloc.rate:               885.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          1066.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 809.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1250423.084 ops/s
[info]                  ·gc.alloc.rate:               863.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          1086.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 845.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1300521.629 ops/s
[info]                  ·gc.alloc.rate:               896.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          1084.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1626.003 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1278404.805 ops/s
[info]                  ·gc.alloc.rate:               882.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          1086.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 827.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1298744.966 ops/s
[info]                  ·gc.alloc.rate:               886.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          1074.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 814.878 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1286852.393 ±(99.9%) 88225.350 ops/s [Average]
[info]   (min, avg, max) = (1250423.084, 1286852.393, 1306167.481), stdev = 22911.843
[info]   CI (99.9%): [1198627.043, 1375077.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   882.897 ±(99.9%) 47.454 MB/sec [Average]
[info]   (min, avg, max) = (863.056, 882.897, 896.723), stdev = 12.324
[info]   CI (99.9%): [835.443, 930.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1079.700 ±(99.9%) 33.783 B/op [Average]
[info]   (min, avg, max) = (1066.619, 1079.700, 1086.238), stdev = 8.773
[info]   CI (99.9%): [1045.918, 1113.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.439 ±(99.9%) 1157.175 MB/sec [Average]
[info]   (min, avg, max) = (671.501, 806.439, 1344.015), stdev = 300.515
[info]   CI (99.9%): [≈ 0, 1963.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   984.586 ±(99.9%) 1381.729 B/op [Average]
[info]   (min, avg, max) = (809.046, 984.586, 1626.003), stdev = 358.831
[info]   CI (99.9%): [≈ 0, 2366.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 02:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17976.005 ops/s
[info] # Warmup Iteration   2: 102491.782 ops/s
[info] # Warmup Iteration   3: 113306.542 ops/s
[info] # Warmup Iteration   4: 112803.749 ops/s
[info] # Warmup Iteration   5: 114584.802 ops/s
[info] Iteration   1: 113699.722 ops/s
[info]                  ·gc.alloc.rate:                   3565.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              49343.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46244.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.864 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 113353.312 ops/s
[info]                  ·gc.alloc.rate:                   3608.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              50096.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46534.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 112960.494 ops/s
[info]                  ·gc.alloc.rate:               3597.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          50111.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46875.812 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 114294.907 ops/s
[info]                  ·gc.alloc.rate:               3638.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          50098.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46486.784 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 114536.339 ops/s
[info]                  ·gc.alloc.rate:               3646.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          50104.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46532.894 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   113768.955 ±(99.9%) 2507.849 ops/s [Average]
[info]   (min, avg, max) = (112960.494, 113768.955, 114536.339), stdev = 651.281
[info]   CI (99.9%): [111261.105, 116276.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3611.383 ±(99.9%) 125.837 MB/sec [Average]
[info]   (min, avg, max) = (3565.482, 3611.383, 3646.604), stdev = 32.679
[info]   CI (99.9%): [3485.546, 3737.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49951.066 ±(99.9%) 1307.212 B/op [Average]
[info]   (min, avg, max) = (49343.884, 49951.066, 50111.785), stdev = 339.479
[info]   CI (99.9%): [48643.854, 51258.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3364.358 ±(99.9%) 69.864 MB/sec [Average]
[info]   (min, avg, max) = (3341.542, 3364.358, 3386.640), stdev = 18.144
[info]   CI (99.9%): [3294.494, 3434.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46534.883 ±(99.9%) 866.937 B/op [Average]
[info]   (min, avg, max) = (46244.706, 46534.883, 46875.812), stdev = 225.141
[info]   CI (99.9%): [45667.946, 47401.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.231 ±(99.9%) 1.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.231, 0.864), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4.82% complete, ETA 02:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189571.999 ops/s
[info] # Warmup Iteration   2: 512290.659 ops/s
[info] # Warmup Iteration   3: 543678.579 ops/s
[info] # Warmup Iteration   4: 547933.115 ops/s
[info] # Warmup Iteration   5: 544619.943 ops/s
[info] Iteration   1: 540457.136 ops/s
[info]                  ·gc.alloc.rate:                   1684.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              4905.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3917.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 528607.419 ops/s
[info]                  ·gc.alloc.rate:                   1678.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              4997.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6011.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 548536.778 ops/s
[info]                  ·gc.alloc.rate:               1713.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          4914.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3853.063 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 545581.925 ops/s
[info]                  ·gc.alloc.rate:               1727.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          4983.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5805.256 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 544885.213 ops/s
[info]                  ·gc.alloc.rate:               1725.742 MB/sec
[info]                  ·gc.alloc.rate.norm:          4984.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3876.018 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   541613.694 ±(99.9%) 30128.650 ops/s [Average]
[info]   (min, avg, max) = (528607.419, 541613.694, 548536.778), stdev = 7824.315
[info]   CI (99.9%): [511485.044, 571742.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1706.070 ±(99.9%) 88.311 MB/sec [Average]
[info]   (min, avg, max) = (1678.721, 1706.070, 1727.794), stdev = 22.934
[info]   CI (99.9%): [1617.759, 1794.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4957.153 ±(99.9%) 167.512 B/op [Average]
[info]   (min, avg, max) = (4905.284, 4957.153, 4997.750), stdev = 43.502
[info]   CI (99.9%): [4789.641, 5124.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1612.482 ±(99.9%) 1418.002 MB/sec [Average]
[info]   (min, avg, max) = (1342.053, 1612.482, 2019.148), stdev = 368.251
[info]   CI (99.9%): [194.480, 3030.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4692.565 ±(99.9%) 4283.409 B/op [Average]
[info]   (min, avg, max) = (3853.063, 4692.565, 6011.242), stdev = 1112.388
[info]   CI (99.9%): [409.156, 8975.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 5.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.102), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 5.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.859 ±(99.9%) 15.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.859, 9.235), stdev = 4.123
[info]   CI (99.9%): [≈ 0, 17.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.02% complete, ETA 02:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122434.927 ops/s
[info] # Warmup Iteration   2: 337727.417 ops/s
[info] # Warmup Iteration   3: 339380.054 ops/s
[info] # Warmup Iteration   4: 349524.919 ops/s
[info] # Warmup Iteration   5: 351664.359 ops/s
[info] Iteration   1: 352937.883 ops/s
[info]                  ·gc.alloc.rate:               1200.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          5351.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2990.925 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 345423.269 ops/s
[info]                  ·gc.alloc.rate:                   1189.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              5419.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6113.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 349603.275 ops/s
[info]                  ·gc.alloc.rate:               1212.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          5457.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6044.016 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 351044.822 ops/s
[info]                  ·gc.alloc.rate:                   1217.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6022.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 352693.333 ops/s
[info]                  ·gc.alloc.rate:                   1207.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              5390.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2997.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   350340.516 ±(99.9%) 11790.291 ops/s [Average]
[info]   (min, avg, max) = (345423.269, 350340.516, 352937.883), stdev = 3061.901
[info]   CI (99.9%): [338550.225, 362130.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1205.418 ±(99.9%) 41.817 MB/sec [Average]
[info]   (min, avg, max) = (1189.457, 1205.418, 1217.064), stdev = 10.860
[info]   CI (99.9%): [1163.602, 1247.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5414.924 ±(99.9%) 173.592 B/op [Average]
[info]   (min, avg, max) = (5351.785, 5414.924, 5457.264), stdev = 45.081
[info]   CI (99.9%): [5241.332, 5588.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074.120 ±(99.9%) 1415.969 MB/sec [Average]
[info]   (min, avg, max) = (670.785, 1074.120, 1343.332), stdev = 367.723
[info]   CI (99.9%): [≈ 0, 2490.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4833.805 ±(99.9%) 6467.203 B/op [Average]
[info]   (min, avg, max) = (2990.925, 4833.805, 6113.858), stdev = 1679.512
[info]   CI (99.9%): [≈ 0, 11301.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 5.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.039), stdev = 1.329
[info]   CI (99.9%): [≈ 0, 5.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.023 ±(99.9%) 22.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.023, 13.626), stdev = 5.957
[info]   CI (99.9%): [≈ 0, 25.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 02:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307738.267 ops/s
[info] # Warmup Iteration   2: 843687.088 ops/s
[info] # Warmup Iteration   3: 902058.195 ops/s
[info] # Warmup Iteration   4: 871560.631 ops/s
[info] # Warmup Iteration   5: 871120.559 ops/s
[info] Iteration   1: 873255.826 ops/s
[info]                  ·gc.alloc.rate:               646.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1199.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 873243.838 ops/s
[info]                  ·gc.alloc.rate:                   643.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1199.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 870693.447 ops/s
[info]                  ·gc.alloc.rate:               653.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          1180.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1204.634 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 912043.149 ops/s
[info]                  ·gc.alloc.rate:                   676.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1167.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1150.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 912398.336 ops/s
[info]                  ·gc.alloc.rate:               675.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          1165.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1151.293 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   888326.919 ±(99.9%) 84087.634 ops/s [Average]
[info]   (min, avg, max) = (870693.447, 888326.919, 912398.336), stdev = 21837.291
[info]   CI (99.9%): [804239.286, 972414.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   659.174 ±(99.9%) 61.539 MB/sec [Average]
[info]   (min, avg, max) = (643.944, 659.174, 676.547), stdev = 15.981
[info]   CI (99.9%): [597.636, 720.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1167.792 ±(99.9%) 29.655 B/op [Average]
[info]   (min, avg, max) = (1160.479, 1167.792, 1180.766), stdev = 7.701
[info]   CI (99.9%): [1138.138, 1197.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.434 ±(99.9%) 2.573 MB/sec [Average]
[info]   (min, avg, max) = (665.822, 666.434, 667.474), stdev = 0.668
[info]   CI (99.9%): [663.860, 669.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1181.173 ±(99.9%) 107.426 B/op [Average]
[info]   (min, avg, max) = (1150.085, 1181.173, 1204.634), stdev = 27.898
[info]   CI (99.9%): [1073.747, 1288.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.038), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.42% complete, ETA 02:05:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1439608.568 ops/s
[info] # Warmup Iteration   2: 2437431.297 ops/s
[info] # Warmup Iteration   3: 2491085.003 ops/s
[info] # Warmup Iteration   4: 2555848.854 ops/s
[info] # Warmup Iteration   5: 2571420.835 ops/s
[info] Iteration   1: 2572005.656 ops/s
[info]                  ·gc.alloc.rate:               1220.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 822.143 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2574295.339 ops/s
[info]                  ·gc.alloc.rate:                   1219.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2540803.743 ops/s
[info]                  ·gc.alloc.rate:               1200.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 416.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2477721.624 ops/s
[info]                  ·gc.alloc.rate:                   1173.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2555278.967 ops/s
[info]                  ·gc.alloc.rate:                   1221.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     828.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2544021.066 ±(99.9%) 151995.315 ops/s [Average]
[info]   (min, avg, max) = (2477721.624, 2544021.066, 2574295.339), stdev = 39472.701
[info]   CI (99.9%): [2392025.751, 2696016.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1206.974 ±(99.9%) 79.289 MB/sec [Average]
[info]   (min, avg, max) = (1173.688, 1206.974, 1221.629), stdev = 20.591
[info]   CI (99.9%): [1127.684, 1286.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.597 ±(99.9%) 13.206 B/op [Average]
[info]   (min, avg, max) = (743.341, 746.597, 752.379), stdev = 3.430
[info]   CI (99.9%): [733.391, 759.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.476 ±(99.9%) 1157.327 MB/sec [Average]
[info]   (min, avg, max) = (672.831, 1210.476, 1345.964), stdev = 300.554
[info]   CI (99.9%): [53.149, 2367.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   748.830 ±(99.9%) 716.728 B/op [Average]
[info]   (min, avg, max) = (416.753, 748.830, 854.875), stdev = 186.132
[info]   CI (99.9%): [32.103, 1465.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.519), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 4.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.369 ±(99.9%) 2.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.600), stdev = 0.695
[info]   CI (99.9%): [≈ 0, 3.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5.62% complete, ETA 02:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1690566.263 ops/s
[info] # Warmup Iteration   2: 2802758.386 ops/s
[info] # Warmup Iteration   3: 2856270.402 ops/s
[info] # Warmup Iteration   4: 2852897.120 ops/s
[info] # Warmup Iteration   5: 2856099.022 ops/s
[info] Iteration   1: 2854073.217 ops/s
[info]                  ·gc.alloc.rate:      1.352 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.745 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2860435.899 ops/s
[info]                  ·gc.alloc.rate:      0.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.109 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2863157.034 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2862213.327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2864234.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2860822.827 ±(99.9%) 15490.116 ops/s [Average]
[info]   (min, avg, max) = (2854073.217, 2860822.827, 2864234.659), stdev = 4022.734
[info]   CI (99.9%): [2845332.712, 2876312.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.310 ±(99.9%) 2.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.310, 1.352), stdev = 0.588
[info]   CI (99.9%): [≈ 0, 2.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.171 ±(99.9%) 1.249 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.171, 0.745), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.82% complete, ETA 02:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150322.560 ops/s
[info] # Warmup Iteration   2: 437073.462 ops/s
[info] # Warmup Iteration   3: 460349.632 ops/s
[info] # Warmup Iteration   4: 460287.125 ops/s
[info] # Warmup Iteration   5: 459692.357 ops/s
[info] Iteration   1: 459920.092 ops/s
[info]                  ·gc.alloc.rate:               676.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          2316.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2286.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 460458.101 ops/s
[info]                  ·gc.alloc.rate:               678.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          2318.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2283.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 460859.420 ops/s
[info]                  ·gc.alloc.rate:                   690.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              2358.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2283.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 460199.599 ops/s
[info]                  ·gc.alloc.rate:                   683.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              2337.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2287.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 461614.562 ops/s
[info]                  ·gc.alloc.rate:               683.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2282.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   460610.355 ±(99.9%) 2538.820 ops/s [Average]
[info]   (min, avg, max) = (459920.092, 460610.355, 461614.562), stdev = 659.323
[info]   CI (99.9%): [458071.535, 463149.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   682.539 ±(99.9%) 20.386 MB/sec [Average]
[info]   (min, avg, max) = (676.947, 682.539, 690.529), stdev = 5.294
[info]   CI (99.9%): [662.152, 702.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2331.929 ±(99.9%) 64.953 B/op [Average]
[info]   (min, avg, max) = (2316.367, 2331.929, 2358.007), stdev = 16.868
[info]   CI (99.9%): [2266.976, 2396.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.716 ±(99.9%) 2.031 MB/sec [Average]
[info]   (min, avg, max) = (668.165, 668.716, 669.494), stdev = 0.527
[info]   CI (99.9%): [666.685, 670.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2284.710 ±(99.9%) 7.610 B/op [Average]
[info]   (min, avg, max) = (2282.520, 2284.710, 2287.229), stdev = 1.976
[info]   CI (99.9%): [2277.101, 2292.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.071), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6.02% complete, ETA 02:04:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54915.097 ops/s
[info] # Warmup Iteration   2: 138263.572 ops/s
[info] # Warmup Iteration   3: 138639.980 ops/s
[info] # Warmup Iteration   4: 143340.652 ops/s
[info] # Warmup Iteration   5: 143842.509 ops/s
[info] Iteration   1: 143545.654 ops/s
[info]                  ·gc.alloc.rate:                   1551.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              17014.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14737.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 142724.633 ops/s
[info]                  ·gc.alloc.rate:                   1581.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              17435.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22249.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 143998.392 ops/s
[info]                  ·gc.alloc.rate:                   1580.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              17266.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14684.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 143567.947 ops/s
[info]                  ·gc.alloc.rate:                   1575.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              17266.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14699.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 143952.639 ops/s
[info]                  ·gc.alloc.rate:               1566.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          17124.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14652.870 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   143557.853 ±(99.9%) 1967.635 ops/s [Average]
[info]   (min, avg, max) = (142724.633, 143557.853, 143998.392), stdev = 510.988
[info]   CI (99.9%): [141590.218, 145525.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1571.110 ±(99.9%) 46.971 MB/sec [Average]
[info]   (min, avg, max) = (1551.970, 1571.110, 1581.287), stdev = 12.198
[info]   CI (99.9%): [1524.139, 1618.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17221.387 ±(99.9%) 615.495 B/op [Average]
[info]   (min, avg, max) = (17014.417, 17221.387, 17435.645), stdev = 159.842
[info]   CI (99.9%): [16605.892, 17836.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1477.560 ±(99.9%) 1162.978 MB/sec [Average]
[info]   (min, avg, max) = (1340.345, 1477.560, 2017.825), stdev = 302.022
[info]   CI (99.9%): [314.583, 2640.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16204.670 ±(99.9%) 13011.452 B/op [Average]
[info]   (min, avg, max) = (14652.870, 16204.670, 22249.021), stdev = 3379.033
[info]   CI (99.9%): [3193.218, 29216.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 4.828 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 2.914), stdev = 1.254
[info]   CI (99.9%): [≈ 0, 5.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7.975 ±(99.9%) 53.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.975, 32.136), stdev = 13.827
[info]   CI (99.9%): [≈ 0, 61.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 02:04:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6457.618 ops/s
[info] # Warmup Iteration   2: 14998.518 ops/s
[info] # Warmup Iteration   3: 16595.932 ops/s
[info] # Warmup Iteration   4: 17455.604 ops/s
[info] # Warmup Iteration   5: 17235.209 ops/s
[info] Iteration   1: 17199.253 ops/s
[info]                  ·gc.alloc.rate:               1371.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          125516.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122874.286 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 16501.012 ops/s
[info]                  ·gc.alloc.rate:               1351.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          128852.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128109.876 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 17029.116 ops/s
[info]                  ·gc.alloc.rate:                   1370.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              126635.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124200.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17595.570 ops/s
[info]                  ·gc.alloc.rate:                   1398.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              125104.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120116.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17549.783 ops/s
[info]                  ·gc.alloc.rate:                   1407.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              126201.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120185.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17174.947 ±(99.9%) 1715.019 ops/s [Average]
[info]   (min, avg, max) = (16501.012, 17174.947, 17595.570), stdev = 445.385
[info]   CI (99.9%): [15459.928, 18889.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1379.888 ±(99.9%) 88.220 MB/sec [Average]
[info]   (min, avg, max) = (1351.118, 1379.888, 1407.444), stdev = 22.910
[info]   CI (99.9%): [1291.668, 1468.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126462.237 ±(99.9%) 5630.369 B/op [Average]
[info]   (min, avg, max) = (125104.288, 126462.237, 128852.950), stdev = 1462.189
[info]   CI (99.9%): [120831.868, 132092.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.710 ±(99.9%) 5.294 MB/sec [Average]
[info]   (min, avg, max) = (1340.351, 1342.710, 1343.926), stdev = 1.375
[info]   CI (99.9%): [1337.416, 1348.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   123097.246 ±(99.9%) 12735.770 B/op [Average]
[info]   (min, avg, max) = (120116.439, 123097.246, 128109.876), stdev = 3307.439
[info]   CI (99.9%): [110361.476, 135833.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.894), stdev = 1.250
[info]   CI (99.9%): [≈ 0, 5.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.005 ±(99.9%) 444.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.005, 267.408), stdev = 115.534
[info]   CI (99.9%): [≈ 0, 512.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.43% complete, ETA 02:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10181.312 ops/s
[info] # Warmup Iteration   2: 31251.780 ops/s
[info] # Warmup Iteration   3: 36203.674 ops/s
[info] # Warmup Iteration   4: 34215.476 ops/s
[info] # Warmup Iteration   5: 36733.302 ops/s
[info] Iteration   1: 36439.878 ops/s
[info]                  ·gc.alloc.rate:                   1019.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              44007.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57710.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 36269.082 ops/s
[info]                  ·gc.alloc.rate:               992.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          43055.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29021.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 35607.894 ops/s
[info]                  ·gc.alloc.rate:                   989.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              43719.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59135.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 36282.483 ops/s
[info]                  ·gc.alloc.rate:               998.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          43290.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29024.376 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 35571.798 ops/s
[info]                  ·gc.alloc.rate:                   968.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              42831.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29633.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.921 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   36034.227 ±(99.9%) 1584.085 ops/s [Average]
[info]   (min, avg, max) = (35571.798, 36034.227, 36439.878), stdev = 411.382
[info]   CI (99.9%): [34450.142, 37618.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   993.425 ±(99.9%) 70.402 MB/sec [Average]
[info]   (min, avg, max) = (968.170, 993.425, 1019.048), stdev = 18.283
[info]   CI (99.9%): [923.023, 1063.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43381.011 ±(99.9%) 1850.733 B/op [Average]
[info]   (min, avg, max) = (42831.218, 43381.011, 44007.909), stdev = 480.630
[info]   CI (99.9%): [41530.278, 45231.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.501 ±(99.9%) 1408.649 MB/sec [Average]
[info]   (min, avg, max) = (668.837, 936.501, 1338.123), stdev = 365.822
[info]   CI (99.9%): [≈ 0, 2345.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40905.201 ±(99.9%) 61616.735 B/op [Average]
[info]   (min, avg, max) = (29021.924, 40905.201, 59135.871), stdev = 16001.670
[info]   CI (99.9%): [≈ 0, 102521.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.732 ±(99.9%) 2.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.732, 1.840), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.63% complete, ETA 02:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18055.374 ops/s
[info] # Warmup Iteration   2: 40126.190 ops/s
[info] # Warmup Iteration   3: 41106.563 ops/s
[info] # Warmup Iteration   4: 39332.182 ops/s
[info] # Warmup Iteration   5: 38818.025 ops/s
[info] Iteration   1: 39916.683 ops/s
[info]                  ·gc.alloc.rate:               611.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          24113.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26434.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 40190.380 ops/s
[info]                  ·gc.alloc.rate:               614.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          24070.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26253.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 40514.786 ops/s
[info]                  ·gc.alloc.rate:                   629.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              24428.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26083.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41180.039 ops/s
[info]                  ·gc.alloc.rate:               634.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          24244.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25661.332 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 41120.710 ops/s
[info]                  ·gc.alloc.rate:                   634.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              24274.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25710.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   40584.520 ±(99.9%) 2151.162 ops/s [Average]
[info]   (min, avg, max) = (39916.683, 40584.520, 41180.039), stdev = 558.650
[info]   CI (99.9%): [38433.358, 42735.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   624.873 ±(99.9%) 41.772 MB/sec [Average]
[info]   (min, avg, max) = (611.756, 624.873, 634.449), stdev = 10.848
[info]   CI (99.9%): [583.101, 666.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24226.235 ±(99.9%) 546.339 B/op [Average]
[info]   (min, avg, max) = (24070.665, 24226.235, 24428.391), stdev = 141.882
[info]   CI (99.9%): [23679.897, 24772.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.246 ±(99.9%) 2.262 MB/sec [Average]
[info]   (min, avg, max) = (670.577, 671.246, 671.800), stdev = 0.587
[info]   CI (99.9%): [668.984, 673.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26028.641 ±(99.9%) 1297.977 B/op [Average]
[info]   (min, avg, max) = (25661.332, 26028.641, 26434.358), stdev = 337.080
[info]   CI (99.9%): [24730.664, 27326.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.804 ±(99.9%) 4.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 2.426), stdev = 1.139
[info]   CI (99.9%): [≈ 0, 5.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.83% complete, ETA 02:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2031.292 ops/s
[info] # Warmup Iteration   2: 23677.365 ops/s
[info] # Warmup Iteration   3: 29945.175 ops/s
[info] # Warmup Iteration   4: 30201.970 ops/s
[info] # Warmup Iteration   5: 29995.314 ops/s
[info] Iteration   1: 30262.469 ops/s
[info]                  ·gc.alloc.rate:                   1528.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              79481.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69511.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 29754.806 ops/s
[info]                  ·gc.alloc.rate:                   1504.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              79571.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70730.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 29379.667 ops/s
[info]                  ·gc.alloc.rate:                   1486.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              79618.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107551.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 30335.512 ops/s
[info]                  ·gc.alloc.rate:                   1532.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              79477.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69257.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30383.726 ops/s
[info]                  ·gc.alloc.rate:                   1545.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              80070.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69007.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30023.236 ±(99.9%) 1690.491 ops/s [Average]
[info]   (min, avg, max) = (29379.667, 30023.236, 30383.726), stdev = 439.015
[info]   CI (99.9%): [28332.745, 31713.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1519.520 ±(99.9%) 91.580 MB/sec [Average]
[info]   (min, avg, max) = (1486.418, 1519.520, 1545.958), stdev = 23.783
[info]   CI (99.9%): [1427.940, 1611.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79644.046 ±(99.9%) 947.116 B/op [Average]
[info]   (min, avg, max) = (79477.969, 79644.046, 80070.788), stdev = 245.963
[info]   CI (99.9%): [78696.930, 80591.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.915 ±(99.9%) 1158.123 MB/sec [Average]
[info]   (min, avg, max) = (1332.363, 1469.915, 2007.922), stdev = 300.761
[info]   CI (99.9%): [311.792, 2628.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77211.869 ±(99.9%) 65358.551 B/op [Average]
[info]   (min, avg, max) = (69007.963, 77211.869, 107551.746), stdev = 16973.408
[info]   CI (99.9%): [11853.319, 142570.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.600 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.924, 4.455), stdev = 1.974
[info]   CI (99.9%): [≈ 0, 8.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   49.464 ±(99.9%) 407.209 B/op [Average]
[info]   (min, avg, max) = (2.156, 49.464, 238.637), stdev = 105.751
[info]   CI (99.9%): [≈ 0, 456.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 9.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.03% complete, ETA 02:03:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7558.121 ops/s
[info] # Warmup Iteration   2: 21559.961 ops/s
[info] # Warmup Iteration   3: 24535.455 ops/s
[info] # Warmup Iteration   4: 24803.259 ops/s
[info] # Warmup Iteration   5: 24493.492 ops/s
[info] Iteration   1: 24399.123 ops/s
[info]                  ·gc.alloc.rate:                   1791.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              115513.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129885.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 24513.224 ops/s
[info]                  ·gc.alloc.rate:                   1765.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              113318.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86219.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24939.466 ops/s
[info]                  ·gc.alloc.rate:                   1809.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              114197.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126816.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24856.236 ops/s
[info]                  ·gc.alloc.rate:                   1804.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              114191.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126856.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.631 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25006.734 ops/s
[info]                  ·gc.alloc.rate:               1815.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          114204.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84219.773 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24742.957 ±(99.9%) 1040.431 ops/s [Average]
[info]   (min, avg, max) = (24399.123, 24742.957, 25006.734), stdev = 270.197
[info]   CI (99.9%): [23702.525, 25783.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1797.233 ±(99.9%) 76.432 MB/sec [Average]
[info]   (min, avg, max) = (1765.552, 1797.233, 1815.156), stdev = 19.849
[info]   CI (99.9%): [1720.802, 1873.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   114285.060 ±(99.9%) 3023.595 B/op [Average]
[info]   (min, avg, max) = (113318.945, 114285.060, 115513.807), stdev = 785.218
[info]   CI (99.9%): [111261.465, 117308.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.068 ±(99.9%) 1410.023 MB/sec [Average]
[info]   (min, avg, max) = (1338.586, 1742.068, 2013.842), stdev = 366.179
[info]   CI (99.9%): [332.045, 3152.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110799.367 ±(99.9%) 90085.200 B/op [Average]
[info]   (min, avg, max) = (84219.773, 110799.367, 129885.075), stdev = 23394.840
[info]   CI (99.9%): [20714.168, 200884.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.644), stdev = 1.616
[info]   CI (99.9%): [≈ 0, 6.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48.366 ±(99.9%) 399.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.366, 233.885), stdev = 103.715
[info]   CI (99.9%): [≈ 0, 447.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.23% complete, ETA 02:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6288.244 ops/s
[info] # Warmup Iteration   2: 21333.245 ops/s
[info] # Warmup Iteration   3: 24764.450 ops/s
[info] # Warmup Iteration   4: 24769.385 ops/s
[info] # Warmup Iteration   5: 24738.445 ops/s
[info] Iteration   1: 24668.571 ops/s
[info]                  ·gc.alloc.rate:                   1569.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              100090.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85295.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 24138.236 ops/s
[info]                  ·gc.alloc.rate:                   1524.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              99369.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87207.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24713.928 ops/s
[info]                  ·gc.alloc.rate:                   1597.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              101743.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127816.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 25054.535 ops/s
[info]                  ·gc.alloc.rate:               1606.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          100917.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83852.606 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24938.010 ops/s
[info]                  ·gc.alloc.rate:               1584.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          100020.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84158.481 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24702.656 ±(99.9%) 1360.140 ops/s [Average]
[info]   (min, avg, max) = (24138.236, 24702.656, 25054.535), stdev = 353.224
[info]   CI (99.9%): [23342.516, 26062.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1576.646 ±(99.9%) 124.414 MB/sec [Average]
[info]   (min, avg, max) = (1524.711, 1576.646, 1606.677), stdev = 32.310
[info]   CI (99.9%): [1452.231, 1701.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100428.177 ±(99.9%) 3535.153 B/op [Average]
[info]   (min, avg, max) = (99369.512, 100428.177, 101743.670), stdev = 918.068
[info]   CI (99.9%): [96893.024, 103963.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.224 ±(99.9%) 1156.140 MB/sec [Average]
[info]   (min, avg, max) = (1333.608, 1470.224, 2007.311), stdev = 300.246
[info]   CI (99.9%): [314.083, 2626.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93666.038 ±(99.9%) 73684.934 B/op [Average]
[info]   (min, avg, max) = (83852.606, 93666.038, 127816.146), stdev = 19135.743
[info]   CI (99.9%): [19981.104, 167350.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 4.039), stdev = 1.793
[info]   CI (99.9%): [≈ 0, 7.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.053 ±(99.9%) 439.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.053, 257.181), stdev = 114.133
[info]   CI (99.9%): [≈ 0, 492.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.43% complete, ETA 02:03:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13048.158 ops/s
[info] # Warmup Iteration   2: 25774.341 ops/s
[info] # Warmup Iteration   3: 27264.643 ops/s
[info] # Warmup Iteration   4: 27519.950 ops/s
[info] # Warmup Iteration   5: 27607.492 ops/s
[info] Iteration   1: 27683.480 ops/s
[info]                  ·gc.alloc.rate:                   1634.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              92914.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76475.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27841.472 ops/s
[info]                  ·gc.alloc.rate:                   1641.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              92785.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76078.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27905.659 ops/s
[info]                  ·gc.alloc.rate:                   1658.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              93509.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113772.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27907.069 ops/s
[info]                  ·gc.alloc.rate:                   1658.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              93530.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75657.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27847.294 ops/s
[info]                  ·gc.alloc.rate:               1668.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          94293.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113726.865 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27836.995 ±(99.9%) 351.434 ops/s [Average]
[info]   (min, avg, max) = (27683.480, 27836.995, 27907.069), stdev = 91.266
[info]   CI (99.9%): [27485.561, 28188.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1652.296 ±(99.9%) 53.494 MB/sec [Average]
[info]   (min, avg, max) = (1634.519, 1652.296, 1668.622), stdev = 13.892
[info]   CI (99.9%): [1598.802, 1705.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93406.660 ±(99.9%) 2310.539 B/op [Average]
[info]   (min, avg, max) = (92785.635, 93406.660, 94293.434), stdev = 600.040
[info]   CI (99.9%): [91096.120, 95717.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.596 ±(99.9%) 1414.556 MB/sec [Average]
[info]   (min, avg, max) = (1341.654, 1612.596, 2017.494), stdev = 367.356
[info]   CI (99.9%): [198.041, 3027.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91142.209 ±(99.9%) 79475.923 B/op [Average]
[info]   (min, avg, max) = (75657.653, 91142.209, 113772.299), stdev = 20639.645
[info]   CI (99.9%): [11666.286, 170618.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 3.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 2.207), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 4.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.272 ±(99.9%) 201.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.272, 124.727), stdev = 52.441
[info]   CI (99.9%): [≈ 0, 241.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7.63% complete, ETA 02:03:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10283.032 ops/s
[info] # Warmup Iteration   2: 25466.046 ops/s
[info] # Warmup Iteration   3: 27558.566 ops/s
[info] # Warmup Iteration   4: 27636.240 ops/s
[info] # Warmup Iteration   5: 27234.874 ops/s
[info] Iteration   1: 27267.453 ops/s
[info]                  ·gc.alloc.rate:                   1544.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              89168.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77622.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27153.888 ops/s
[info]                  ·gc.alloc.rate:                   1576.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              91373.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116984.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.609 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 27766.943 ops/s
[info]                  ·gc.alloc.rate:                   1596.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              90489.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76190.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.475 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27700.186 ops/s
[info]                  ·gc.alloc.rate:                   1579.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              89749.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76258.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27412.149 ops/s
[info]                  ·gc.alloc.rate:               1564.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          89818.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77026.373 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27460.124 ±(99.9%) 1027.789 ops/s [Average]
[info]   (min, avg, max) = (27153.888, 27460.124, 27766.943), stdev = 266.914
[info]   CI (99.9%): [26432.334, 28487.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1572.545 ±(99.9%) 74.038 MB/sec [Average]
[info]   (min, avg, max) = (1544.976, 1572.545, 1596.675), stdev = 19.227
[info]   CI (99.9%): [1498.507, 1646.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   90119.988 ±(99.9%) 3245.718 B/op [Average]
[info]   (min, avg, max) = (89168.398, 90119.988, 91373.602), stdev = 842.903
[info]   CI (99.9%): [86874.270, 93365.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.399 ±(99.9%) 1163.026 MB/sec [Average]
[info]   (min, avg, max) = (1341.647, 1478.399, 2018.689), stdev = 302.034
[info]   CI (99.9%): [315.373, 2641.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   84816.303 ±(99.9%) 69281.944 B/op [Average]
[info]   (min, avg, max) = (76190.054, 84816.303, 116984.619), stdev = 17992.301
[info]   CI (99.9%): [15534.358, 154098.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 4.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 2.582), stdev = 1.104
[info]   CI (99.9%): [≈ 0, 4.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   39.607 ±(99.9%) 246.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.607, 149.609), stdev = 63.957
[info]   CI (99.9%): [≈ 0, 285.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.83% complete, ETA 02:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2379.729 ops/s
[info] # Warmup Iteration   2: 6154.312 ops/s
[info] # Warmup Iteration   3: 7703.701 ops/s
[info] # Warmup Iteration   4: 7744.088 ops/s
[info] # Warmup Iteration   5: 7873.284 ops/s
[info] Iteration   1: 7805.554 ops/s
[info]                  ·gc.alloc.rate:                   1169.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              235813.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270067.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7828.664 ops/s
[info]                  ·gc.alloc.rate:               1165.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          234209.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269408.110 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 7791.743 ops/s
[info]                  ·gc.alloc.rate:               1151.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          232634.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135343.528 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 7627.929 ops/s
[info]                  ·gc.alloc.rate:                   1147.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              236761.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276780.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 7854.559 ops/s
[info]                  ·gc.alloc.rate:                   1174.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              235363.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268817.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 788.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7781.690 ±(99.9%) 343.492 ops/s [Average]
[info]   (min, avg, max) = (7627.929, 7781.690, 7854.559), stdev = 89.204
[info]   CI (99.9%): [7438.198, 8125.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1161.866 ±(99.9%) 45.085 MB/sec [Average]
[info]   (min, avg, max) = (1147.616, 1161.866, 1174.951), stdev = 11.708
[info]   CI (99.9%): [1116.781, 1206.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234956.591 ±(99.9%) 6120.962 B/op [Average]
[info]   (min, avg, max) = (232634.677, 234956.591, 236761.224), stdev = 1589.594
[info]   CI (99.9%): [228835.629, 241077.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206.731 ±(99.9%) 1155.167 MB/sec [Average]
[info]   (min, avg, max) = (670.089, 1206.731, 1341.954), stdev = 299.993
[info]   CI (99.9%): [51.564, 2361.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   244083.372 ±(99.9%) 234397.411 B/op [Average]
[info]   (min, avg, max) = (135343.528, 244083.372, 276780.087), stdev = 60872.263
[info]   CI (99.9%): [9685.961, 478480.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.935), stdev = 1.755
[info]   CI (99.9%): [≈ 0, 7.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   159.365 ±(99.9%) 1353.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.365, 788.334), stdev = 351.611
[info]   CI (99.9%): [≈ 0, 1513.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.03% complete, ETA 02:02:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5548.867 ops/s
[info] # Warmup Iteration   2: 14658.560 ops/s
[info] # Warmup Iteration   3: 18060.649 ops/s
[info] # Warmup Iteration   4: 17992.836 ops/s
[info] # Warmup Iteration   5: 17867.591 ops/s
[info] Iteration   1: 17707.372 ops/s
[info]                  ·gc.alloc.rate:                   1630.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              144867.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178934.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17478.082 ops/s
[info]                  ·gc.alloc.rate:                   1619.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              145779.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120973.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18146.782 ops/s
[info]                  ·gc.alloc.rate:                   1652.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              143345.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116405.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18199.626 ops/s
[info]                  ·gc.alloc.rate:                   1682.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              145506.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173725.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18246.065 ops/s
[info]                  ·gc.alloc.rate:                   1675.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              144481.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115365.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17955.586 ±(99.9%) 1320.088 ops/s [Average]
[info]   (min, avg, max) = (17478.082, 17955.586, 18246.065), stdev = 342.823
[info]   CI (99.9%): [16635.497, 19275.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1652.103 ±(99.9%) 106.012 MB/sec [Average]
[info]   (min, avg, max) = (1619.082, 1652.103, 1682.824), stdev = 27.531
[info]   CI (99.9%): [1546.090, 1758.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144796.195 ±(99.9%) 3694.227 B/op [Average]
[info]   (min, avg, max) = (143345.377, 144796.195, 145779.731), stdev = 959.379
[info]   CI (99.9%): [141101.968, 148490.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.314 ±(99.9%) 1413.975 MB/sec [Average]
[info]   (min, avg, max) = (1337.561, 1609.314, 2013.927), stdev = 367.205
[info]   CI (99.9%): [195.339, 3023.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141080.998 ±(99.9%) 124373.587 B/op [Average]
[info]   (min, avg, max) = (115365.767, 141080.998, 178934.249), stdev = 32299.426
[info]   CI (99.9%): [16707.411, 265454.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 4.449 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.787, 2.685), stdev = 1.155
[info]   CI (99.9%): [≈ 0, 5.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   70.029 ±(99.9%) 399.931 B/op [Average]
[info]   (min, avg, max) = (3.600, 70.029, 241.782), stdev = 103.861
[info]   CI (99.9%): [≈ 0, 469.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.23% complete, ETA 02:02:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17489.713 ops/s
[info] # Warmup Iteration   2: 40692.390 ops/s
[info] # Warmup Iteration   3: 43003.626 ops/s
[info] # Warmup Iteration   4: 39971.290 ops/s
[info] # Warmup Iteration   5: 41716.689 ops/s
[info] Iteration   1: 43018.772 ops/s
[info]                  ·gc.alloc.rate:                   1222.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              44726.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48960.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 41779.289 ops/s
[info]                  ·gc.alloc.rate:               1179.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          44405.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25219.425 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42811.272 ops/s
[info]                  ·gc.alloc.rate:                   1209.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              44468.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49248.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 43139.949 ops/s
[info]                  ·gc.alloc.rate:                   1229.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              44842.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48908.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 43194.011 ops/s
[info]                  ·gc.alloc.rate:                   1218.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              44404.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48797.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   42788.659 ±(99.9%) 2245.297 ops/s [Average]
[info]   (min, avg, max) = (41779.289, 42788.659, 43194.011), stdev = 583.097
[info]   CI (99.9%): [40543.361, 45033.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1211.983 ±(99.9%) 75.484 MB/sec [Average]
[info]   (min, avg, max) = (1179.265, 1211.983, 1229.297), stdev = 19.603
[info]   CI (99.9%): [1136.499, 1287.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44569.594 ±(99.9%) 778.192 B/op [Average]
[info]   (min, avg, max) = (44404.947, 44569.594, 44842.862), stdev = 202.094
[info]   CI (99.9%): [43791.402, 45347.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.649 ±(99.9%) 1153.582 MB/sec [Average]
[info]   (min, avg, max) = (669.744, 1205.649, 1340.753), stdev = 299.582
[info]   CI (99.9%): [52.068, 2359.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44227.092 ±(99.9%) 40920.462 B/op [Average]
[info]   (min, avg, max) = (25219.425, 44227.092, 49248.811), stdev = 10626.914
[info]   CI (99.9%): [3306.630, 85147.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 5.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.102), stdev = 1.342
[info]   CI (99.9%): [≈ 0, 6.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30.522 ±(99.9%) 188.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.522, 113.158), stdev = 48.955
[info]   CI (99.9%): [≈ 0, 219.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.43% complete, ETA 02:02:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33549.249 ops/s
[info] # Warmup Iteration   2: 54660.670 ops/s
[info] # Warmup Iteration   3: 59786.840 ops/s
[info] # Warmup Iteration   4: 60938.315 ops/s
[info] # Warmup Iteration   5: 61052.611 ops/s
[info] Iteration   1: 60999.999 ops/s
[info]                  ·gc.alloc.rate:                   813.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              20981.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17306.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 61036.744 ops/s
[info]                  ·gc.alloc.rate:               823.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          21224.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34627.897 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 60828.764 ops/s
[info]                  ·gc.alloc.rate:                   809.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              20951.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17389.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 60886.284 ops/s
[info]                  ·gc.alloc.rate:               806.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          20847.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17373.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 60817.274 ops/s
[info]                  ·gc.alloc.rate:                   800.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              20725.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17393.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   60913.813 ±(99.9%) 384.346 ops/s [Average]
[info]   (min, avg, max) = (60817.274, 60913.813, 61036.744), stdev = 99.813
[info]   CI (99.9%): [60529.467, 61298.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   810.762 ±(99.9%) 32.142 MB/sec [Average]
[info]   (min, avg, max) = (800.930, 810.762, 823.278), stdev = 8.347
[info]   CI (99.9%): [778.620, 842.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20946.061 ±(99.9%) 713.177 B/op [Average]
[info]   (min, avg, max) = (20725.364, 20946.061, 21224.553), stdev = 185.210
[info]   CI (99.9%): [20232.884, 21659.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.087 ±(99.9%) 1156.136 MB/sec [Average]
[info]   (min, avg, max) = (670.823, 806.087, 1343.180), stdev = 300.245
[info]   CI (99.9%): [≈ 0, 1962.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20818.176 ±(99.9%) 29726.774 B/op [Average]
[info]   (min, avg, max) = (17306.127, 20818.176, 34627.897), stdev = 7719.949
[info]   CI (99.9%): [≈ 0, 50544.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.753 ±(99.9%) 3.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.753, 2.155), stdev = 0.901
[info]   CI (99.9%): [≈ 0, 4.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.63% complete, ETA 02:01:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2161.789 ops/s
[info] # Warmup Iteration   2: 23751.185 ops/s
[info] # Warmup Iteration   3: 32480.074 ops/s
[info] # Warmup Iteration   4: 32965.710 ops/s
[info] # Warmup Iteration   5: 31935.158 ops/s
[info] Iteration   1: 32810.157 ops/s
[info]                  ·gc.alloc.rate:                   2177.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              104412.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128503.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 33042.292 ops/s
[info]                  ·gc.alloc.rate:                   2176.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              103642.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95958.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33160.685 ops/s
[info]                  ·gc.alloc.rate:                   2171.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              103062.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95711.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 32817.759 ops/s
[info]                  ·gc.alloc.rate:                   2163.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              103743.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96916.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.998 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33078.948 ops/s
[info]                  ·gc.alloc.rate:                   2193.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              104367.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96281.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.990 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   32981.968 ±(99.9%) 613.291 ops/s [Average]
[info]   (min, avg, max) = (32810.157, 32981.968, 33160.685), stdev = 159.270
[info]   CI (99.9%): [32368.677, 33595.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2176.534 ±(99.9%) 42.660 MB/sec [Average]
[info]   (min, avg, max) = (2163.475, 2176.534, 2193.778), stdev = 11.079
[info]   CI (99.9%): [2133.873, 2219.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   103845.705 ±(99.9%) 2160.106 B/op [Average]
[info]   (min, avg, max) = (103062.603, 103845.705, 104412.529), stdev = 560.973
[info]   CI (99.9%): [101685.599, 106005.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2151.296 ±(99.9%) 1137.719 MB/sec [Average]
[info]   (min, avg, max) = (2014.846, 2151.296, 2679.798), stdev = 295.462
[info]   CI (99.9%): [1013.577, 3289.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102674.382 ±(99.9%) 55627.380 B/op [Average]
[info]   (min, avg, max) = (95711.645, 102674.382, 128503.997), stdev = 14446.254
[info]   CI (99.9%): [47047.002, 158301.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.250 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.212, 0.770), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.165 ±(99.9%) 59.964 B/op [Average]
[info]   (min, avg, max) = (0.988, 10.165, 36.943), stdev = 15.572
[info]   CI (99.9%): [≈ 0, 70.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.84% complete, ETA 02:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9534.004 ops/s
[info] # Warmup Iteration   2: 24986.943 ops/s
[info] # Warmup Iteration   3: 27199.799 ops/s
[info] # Warmup Iteration   4: 27175.983 ops/s
[info] # Warmup Iteration   5: 26345.574 ops/s
[info] Iteration   1: 27423.064 ops/s
[info]                  ·gc.alloc.rate:                   1771.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              101629.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115297.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 27116.787 ops/s
[info]                  ·gc.alloc.rate:                   1739.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              100936.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77822.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27062.164 ops/s
[info]                  ·gc.alloc.rate:                   1749.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              101717.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116641.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27279.564 ops/s
[info]                  ·gc.alloc.rate:               1736.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          100125.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77088.744 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27267.423 ops/s
[info]                  ·gc.alloc.rate:                   1775.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              102477.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115726.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27229.800 ±(99.9%) 551.721 ops/s [Average]
[info]   (min, avg, max) = (27062.164, 27229.800, 27423.064), stdev = 143.280
[info]   CI (99.9%): [26678.080, 27781.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1754.243 ±(99.9%) 69.839 MB/sec [Average]
[info]   (min, avg, max) = (1736.126, 1754.243, 1775.578), stdev = 18.137
[info]   CI (99.9%): [1684.404, 1824.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101377.254 ±(99.9%) 3417.080 B/op [Average]
[info]   (min, avg, max) = (100125.402, 101377.254, 102477.058), stdev = 887.405
[info]   CI (99.9%): [97960.175, 104794.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.579 ±(99.9%) 1408.704 MB/sec [Average]
[info]   (min, avg, max) = (1336.682, 1739.579, 2009.249), stdev = 365.836
[info]   CI (99.9%): [330.875, 3148.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100515.562 ±(99.9%) 81086.398 B/op [Average]
[info]   (min, avg, max) = (77088.744, 100515.562, 116641.877), stdev = 21057.880
[info]   CI (99.9%): [19429.164, 181601.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.747), stdev = 1.669
[info]   CI (99.9%): [≈ 0, 7.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44.214 ±(99.9%) 372.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.214, 217.463), stdev = 96.850
[info]   CI (99.9%): [≈ 0, 417.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.04% complete, ETA 02:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15249.650 ops/s
[info] # Warmup Iteration   2: 32299.311 ops/s
[info] # Warmup Iteration   3: 33794.408 ops/s
[info] # Warmup Iteration   4: 33829.411 ops/s
[info] # Warmup Iteration   5: 34665.985 ops/s
[info] Iteration   1: 34568.854 ops/s
[info]                  ·gc.alloc.rate:                   1554.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              70781.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61233.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34705.593 ops/s
[info]                  ·gc.alloc.rate:                   1575.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              71421.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91547.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 34853.332 ops/s
[info]                  ·gc.alloc.rate:                   1567.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              70779.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60715.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34848.288 ops/s
[info]                  ·gc.alloc.rate:               1565.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          70678.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60619.155 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 34623.578 ops/s
[info]                  ·gc.alloc.rate:                   1557.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              70786.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60977.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34719.929 ±(99.9%) 496.811 ops/s [Average]
[info]   (min, avg, max) = (34568.854, 34719.929, 34853.332), stdev = 129.020
[info]   CI (99.9%): [34223.118, 35216.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1564.129 ±(99.9%) 30.987 MB/sec [Average]
[info]   (min, avg, max) = (1554.883, 1564.129, 1575.166), stdev = 8.047
[info]   CI (99.9%): [1533.142, 1595.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   70889.694 ±(99.9%) 1158.280 B/op [Average]
[info]   (min, avg, max) = (70678.494, 70889.694, 71421.666), stdev = 300.802
[info]   CI (99.9%): [69731.414, 72047.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.644 ±(99.9%) 1163.240 MB/sec [Average]
[info]   (min, avg, max) = (1342.025, 1478.644, 2019.033), stdev = 302.090
[info]   CI (99.9%): [315.405, 2641.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67018.624 ±(99.9%) 52808.562 B/op [Average]
[info]   (min, avg, max) = (60619.155, 67018.624, 91547.624), stdev = 13714.216
[info]   CI (99.9%): [14210.062, 119827.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 4.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.415), stdev = 1.042
[info]   CI (99.9%): [≈ 0, 4.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30.177 ±(99.9%) 181.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.177, 109.507), stdev = 47.244
[info]   CI (99.9%): [≈ 0, 212.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 02:00:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18550.911 ops/s
[info] # Warmup Iteration   2: 33240.413 ops/s
[info] # Warmup Iteration   3: 33684.483 ops/s
[info] # Warmup Iteration   4: 33292.708 ops/s
[info] # Warmup Iteration   5: 34047.769 ops/s
[info] Iteration   1: 34104.613 ops/s
[info]                  ·gc.alloc.rate:                   1476.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              68118.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62064.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34319.525 ops/s
[info]                  ·gc.alloc.rate:                   1483.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              68043.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61707.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34472.488 ops/s
[info]                  ·gc.alloc.rate:                   1503.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              68658.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61493.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34431.245 ops/s
[info]                  ·gc.alloc.rate:                   1489.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              68064.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61440.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33994.664 ops/s
[info]                  ·gc.alloc.rate:                   1509.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              69844.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93261.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34264.507 ±(99.9%) 799.567 ops/s [Average]
[info]   (min, avg, max) = (33994.664, 34264.507, 34472.488), stdev = 207.645
[info]   CI (99.9%): [33464.940, 35064.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1492.570 ±(99.9%) 52.714 MB/sec [Average]
[info]   (min, avg, max) = (1476.569, 1492.570, 1509.213), stdev = 13.690
[info]   CI (99.9%): [1439.856, 1545.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68545.862 ±(99.9%) 2960.825 B/op [Average]
[info]   (min, avg, max) = (68043.596, 68545.862, 69844.194), stdev = 768.917
[info]   CI (99.9%): [65585.038, 71506.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1479.516 ±(99.9%) 1153.155 MB/sec [Average]
[info]   (min, avg, max) = (1344.293, 1479.516, 2015.222), stdev = 299.471
[info]   CI (99.9%): [326.361, 2632.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   67993.564 ±(99.9%) 54399.510 B/op [Average]
[info]   (min, avg, max) = (61440.951, 67993.564, 93261.583), stdev = 14127.380
[info]   CI (99.9%): [13594.054, 122393.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 5.073 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.620, 2.977), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   28.329 ±(99.9%) 231.569 B/op [Average]
[info]   (min, avg, max) = (0.955, 28.329, 135.904), stdev = 60.138
[info]   CI (99.9%): [≈ 0, 259.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.44% complete, ETA 02:00:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60531.461 ops/s
[info] # Warmup Iteration   2: 311147.397 ops/s
[info] # Warmup Iteration   3: 327698.078 ops/s
[info] # Warmup Iteration   4: 339817.490 ops/s
[info] # Warmup Iteration   5: 340512.219 ops/s
[info] Iteration   1: 341775.781 ops/s
[info]                  ·gc.alloc.rate:               1929.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          8881.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6184.154 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 340208.016 ops/s
[info]                  ·gc.alloc.rate:                   1923.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              8897.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9318.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 340072.790 ops/s
[info]                  ·gc.alloc.rate:               1946.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          9008.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9297.603 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 335957.615 ops/s
[info]                  ·gc.alloc.rate:               1912.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          8958.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9409.929 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 337441.792 ops/s
[info]                  ·gc.alloc.rate:                   1908.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              8896.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6251.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   339091.199 ±(99.9%) 9021.869 ops/s [Average]
[info]   (min, avg, max) = (335957.615, 339091.199, 341775.781), stdev = 2342.951
[info]   CI (99.9%): [330069.330, 348113.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1924.081 ±(99.9%) 58.453 MB/sec [Average]
[info]   (min, avg, max) = (1908.289, 1924.081, 1946.637), stdev = 15.180
[info]   CI (99.9%): [1865.628, 1982.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8928.523 ±(99.9%) 205.503 B/op [Average]
[info]   (min, avg, max) = (8881.622, 8928.523, 9008.276), stdev = 53.368
[info]   CI (99.9%): [8723.020, 9134.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.381 ±(99.9%) 1410.545 MB/sec [Average]
[info]   (min, avg, max) = (1340.797, 1743.381, 2014.603), stdev = 366.314
[info]   CI (99.9%): [332.836, 3153.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8092.280 ±(99.9%) 6592.174 B/op [Average]
[info]   (min, avg, max) = (6184.154, 8092.280, 9409.929), stdev = 1711.967
[info]   CI (99.9%): [1500.107, 14684.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 6.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.539), stdev = 1.580
[info]   CI (99.9%): [≈ 0, 6.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.294 ±(99.9%) 28.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.294, 16.371), stdev = 7.310
[info]   CI (99.9%): [≈ 0, 31.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9.64% complete, ETA 02:00:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.850 ops/s
[info] # Warmup Iteration   2: 1409094.887 ops/s
[info] # Warmup Iteration   3: 1456152.023 ops/s
[info] # Warmup Iteration   4: 1461943.994 ops/s
[info] # Warmup Iteration   5: 1464776.927 ops/s
[info] Iteration   1: 1470896.327 ops/s
[info]                  ·gc.alloc.rate:      463.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1467854.849 ops/s
[info]                  ·gc.alloc.rate:               475.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          509.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 714.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1467848.942 ops/s
[info]                  ·gc.alloc.rate:               483.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          518.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 714.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1524998.164 ops/s
[info]                  ·gc.alloc.rate:               501.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          517.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 688.132 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1528413.228 ops/s
[info]                  ·gc.alloc.rate:      481.732 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1492002.302 ±(99.9%) 122169.665 ops/s [Average]
[info]   (min, avg, max) = (1467848.942, 1492002.302, 1528413.228), stdev = 31727.074
[info]   CI (99.9%): [1369832.637, 1614171.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   481.029 ±(99.9%) 52.561 MB/sec [Average]
[info]   (min, avg, max) = (463.581, 481.029, 501.115), stdev = 13.650
[info]   CI (99.9%): [428.468, 533.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   507.402 ±(99.9%) 42.031 B/op [Average]
[info]   (min, avg, max) = (496.000, 507.402, 518.200), stdev = 10.915
[info]   CI (99.9%): [465.371, 549.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.833 ±(99.9%) 1405.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.833, 666.807), stdev = 364.996
[info]   CI (99.9%): [≈ 0, 1805.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   423.318 ±(99.9%) 1488.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 423.318, 714.247), stdev = 386.581
[info]   CI (99.9%): [≈ 0, 1911.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.84% complete, ETA 02:00:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213421.243 ops/s
[info] # Warmup Iteration   2: 879825.530 ops/s
[info] # Warmup Iteration   3: 879362.925 ops/s
[info] # Warmup Iteration   4: 907598.446 ops/s
[info] # Warmup Iteration   5: 945953.812 ops/s
[info] Iteration   1: 767678.038 ops/s
[info]                  ·gc.alloc.rate:               612.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          1255.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1366.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 941939.470 ops/s
[info]                  ·gc.alloc.rate:                   741.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1238.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1114.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 935296.305 ops/s
[info]                  ·gc.alloc.rate:               743.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1122.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 924721.556 ops/s
[info]                  ·gc.alloc.rate:               733.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1136.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 912960.384 ops/s
[info]                  ·gc.alloc.rate:                   722.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              1245.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   896519.151 ±(99.9%) 280545.211 ops/s [Average]
[info]   (min, avg, max) = (767678.038, 896519.151, 941939.470), stdev = 72856.700
[info]   CI (99.9%): [615973.940, 1177064.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   710.637 ±(99.9%) 213.631 MB/sec [Average]
[info]   (min, avg, max) = (612.514, 710.637, 743.738), stdev = 55.479
[info]   CI (99.9%): [497.006, 924.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1247.723 ±(99.9%) 25.186 B/op [Average]
[info]   (min, avg, max) = (1238.288, 1247.723, 1255.597), stdev = 6.541
[info]   CI (99.9%): [1222.537, 1272.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.309 ±(99.9%) 2.084 MB/sec [Average]
[info]   (min, avg, max) = (666.559, 667.309, 667.845), stdev = 0.541
[info]   CI (99.9%): [665.225, 669.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1178.264 ±(99.9%) 408.495 B/op [Average]
[info]   (min, avg, max) = (1114.585, 1178.264, 1366.383), stdev = 106.085
[info]   CI (99.9%): [769.769, 1586.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.04% complete, ETA 01:59:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1091457.369 ops/s
[info] # Warmup Iteration   2: 1673088.827 ops/s
[info] # Warmup Iteration   3: 1876281.199 ops/s
[info] # Warmup Iteration   4: 1885994.377 ops/s
[info] # Warmup Iteration   5: 1871077.527 ops/s
[info] Iteration   1: 1880811.593 ops/s
[info]                  ·gc.alloc.rate:                   374.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              313.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1874094.190 ops/s
[info]                  ·gc.alloc.rate:               381.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          320.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 429.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1887242.746 ops/s
[info]                  ·gc.alloc.rate:      364.583 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1862816.279 ops/s
[info]                  ·gc.alloc.rate:                   386.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              326.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1886694.618 ops/s
[info]                  ·gc.alloc.rate:      364.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1878331.885 ±(99.9%) 39183.012 ops/s [Average]
[info]   (min, avg, max) = (1862816.279, 1878331.885, 1887242.746), stdev = 10175.704
[info]   CI (99.9%): [1839148.873, 1917514.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   374.373 ±(99.9%) 38.423 MB/sec [Average]
[info]   (min, avg, max) = (364.460, 374.373, 386.940), stdev = 9.978
[info]   CI (99.9%): [335.950, 412.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   313.694 ±(99.9%) 38.616 B/op [Average]
[info]   (min, avg, max) = (304.000, 313.694, 326.877), stdev = 10.028
[info]   CI (99.9%): [275.078, 352.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.849 ±(99.9%) 1217.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.849, 670.904), stdev = 316.082
[info]   CI (99.9%): [≈ 0, 1555.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   284.906 ±(99.9%) 1024.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 284.906, 566.763), stdev = 266.104
[info]   CI (99.9%): [≈ 0, 1309.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.035), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.24% complete, ETA 01:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9637.266 ops/s
[info] # Warmup Iteration   2: 84381.314 ops/s
[info] # Warmup Iteration   3: 100765.192 ops/s
[info] # Warmup Iteration   4: 101554.758 ops/s
[info] # Warmup Iteration   5: 101922.501 ops/s
[info] Iteration   1: 103241.884 ops/s
[info]                  ·gc.alloc.rate:               3450.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          52601.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3335.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50847.772 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 100091.719 ops/s
[info]                  ·gc.alloc.rate:                   3375.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              53076.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52597.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 100970.267 ops/s
[info]                  ·gc.alloc.rate:                   3378.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              52650.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41873.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 101854.405 ops/s
[info]                  ·gc.alloc.rate:               3434.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          53066.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52067.002 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 101234.634 ops/s
[info]                  ·gc.alloc.rate:               3415.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          53085.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52551.000 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   101478.582 ±(99.9%) 4511.897 ops/s [Average]
[info]   (min, avg, max) = (100091.719, 101478.582, 103241.884), stdev = 1171.725
[info]   CI (99.9%): [96966.685, 105990.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3410.996 ±(99.9%) 128.935 MB/sec [Average]
[info]   (min, avg, max) = (3375.662, 3410.996, 3450.865), stdev = 33.484
[info]   CI (99.9%): [3282.061, 3539.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52896.029 ±(99.9%) 951.404 B/op [Average]
[info]   (min, avg, max) = (52601.397, 52896.029, 53085.469), stdev = 247.077
[info]   CI (99.9%): [51944.625, 53847.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3223.780 ±(99.9%) 1158.187 MB/sec [Average]
[info]   (min, avg, max) = (2686.728, 3223.780, 3381.294), stdev = 300.777
[info]   CI (99.9%): [2065.593, 4381.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49987.296 ±(99.9%) 17676.140 B/op [Average]
[info]   (min, avg, max) = (41873.269, 49987.296, 52597.439), stdev = 4590.437
[info]   CI (99.9%): [32311.157, 67663.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.196 ±(99.9%) 1.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.655), stdev = 0.292
[info]   CI (99.9%): [≈ 0, 1.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10.44% complete, ETA 01:59:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203022.955 ops/s
[info] # Warmup Iteration   2: 666364.581 ops/s
[info] # Warmup Iteration   3: 649712.038 ops/s
[info] # Warmup Iteration   4: 689403.614 ops/s
[info] # Warmup Iteration   5: 693065.803 ops/s
[info] Iteration   1: 687755.811 ops/s
[info]                  ·gc.alloc.rate:                   1857.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              4249.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4618.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 684400.357 ops/s
[info]                  ·gc.alloc.rate:                   1847.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              4247.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4640.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 673816.375 ops/s
[info]                  ·gc.alloc.rate:                   1806.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3135.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 688848.672 ops/s
[info]                  ·gc.alloc.rate:                   1845.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              4217.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4597.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 688981.629 ops/s
[info]                  ·gc.alloc.rate:               1873.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          4278.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4597.796 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   684760.569 ±(99.9%) 24611.500 ops/s [Average]
[info]   (min, avg, max) = (673816.375, 684760.569, 688981.629), stdev = 6391.528
[info]   CI (99.9%): [660149.068, 709372.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1845.940 ±(99.9%) 94.883 MB/sec [Average]
[info]   (min, avg, max) = (1806.394, 1845.940, 1873.142), stdev = 24.641
[info]   CI (99.9%): [1751.058, 1940.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4242.404 ±(99.9%) 98.194 B/op [Average]
[info]   (min, avg, max) = (4217.058, 4242.404, 4278.943), stdev = 25.501
[info]   CI (99.9%): [4144.210, 4340.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1880.796 ±(99.9%) 1159.096 MB/sec [Average]
[info]   (min, avg, max) = (1342.350, 1880.796, 2018.550), stdev = 301.014
[info]   CI (99.9%): [721.700, 3039.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4317.921 ±(99.9%) 2546.834 B/op [Average]
[info]   (min, avg, max) = (3135.177, 4317.921, 4640.001), stdev = 661.405
[info]   CI (99.9%): [1771.087, 6864.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.081), stdev = 1.349
[info]   CI (99.9%): [≈ 0, 5.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.542 ±(99.9%) 11.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.542, 7.085), stdev = 3.101
[info]   CI (99.9%): [≈ 0, 13.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.64% complete, ETA 01:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94704.896 ops/s
[info] # Warmup Iteration   2: 343884.214 ops/s
[info] # Warmup Iteration   3: 347024.654 ops/s
[info] # Warmup Iteration   4: 351441.510 ops/s
[info] # Warmup Iteration   5: 352029.750 ops/s
[info] Iteration   1: 352696.235 ops/s
[info]                  ·gc.alloc.rate:               1201.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          5359.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2991.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 360929.467 ops/s
[info]                  ·gc.alloc.rate:               1243.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          5419.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5848.595 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 351267.237 ops/s
[info]                  ·gc.alloc.rate:               1206.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          5405.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6012.354 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 350975.298 ops/s
[info]                  ·gc.alloc.rate:                   1206.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              5407.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6020.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 352905.565 ops/s
[info]                  ·gc.alloc.rate:                   1207.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              5386.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2994.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   353754.760 ±(99.9%) 15786.608 ops/s [Average]
[info]   (min, avg, max) = (350975.298, 353754.760, 360929.467), stdev = 4099.732
[info]   CI (99.9%): [337968.153, 369541.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1213.020 ±(99.9%) 65.407 MB/sec [Average]
[info]   (min, avg, max) = (1201.172, 1213.020, 1243.057), stdev = 16.986
[info]   CI (99.9%): [1147.613, 1278.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5395.917 ±(99.9%) 90.735 B/op [Average]
[info]   (min, avg, max) = (5359.691, 5395.917, 5419.975), stdev = 23.563
[info]   CI (99.9%): [5305.182, 5486.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.682 ±(99.9%) 1415.532 MB/sec [Average]
[info]   (min, avg, max) = (670.484, 1073.682, 1343.028), stdev = 367.609
[info]   CI (99.9%): [≈ 0, 2489.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4773.508 ±(99.9%) 6263.893 B/op [Average]
[info]   (min, avg, max) = (2991.736, 4773.508, 6020.359), stdev = 1626.713
[info]   CI (99.9%): [≈ 0, 11037.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.186), stdev = 1.401
[info]   CI (99.9%): [≈ 0, 6.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.079 ±(99.9%) 24.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.079, 14.282), stdev = 6.281
[info]   CI (99.9%): [≈ 0, 27.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.84% complete, ETA 01:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.744 ops/s
[info] # Warmup Iteration   2: 1227637.920 ops/s
[info] # Warmup Iteration   3: 1610102.633 ops/s
[info] # Warmup Iteration   4: 1702179.645 ops/s
[info] # Warmup Iteration   5: 1692535.997 ops/s
[info] Iteration   1: 1601174.258 ops/s
[info]                  ·gc.alloc.rate:                   759.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1714997.365 ops/s
[info]                  ·gc.alloc.rate:                   832.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              764.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1667872.884 ops/s
[info]                  ·gc.alloc.rate:               788.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 628.903 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1678839.341 ops/s
[info]                  ·gc.alloc.rate:               790.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          740.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 624.801 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1631129.145 ops/s
[info]                  ·gc.alloc.rate:               771.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 643.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1658802.599 ±(99.9%) 169258.016 ops/s [Average]
[info]   (min, avg, max) = (1601174.258, 1658802.599, 1714997.365), stdev = 43955.769
[info]   CI (99.9%): [1489544.583, 1828060.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   788.506 ±(99.9%) 107.080 MB/sec [Average]
[info]   (min, avg, max) = (759.397, 788.506, 832.742), stdev = 27.808
[info]   CI (99.9%): [681.425, 895.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   747.849 ±(99.9%) 35.783 B/op [Average]
[info]   (min, avg, max) = (740.711, 747.849, 764.096), stdev = 9.293
[info]   CI (99.9%): [712.066, 783.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.476 ±(99.9%) 1145.965 MB/sec [Average]
[info]   (min, avg, max) = (665.368, 799.476, 1331.844), stdev = 297.603
[info]   CI (99.9%): [≈ 0, 1945.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   754.588 ±(99.9%) 1007.245 B/op [Average]
[info]   (min, avg, max) = (624.801, 754.588, 1222.056), stdev = 261.578
[info]   CI (99.9%): [≈ 0, 1761.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.060), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.055), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.04% complete, ETA 01:58:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462291.828 ops/s
[info] # Warmup Iteration   2: 989264.653 ops/s
[info] # Warmup Iteration   3: 1035382.009 ops/s
[info] # Warmup Iteration   4: 1015758.440 ops/s
[info] # Warmup Iteration   5: 1036125.740 ops/s
[info] Iteration   1: 1047265.574 ops/s
[info]                  ·gc.alloc.rate:               756.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          1136.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1003.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1047043.203 ops/s
[info]                  ·gc.alloc.rate:               763.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          1146.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1004.749 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1008661.901 ops/s
[info]                  ·gc.alloc.rate:                   733.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1144.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1042.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 995258.853 ops/s
[info]                  ·gc.alloc.rate:               721.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1058.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 981955.360 ops/s
[info]                  ·gc.alloc.rate:                   719.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1153.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1072.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1016036.978 ±(99.9%) 115266.988 ops/s [Average]
[info]   (min, avg, max) = (981955.360, 1016036.978, 1047265.574), stdev = 29934.471
[info]   CI (99.9%): [900769.990, 1131303.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   738.818 ±(99.9%) 77.245 MB/sec [Average]
[info]   (min, avg, max) = (719.463, 738.818, 763.127), stdev = 20.060
[info]   CI (99.9%): [661.574, 816.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1144.387 ±(99.9%) 24.011 B/op [Average]
[info]   (min, avg, max) = (1136.729, 1144.387, 1153.020), stdev = 6.235
[info]   CI (99.9%): [1120.377, 1168.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.650 ±(99.9%) 2.129 MB/sec [Average]
[info]   (min, avg, max) = (667.840, 668.650, 669.173), stdev = 0.553
[info]   CI (99.9%): [666.521, 670.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1036.369 ±(99.9%) 120.080 B/op [Average]
[info]   (min, avg, max) = (1003.592, 1036.369, 1072.425), stdev = 31.184
[info]   CI (99.9%): [916.289, 1156.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.130), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.24% complete, ETA 01:58:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1663674.355 ops/s
[info] # Warmup Iteration   2: 2668105.898 ops/s
[info] # Warmup Iteration   3: 2649998.065 ops/s
[info] # Warmup Iteration   4: 2783127.381 ops/s
[info] # Warmup Iteration   5: 2777868.878 ops/s
[info] Iteration   1: 2788662.110 ops/s
[info]                  ·gc.alloc.rate:                   1323.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2755004.069 ops/s
[info]                  ·gc.alloc.rate:                   1314.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2791823.360 ops/s
[info]                  ·gc.alloc.rate:                   1320.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2797002.456 ops/s
[info]                  ·gc.alloc.rate:                   1328.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2770994.801 ops/s
[info]                  ·gc.alloc.rate:                   1312.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2780697.359 ±(99.9%) 66899.499 ops/s [Average]
[info]   (min, avg, max) = (2755004.069, 2780697.359, 2797002.456), stdev = 17373.587
[info]   CI (99.9%): [2713797.860, 2847596.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1319.953 ±(99.9%) 25.397 MB/sec [Average]
[info]   (min, avg, max) = (1312.322, 1319.953, 1328.739), stdev = 6.595
[info]   CI (99.9%): [1294.556, 1345.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.787 ±(99.9%) 10.661 B/op [Average]
[info]   (min, avg, max) = (743.697, 746.787, 750.981), stdev = 2.769
[info]   CI (99.9%): [736.125, 757.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.701 ±(99.9%) 1156.367 MB/sec [Average]
[info]   (min, avg, max) = (673.501, 1210.701, 1345.987), stdev = 300.305
[info]   CI (99.9%): [54.334, 2367.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   685.413 ±(99.9%) 659.947 B/op [Average]
[info]   (min, avg, max) = (378.939, 685.413, 768.855), stdev = 171.386
[info]   CI (99.9%): [25.465, 1345.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.557 ±(99.9%) 3.968 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.557, 2.389), stdev = 1.030
[info]   CI (99.9%): [≈ 0, 4.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.314 ±(99.9%) 2.234 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.314, 1.345), stdev = 0.580
[info]   CI (99.9%): [≈ 0, 2.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.000, 6.000), stdev = 2.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11.45% complete, ETA 01:58:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2068415.777 ops/s
[info] # Warmup Iteration   2: 3173058.956 ops/s
[info] # Warmup Iteration   3: 3211315.355 ops/s
[info] # Warmup Iteration   4: 3219582.635 ops/s
[info] # Warmup Iteration   5: 3231505.550 ops/s
[info] Iteration   1: 3234606.597 ops/s
[info]                  ·gc.alloc.rate:      0.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3205089.595 ops/s
[info]                  ·gc.alloc.rate:      3.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.574 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3243129.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3241120.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3242868.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3233362.913 ±(99.9%) 62293.843 ops/s [Average]
[info]   (min, avg, max) = (3205089.595, 3233362.913, 3243129.154), stdev = 16177.513
[info]   CI (99.9%): [3171069.071, 3295656.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.658 ±(99.9%) 5.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.658, 3.207), stdev = 1.425
[info]   CI (99.9%): [≈ 0, 6.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.323 ±(99.9%) 2.695 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.323, 1.574), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.65% complete, ETA 01:57:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175399.251 ops/s
[info] # Warmup Iteration   2: 458023.341 ops/s
[info] # Warmup Iteration   3: 500134.551 ops/s
[info] # Warmup Iteration   4: 496189.541 ops/s
[info] # Warmup Iteration   5: 495572.060 ops/s
[info] Iteration   1: 499071.644 ops/s
[info]                  ·gc.alloc.rate:               595.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          1876.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2106.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 499421.758 ops/s
[info]                  ·gc.alloc.rate:               587.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          1852.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2105.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 497655.972 ops/s
[info]                  ·gc.alloc.rate:      573.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 1812.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 479606.792 ops/s
[info]                  ·gc.alloc.rate:                   573.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1882.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2194.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 479252.067 ops/s
[info]                  ·gc.alloc.rate:               565.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1857.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2196.236 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   491001.647 ±(99.9%) 40760.412 ops/s [Average]
[info]   (min, avg, max) = (479252.067, 491001.647, 499421.758), stdev = 10585.350
[info]   CI (99.9%): [450241.234, 531762.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   579.118 ±(99.9%) 46.243 MB/sec [Average]
[info]   (min, avg, max) = (565.797, 579.118, 595.161), stdev = 12.009
[info]   CI (99.9%): [532.876, 625.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.350 ±(99.9%) 107.138 B/op [Average]
[info]   (min, avg, max) = (1812.021, 1856.350, 1882.771), stdev = 27.823
[info]   CI (99.9%): [1749.212, 1963.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   534.798 ±(99.9%) 1151.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.798, 668.829), stdev = 298.961
[info]   CI (99.9%): [≈ 0, 1685.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1720.665 ±(99.9%) 3707.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1720.665, 2196.236), stdev = 962.915
[info]   CI (99.9%): [≈ 0, 5428.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11.85% complete, ETA 01:57:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48898.825 ops/s
[info] # Warmup Iteration   2: 137135.379 ops/s
[info] # Warmup Iteration   3: 142303.763 ops/s
[info] # Warmup Iteration   4: 143959.397 ops/s
[info] # Warmup Iteration   5: 144082.939 ops/s
[info] Iteration   1: 144325.867 ops/s
[info]                  ·gc.alloc.rate:               1570.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          17130.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14658.998 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 143809.770 ops/s
[info]                  ·gc.alloc.rate:                   1592.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              17421.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22090.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 144807.141 ops/s
[info]                  ·gc.alloc.rate:                   1575.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              17121.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14610.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 144527.562 ops/s
[info]                  ·gc.alloc.rate:                   1585.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              17261.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14617.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 144645.622 ops/s
[info]                  ·gc.alloc.rate:               1573.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          17122.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14590.837 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   144423.192 ±(99.9%) 1483.302 ops/s [Average]
[info]   (min, avg, max) = (143809.770, 144423.192, 144807.141), stdev = 385.209
[info]   CI (99.9%): [142939.890, 145906.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1579.526 ±(99.9%) 34.131 MB/sec [Average]
[info]   (min, avg, max) = (1570.990, 1579.526, 1592.108), stdev = 8.864
[info]   CI (99.9%): [1545.395, 1613.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17211.420 ±(99.9%) 506.999 B/op [Average]
[info]   (min, avg, max) = (17121.178, 17211.420, 17421.663), stdev = 131.666
[info]   CI (99.9%): [16704.421, 17718.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1478.214 ±(99.9%) 1163.521 MB/sec [Average]
[info]   (min, avg, max) = (1341.115, 1478.214, 2018.734), stdev = 302.163
[info]   CI (99.9%): [314.693, 2641.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16113.566 ±(99.9%) 12865.120 B/op [Average]
[info]   (min, avg, max) = (14590.837, 16113.566, 22090.019), stdev = 3341.031
[info]   CI (99.9%): [3248.445, 28978.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 4.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 2.956), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7.466 ±(99.9%) 53.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.466, 32.351), stdev = 14.012
[info]   CI (99.9%): [≈ 0, 61.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.05% complete, ETA 01:57:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49087.248 ops/s
[info] # Warmup Iteration   2: 145318.104 ops/s
[info] # Warmup Iteration   3: 153498.462 ops/s
[info] # Warmup Iteration   4: 158170.046 ops/s
[info] # Warmup Iteration   5: 155121.068 ops/s
[info] Iteration   1: 157540.834 ops/s
[info]                  ·gc.alloc.rate:                   1997.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              19953.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20143.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 153085.231 ops/s
[info]                  ·gc.alloc.rate:                   1956.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              20114.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20703.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 154523.366 ops/s
[info]                  ·gc.alloc.rate:                   1961.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              19976.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20455.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 155408.648 ops/s
[info]                  ·gc.alloc.rate:               1970.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          19959.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20339.151 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 155472.644 ops/s
[info]                  ·gc.alloc.rate:               1986.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          20105.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20356.444 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   155206.145 ±(99.9%) 6246.851 ops/s [Average]
[info]   (min, avg, max) = (153085.231, 155206.145, 157540.834), stdev = 1622.287
[info]   CI (99.9%): [148959.293, 161452.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1974.651 ±(99.9%) 65.686 MB/sec [Average]
[info]   (min, avg, max) = (1956.921, 1974.651, 1997.594), stdev = 17.058
[info]   CI (99.9%): [1908.965, 2040.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20021.912 ±(99.9%) 311.602 B/op [Average]
[info]   (min, avg, max) = (19953.571, 20021.912, 20114.175), stdev = 80.922
[info]   CI (99.9%): [19710.310, 20333.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.770 ±(99.9%) 13.908 MB/sec [Average]
[info]   (min, avg, max) = (2008.372, 2011.770, 2016.626), stdev = 3.612
[info]   CI (99.9%): [1997.862, 2025.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20399.538 ±(99.9%) 785.084 B/op [Average]
[info]   (min, avg, max) = (20143.679, 20399.538, 20703.193), stdev = 203.884
[info]   CI (99.9%): [19614.454, 21184.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.852), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.579 ±(99.9%) 46.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.579, 28.490), stdev = 12.199
[info]   CI (99.9%): [≈ 0, 54.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.25% complete, ETA 01:57:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152245.945 ops/s
[info] # Warmup Iteration   2: 406562.227 ops/s
[info] # Warmup Iteration   3: 428746.263 ops/s
[info] # Warmup Iteration   4: 454122.157 ops/s
[info] # Warmup Iteration   5: 452901.678 ops/s
[info] Iteration   1: 450428.783 ops/s
[info]                  ·gc.alloc.rate:                   376.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1314.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1787.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 451225.687 ops/s
[info]                  ·gc.alloc.rate:               377.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          1315.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1784.411 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 453902.309 ops/s
[info]                  ·gc.alloc.rate:      364.664 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 452471.524 ops/s
[info]                  ·gc.alloc.rate:               387.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          1347.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2318.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 454522.940 ops/s
[info]                  ·gc.alloc.rate:      365.059 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   452510.249 ±(99.9%) 6661.964 ops/s [Average]
[info]   (min, avg, max) = (450428.783, 452510.249, 454522.940), stdev = 1730.091
[info]   CI (99.9%): [445848.285, 459172.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   374.094 ±(99.9%) 36.696 MB/sec [Average]
[info]   (min, avg, max) = (364.664, 374.094, 387.483), stdev = 9.530
[info]   CI (99.9%): [337.398, 410.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1301.006 ±(99.9%) 140.077 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1301.006, 1347.709), stdev = 36.378
[info]   CI (99.9%): [1160.928, 1441.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337.968 ±(99.9%) 1212.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.968, 666.512), stdev = 314.931
[info]   CI (99.9%): [≈ 0, 1550.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1178.038 ±(99.9%) 4224.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1178.038, 2318.203), stdev = 1097.127
[info]   CI (99.9%): [≈ 0, 5402.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.45% complete, ETA 01:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 728276.427 ops/s
[info] # Warmup Iteration   2: 1193284.720 ops/s
[info] # Warmup Iteration   3: 1268847.376 ops/s
[info] # Warmup Iteration   4: 1257572.295 ops/s
[info] # Warmup Iteration   5: 1231832.826 ops/s
[info] Iteration   1: 1226825.321 ops/s
[info]                  ·gc.alloc.rate:                   255.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              327.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1230098.571 ops/s
[info]                  ·gc.alloc.rate:      237.693 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1228096.055 ops/s
[info]                  ·gc.alloc.rate:               248.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 655.611 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1266866.344 ops/s
[info]                  ·gc.alloc.rate:      244.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1267007.947 ops/s
[info]                  ·gc.alloc.rate:      244.742 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1243778.848 ±(99.9%) 81528.816 ops/s [Average]
[info]   (min, avg, max) = (1226825.321, 1243778.848, 1267007.947), stdev = 21172.775
[info]   CI (99.9%): [1162250.032, 1325307.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   246.105 ±(99.9%) 24.471 MB/sec [Average]
[info]   (min, avg, max) = (237.693, 246.105, 255.200), stdev = 6.355
[info]   CI (99.9%): [221.634, 270.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   311.478 ±(99.9%) 41.434 B/op [Average]
[info]   (min, avg, max) = (304.000, 311.478, 327.372), stdev = 10.760
[info]   CI (99.9%): [270.044, 352.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.644 ±(99.9%) 1079.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.644, 511.621), stdev = 280.220
[info]   CI (99.9%): [≈ 0, 1283.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   262.379 ±(99.9%) 1383.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 262.379, 656.282), stdev = 359.277
[info]   CI (99.9%): [≈ 0, 1645.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.65% complete, ETA 01:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9161.364 ops/s
[info] # Warmup Iteration   2: 72370.297 ops/s
[info] # Warmup Iteration   3: 79070.345 ops/s
[info] # Warmup Iteration   4: 80606.789 ops/s
[info] # Warmup Iteration   5: 81063.185 ops/s
[info] Iteration   1: 82609.713 ops/s
[info]                  ·gc.alloc.rate:                   3271.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              62317.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63540.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 83159.447 ops/s
[info]                  ·gc.alloc.rate:                   3347.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              63341.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63253.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 83975.728 ops/s
[info]                  ·gc.alloc.rate:               3380.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          63344.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62863.625 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 83744.232 ops/s
[info]                  ·gc.alloc.rate:               3344.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          62848.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50610.551 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 83627.858 ops/s
[info]                  ·gc.alloc.rate:               3368.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          63372.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63561.647 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   83423.396 ±(99.9%) 2092.817 ops/s [Average]
[info]   (min, avg, max) = (82609.713, 83423.396, 83975.728), stdev = 543.498
[info]   CI (99.9%): [81330.579, 85516.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3342.340 ±(99.9%) 163.169 MB/sec [Average]
[info]   (min, avg, max) = (3271.356, 3342.340, 3380.157), stdev = 42.375
[info]   CI (99.9%): [3179.171, 3505.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63044.941 ±(99.9%) 1777.070 B/op [Average]
[info]   (min, avg, max) = (62317.840, 63044.941, 63372.232), stdev = 461.500
[info]   CI (99.9%): [61267.871, 64822.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3220.875 ±(99.9%) 1137.400 MB/sec [Average]
[info]   (min, avg, max) = (2693.298, 3220.875, 3378.599), stdev = 295.379
[info]   CI (99.9%): [2083.474, 4358.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60765.939 ±(99.9%) 21887.249 B/op [Average]
[info]   (min, avg, max) = (50610.551, 60765.939, 63561.647), stdev = 5684.049
[info]   CI (99.9%): [38878.689, 82653.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.208), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.872 ±(99.9%) 6.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 3.966), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12.85% complete, ETA 01:56:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139386.669 ops/s
[info] # Warmup Iteration   2: 291424.943 ops/s
[info] # Warmup Iteration   3: 300443.199 ops/s
[info] # Warmup Iteration   4: 301522.789 ops/s
[info] # Warmup Iteration   5: 305763.260 ops/s
[info] Iteration   1: 301444.575 ops/s
[info]                  ·gc.alloc.rate:                   1403.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              7326.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7016.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 298884.210 ops/s
[info]                  ·gc.alloc.rate:               1425.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          7503.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7082.224 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 295481.724 ops/s
[info]                  ·gc.alloc.rate:                   1377.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              7333.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7167.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 302240.202 ops/s
[info]                  ·gc.alloc.rate:                   1405.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              7315.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7000.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 294450.909 ops/s
[info]                  ·gc.alloc.rate:               1382.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          7386.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7174.760 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   298500.324 ±(99.9%) 13382.356 ops/s [Average]
[info]   (min, avg, max) = (294450.909, 298500.324, 302240.202), stdev = 3475.355
[info]   CI (99.9%): [285117.968, 311882.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1398.708 ±(99.9%) 74.865 MB/sec [Average]
[info]   (min, avg, max) = (1377.069, 1398.708, 1425.360), stdev = 19.442
[info]   CI (99.9%): [1323.843, 1473.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7373.109 ±(99.9%) 300.078 B/op [Average]
[info]   (min, avg, max) = (7315.207, 7373.109, 7503.702), stdev = 77.929
[info]   CI (99.9%): [7073.031, 7673.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.540 ±(99.9%) 4.619 MB/sec [Average]
[info]   (min, avg, max) = (1342.761, 1344.540, 1345.865), stdev = 1.200
[info]   CI (99.9%): [1339.921, 1349.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7088.178 ±(99.9%) 314.699 B/op [Average]
[info]   (min, avg, max) = (7000.081, 7088.178, 7174.760), stdev = 81.726
[info]   CI (99.9%): [6773.479, 7402.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 4.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 2.873), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 5.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.472 ±(99.9%) 25.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.472, 15.302), stdev = 6.665
[info]   CI (99.9%): [≈ 0, 29.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.05% complete, ETA 01:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102550.874 ops/s
[info] # Warmup Iteration   2: 284602.822 ops/s
[info] # Warmup Iteration   3: 290684.951 ops/s
[info] # Warmup Iteration   4: 304043.993 ops/s
[info] # Warmup Iteration   5: 305775.297 ops/s
[info] Iteration   1: 304276.268 ops/s
[info]                  ·gc.alloc.rate:               1702.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          8802.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6942.387 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 306180.960 ops/s
[info]                  ·gc.alloc.rate:                   1726.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              8869.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10357.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 304811.216 ops/s
[info]                  ·gc.alloc.rate:                   1719.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              8874.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6920.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 307825.617 ops/s
[info]                  ·gc.alloc.rate:                   1747.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              8932.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10268.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 308601.590 ops/s
[info]                  ·gc.alloc.rate:               1739.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          8871.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6828.259 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   306339.130 ±(99.9%) 7189.294 ops/s [Average]
[info]   (min, avg, max) = (304276.268, 306339.130, 308601.590), stdev = 1867.037
[info]   CI (99.9%): [299149.836, 313528.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.814 ±(99.9%) 68.083 MB/sec [Average]
[info]   (min, avg, max) = (1702.003, 1726.814, 1747.129), stdev = 17.681
[info]   CI (99.9%): [1658.732, 1794.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8870.186 ±(99.9%) 176.984 B/op [Average]
[info]   (min, avg, max) = (8802.770, 8870.186, 8932.508), stdev = 45.962
[info]   CI (99.9%): [8693.203, 9047.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.204 ±(99.9%) 1416.025 MB/sec [Average]
[info]   (min, avg, max) = (1338.981, 1609.204, 2015.603), stdev = 367.737
[info]   CI (99.9%): [193.179, 3025.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8263.445 ±(99.9%) 7207.680 B/op [Average]
[info]   (min, avg, max) = (6828.259, 8263.445, 10357.600), stdev = 1871.812
[info]   CI (99.9%): [1055.765, 15471.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.311), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.702 ±(99.9%) 28.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.702, 17.013), stdev = 7.452
[info]   CI (99.9%): [≈ 0, 32.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.25% complete, ETA 01:55:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581116.510 ops/s
[info] # Warmup Iteration   2: 1746739.203 ops/s
[info] # Warmup Iteration   3: 1929223.590 ops/s
[info] # Warmup Iteration   4: 1936772.865 ops/s
[info] # Warmup Iteration   5: 1918024.946 ops/s
[info] Iteration   1: 1942467.954 ops/s
[info]                  ·gc.alloc.rate:                   1043.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              845.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1939208.017 ops/s
[info]                  ·gc.alloc.rate:               1012.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          821.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 542.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1919998.878 ops/s
[info]                  ·gc.alloc.rate:                   1021.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              836.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1096.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1946455.798 ops/s
[info]                  ·gc.alloc.rate:               1018.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          823.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.021 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1935698.208 ops/s
[info]                  ·gc.alloc.rate:               1021.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          830.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1089.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1936765.771 ±(99.9%) 39204.987 ops/s [Average]
[info]   (min, avg, max) = (1919998.878, 1936765.771, 1946455.798), stdev = 10181.411
[info]   CI (99.9%): [1897560.784, 1975970.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1023.406 ±(99.9%) 44.397 MB/sec [Average]
[info]   (min, avg, max) = (1012.678, 1023.406, 1043.056), stdev = 11.530
[info]   CI (99.9%): [979.009, 1067.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   831.565 ±(99.9%) 37.053 B/op [Average]
[info]   (min, avg, max) = (821.679, 831.565, 845.057), stdev = 9.623
[info]   CI (99.9%): [794.512, 868.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.303 ±(99.9%) 1410.501 MB/sec [Average]
[info]   (min, avg, max) = (668.952, 1070.303, 1339.676), stdev = 366.303
[info]   CI (99.9%): [≈ 0, 2480.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   870.372 ±(99.9%) 1154.791 B/op [Average]
[info]   (min, avg, max) = (541.021, 870.372, 1096.745), stdev = 299.896
[info]   CI (99.9%): [≈ 0, 2025.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.051), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.45% complete, ETA 01:55:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1679875.636 ops/s
[info] # Warmup Iteration   2: 2622652.874 ops/s
[info] # Warmup Iteration   3: 2695517.994 ops/s
[info] # Warmup Iteration   4: 2819588.657 ops/s
[info] # Warmup Iteration   5: 2803355.280 ops/s
[info] Iteration   1: 2826599.815 ops/s
[info]                  ·gc.alloc.rate:               777.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.487 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 2825975.495 ops/s
[info]                  ·gc.alloc.rate:               784.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 374.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2812184.096 ops/s
[info]                  ·gc.alloc.rate:                   797.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              446.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2777043.218 ops/s
[info]                  ·gc.alloc.rate:               765.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 380.906 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2825211.215 ops/s
[info]                  ·gc.alloc.rate:               775.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 374.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2813402.768 ±(99.9%) 81574.985 ops/s [Average]
[info]   (min, avg, max) = (2777043.218, 2813402.768, 2826599.815), stdev = 21184.764
[info]   CI (99.9%): [2731827.783, 2894977.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   779.967 ±(99.9%) 46.067 MB/sec [Average]
[info]   (min, avg, max) = (765.022, 779.967, 797.302), stdev = 11.963
[info]   CI (99.9%): [733.900, 826.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.253 ±(99.9%) 22.502 B/op [Average]
[info]   (min, avg, max) = (432.053, 436.253, 446.136), stdev = 5.844
[info]   CI (99.9%): [413.751, 458.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.396 ±(99.9%) 1157.506 MB/sec [Average]
[info]   (min, avg, max) = (670.842, 806.396, 1344.125), stdev = 300.601
[info]   CI (99.9%): [≈ 0, 1963.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   451.084 ±(99.9%) 648.093 B/op [Average]
[info]   (min, avg, max) = (373.487, 451.084, 752.116), stdev = 168.308
[info]   CI (99.9%): [≈ 0, 1099.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1712362.825 ops/s
[info] # Warmup Iteration   2: 2957069.849 ops/s
[info] # Warmup Iteration   3: 3047206.968 ops/s
[info] # Warmup Iteration   4: 3040935.212 ops/s
[info] # Warmup Iteration   5: 3049729.243 ops/s
[info] Iteration   1: 3049504.971 ops/s
[info]                  ·gc.alloc.rate:      7.567 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.905 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3055181.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3036566.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3050631.259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3050294.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3048435.794 ±(99.9%) 26941.316 ops/s [Average]
[info]   (min, avg, max) = (3036566.339, 3048435.794, 3055181.521), stdev = 6996.574
[info]   CI (99.9%): [3021494.478, 3075377.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.514 ±(99.9%) 13.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.514, 7.567), stdev = 3.384
[info]   CI (99.9%): [≈ 0, 14.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.781 ±(99.9%) 6.724 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.781, 3.905), stdev = 1.746
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8207.858 ops/s
[info] # Warmup Iteration   2: 43140.609 ops/s
[info] # Warmup Iteration   3: 46475.367 ops/s
[info] # Warmup Iteration   4: 47721.938 ops/s
[info] # Warmup Iteration   5: 48169.937 ops/s
[info] Iteration   1: 47627.641 ops/s
[info]                  ·gc.alloc.rate:                   2152.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              71126.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66496.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 47088.611 ops/s
[info]                  ·gc.alloc.rate:                   2140.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              71522.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67037.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 46782.722 ops/s
[info]                  ·gc.alloc.rate:                   2101.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              70688.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67426.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 48267.949 ops/s
[info]                  ·gc.alloc.rate:                   2193.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              71511.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65363.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 48126.295 ops/s
[info]                  ·gc.alloc.rate:               2214.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          72402.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87573.763 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   47578.644 ±(99.9%) 2473.937 ops/s [Average]
[info]   (min, avg, max) = (46782.722, 47578.644, 48267.949), stdev = 642.473
[info]   CI (99.9%): [45104.707, 50052.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2160.533 ±(99.9%) 170.797 MB/sec [Average]
[info]   (min, avg, max) = (2101.857, 2160.533, 2214.346), stdev = 44.356
[info]   CI (99.9%): [1989.736, 2331.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71450.198 ±(99.9%) 2435.247 B/op [Average]
[info]   (min, avg, max) = (70688.700, 71450.198, 72402.184), stdev = 632.426
[info]   CI (99.9%): [69014.951, 73885.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2141.354 ±(99.9%) 1155.992 MB/sec [Average]
[info]   (min, avg, max) = (2004.746, 2141.354, 2678.353), stdev = 300.207
[info]   CI (99.9%): [985.362, 3297.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70779.551 ±(99.9%) 36274.299 B/op [Average]
[info]   (min, avg, max) = (65363.605, 70779.551, 87573.763), stdev = 9420.320
[info]   CI (99.9%): [34505.253, 107053.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.853 ±(99.9%) 6.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 4.080), stdev = 1.804
[info]   CI (99.9%): [≈ 0, 7.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.206 ±(99.9%) 229.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.206, 134.819), stdev = 59.611
[info]   CI (99.9%): [≈ 0, 257.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14.06% complete, ETA 01:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37695.066 ops/s
[info] # Warmup Iteration   2: 108173.778 ops/s
[info] # Warmup Iteration   3: 111178.825 ops/s
[info] # Warmup Iteration   4: 114969.061 ops/s
[info] # Warmup Iteration   5: 114872.457 ops/s
[info] Iteration   1: 115152.810 ops/s
[info]                  ·gc.alloc.rate:                   1850.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              25278.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18390.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 114716.513 ops/s
[info]                  ·gc.alloc.rate:                   1869.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              25648.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27672.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 113205.110 ops/s
[info]                  ·gc.alloc.rate:                   1858.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              25836.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27967.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.762 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 115373.931 ops/s
[info]                  ·gc.alloc.rate:                   1853.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              25278.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18282.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 115177.881 ops/s
[info]                  ·gc.alloc.rate:               1890.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          25830.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27472.911 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   114725.249 ±(99.9%) 3400.454 ops/s [Average]
[info]   (min, avg, max) = (113205.110, 114725.249, 115373.931), stdev = 883.087
[info]   CI (99.9%): [111324.796, 118125.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1864.421 ±(99.9%) 63.074 MB/sec [Average]
[info]   (min, avg, max) = (1850.173, 1864.421, 1890.562), stdev = 16.380
[info]   CI (99.9%): [1801.346, 1927.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   25574.332 ±(99.9%) 1079.834 B/op [Average]
[info]   (min, avg, max) = (25278.284, 25574.332, 25836.117), stdev = 280.429
[info]   CI (99.9%): [24494.498, 26654.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.228 ±(99.9%) 1413.312 MB/sec [Average]
[info]   (min, avg, max) = (1340.376, 1745.228, 2017.138), stdev = 367.033
[info]   CI (99.9%): [331.917, 3158.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   23957.105 ±(99.9%) 19769.588 B/op [Average]
[info]   (min, avg, max) = (18282.882, 23957.105, 27967.707), stdev = 5134.099
[info]   CI (99.9%): [4187.517, 43726.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.331), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10.062 ±(99.9%) 76.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.062, 45.694), stdev = 19.977
[info]   CI (99.9%): [≈ 0, 86.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.26% complete, ETA 01:54:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42029.968 ops/s
[info] # Warmup Iteration   2: 222969.540 ops/s
[info] # Warmup Iteration   3: 237141.384 ops/s
[info] # Warmup Iteration   4: 238987.180 ops/s
[info] # Warmup Iteration   5: 245239.427 ops/s
[info] Iteration   1: 244925.192 ops/s
[info]                  ·gc.alloc.rate:                   2677.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              17202.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17216.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 245822.699 ops/s
[info]                  ·gc.alloc.rate:                   2713.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              17369.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17144.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 242442.767 ops/s
[info]                  ·gc.alloc.rate:                   2666.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              17299.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17385.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 239873.145 ops/s
[info]                  ·gc.alloc.rate:               2624.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          17219.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13227.169 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 240882.774 ops/s
[info]                  ·gc.alloc.rate:               2662.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          17398.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17604.145 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   242789.315 ±(99.9%) 9821.488 ops/s [Average]
[info]   (min, avg, max) = (239873.145, 242789.315, 245822.699), stdev = 2550.609
[info]   CI (99.9%): [232967.827, 252610.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2669.016 ±(99.9%) 123.067 MB/sec [Average]
[info]   (min, avg, max) = (2624.692, 2669.016, 2713.833), stdev = 31.960
[info]   CI (99.9%): [2545.949, 2792.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17297.917 ±(99.9%) 335.495 B/op [Average]
[info]   (min, avg, max) = (17202.754, 17297.917, 17398.063), stdev = 87.127
[info]   CI (99.9%): [16962.423, 17633.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2549.654 ±(99.9%) 1148.738 MB/sec [Average]
[info]   (min, avg, max) = (2016.129, 2549.654, 2694.538), stdev = 298.324
[info]   CI (99.9%): [1400.916, 3698.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16515.529 ±(99.9%) 7111.146 B/op [Average]
[info]   (min, avg, max) = (13227.169, 16515.529, 17604.145), stdev = 1846.742
[info]   CI (99.9%): [9404.383, 23626.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.321 ±(99.9%) 1.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.321, 1.204), stdev = 0.506
[info]   CI (99.9%): [≈ 0, 2.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.46% complete, ETA 01:54:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85453.066 ops/s
[info] # Warmup Iteration   2: 344424.549 ops/s
[info] # Warmup Iteration   3: 374632.579 ops/s
[info] # Warmup Iteration   4: 368222.515 ops/s
[info] # Warmup Iteration   5: 366325.830 ops/s
[info] Iteration   1: 367870.917 ops/s
[info]                  ·gc.alloc.rate:                   1890.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              8085.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5728.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 383723.412 ops/s
[info]                  ·gc.alloc.rate:                   1970.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              8082.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8234.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 375932.822 ops/s
[info]                  ·gc.alloc.rate:                   1957.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8385.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 381443.359 ops/s
[info]                  ·gc.alloc.rate:               1970.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          8130.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8261.979 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 385722.229 ops/s
[info]                  ·gc.alloc.rate:                   2006.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              8188.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8178.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   378938.548 ±(99.9%) 27681.428 ops/s [Average]
[info]   (min, avg, max) = (367870.917, 378938.548, 385722.229), stdev = 7188.779
[info]   CI (99.9%): [351257.120, 406619.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1959.173 ±(99.9%) 164.383 MB/sec [Average]
[info]   (min, avg, max) = (1890.274, 1959.173, 2006.797), stdev = 42.690
[info]   CI (99.9%): [1794.790, 2123.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8135.989 ±(99.9%) 205.415 B/op [Average]
[info]   (min, avg, max) = (8082.364, 8135.989, 8192.998), stdev = 53.346
[info]   CI (99.9%): [7930.573, 8341.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871.440 ±(99.9%) 1145.962 MB/sec [Average]
[info]   (min, avg, max) = (1339.085, 1871.440, 2007.915), stdev = 297.603
[info]   CI (99.9%): [725.478, 3017.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7757.678 ±(99.9%) 4378.689 B/op [Average]
[info]   (min, avg, max) = (5728.039, 7757.678, 8385.574), stdev = 1137.132
[info]   CI (99.9%): [3378.989, 12136.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.976), stdev = 1.767
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.348 ±(99.9%) 27.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.348, 16.307), stdev = 7.245
[info]   CI (99.9%): [≈ 0, 31.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.66% complete, ETA 01:53:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1203875.952 ops/s
[info] # Warmup Iteration   2: 2095974.760 ops/s
[info] # Warmup Iteration   3: 2188011.460 ops/s
[info] # Warmup Iteration   4: 2285828.269 ops/s
[info] # Warmup Iteration   5: 2174516.676 ops/s
[info] Iteration   1: 2249107.627 ops/s
[info]                  ·gc.alloc.rate:               806.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 2282960.068 ops/s
[info]                  ·gc.alloc.rate:                   824.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              568.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2289852.080 ops/s
[info]                  ·gc.alloc.rate:                   808.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2282550.897 ops/s
[info]                  ·gc.alloc.rate:               804.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.232 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2291270.112 ops/s
[info]                  ·gc.alloc.rate:                   807.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2279148.157 ±(99.9%) 66418.264 ops/s [Average]
[info]   (min, avg, max) = (2249107.627, 2279148.157, 2291270.112), stdev = 17248.612
[info]   CI (99.9%): [2212729.892, 2345566.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   810.335 ±(99.9%) 30.788 MB/sec [Average]
[info]   (min, avg, max) = (804.581, 810.335, 824.364), stdev = 7.995
[info]   CI (99.9%): [779.547, 841.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.544 ±(99.9%) 24.122 B/op [Average]
[info]   (min, avg, max) = (554.705, 559.544, 568.261), stdev = 6.264
[info]   CI (99.9%): [535.422, 583.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.940 ±(99.9%) 1156.023 MB/sec [Average]
[info]   (min, avg, max) = (670.853, 805.940, 1342.981), stdev = 300.216
[info]   CI (99.9%): [≈ 0, 1961.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   556.355 ±(99.9%) 795.267 B/op [Average]
[info]   (min, avg, max) = (461.671, 556.355, 925.760), stdev = 206.528
[info]   CI (99.9%): [≈ 0, 1351.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.014), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.86% complete, ETA 01:53:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5743.593 ops/s
[info] # Warmup Iteration   2: 70889.001 ops/s
[info] # Warmup Iteration   3: 88282.110 ops/s
[info] # Warmup Iteration   4: 88915.611 ops/s
[info] # Warmup Iteration   5: 89386.080 ops/s
[info] Iteration   1: 89666.980 ops/s
[info]                  ·gc.alloc.rate:               3520.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          61788.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3363.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59037.571 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 89458.375 ops/s
[info]                  ·gc.alloc.rate:                   3539.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              62259.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59349.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 89510.836 ops/s
[info]                  ·gc.alloc.rate:               3542.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          62281.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59483.956 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 88879.036 ops/s
[info]                  ·gc.alloc.rate:               3518.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          62297.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60038.605 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 89480.731 ops/s
[info]                  ·gc.alloc.rate:               3542.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          62311.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3396.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59730.496 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   89399.192 ±(99.9%) 1163.010 ops/s [Average]
[info]   (min, avg, max) = (88879.036, 89399.192, 89666.980), stdev = 302.030
[info]   CI (99.9%): [88236.182, 90562.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3532.642 ±(99.9%) 47.031 MB/sec [Average]
[info]   (min, avg, max) = (3518.304, 3532.642, 3542.801), stdev = 12.214
[info]   CI (99.9%): [3485.612, 3579.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62187.730 ±(99.9%) 861.701 B/op [Average]
[info]   (min, avg, max) = (61788.944, 62187.730, 62311.395), stdev = 223.781
[info]   CI (99.9%): [61326.028, 63049.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3381.519 ±(99.9%) 50.121 MB/sec [Average]
[info]   (min, avg, max) = (3363.700, 3381.519, 3396.061), stdev = 13.016
[info]   CI (99.9%): [3331.398, 3431.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59527.979 ±(99.9%) 1461.379 B/op [Average]
[info]   (min, avg, max) = (59037.571, 59527.979, 60038.605), stdev = 379.515
[info]   CI (99.9%): [58066.600, 60989.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.366), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:53:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109331.010 ops/s
[info] # Warmup Iteration   2: 392529.509 ops/s
[info] # Warmup Iteration   3: 409354.295 ops/s
[info] # Warmup Iteration   4: 417928.342 ops/s
[info] # Warmup Iteration   5: 405217.120 ops/s
[info] Iteration   1: 417079.607 ops/s
[info]                  ·gc.alloc.rate:                   2002.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              7557.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5078.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 423641.151 ops/s
[info]                  ·gc.alloc.rate:                   2054.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              7630.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7489.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 417709.265 ops/s
[info]                  ·gc.alloc.rate:                   2031.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              7652.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7582.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 426924.037 ops/s
[info]                  ·gc.alloc.rate:                   2076.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              7653.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7418.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 426737.162 ops/s
[info]                  ·gc.alloc.rate:                   2088.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              7703.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7431.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   422418.244 ±(99.9%) 18379.137 ops/s [Average]
[info]   (min, avg, max) = (417079.607, 422418.244, 426924.037), stdev = 4773.004
[info]   CI (99.9%): [404039.107, 440797.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2050.697 ±(99.9%) 133.444 MB/sec [Average]
[info]   (min, avg, max) = (2002.963, 2050.697, 2088.978), stdev = 34.655
[info]   CI (99.9%): [1917.253, 2184.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7639.294 ±(99.9%) 204.283 B/op [Average]
[info]   (min, avg, max) = (7557.440, 7639.294, 7703.469), stdev = 53.052
[info]   CI (99.9%): [7435.011, 7843.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1880.545 ±(99.9%) 1150.679 MB/sec [Average]
[info]   (min, avg, max) = (1345.993, 1880.545, 2016.176), stdev = 298.828
[info]   CI (99.9%): [729.866, 3031.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7000.123 ±(99.9%) 4143.661 B/op [Average]
[info]   (min, avg, max) = (5078.608, 7000.123, 7582.136), stdev = 1076.096
[info]   CI (99.9%): [2856.462, 11143.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 4.534 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.679, 2.769), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 5.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.552 ±(99.9%) 17.120 B/op [Average]
[info]   (min, avg, max) = (0.078, 2.552, 10.447), stdev = 4.446
[info]   CI (99.9%): [≈ 0, 19.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.26% complete, ETA 01:53:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75210.448 ops/s
[info] # Warmup Iteration   2: 249399.179 ops/s
[info] # Warmup Iteration   3: 263070.859 ops/s
[info] # Warmup Iteration   4: 266124.256 ops/s
[info] # Warmup Iteration   5: 266042.679 ops/s
[info] Iteration   1: 265921.282 ops/s
[info]                  ·gc.alloc.rate:                   2160.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              12784.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11919.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 260678.523 ops/s
[info]                  ·gc.alloc.rate:                   2108.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              12725.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12133.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 266495.142 ops/s
[info]                  ·gc.alloc.rate:               2175.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          12847.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15806.631 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 267233.105 ops/s
[info]                  ·gc.alloc.rate:               2171.330 MB/sec
[info]                  ·gc.alloc.rate.norm:          12786.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11832.225 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 266936.797 ops/s
[info]                  ·gc.alloc.rate:               2171.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          12800.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11871.094 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   265452.970 ±(99.9%) 10452.105 ops/s [Average]
[info]   (min, avg, max) = (260678.523, 265452.970, 267233.105), stdev = 2714.379
[info]   CI (99.9%): [255000.864, 275905.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2157.395 ±(99.9%) 107.236 MB/sec [Average]
[info]   (min, avg, max) = (2108.623, 2157.395, 2175.533), stdev = 27.849
[info]   CI (99.9%): [2050.158, 2264.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12788.945 ±(99.9%) 166.982 B/op [Average]
[info]   (min, avg, max) = (12725.781, 12788.945, 12847.048), stdev = 43.365
[info]   CI (99.9%): [12621.963, 12955.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2144.824 ±(99.9%) 1144.956 MB/sec [Average]
[info]   (min, avg, max) = (2009.249, 2144.824, 2676.712), stdev = 297.341
[info]   CI (99.9%): [999.868, 3289.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12712.624 ±(99.9%) 6675.175 B/op [Average]
[info]   (min, avg, max) = (11832.225, 12712.624, 15806.631), stdev = 1733.522
[info]   CI (99.9%): [6037.449, 19387.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.580), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 6.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.263 ±(99.9%) 36.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.263, 21.190), stdev = 9.462
[info]   CI (99.9%): [≈ 0, 40.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.46% complete, ETA 01:52:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 629168.000 ops/s
[info] # Warmup Iteration   2: 1407866.534 ops/s
[info] # Warmup Iteration   3: 1467061.784 ops/s
[info] # Warmup Iteration   4: 1444600.888 ops/s
[info] # Warmup Iteration   5: 1503313.223 ops/s
[info] Iteration   1: 1496956.752 ops/s
[info]                  ·gc.alloc.rate:               893.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 702.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1497890.753 ops/s
[info]                  ·gc.alloc.rate:                   894.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              939.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1501575.207 ops/s
[info]                  ·gc.alloc.rate:                   911.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1510896.349 ops/s
[info]                  ·gc.alloc.rate:               898.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1510543.503 ops/s
[info]                  ·gc.alloc.rate:               907.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.494 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1503572.513 ±(99.9%) 25993.501 ops/s [Average]
[info]   (min, avg, max) = (1496956.752, 1503572.513, 1510896.349), stdev = 6750.430
[info]   CI (99.9%): [1477579.012, 1529566.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   901.050 ±(99.9%) 31.525 MB/sec [Average]
[info]   (min, avg, max) = (893.511, 901.050, 911.813), stdev = 8.187
[info]   CI (99.9%): [869.525, 932.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   943.094 ±(99.9%) 30.069 B/op [Average]
[info]   (min, avg, max) = (935.770, 943.094, 955.654), stdev = 7.809
[info]   CI (99.9%): [913.024, 973.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.877 ±(99.9%) 1152.673 MB/sec [Average]
[info]   (min, avg, max) = (668.496, 802.877, 1338.362), stdev = 299.346
[info]   CI (99.9%): [≈ 0, 1955.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   840.537 ±(99.9%) 1210.163 B/op [Average]
[info]   (min, avg, max) = (697.329, 840.537, 1402.711), stdev = 314.276
[info]   CI (99.9%): [≈ 0, 2050.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.66% complete, ETA 01:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1642618.522 ops/s
[info] # Warmup Iteration   2: 2641544.228 ops/s
[info] # Warmup Iteration   3: 2714933.615 ops/s
[info] # Warmup Iteration   4: 2746335.329 ops/s
[info] # Warmup Iteration   5: 2789556.563 ops/s
[info] Iteration   1: 2762944.627 ops/s
[info]                  ·gc.alloc.rate:                   979.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              557.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2784348.704 ops/s
[info]                  ·gc.alloc.rate:                   976.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2771586.725 ops/s
[info]                  ·gc.alloc.rate:                   975.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2825923.694 ops/s
[info]                  ·gc.alloc.rate:                   988.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     374.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2840850.005 ops/s
[info]                  ·gc.alloc.rate:                   1008.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2797130.751 ±(99.9%) 132343.666 ops/s [Average]
[info]   (min, avg, max) = (2762944.627, 2797130.751, 2840850.005), stdev = 34369.230
[info]   CI (99.9%): [2664787.085, 2929474.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   985.710 ±(99.9%) 53.539 MB/sec [Average]
[info]   (min, avg, max) = (975.564, 985.710, 1008.670), stdev = 13.904
[info]   CI (99.9%): [932.171, 1039.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   554.562 ±(99.9%) 13.717 B/op [Average]
[info]   (min, avg, max) = (550.713, 554.562, 558.770), stdev = 3.562
[info]   CI (99.9%): [540.845, 568.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.498 ±(99.9%) 1417.790 MB/sec [Average]
[info]   (min, avg, max) = (672.145, 1075.498, 1345.617), stdev = 368.196
[info]   CI (99.9%): [≈ 0, 2493.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   605.582 ±(99.9%) 803.665 B/op [Average]
[info]   (min, avg, max) = (374.315, 605.582, 764.940), stdev = 208.709
[info]   CI (99.9%): [≈ 0, 1409.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
[info]   CI (99.9%): [0.021, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.012, 0.012), stdev = 0.001
[info]   CI (99.9%): [0.011, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 2.191
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.86% complete, ETA 01:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1471680.008 ops/s
[info] # Warmup Iteration   2: 3036314.277 ops/s
[info] # Warmup Iteration   3: 3163667.040 ops/s
[info] # Warmup Iteration   4: 3166063.345 ops/s
[info] # Warmup Iteration   5: 3051348.729 ops/s
[info] Iteration   1: 3164897.855 ops/s
[info]                  ·gc.alloc.rate:      0.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3169966.081 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3166138.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3174490.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3173097.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3169718.151 ±(99.9%) 16143.274 ops/s [Average]
[info]   (min, avg, max) = (3164897.855, 3169718.151, 3174490.179), stdev = 4192.357
[info]   CI (99.9%): [3153574.877, 3185861.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.018 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.009 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.06% complete, ETA 01:52:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52347.546 ops/s
[info] # Warmup Iteration   2: 379494.451 ops/s
[info] # Warmup Iteration   3: 388252.828 ops/s
[info] # Warmup Iteration   4: 395831.612 ops/s
[info] # Warmup Iteration   5: 393719.936 ops/s
[info] Iteration   1: 398844.880 ops/s
[info]                  ·gc.alloc.rate:                   2559.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              10099.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10540.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 397153.554 ops/s
[info]                  ·gc.alloc.rate:               2562.075 MB/sec
[info]                  ·gc.alloc.rate.norm:          10151.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2667.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10570.599 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 398791.472 ops/s
[info]                  ·gc.alloc.rate:                   2560.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              10104.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7903.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 387968.511 ops/s
[info]                  ·gc.alloc.rate:                   2520.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              10222.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10862.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 388040.908 ops/s
[info]                  ·gc.alloc.rate:               2521.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          10226.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10898.577 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   394159.865 ±(99.9%) 21794.254 ops/s [Average]
[info]   (min, avg, max) = (387968.511, 394159.865, 398844.880), stdev = 5659.899
[info]   CI (99.9%): [372365.611, 415954.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2544.790 ±(99.9%) 84.395 MB/sec [Average]
[info]   (min, avg, max) = (2520.081, 2544.790, 2562.075), stdev = 21.917
[info]   CI (99.9%): [2460.395, 2629.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10160.984 ±(99.9%) 236.106 B/op [Average]
[info]   (min, avg, max) = (10099.944, 10160.984, 10226.376), stdev = 61.316
[info]   CI (99.9%): [9924.878, 10397.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.431 ±(99.9%) 1159.644 MB/sec [Average]
[info]   (min, avg, max) = (2002.872, 2541.431, 2687.275), stdev = 301.156
[info]   CI (99.9%): [1381.788, 3701.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10155.167 ±(99.9%) 4887.078 B/op [Average]
[info]   (min, avg, max) = (7903.727, 10155.167, 10898.577), stdev = 1269.159
[info]   CI (99.9%): [5268.089, 15042.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.354), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.346 ±(99.9%) 2.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.396), stdev = 0.593
[info]   CI (99.9%): [≈ 0, 2.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16.27% complete, ETA 01:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34548.145 ops/s
[info] # Warmup Iteration   2: 81508.018 ops/s
[info] # Warmup Iteration   3: 83448.288 ops/s
[info] # Warmup Iteration   4: 85284.068 ops/s
[info] # Warmup Iteration   5: 85168.312 ops/s
[info] Iteration   1: 85105.701 ops/s
[info]                  ·gc.alloc.rate:                   1548.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              28634.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24883.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 84471.430 ops/s
[info]                  ·gc.alloc.rate:                   1560.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              29067.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37604.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 85634.525 ops/s
[info]                  ·gc.alloc.rate:                   1567.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              28812.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24704.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 85591.935 ops/s
[info]                  ·gc.alloc.rate:                   1579.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              29046.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24668.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 85385.953 ops/s
[info]                  ·gc.alloc.rate:                   1590.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              29303.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37052.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   85237.909 ±(99.9%) 1836.161 ops/s [Average]
[info]   (min, avg, max) = (84471.430, 85237.909, 85634.525), stdev = 476.845
[info]   CI (99.9%): [83401.749, 87074.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1569.317 ±(99.9%) 62.848 MB/sec [Average]
[info]   (min, avg, max) = (1548.524, 1569.317, 1590.240), stdev = 16.321
[info]   CI (99.9%): [1506.469, 1632.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   28972.848 ±(99.9%) 989.334 B/op [Average]
[info]   (min, avg, max) = (28634.431, 28972.848, 29303.855), stdev = 256.927
[info]   CI (99.9%): [27983.514, 29962.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1612.173 ±(99.9%) 1414.574 MB/sec [Average]
[info]   (min, avg, max) = (1341.710, 1612.173, 2018.435), stdev = 367.360
[info]   CI (99.9%): [197.599, 3026.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29782.798 ±(99.9%) 26536.792 B/op [Average]
[info]   (min, avg, max) = (24668.918, 29782.798, 37604.721), stdev = 6891.520
[info]   CI (99.9%): [3246.006, 56319.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 4.280 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.737, 2.602), stdev = 1.112
[info]   CI (99.9%): [≈ 0, 5.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   13.676 ±(99.9%) 79.723 B/op [Average]
[info]   (min, avg, max) = (0.385, 13.676, 48.480), stdev = 20.704
[info]   CI (99.9%): [≈ 0, 93.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 15.000), stdev = 5.244
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:51:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4255.320 ops/s
[info] # Warmup Iteration   2: 20262.459 ops/s
[info] # Warmup Iteration   3: 26131.726 ops/s
[info] # Warmup Iteration   4: 25748.897 ops/s
[info] # Warmup Iteration   5: 25304.543 ops/s
[info] Iteration   1: 25394.464 ops/s
[info]                  ·gc.alloc.rate:               1632.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          101157.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83228.836 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 25671.542 ops/s
[info]                  ·gc.alloc.rate:                   1657.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              101605.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123542.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 25818.557 ops/s
[info]                  ·gc.alloc.rate:                   1637.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              99810.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81824.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26172.856 ops/s
[info]                  ·gc.alloc.rate:               1684.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          101309.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80551.850 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 26273.901 ops/s
[info]                  ·gc.alloc.rate:                   1691.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              101342.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120219.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25866.264 ±(99.9%) 1392.309 ops/s [Average]
[info]   (min, avg, max) = (25394.464, 25866.264, 26273.901), stdev = 361.578
[info]   CI (99.9%): [24473.955, 27258.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1660.977 ±(99.9%) 103.517 MB/sec [Average]
[info]   (min, avg, max) = (1632.429, 1660.977, 1691.957), stdev = 26.883
[info]   CI (99.9%): [1557.460, 1764.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101045.111 ±(99.9%) 2728.398 B/op [Average]
[info]   (min, avg, max) = (99810.894, 101045.111, 101605.601), stdev = 708.556
[info]   CI (99.9%): [98316.713, 103773.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.642 ±(99.9%) 1411.961 MB/sec [Average]
[info]   (min, avg, max) = (1339.706, 1609.642, 2015.494), stdev = 366.682
[info]   CI (99.9%): [197.681, 3021.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97873.346 ±(99.9%) 84588.690 B/op [Average]
[info]   (min, avg, max) = (80551.850, 97873.346, 123542.060), stdev = 21967.414
[info]   CI (99.9%): [13284.656, 182462.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 4.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 2.977), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.401 ±(99.9%) 302.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.401, 182.505), stdev = 78.525
[info]   CI (99.9%): [≈ 0, 349.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.669 ops/s
[info] # Warmup Iteration   2: 88119.081 ops/s
[info] # Warmup Iteration   3: 94741.095 ops/s
[info] # Warmup Iteration   4: 97916.267 ops/s
[info] # Warmup Iteration   5: 97838.733 ops/s
[info] Iteration   1: 99990.982 ops/s
[info]                  ·gc.alloc.rate:                   979.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              15413.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20959.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 99294.713 ops/s
[info]                  ·gc.alloc.rate:               957.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          15178.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10563.787 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 99994.216 ops/s
[info]                  ·gc.alloc.rate:                   978.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              15397.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20989.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 99472.768 ops/s
[info]                  ·gc.alloc.rate:               952.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          15068.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10555.427 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 97807.560 ops/s
[info]                  ·gc.alloc.rate:               937.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          15086.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10739.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99312.048 ±(99.9%) 3452.677 ops/s [Average]
[info]   (min, avg, max) = (97807.560, 99312.048, 99994.216), stdev = 896.649
[info]   CI (99.9%): [95859.370, 102764.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   961.125 ±(99.9%) 68.453 MB/sec [Average]
[info]   (min, avg, max) = (937.672, 961.125, 979.297), stdev = 17.777
[info]   CI (99.9%): [892.672, 1029.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15228.868 ±(99.9%) 641.700 B/op [Average]
[info]   (min, avg, max) = (15068.111, 15228.868, 15413.214), stdev = 166.648
[info]   CI (99.9%): [14587.168, 15870.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933.342 ±(99.9%) 1403.796 MB/sec [Average]
[info]   (min, avg, max) = (666.602, 933.342, 1333.678), stdev = 364.561
[info]   CI (99.9%): [≈ 0, 2337.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14761.644 ±(99.9%) 21841.518 B/op [Average]
[info]   (min, avg, max) = (10555.427, 14761.644, 20989.343), stdev = 5672.173
[info]   CI (99.9%): [≈ 0, 36603.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.060), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 1.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 0.940), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 1.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.87% complete, ETA 01:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21304.542 ops/s
[info] # Warmup Iteration   2: 63555.890 ops/s
[info] # Warmup Iteration   3: 64448.092 ops/s
[info] # Warmup Iteration   4: 68186.819 ops/s
[info] # Warmup Iteration   5: 68592.667 ops/s
[info] Iteration   1: 67611.574 ops/s
[info]                  ·gc.alloc.rate:               1198.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          27904.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15575.290 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 66237.032 ops/s
[info]                  ·gc.alloc.rate:                   1200.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              28528.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31807.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68503.394 ops/s
[info]                  ·gc.alloc.rate:               1225.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          28144.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30777.452 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 67354.909 ops/s
[info]                  ·gc.alloc.rate:                   1204.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              28136.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31314.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 68109.946 ops/s
[info]                  ·gc.alloc.rate:                   1232.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              28470.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30937.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   67563.371 ±(99.9%) 3327.713 ops/s [Average]
[info]   (min, avg, max) = (66237.032, 67563.371, 68503.394), stdev = 864.196
[info]   CI (99.9%): [64235.658, 70891.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1212.284 ±(99.9%) 58.862 MB/sec [Average]
[info]   (min, avg, max) = (1198.907, 1212.284, 1232.210), stdev = 15.286
[info]   CI (99.9%): [1153.422, 1271.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28236.941 ±(99.9%) 998.506 B/op [Average]
[info]   (min, avg, max) = (27904.253, 28236.941, 28528.532), stdev = 259.309
[info]   CI (99.9%): [27238.436, 29235.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.424 ±(99.9%) 1154.280 MB/sec [Average]
[info]   (min, avg, max) = (669.193, 1205.424, 1340.259), stdev = 299.763
[info]   CI (99.9%): [51.144, 2359.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28082.440 ±(99.9%) 26965.847 B/op [Average]
[info]   (min, avg, max) = (15575.290, 28082.440, 31807.407), stdev = 7002.945
[info]   CI (99.9%): [1116.593, 55048.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.247), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.410 ±(99.9%) 126.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.410, 75.873), stdev = 32.791
[info]   CI (99.9%): [≈ 0, 145.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.07% complete, ETA 01:50:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51686.847 ops/s
[info] # Warmup Iteration   2: 125935.337 ops/s
[info] # Warmup Iteration   3: 130643.757 ops/s
[info] # Warmup Iteration   4: 136071.081 ops/s
[info] # Warmup Iteration   5: 135741.610 ops/s
[info] Iteration   1: 136301.275 ops/s
[info]                  ·gc.alloc.rate:                   940.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              10858.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7753.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 137021.871 ops/s
[info]                  ·gc.alloc.rate:               958.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          11007.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15432.950 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 137266.598 ops/s
[info]                  ·gc.alloc.rate:               939.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          10767.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7706.523 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 137415.666 ops/s
[info]                  ·gc.alloc.rate:                   938.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              10743.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7697.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 136599.343 ops/s
[info]                  ·gc.alloc.rate:                   959.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              11055.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15495.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   136920.951 ±(99.9%) 1787.369 ops/s [Average]
[info]   (min, avg, max) = (136301.275, 136920.951, 137415.666), stdev = 464.174
[info]   CI (99.9%): [135133.582, 138708.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   947.139 ±(99.9%) 41.840 MB/sec [Average]
[info]   (min, avg, max) = (938.097, 947.139, 959.563), stdev = 10.866
[info]   CI (99.9%): [905.299, 988.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10886.399 ±(99.9%) 539.894 B/op [Average]
[info]   (min, avg, max) = (10743.297, 10886.399, 11055.326), stdev = 140.209
[info]   CI (99.9%): [10346.505, 11426.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.906 ±(99.9%) 1418.120 MB/sec [Average]
[info]   (min, avg, max) = (671.530, 940.906, 1344.927), stdev = 368.281
[info]   CI (99.9%): [≈ 0, 2359.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10817.140 ±(99.9%) 16335.014 B/op [Average]
[info]   (min, avg, max) = (7697.608, 10817.140, 15495.176), stdev = 4242.151
[info]   CI (99.9%): [≈ 0, 27152.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.240), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.27% complete, ETA 01:50:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2281.028 ops/s
[info] # Warmup Iteration   2: 31216.226 ops/s
[info] # Warmup Iteration   3: 35054.834 ops/s
[info] # Warmup Iteration   4: 34893.764 ops/s
[info] # Warmup Iteration   5: 35708.666 ops/s
[info] Iteration   1: 35297.896 ops/s
[info]                  ·gc.alloc.rate:               1755.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          78246.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59651.756 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 36103.368 ops/s
[info]                  ·gc.alloc.rate:                   1807.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              78764.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87536.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 36416.674 ops/s
[info]                  ·gc.alloc.rate:               1810.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          78243.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57688.088 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 36349.828 ops/s
[info]                  ·gc.alloc.rate:               1827.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          79100.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86578.611 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 36357.676 ops/s
[info]                  ·gc.alloc.rate:                   1818.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              78711.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86559.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   36105.089 ±(99.9%) 1798.240 ops/s [Average]
[info]   (min, avg, max) = (35297.896, 36105.089, 36416.674), stdev = 466.997
[info]   CI (99.9%): [34306.848, 37903.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1803.661 ±(99.9%) 108.609 MB/sec [Average]
[info]   (min, avg, max) = (1755.132, 1803.661, 1827.070), stdev = 28.205
[info]   CI (99.9%): [1695.052, 1912.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78613.368 ±(99.9%) 1415.990 B/op [Average]
[info]   (min, avg, max) = (78243.799, 78613.368, 79100.466), stdev = 367.728
[info]   CI (99.9%): [77197.377, 80029.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1736.163 ±(99.9%) 1404.964 MB/sec [Average]
[info]   (min, avg, max) = (1334.951, 1736.163, 2008.234), stdev = 364.865
[info]   CI (99.9%): [331.199, 3141.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75602.845 ±(99.9%) 59601.015 B/op [Average]
[info]   (min, avg, max) = (57688.088, 75602.845, 87536.205), stdev = 15478.194
[info]   CI (99.9%): [16001.830, 135203.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.455), stdev = 1.990
[info]   CI (99.9%): [≈ 0, 8.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39.019 ±(99.9%) 334.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.019, 194.194), stdev = 86.746
[info]   CI (99.9%): [≈ 0, 373.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17.47% complete, ETA 01:50:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30951.625 ops/s
[info] # Warmup Iteration   2: 66189.560 ops/s
[info] # Warmup Iteration   3: 69362.843 ops/s
[info] # Warmup Iteration   4: 70076.975 ops/s
[info] # Warmup Iteration   5: 70187.069 ops/s
[info] Iteration   1: 67872.169 ops/s
[info]                  ·gc.alloc.rate:               1330.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          30853.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31162.109 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 69729.786 ops/s
[info]                  ·gc.alloc.rate:                   1352.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              30531.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30347.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 70051.122 ops/s
[info]                  ·gc.alloc.rate:                   1372.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              30836.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30222.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 70111.142 ops/s
[info]                  ·gc.alloc.rate:                   1369.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              30741.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30175.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68607.381 ops/s
[info]                  ·gc.alloc.rate:               1357.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          31127.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30772.612 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   69274.320 ±(99.9%) 3812.905 ops/s [Average]
[info]   (min, avg, max) = (67872.169, 69274.320, 70111.142), stdev = 990.199
[info]   CI (99.9%): [65461.415, 73087.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1356.598 ±(99.9%) 64.353 MB/sec [Average]
[info]   (min, avg, max) = (1330.696, 1356.598, 1372.856), stdev = 16.712
[info]   CI (99.9%): [1292.245, 1420.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30818.207 ±(99.9%) 829.542 B/op [Average]
[info]   (min, avg, max) = (30531.413, 30818.207, 31127.878), stdev = 215.429
[info]   CI (99.9%): [29988.664, 31647.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.020 ±(99.9%) 5.629 MB/sec [Average]
[info]   (min, avg, max) = (1341.613, 1344.020, 1345.528), stdev = 1.462
[info]   CI (99.9%): [1338.391, 1349.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30536.026 ±(99.9%) 1624.419 B/op [Average]
[info]   (min, avg, max) = (30175.064, 30536.026, 31162.109), stdev = 421.857
[info]   CI (99.9%): [28911.607, 32160.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 4.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 2.748), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 5.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   15.619 ±(99.9%) 102.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.619, 61.733), stdev = 26.537
[info]   CI (99.9%): [≈ 0, 117.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.67% complete, ETA 01:49:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9316.368 ops/s
[info] # Warmup Iteration   2: 30130.302 ops/s
[info] # Warmup Iteration   3: 31195.598 ops/s
[info] # Warmup Iteration   4: 31212.638 ops/s
[info] # Warmup Iteration   5: 31455.630 ops/s
[info] Iteration   1: 31557.090 ops/s
[info]                  ·gc.alloc.rate:               519.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          25910.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25513.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 31660.944 ops/s
[info]                  ·gc.alloc.rate:               523.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          26016.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33242.929 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 31567.188 ops/s
[info]                  ·gc.alloc.rate:               523.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          26101.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33342.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 31724.488 ops/s
[info]                  ·gc.alloc.rate:      506.083 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31549.860 ops/s
[info]                  ·gc.alloc.rate:                   516.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              25759.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33394.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   31611.914 ±(99.9%) 297.857 ops/s [Average]
[info]   (min, avg, max) = (31549.860, 31611.914, 31724.488), stdev = 77.353
[info]   CI (99.9%): [31314.057, 31909.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   517.807 ±(99.9%) 27.697 MB/sec [Average]
[info]   (min, avg, max) = (506.083, 517.807, 523.559), stdev = 7.193
[info]   CI (99.9%): [490.111, 545.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25778.137 ±(99.9%) 1532.092 B/op [Average]
[info]   (min, avg, max) = (25104.015, 25778.137, 26101.117), stdev = 397.879
[info]   CI (99.9%): [24246.045, 27310.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   503.744 ±(99.9%) 1115.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.744, 669.486), stdev = 289.735
[info]   CI (99.9%): [≈ 0, 1619.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25098.693 ±(99.9%) 55575.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25098.693, 33394.140), stdev = 14432.838
[info]   CI (99.9%): [≈ 0, 80674.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.623 ±(99.9%) 5.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.623, 3.115), stdev = 1.393
[info]   CI (99.9%): [≈ 0, 5.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.87% complete, ETA 01:49:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14000.385 ops/s
[info] # Warmup Iteration   2: 30526.427 ops/s
[info] # Warmup Iteration   3: 31925.070 ops/s
[info] # Warmup Iteration   4: 32228.705 ops/s
[info] # Warmup Iteration   5: 32252.015 ops/s
[info] Iteration   1: 32383.805 ops/s
[info]                  ·gc.alloc.rate:      395.243 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32180.210 ops/s
[info]                  ·gc.alloc.rate:               408.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          19981.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25019.616 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32274.960 ops/s
[info]                  ·gc.alloc.rate:               407.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          19849.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32531.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 32562.085 ops/s
[info]                  ·gc.alloc.rate:      397.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32290.375 ops/s
[info]                  ·gc.alloc.rate:                   411.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              20035.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32513.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32338.287 ±(99.9%) 556.186 ops/s [Average]
[info]   (min, avg, max) = (32180.210, 32338.287, 32562.085), stdev = 144.440
[info]   CI (99.9%): [31782.101, 32894.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   403.889 ±(99.9%) 27.277 MB/sec [Average]
[info]   (min, avg, max) = (395.243, 403.889, 411.092), stdev = 7.084
[info]   CI (99.9%): [376.612, 431.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19656.613 ±(99.9%) 1598.164 B/op [Average]
[info]   (min, avg, max) = (19208.013, 19656.613, 20035.489), stdev = 415.038
[info]   CI (99.9%): [18058.449, 21254.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.178 ±(99.9%) 1320.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.178, 667.167), stdev = 342.941
[info]   CI (99.9%): [≈ 0, 1689.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18012.891 ±(99.9%) 64407.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18012.891, 32531.485), stdev = 16726.294
[info]   CI (99.9%): [≈ 0, 82419.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.015), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 1.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.07% complete, ETA 01:49:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15266.033 ops/s
[info] # Warmup Iteration   2: 32526.664 ops/s
[info] # Warmup Iteration   3: 33643.973 ops/s
[info] # Warmup Iteration   4: 33304.673 ops/s
[info] # Warmup Iteration   5: 33786.562 ops/s
[info] Iteration   1: 33912.463 ops/s
[info]                  ·gc.alloc.rate:      407.221 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33747.835 ops/s
[info]                  ·gc.alloc.rate:               417.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          19455.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23858.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 33756.909 ops/s
[info]                  ·gc.alloc.rate:                   419.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              19568.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31273.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33899.512 ops/s
[info]                  ·gc.alloc.rate:      407.092 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33778.699 ops/s
[info]                  ·gc.alloc.rate:               430.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          20050.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31252.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   33819.084 ±(99.9%) 309.022 ops/s [Average]
[info]   (min, avg, max) = (33747.835, 33819.084, 33912.463), stdev = 80.252
[info]   CI (99.9%): [33510.062, 34128.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   416.328 ±(99.9%) 37.421 MB/sec [Average]
[info]   (min, avg, max) = (407.092, 416.328, 430.364), stdev = 9.718
[info]   CI (99.9%): [378.908, 453.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19373.198 ±(99.9%) 1885.306 B/op [Average]
[info]   (min, avg, max) = (18896.013, 19373.198, 20050.425), stdev = 489.608
[info]   CI (99.9%): [17487.892, 21258.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.656 ±(99.9%) 1326.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.656, 670.831), stdev = 344.544
[info]   CI (99.9%): [≈ 0, 1697.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17276.875 ±(99.9%) 61835.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17276.875, 31273.428), stdev = 16058.597
[info]   CI (99.9%): [≈ 0, 79112.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.388 ±(99.9%) 3.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.941), stdev = 0.868
[info]   CI (99.9%): [≈ 0, 3.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.27% complete, ETA 01:49:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20940.609 ops/s
[info] # Warmup Iteration   2: 34734.142 ops/s
[info] # Warmup Iteration   3: 34873.603 ops/s
[info] # Warmup Iteration   4: 33640.468 ops/s
[info] # Warmup Iteration   5: 34843.774 ops/s
[info] Iteration   1: 34988.193 ops/s
[info]                  ·gc.alloc.rate:      311.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 14024.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34751.935 ops/s
[info]                  ·gc.alloc.rate:               320.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          14497.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23168.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 34344.719 ops/s
[info]                  ·gc.alloc.rate:               344.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          15794.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23443.462 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 34968.734 ops/s
[info]                  ·gc.alloc.rate:      311.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 14024.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34722.821 ops/s
[info]                  ·gc.alloc.rate:                   325.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              14765.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30405.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34755.281 ±(99.9%) 999.381 ops/s [Average]
[info]   (min, avg, max) = (34344.719, 34755.281, 34988.193), stdev = 259.536
[info]   CI (99.9%): [33755.900, 35754.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   322.801 ±(99.9%) 52.433 MB/sec [Average]
[info]   (min, avg, max) = (311.615, 322.801, 344.688), stdev = 13.617
[info]   CI (99.9%): [270.368, 375.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   14621.052 ±(99.9%) 2806.610 B/op [Average]
[info]   (min, avg, max) = (14024.012, 14621.052, 15794.059), stdev = 728.868
[info]   CI (99.9%): [11814.442, 17427.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   338.823 ±(99.9%) 1217.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.823, 670.858), stdev = 316.059
[info]   CI (99.9%): [≈ 0, 1555.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   15403.547 ±(99.9%) 55285.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15403.547, 30405.322), stdev = 14357.346
[info]   CI (99.9%): [≈ 0, 70688.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 1.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.944), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 1.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18.47% complete, ETA 01:48:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6777.108 ops/s
[info] # Warmup Iteration   2: 23634.154 ops/s
[info] # Warmup Iteration   3: 25435.243 ops/s
[info] # Warmup Iteration   4: 25116.383 ops/s
[info] # Warmup Iteration   5: 25104.439 ops/s
[info] Iteration   1: 25323.325 ops/s
[info]                  ·gc.alloc.rate:                   730.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              45407.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41667.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25286.840 ops/s
[info]                  ·gc.alloc.rate:               724.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          45074.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41749.013 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 25456.535 ops/s
[info]                  ·gc.alloc.rate:                   738.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              45621.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41473.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 25426.001 ops/s
[info]                  ·gc.alloc.rate:               730.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          45185.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41563.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 24826.702 ops/s
[info]                  ·gc.alloc.rate:               713.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          45246.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42564.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   25263.881 ±(99.9%) 979.051 ops/s [Average]
[info]   (min, avg, max) = (24826.702, 25263.881, 25456.535), stdev = 254.256
[info]   CI (99.9%): [24284.830, 26242.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   727.387 ±(99.9%) 34.655 MB/sec [Average]
[info]   (min, avg, max) = (713.853, 727.387, 738.011), stdev = 9.000
[info]   CI (99.9%): [692.732, 762.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   45307.234 ±(99.9%) 820.574 B/op [Average]
[info]   (min, avg, max) = (45074.512, 45307.234, 45621.956), stdev = 213.100
[info]   CI (99.9%): [44486.660, 46127.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.074 ±(99.9%) 1.783 MB/sec [Average]
[info]   (min, avg, max) = (670.513, 671.074, 671.567), stdev = 0.463
[info]   CI (99.9%): [669.291, 672.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   41803.635 ±(99.9%) 1686.393 B/op [Average]
[info]   (min, avg, max) = (41473.528, 41803.635, 42564.619), stdev = 437.951
[info]   CI (99.9%): [40117.243, 43490.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.842 ±(99.9%) 17.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.842, 10.350), stdev = 4.518
[info]   CI (99.9%): [≈ 0, 20.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.67% complete, ETA 01:48:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3243.471 ops/s
[info] # Warmup Iteration   2: 12628.244 ops/s
[info] # Warmup Iteration   3: 15267.051 ops/s
[info] # Warmup Iteration   4: 15358.104 ops/s
[info] # Warmup Iteration   5: 15296.765 ops/s
[info] Iteration   1: 15146.651 ops/s
[info]                  ·gc.alloc.rate:               1121.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          116466.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139394.856 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 15277.011 ops/s
[info]                  ·gc.alloc.rate:               1106.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          114007.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69104.452 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15103.963 ops/s
[info]                  ·gc.alloc.rate:                   1118.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              116541.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139930.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 14678.858 ops/s
[info]                  ·gc.alloc.rate:               1102.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          118112.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71985.603 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 14826.181 ops/s
[info]                  ·gc.alloc.rate:                   1107.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              117535.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142614.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 346.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15006.533 ±(99.9%) 947.490 ops/s [Average]
[info]   (min, avg, max) = (14678.858, 15006.533, 15277.011), stdev = 246.060
[info]   CI (99.9%): [14059.043, 15954.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1111.167 ±(99.9%) 31.527 MB/sec [Average]
[info]   (min, avg, max) = (1102.053, 1111.167, 1121.018), stdev = 8.187
[info]   CI (99.9%): [1079.640, 1142.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   116532.764 ±(99.9%) 6053.413 B/op [Average]
[info]   (min, avg, max) = (114007.007, 116532.764, 118112.552), stdev = 1572.052
[info]   CI (99.9%): [110479.351, 122586.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1074.198 ±(99.9%) 1416.359 MB/sec [Average]
[info]   (min, avg, max) = (670.873, 1074.198, 1343.700), stdev = 367.824
[info]   CI (99.9%): [≈ 0, 2490.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112606.035 ±(99.9%) 147976.978 B/op [Average]
[info]   (min, avg, max) = (69104.452, 112606.035, 142614.821), stdev = 38429.151
[info]   CI (99.9%): [≈ 0, 260583.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.268), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69.814 ±(99.9%) 596.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.814, 346.903), stdev = 154.900
[info]   CI (99.9%): [≈ 0, 666.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.88% complete, ETA 01:48:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2349.036 ops/s
[info] # Warmup Iteration   2: 11933.612 ops/s
[info] # Warmup Iteration   3: 15763.607 ops/s
[info] # Warmup Iteration   4: 15827.835 ops/s
[info] # Warmup Iteration   5: 15928.062 ops/s
[info] Iteration   1: 15772.602 ops/s
[info]                  ·gc.alloc.rate:               1039.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          103750.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133198.929 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 15913.708 ops/s
[info]                  ·gc.alloc.rate:               1027.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          101616.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66075.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15690.332 ops/s
[info]                  ·gc.alloc.rate:                   1036.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              103950.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134095.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 15831.324 ops/s
[info]                  ·gc.alloc.rate:               1039.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          103372.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66483.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15898.405 ops/s
[info]                  ·gc.alloc.rate:                   1036.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              102637.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132464.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15821.274 ±(99.9%) 355.580 ops/s [Average]
[info]   (min, avg, max) = (15690.332, 15821.274, 15913.708), stdev = 92.343
[info]   CI (99.9%): [15465.694, 16176.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1036.138 ±(99.9%) 19.467 MB/sec [Average]
[info]   (min, avg, max) = (1027.563, 1036.138, 1039.917), stdev = 5.056
[info]   CI (99.9%): [1016.671, 1055.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   103065.186 ±(99.9%) 3667.781 B/op [Average]
[info]   (min, avg, max) = (101616.006, 103065.186, 103950.068), stdev = 952.511
[info]   CI (99.9%): [99397.406, 106732.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.452 ±(99.9%) 1409.426 MB/sec [Average]
[info]   (min, avg, max) = (668.168, 1069.452, 1338.251), stdev = 366.023
[info]   CI (99.9%): [≈ 0, 2478.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   106463.656 ±(99.9%) 141271.329 B/op [Average]
[info]   (min, avg, max) = (66075.374, 106463.656, 134095.325), stdev = 36687.715
[info]   CI (99.9%): [≈ 0, 247734.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.739 ±(99.9%) 3.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.739, 2.060), stdev = 1.023
[info]   CI (99.9%): [≈ 0, 4.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.08% complete, ETA 01:48:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62667.890 ops/s
[info] # Warmup Iteration   2: 102534.214 ops/s
[info] # Warmup Iteration   3: 101856.031 ops/s
[info] # Warmup Iteration   4: 106224.598 ops/s
[info] # Warmup Iteration   5: 107352.531 ops/s
[info] Iteration   1: 106840.047 ops/s
[info]                  ·gc.alloc.rate:                   292.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              4314.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7535.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 100964.394 ops/s
[info]                  ·gc.alloc.rate:               293.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          4576.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7974.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 107352.078 ops/s
[info]                  ·gc.alloc.rate:      279.410 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106594.145 ops/s
[info]                  ·gc.alloc.rate:               295.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          4369.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7553.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 107198.507 ops/s
[info]                  ·gc.alloc.rate:      279.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   105789.834 ±(99.9%) 10450.031 ops/s [Average]
[info]   (min, avg, max) = (100964.394, 105789.834, 107352.078), stdev = 2713.840
[info]   CI (99.9%): [95339.804, 116239.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   288.179 ±(99.9%) 31.839 MB/sec [Average]
[info]   (min, avg, max) = (279.007, 288.179, 295.970), stdev = 8.268
[info]   CI (99.9%): [256.341, 320.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4290.534 ±(99.9%) 780.131 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4290.534, 4576.306), stdev = 202.597
[info]   CI (99.9%): [3510.403, 5070.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.964 ±(99.9%) 1079.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.964, 511.633), stdev = 280.219
[info]   CI (99.9%): [≈ 0, 1385.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4612.783 ±(99.9%) 16228.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4612.783, 7974.989), stdev = 4214.547
[info]   CI (99.9%): [≈ 0, 20841.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.307), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.28% complete, ETA 01:47:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1975.064 ops/s
[info] # Warmup Iteration   2: 10410.821 ops/s
[info] # Warmup Iteration   3: 13496.917 ops/s
[info] # Warmup Iteration   4: 13516.304 ops/s
[info] # Warmup Iteration   5: 13521.065 ops/s
[info] Iteration   1: 13858.483 ops/s
[info]                  ·gc.alloc.rate:               1359.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          154403.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151828.298 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 13983.879 ops/s
[info]                  ·gc.alloc.rate:                   1362.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              153360.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150546.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13735.183 ops/s
[info]                  ·gc.alloc.rate:                   1326.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              151975.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153416.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13241.649 ops/s
[info]                  ·gc.alloc.rate:                   1316.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              156455.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159218.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13973.779 ops/s
[info]                  ·gc.alloc.rate:                   1360.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              153178.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150493.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.477 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13758.594 ±(99.9%) 1178.724 ops/s [Average]
[info]   (min, avg, max) = (13241.649, 13758.594, 13983.879), stdev = 306.111
[info]   CI (99.9%): [12579.870, 14937.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1345.168 ±(99.9%) 84.195 MB/sec [Average]
[info]   (min, avg, max) = (1316.537, 1345.168, 1362.781), stdev = 21.865
[info]   CI (99.9%): [1260.973, 1429.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   153874.742 ±(99.9%) 6471.102 B/op [Average]
[info]   (min, avg, max) = (151975.477, 153874.742, 156455.610), stdev = 1680.525
[info]   CI (99.9%): [147403.640, 160345.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.027 ±(99.9%) 5.546 MB/sec [Average]
[info]   (min, avg, max) = (1336.323, 1338.027, 1339.784), stdev = 1.440
[info]   CI (99.9%): [1332.482, 1343.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   153100.535 ±(99.9%) 13945.909 B/op [Average]
[info]   (min, avg, max) = (150493.200, 153100.535, 159218.237), stdev = 3621.708
[info]   CI (99.9%): [139154.626, 167046.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.164), stdev = 1.831
[info]   CI (99.9%): [≈ 0, 7.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   106.008 ±(99.9%) 838.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.008, 494.835), stdev = 217.723
[info]   CI (99.9%): [≈ 0, 944.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19.48% complete, ETA 01:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3546.458 ops/s
[info] # Warmup Iteration   2: 12264.821 ops/s
[info] # Warmup Iteration   3: 13979.134 ops/s
[info] # Warmup Iteration   4: 14065.712 ops/s
[info] # Warmup Iteration   5: 14767.980 ops/s
[info] Iteration   1: 14735.249 ops/s
[info]                  ·gc.alloc.rate:               983.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          104992.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71783.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 14145.774 ops/s
[info]                  ·gc.alloc.rate:                   961.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              107013.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149553.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14416.726 ops/s
[info]                  ·gc.alloc.rate:               982.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          107206.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73371.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 14112.781 ops/s
[info]                  ·gc.alloc.rate:                   958.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              106887.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149902.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 14021.689 ops/s
[info]                  ·gc.alloc.rate:               926.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          103963.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75507.041 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   14286.444 ±(99.9%) 1120.070 ops/s [Average]
[info]   (min, avg, max) = (14021.689, 14286.444, 14735.249), stdev = 290.878
[info]   CI (99.9%): [13166.374, 15406.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   962.473 ±(99.9%) 88.727 MB/sec [Average]
[info]   (min, avg, max) = (926.418, 962.473, 983.069), stdev = 23.042
[info]   CI (99.9%): [873.746, 1051.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   106012.778 ±(99.9%) 5590.830 B/op [Average]
[info]   (min, avg, max) = (103963.293, 106012.778, 107206.930), stdev = 1451.921
[info]   CI (99.9%): [100421.948, 111603.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   941.225 ±(99.9%) 1417.588 MB/sec [Average]
[info]   (min, avg, max) = (672.120, 941.225, 1344.667), stdev = 368.143
[info]   CI (99.9%): [≈ 0, 2358.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   104023.455 ±(99.9%) 160738.740 B/op [Average]
[info]   (min, avg, max) = (71783.241, 104023.455, 149902.690), stdev = 41743.340
[info]   CI (99.9%): [≈ 0, 264762.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.391 ±(99.9%) 7.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.391, 4.632), stdev = 2.072
[info]   CI (99.9%): [≈ 0, 9.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.68% complete, ETA 01:47:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18785.007 ops/s
[info] # Warmup Iteration   2: 40634.439 ops/s
[info] # Warmup Iteration   3: 44766.324 ops/s
[info] # Warmup Iteration   4: 45171.434 ops/s
[info] # Warmup Iteration   5: 44632.091 ops/s
[info] Iteration   1: 44972.428 ops/s
[info]                  ·gc.alloc.rate:                   1156.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              40455.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46912.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 44862.507 ops/s
[info]                  ·gc.alloc.rate:               1146.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          40207.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47049.690 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 44329.349 ops/s
[info]                  ·gc.alloc.rate:               1116.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          39635.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23815.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 44927.870 ops/s
[info]                  ·gc.alloc.rate:                   1139.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              39915.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47043.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45166.741 ops/s
[info]                  ·gc.alloc.rate:                   1170.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              40765.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46816.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   44851.779 ±(99.9%) 1206.358 ops/s [Average]
[info]   (min, avg, max) = (44329.349, 44851.779, 45166.741), stdev = 313.287
[info]   CI (99.9%): [43645.421, 46058.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1145.850 ±(99.9%) 76.645 MB/sec [Average]
[info]   (min, avg, max) = (1116.818, 1145.850, 1170.285), stdev = 19.904
[info]   CI (99.9%): [1069.205, 1222.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40195.864 ±(99.9%) 1704.932 B/op [Average]
[info]   (min, avg, max) = (39635.637, 40195.864, 40765.293), stdev = 442.766
[info]   CI (99.9%): [38490.932, 41900.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.059 ±(99.9%) 1155.980 MB/sec [Average]
[info]   (min, avg, max) = (671.042, 1208.059, 1343.999), stdev = 300.204
[info]   CI (99.9%): [52.079, 2364.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42327.344 ±(99.9%) 39850.654 B/op [Average]
[info]   (min, avg, max) = (23815.148, 42327.344, 47049.690), stdev = 10349.088
[info]   CI (99.9%): [2476.690, 82177.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.899 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.436), stdev = 1.532
[info]   CI (99.9%): [≈ 0, 6.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.228 ±(99.9%) 205.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.228, 119.681), stdev = 53.361
[info]   CI (99.9%): [≈ 0, 229.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.88% complete, ETA 01:47:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15761.738 ops/s
[info] # Warmup Iteration   2: 55858.541 ops/s
[info] # Warmup Iteration   3: 60570.060 ops/s
[info] # Warmup Iteration   4: 62837.978 ops/s
[info] # Warmup Iteration   5: 62362.223 ops/s
[info] Iteration   1: 62721.379 ops/s
[info]                  ·gc.alloc.rate:               1091.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          27376.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16756.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 62510.454 ops/s
[info]                  ·gc.alloc.rate:               1104.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          27804.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33642.715 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 62312.223 ops/s
[info]                  ·gc.alloc.rate:                   1095.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              27669.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33782.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 61457.672 ops/s
[info]                  ·gc.alloc.rate:               1064.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          27257.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17144.187 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 61675.412 ops/s
[info]                  ·gc.alloc.rate:                   1094.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              27932.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34181.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   62135.428 ±(99.9%) 2096.929 ops/s [Average]
[info]   (min, avg, max) = (61457.672, 62135.428, 62721.379), stdev = 544.566
[info]   CI (99.9%): [60038.499, 64232.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1090.130 ±(99.9%) 57.840 MB/sec [Average]
[info]   (min, avg, max) = (1064.725, 1090.130, 1104.439), stdev = 15.021
[info]   CI (99.9%): [1032.290, 1147.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27608.159 ±(99.9%) 1096.547 B/op [Average]
[info]   (min, avg, max) = (27257.211, 27608.159, 27932.643), stdev = 284.770
[info]   CI (99.9%): [26511.612, 28704.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.242 ±(99.9%) 1411.252 MB/sec [Average]
[info]   (min, avg, max) = (667.845, 1070.242, 1339.674), stdev = 366.498
[info]   CI (99.9%): [≈ 0, 2481.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27101.601 ±(99.9%) 35695.274 B/op [Average]
[info]   (min, avg, max) = (16756.423, 27101.601, 34181.980), stdev = 9269.949
[info]   CI (99.9%): [≈ 0, 62796.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 6.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.604), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 6.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.495 ±(99.9%) 158.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.495, 91.949), stdev = 41.063
[info]   CI (99.9%): [≈ 0, 176.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.08% complete, ETA 01:46:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103431.029 ops/s
[info] # Warmup Iteration   2: 160409.756 ops/s
[info] # Warmup Iteration   3: 177045.795 ops/s
[info] # Warmup Iteration   4: 170509.119 ops/s
[info] # Warmup Iteration   5: 176682.555 ops/s
[info] Iteration   1: 176346.198 ops/s
[info]                  ·gc.alloc.rate:               293.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          2618.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4565.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 176261.557 ops/s
[info]                  ·gc.alloc.rate:               297.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          2652.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4567.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 177053.456 ops/s
[info]                  ·gc.alloc.rate:      280.822 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 175573.265 ops/s
[info]                  ·gc.alloc.rate:                   293.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              2626.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4585.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 176873.709 ops/s
[info]                  ·gc.alloc.rate:      280.531 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   176421.637 ±(99.9%) 2240.844 ops/s [Average]
[info]   (min, avg, max) = (175573.265, 176421.637, 177053.456), stdev = 581.940
[info]   CI (99.9%): [174180.793, 178662.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   288.971 ±(99.9%) 29.793 MB/sec [Average]
[info]   (min, avg, max) = (280.531, 288.971, 297.083), stdev = 7.737
[info]   CI (99.9%): [259.178, 318.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2577.851 ±(99.9%) 291.771 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2577.851, 2652.450), stdev = 75.772
[info]   CI (99.9%): [2286.080, 2869.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.966 ±(99.9%) 1079.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.966, 511.620), stdev = 280.220
[info]   CI (99.9%): [≈ 0, 1385.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2743.856 ±(99.9%) 9645.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2743.856, 4585.766), stdev = 2504.798
[info]   CI (99.9%): [≈ 0, 12388.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.560), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.28% complete, ETA 01:46:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110717.678 ops/s
[info] # Warmup Iteration   2: 184784.026 ops/s
[info] # Warmup Iteration   3: 183345.318 ops/s
[info] # Warmup Iteration   4: 185281.820 ops/s
[info] # Warmup Iteration   5: 185294.182 ops/s
[info] Iteration   1: 184416.438 ops/s
[info]                  ·gc.alloc.rate:      1.017 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.678 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 185313.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 185131.559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 184932.957 ops/s
[info]                  ·gc.alloc.rate:      0.086 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.734 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185823.921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   185123.656 ±(99.9%) 1985.008 ops/s [Average]
[info]   (min, avg, max) = (184416.438, 185123.656, 185823.921), stdev = 515.500
[info]   CI (99.9%): [183138.649, 187108.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.221 ±(99.9%) 1.720 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.221, 1.017), stdev = 0.447
[info]   CI (99.9%): [≈ 0, 1.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.884 ±(99.9%) 14.675 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.884, 8.678), stdev = 3.811
[info]   CI (99.9%): [≈ 0, 16.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.48% complete, ETA 01:46:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25311.560 ops/s
[info] # Warmup Iteration   2: 55433.868 ops/s
[info] # Warmup Iteration   3: 55727.392 ops/s
[info] # Warmup Iteration   4: 57414.641 ops/s
[info] # Warmup Iteration   5: 58504.776 ops/s
[info] Iteration   1: 57361.431 ops/s
[info]                  ·gc.alloc.rate:               1124.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          30862.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36782.681 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 57983.053 ops/s
[info]                  ·gc.alloc.rate:               1126.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          30579.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36404.369 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 56969.352 ops/s
[info]                  ·gc.alloc.rate:               1088.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          30062.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18531.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 58136.877 ops/s
[info]                  ·gc.alloc.rate:               1124.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          30428.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36335.632 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 58260.229 ops/s
[info]                  ·gc.alloc.rate:                   1112.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              30039.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18138.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.845 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   57742.188 ±(99.9%) 2130.431 ops/s [Average]
[info]   (min, avg, max) = (56969.352, 57742.188, 58260.229), stdev = 553.266
[info]   CI (99.9%): [55611.758, 59872.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1115.207 ±(99.9%) 62.097 MB/sec [Average]
[info]   (min, avg, max) = (1088.294, 1115.207, 1126.680), stdev = 16.126
[info]   CI (99.9%): [1053.110, 1177.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30394.534 ±(99.9%) 1348.668 B/op [Average]
[info]   (min, avg, max) = (30039.951, 30394.534, 30862.827), stdev = 350.245
[info]   CI (99.9%): [29045.865, 31743.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1073.329 ±(99.9%) 1413.757 MB/sec [Average]
[info]   (min, avg, max) = (670.847, 1073.329, 1342.343), stdev = 367.148
[info]   CI (99.9%): [≈ 0, 2487.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29238.371 ±(99.9%) 38337.674 B/op [Average]
[info]   (min, avg, max) = (18138.153, 29238.371, 36782.681), stdev = 9956.172
[info]   CI (99.9%): [≈ 0, 67576.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.621 ±(99.9%) 5.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 3.104), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 5.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.769 ±(99.9%) 144.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.769, 83.845), stdev = 37.497
[info]   CI (99.9%): [≈ 0, 161.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20.68% complete, ETA 01:45:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7304.448 ops/s
[info] # Warmup Iteration   2: 14867.171 ops/s
[info] # Warmup Iteration   3: 16692.224 ops/s
[info] # Warmup Iteration   4: 16982.447 ops/s
[info] # Warmup Iteration   5: 16617.328 ops/s
[info] Iteration   1: 16894.279 ops/s
[info]                  ·gc.alloc.rate:                   1052.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              98080.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124602.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16821.360 ops/s
[info]                  ·gc.alloc.rate:               1039.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          97292.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62509.464 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 16971.893 ops/s
[info]                  ·gc.alloc.rate:               1068.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          99026.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123975.967 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17080.337 ops/s
[info]                  ·gc.alloc.rate:               1048.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          96563.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61626.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 17028.245 ops/s
[info]                  ·gc.alloc.rate:                   1058.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              97772.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123684.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   16959.223 ±(99.9%) 398.393 ops/s [Average]
[info]   (min, avg, max) = (16821.360, 16959.223, 17080.337), stdev = 103.461
[info]   CI (99.9%): [16560.830, 17357.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1053.408 ±(99.9%) 40.550 MB/sec [Average]
[info]   (min, avg, max) = (1039.981, 1053.408, 1068.014), stdev = 10.531
[info]   CI (99.9%): [1012.857, 1093.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   97747.006 ±(99.9%) 3527.218 B/op [Average]
[info]   (min, avg, max) = (96563.360, 97747.006, 99026.342), stdev = 916.007
[info]   CI (99.9%): [94219.788, 101274.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1070.050 ±(99.9%) 1411.392 MB/sec [Average]
[info]   (min, avg, max) = (668.180, 1070.050, 1338.424), stdev = 366.534
[info]   CI (99.9%): [≈ 0, 2481.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   99279.871 ±(99.9%) 130816.303 B/op [Average]
[info]   (min, avg, max) = (61626.781, 99279.871, 124602.948), stdev = 33972.578
[info]   CI (99.9%): [≈ 0, 230096.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.773 ±(99.9%) 4.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 1.939), stdev = 1.058
[info]   CI (99.9%): [≈ 0, 4.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.88% complete, ETA 01:45:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18912.561 ops/s
[info] # Warmup Iteration   2: 83335.841 ops/s
[info] # Warmup Iteration   3: 93939.844 ops/s
[info] # Warmup Iteration   4: 96941.901 ops/s
[info] # Warmup Iteration   5: 97008.588 ops/s
[info] Iteration   1: 97442.126 ops/s
[info]                  ·gc.alloc.rate:                   2163.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              34940.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32503.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 97492.408 ops/s
[info]                  ·gc.alloc.rate:                   2165.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              34959.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32398.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 97400.993 ops/s
[info]                  ·gc.alloc.rate:                   2158.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              34869.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32386.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 97156.226 ops/s
[info]                  ·gc.alloc.rate:                   2170.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              35151.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32495.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 97583.083 ops/s
[info]                  ·gc.alloc.rate:               2206.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          35586.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43214.386 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   97414.967 ±(99.9%) 615.321 ops/s [Average]
[info]   (min, avg, max) = (97156.226, 97414.967, 97583.083), stdev = 159.797
[info]   CI (99.9%): [96799.646, 98030.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2172.851 ±(99.9%) 74.588 MB/sec [Average]
[info]   (min, avg, max) = (2158.289, 2172.851, 2206.641), stdev = 19.370
[info]   CI (99.9%): [2098.263, 2247.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35101.522 ±(99.9%) 1118.968 B/op [Average]
[info]   (min, avg, max) = (34869.251, 35101.522, 35586.465), stdev = 290.592
[info]   CI (99.9%): [33982.554, 36220.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2142.000 ±(99.9%) 1157.348 MB/sec [Average]
[info]   (min, avg, max) = (2004.641, 2142.000, 2679.632), stdev = 300.560
[info]   CI (99.9%): [984.652, 3299.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34599.587 ±(99.9%) 18545.155 B/op [Average]
[info]   (min, avg, max) = (32386.910, 34599.587, 43214.386), stdev = 4816.118
[info]   CI (99.9%): [16054.432, 53144.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.706), stdev = 1.623
[info]   CI (99.9%): [≈ 0, 7.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.979 ±(99.9%) 100.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.979, 59.847), stdev = 26.220
[info]   CI (99.9%): [≈ 0, 113.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.08% complete, ETA 01:45:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24634.753 ops/s
[info] # Warmup Iteration   2: 115604.331 ops/s
[info] # Warmup Iteration   3: 124248.916 ops/s
[info] # Warmup Iteration   4: 126999.007 ops/s
[info] # Warmup Iteration   5: 125926.049 ops/s
[info] Iteration   1: 126506.594 ops/s
[info]                  ·gc.alloc.rate:                   1792.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              22298.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24944.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 125164.725 ops/s
[info]                  ·gc.alloc.rate:                   1772.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              22283.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16827.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 123351.139 ops/s
[info]                  ·gc.alloc.rate:                   1761.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              22476.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25532.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 120729.677 ops/s
[info]                  ·gc.alloc.rate:                   1697.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              22127.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17367.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 119514.530 ops/s
[info]                  ·gc.alloc.rate:               1721.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          22669.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26325.368 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   123053.333 ±(99.9%) 11291.350 ops/s [Average]
[info]   (min, avg, max) = (119514.530, 123053.333, 126506.594), stdev = 2932.328
[info]   CI (99.9%): [111761.983, 134344.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1749.111 ±(99.9%) 149.132 MB/sec [Average]
[info]   (min, avg, max) = (1697.503, 1749.111, 1792.495), stdev = 38.729
[info]   CI (99.9%): [1599.979, 1898.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22371.113 ±(99.9%) 800.395 B/op [Average]
[info]   (min, avg, max) = (22127.006, 22371.113, 22669.615), stdev = 207.860
[info]   CI (99.9%): [21570.718, 23171.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1735.276 ±(99.9%) 1405.825 MB/sec [Average]
[info]   (min, avg, max) = (1332.387, 1735.276, 2005.253), stdev = 365.088
[info]   CI (99.9%): [329.451, 3141.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22199.598 ±(99.9%) 18047.565 B/op [Average]
[info]   (min, avg, max) = (16827.808, 22199.598, 26325.368), stdev = 4686.895
[info]   CI (99.9%): [4152.033, 40247.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 7.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 4.268), stdev = 1.895
[info]   CI (99.9%): [≈ 0, 8.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.049 ±(99.9%) 91.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.049, 53.660), stdev = 23.822
[info]   CI (99.9%): [≈ 0, 102.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.29% complete, ETA 01:45:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78385.020 ops/s
[info] # Warmup Iteration   2: 162574.405 ops/s
[info] # Warmup Iteration   3: 163355.451 ops/s
[info] # Warmup Iteration   4: 165319.152 ops/s
[info] # Warmup Iteration   5: 165385.559 ops/s
[info] Iteration   1: 162053.270 ops/s
[info]                  ·gc.alloc.rate:                   1519.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              14755.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13054.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 167446.339 ops/s
[info]                  ·gc.alloc.rate:                   1577.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              14820.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18964.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 168529.513 ops/s
[info]                  ·gc.alloc.rate:                   1588.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              14831.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12553.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 168146.430 ops/s
[info]                  ·gc.alloc.rate:                   1584.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              14833.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12562.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 168079.787 ops/s
[info]                  ·gc.alloc.rate:                   1571.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              14710.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12562.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   166851.068 ±(99.9%) 10435.549 ops/s [Average]
[info]   (min, avg, max) = (162053.270, 166851.068, 168529.513), stdev = 2710.079
[info]   CI (99.9%): [156415.520, 177286.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1568.272 ±(99.9%) 108.326 MB/sec [Average]
[info]   (min, avg, max) = (1519.461, 1568.272, 1588.774), stdev = 28.132
[info]   CI (99.9%): [1459.946, 1676.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14790.413 ±(99.9%) 211.116 B/op [Average]
[info]   (min, avg, max) = (14710.811, 14790.413, 14833.597), stdev = 54.826
[info]   CI (99.9%): [14579.297, 15001.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.200 ±(99.9%) 1161.920 MB/sec [Average]
[info]   (min, avg, max) = (1341.665, 1478.200, 2017.976), stdev = 301.747
[info]   CI (99.9%): [316.279, 2640.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13939.457 ±(99.9%) 10847.295 B/op [Average]
[info]   (min, avg, max) = (12553.252, 13939.457, 18964.048), stdev = 2817.008
[info]   CI (99.9%): [3092.162, 24786.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 4.623 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.654, 2.783), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.138 ±(99.9%) 43.455 B/op [Average]
[info]   (min, avg, max) = (0.070, 6.138, 26.149), stdev = 11.285
[info]   CI (99.9%): [≈ 0, 49.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.49% complete, ETA 01:44:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1462.281 ops/s
[info] # Warmup Iteration   2: 45063.597 ops/s
[info] # Warmup Iteration   3: 55039.936 ops/s
[info] # Warmup Iteration   4: 55157.726 ops/s
[info] # Warmup Iteration   5: 54520.961 ops/s
[info] Iteration   1: 54691.399 ops/s
[info]                  ·gc.alloc.rate:               2936.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          84497.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77287.506 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 55616.375 ops/s
[info]                  ·gc.alloc.rate:                   2959.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              83735.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95246.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.356 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 55800.744 ops/s
[info]                  ·gc.alloc.rate:                   2992.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              84411.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76147.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 55107.331 ops/s
[info]                  ·gc.alloc.rate:                   2958.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              84482.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77277.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.756 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 55650.913 ops/s
[info]                  ·gc.alloc.rate:               3026.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          85556.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95830.299 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   55373.352 ±(99.9%) 1779.847 ops/s [Average]
[info]   (min, avg, max) = (54691.399, 55373.352, 55800.744), stdev = 462.221
[info]   CI (99.9%): [53593.506, 57153.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2974.738 ±(99.9%) 135.980 MB/sec [Average]
[info]   (min, avg, max) = (2936.544, 2974.738, 3026.578), stdev = 35.314
[info]   CI (99.9%): [2838.757, 3110.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84536.704 ±(99.9%) 2512.143 B/op [Average]
[info]   (min, avg, max) = (83735.056, 84536.704, 85556.368), stdev = 652.396
[info]   CI (99.9%): [82024.560, 87048.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2969.615 ±(99.9%) 1436.478 MB/sec [Average]
[info]   (min, avg, max) = (2685.961, 2969.615, 3390.021), stdev = 373.049
[info]   CI (99.9%): [1533.137, 4406.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84357.894 ±(99.9%) 39349.153 B/op [Average]
[info]   (min, avg, max) = (76147.686, 84357.894, 95830.299), stdev = 10218.850
[info]   CI (99.9%): [45008.741, 123707.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.167), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.540 ±(99.9%) 7.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.540, 4.756), stdev = 2.041
[info]   CI (99.9%): [≈ 0, 9.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21.69% complete, ETA 01:44:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26131.404 ops/s
[info] # Warmup Iteration   2: 103097.158 ops/s
[info] # Warmup Iteration   3: 111051.590 ops/s
[info] # Warmup Iteration   4: 112385.306 ops/s
[info] # Warmup Iteration   5: 111985.680 ops/s
[info] Iteration   1: 110675.847 ops/s
[info]                  ·gc.alloc.rate:                   2119.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              30133.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28683.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 111163.821 ops/s
[info]                  ·gc.alloc.rate:                   2143.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              30338.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28480.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 111624.010 ops/s
[info]                  ·gc.alloc.rate:                   2123.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              29940.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28345.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 109416.361 ops/s
[info]                  ·gc.alloc.rate:                   2109.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              30342.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28921.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 111365.040 ops/s
[info]                  ·gc.alloc.rate:               2161.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          30524.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37872.371 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   110849.016 ±(99.9%) 3361.596 ops/s [Average]
[info]   (min, avg, max) = (109416.361, 110849.016, 111624.010), stdev = 872.996
[info]   CI (99.9%): [107487.420, 114210.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2131.371 ±(99.9%) 79.714 MB/sec [Average]
[info]   (min, avg, max) = (2109.615, 2131.371, 2161.327), stdev = 20.701
[info]   CI (99.9%): [2051.657, 2211.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30255.755 ±(99.9%) 862.951 B/op [Average]
[info]   (min, avg, max) = (29940.556, 30255.755, 30524.602), stdev = 224.106
[info]   CI (99.9%): [29392.804, 31118.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2146.412 ±(99.9%) 1152.065 MB/sec [Average]
[info]   (min, avg, max) = (2010.638, 2146.412, 2681.594), stdev = 299.188
[info]   CI (99.9%): [994.346, 3298.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30460.759 ±(99.9%) 15975.979 B/op [Average]
[info]   (min, avg, max) = (28345.730, 30460.759, 37872.371), stdev = 4148.911
[info]   CI (99.9%): [14484.779, 46436.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.373), stdev = 1.477
[info]   CI (99.9%): [≈ 0, 6.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10.416 ±(99.9%) 80.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.416, 47.956), stdev = 21.003
[info]   CI (99.9%): [≈ 0, 91.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:44:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67966.029 ops/s
[info] # Warmup Iteration   2: 161700.849 ops/s
[info] # Warmup Iteration   3: 180061.727 ops/s
[info] # Warmup Iteration   4: 182741.389 ops/s
[info] # Warmup Iteration   5: 182739.498 ops/s
[info] Iteration   1: 182751.410 ops/s
[info]                  ·gc.alloc.rate:               1201.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          10348.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5770.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 182521.490 ops/s
[info]                  ·gc.alloc.rate:                   1215.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              10479.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11562.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 182427.297 ops/s
[info]                  ·gc.alloc.rate:               1223.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          10552.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11576.776 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 178651.081 ops/s
[info]                  ·gc.alloc.rate:                   1198.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              10559.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11828.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 179692.358 ops/s
[info]                  ·gc.alloc.rate:                   1191.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              10433.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5881.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   181208.727 ±(99.9%) 7313.452 ops/s [Average]
[info]   (min, avg, max) = (178651.081, 181208.727, 182751.410), stdev = 1899.280
[info]   CI (99.9%): [173895.276, 188522.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1206.108 ±(99.9%) 49.824 MB/sec [Average]
[info]   (min, avg, max) = (1191.307, 1206.108, 1223.216), stdev = 12.939
[info]   CI (99.9%): [1156.285, 1255.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10474.466 ±(99.9%) 339.001 B/op [Average]
[info]   (min, avg, max) = (10348.064, 10474.466, 10559.329), stdev = 88.038
[info]   CI (99.9%): [10135.465, 10813.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.526 ±(99.9%) 1415.414 MB/sec [Average]
[info]   (min, avg, max) = (670.173, 1073.526, 1342.975), stdev = 367.579
[info]   CI (99.9%): [≈ 0, 2488.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9323.864 ±(99.9%) 12302.802 B/op [Average]
[info]   (min, avg, max) = (5770.957, 9323.864, 11828.273), stdev = 3194.999
[info]   CI (99.9%): [≈ 0, 21626.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.040), stdev = 1.320
[info]   CI (99.9%): [≈ 0, 5.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.119 ±(99.9%) 44.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.119, 26.776), stdev = 11.627
[info]   CI (99.9%): [≈ 0, 50.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.09% complete, ETA 01:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222436.106 ops/s
[info] # Warmup Iteration   2: 506815.153 ops/s
[info] # Warmup Iteration   3: 530847.045 ops/s
[info] # Warmup Iteration   4: 534753.638 ops/s
[info] # Warmup Iteration   5: 533422.839 ops/s
[info] Iteration   1: 535498.625 ops/s
[info]                  ·gc.alloc.rate:      554.717 MB/sec
[info]                  ·gc.alloc.rate.norm: 1629.789 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 521086.831 ops/s
[info]                  ·gc.alloc.rate:               537.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          1623.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2013.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 522953.240 ops/s
[info]                  ·gc.alloc.rate:                   544.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1638.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2006.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 524757.937 ops/s
[info]                  ·gc.alloc.rate:               551.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          1655.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2002.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 526899.943 ops/s
[info]                  ·gc.alloc.rate:                   553.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1653.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1994.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   526239.315 ±(99.9%) 21586.982 ops/s [Average]
[info]   (min, avg, max) = (521086.831, 526239.315, 535498.625), stdev = 5606.071
[info]   CI (99.9%): [504652.333, 547826.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   548.481 ±(99.9%) 27.991 MB/sec [Average]
[info]   (min, avg, max) = (537.683, 548.481, 554.717), stdev = 7.269
[info]   CI (99.9%): [520.490, 576.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1640.107 ±(99.9%) 54.429 B/op [Average]
[info]   (min, avg, max) = (1623.623, 1640.107, 1655.438), stdev = 14.135
[info]   CI (99.9%): [1585.677, 1694.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.912 ±(99.9%) 1149.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.912, 667.865), stdev = 298.466
[info]   CI (99.9%): [≈ 0, 1683.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1603.681 ±(99.9%) 3452.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1603.681, 2013.950), stdev = 896.512
[info]   CI (99.9%): [≈ 0, 5055.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.29% complete, ETA 01:43:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326584.799 ops/s
[info] # Warmup Iteration   2: 716113.793 ops/s
[info] # Warmup Iteration   3: 654834.784 ops/s
[info] # Warmup Iteration   4: 723553.247 ops/s
[info] # Warmup Iteration   5: 720583.232 ops/s
[info] Iteration   1: 720541.008 ops/s
[info]                  ·gc.alloc.rate:               571.834 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1465.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 723193.861 ops/s
[info]                  ·gc.alloc.rate:      555.162 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 721976.162 ops/s
[info]                  ·gc.alloc.rate:               577.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          1259.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1462.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 716997.517 ops/s
[info]                  ·gc.alloc.rate:                   573.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1258.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1473.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 707447.300 ops/s
[info]                  ·gc.alloc.rate:               561.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1493.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   718031.170 ±(99.9%) 24475.255 ops/s [Average]
[info]   (min, avg, max) = (707447.300, 718031.170, 723193.861), stdev = 6356.146
[info]   CI (99.9%): [693555.915, 742506.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   567.925 ±(99.9%) 35.402 MB/sec [Average]
[info]   (min, avg, max) = (555.162, 567.925, 577.661), stdev = 9.194
[info]   CI (99.9%): [532.523, 603.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1244.727 ±(99.9%) 81.073 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1244.727, 1259.095), stdev = 21.054
[info]   CI (99.9%): [1163.655, 1325.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.993 ±(99.9%) 1155.918 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.993, 671.572), stdev = 300.188
[info]   CI (99.9%): [≈ 0, 1692.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1179.085 ±(99.9%) 2538.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1179.085, 1493.858), stdev = 659.243
[info]   CI (99.9%): [≈ 0, 3717.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.49% complete, ETA 01:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472854.285 ops/s
[info] # Warmup Iteration   2: 766744.556 ops/s
[info] # Warmup Iteration   3: 775289.428 ops/s
[info] # Warmup Iteration   4: 777750.636 ops/s
[info] # Warmup Iteration   5: 777050.266 ops/s
[info] Iteration   1: 778812.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 779456.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 777930.837 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 777348.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 777971.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   778304.110 ±(99.9%) 3191.921 ops/s [Average]
[info]   (min, avg, max) = (777348.999, 778304.110, 779456.217), stdev = 828.932
[info]   CI (99.9%): [775112.189, 781496.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.69% complete, ETA 01:43:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51898.883 ops/s
[info] # Warmup Iteration   2: 304871.564 ops/s
[info] # Warmup Iteration   3: 327300.536 ops/s
[info] # Warmup Iteration   4: 331480.046 ops/s
[info] # Warmup Iteration   5: 331535.517 ops/s
[info] Iteration   1: 327268.989 ops/s
[info]                  ·gc.alloc.rate:               926.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          4453.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3204.955 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 327604.203 ops/s
[info]                  ·gc.alloc.rate:                   937.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              4499.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6385.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 319315.288 ops/s
[info]                  ·gc.alloc.rate:               896.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          4417.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3287.973 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 330070.484 ops/s
[info]                  ·gc.alloc.rate:               923.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          4402.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3184.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 328681.440 ops/s
[info]                  ·gc.alloc.rate:                   934.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              4475.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6398.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   326588.081 ±(99.9%) 16211.500 ops/s [Average]
[info]   (min, avg, max) = (319315.288, 326588.081, 330070.484), stdev = 4210.075
[info]   CI (99.9%): [310376.580, 342799.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   923.674 ±(99.9%) 63.390 MB/sec [Average]
[info]   (min, avg, max) = (896.235, 923.674, 937.800), stdev = 16.462
[info]   CI (99.9%): [860.284, 987.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4449.701 ±(99.9%) 155.562 B/op [Average]
[info]   (min, avg, max) = (4402.022, 4449.701, 4499.517), stdev = 40.399
[info]   CI (99.9%): [4294.140, 4605.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   933.754 ±(99.9%) 1405.748 MB/sec [Average]
[info]   (min, avg, max) = (666.481, 933.754, 1336.341), stdev = 365.068
[info]   CI (99.9%): [≈ 0, 2339.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4492.254 ±(99.9%) 6680.003 B/op [Average]
[info]   (min, avg, max) = (3184.096, 4492.254, 6398.268), stdev = 1734.775
[info]   CI (99.9%): [≈ 0, 11172.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.100), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20047.702 ops/s
[info] # Warmup Iteration   2: 39152.749 ops/s
[info] # Warmup Iteration   3: 40348.856 ops/s
[info] # Warmup Iteration   4: 41479.936 ops/s
[info] # Warmup Iteration   5: 42137.165 ops/s
[info] Iteration   1: 41853.860 ops/s
[info]                  ·gc.alloc.rate:                   1084.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              40778.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50535.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 42091.997 ops/s
[info]                  ·gc.alloc.rate:               1068.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          39930.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25130.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 41928.120 ops/s
[info]                  ·gc.alloc.rate:                   1079.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              40507.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50481.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 42099.893 ops/s
[info]                  ·gc.alloc.rate:               1068.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          39919.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25150.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 41867.971 ops/s
[info]                  ·gc.alloc.rate:                   1077.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              40501.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50592.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   41968.368 ±(99.9%) 461.252 ops/s [Average]
[info]   (min, avg, max) = (41853.860, 41968.368, 42099.893), stdev = 119.786
[info]   CI (99.9%): [41507.116, 42429.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1075.452 ±(99.9%) 27.957 MB/sec [Average]
[info]   (min, avg, max) = (1068.001, 1075.452, 1084.447), stdev = 7.260
[info]   CI (99.9%): [1047.495, 1103.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   40327.657 ±(99.9%) 1478.553 B/op [Average]
[info]   (min, avg, max) = (39919.623, 40327.657, 40778.293), stdev = 383.975
[info]   CI (99.9%): [38849.105, 41806.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075.984 ±(99.9%) 1418.282 MB/sec [Average]
[info]   (min, avg, max) = (672.143, 1075.984, 1346.008), stdev = 368.323
[info]   CI (99.9%): [≈ 0, 2494.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40377.842 ±(99.9%) 53561.900 B/op [Average]
[info]   (min, avg, max) = (25130.358, 40377.842, 50592.158), stdev = 13909.855
[info]   CI (99.9%): [≈ 0, 93939.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.512 ±(99.9%) 4.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.498), stdev = 1.110
[info]   CI (99.9%): [≈ 0, 4.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   19.249 ±(99.9%) 160.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.249, 93.898), stdev = 41.735
[info]   CI (99.9%): [≈ 0, 179.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:42:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12822.519 ops/s
[info] # Warmup Iteration   2: 34165.581 ops/s
[info] # Warmup Iteration   3: 38427.768 ops/s
[info] # Warmup Iteration   4: 37670.115 ops/s
[info] # Warmup Iteration   5: 38480.418 ops/s
[info] Iteration   1: 38578.448 ops/s
[info]                  ·gc.alloc.rate:                   1951.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              79594.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82270.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 38550.016 ops/s
[info]                  ·gc.alloc.rate:                   1957.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              79913.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82223.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38373.554 ops/s
[info]                  ·gc.alloc.rate:                   1977.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              81096.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82422.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38464.330 ops/s
[info]                  ·gc.alloc.rate:                   1953.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              79939.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82227.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38622.676 ops/s
[info]                  ·gc.alloc.rate:               1962.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          79964.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54638.214 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38517.805 ±(99.9%) 382.074 ops/s [Average]
[info]   (min, avg, max) = (38373.554, 38517.805, 38622.676), stdev = 99.223
[info]   CI (99.9%): [38135.731, 38899.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1960.605 ±(99.9%) 39.695 MB/sec [Average]
[info]   (min, avg, max) = (1951.719, 1960.605, 1977.499), stdev = 10.309
[info]   CI (99.9%): [1920.910, 2000.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80101.898 ±(99.9%) 2217.949 B/op [Average]
[info]   (min, avg, max) = (79594.934, 80101.898, 81096.613), stdev = 575.994
[info]   CI (99.9%): [77883.949, 82319.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.379 ±(99.9%) 1156.903 MB/sec [Average]
[info]   (min, avg, max) = (1340.959, 1878.379, 2017.320), stdev = 300.444
[info]   CI (99.9%): [721.476, 3035.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76756.529 ±(99.9%) 47612.362 B/op [Average]
[info]   (min, avg, max) = (54638.214, 76756.529, 82422.849), stdev = 12364.779
[info]   CI (99.9%): [29144.166, 124368.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.874), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 5.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31.267 ±(99.9%) 188.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.267, 117.189), stdev = 48.890
[info]   CI (99.9%): [≈ 0, 219.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.828 ops/s
[info] # Warmup Iteration   2: 277567.458 ops/s
[info] # Warmup Iteration   3: 289919.572 ops/s
[info] # Warmup Iteration   4: 288263.756 ops/s
[info] # Warmup Iteration   5: 299545.428 ops/s
[info] Iteration   1: 295888.531 ops/s
[info]                  ·gc.alloc.rate:                   317.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              1686.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2721.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 295389.513 ops/s
[info]                  ·gc.alloc.rate:               322.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          1719.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2725.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 287721.826 ops/s
[info]                  ·gc.alloc.rate:      299.436 MB/sec
[info]                  ·gc.alloc.rate.norm: 1637.784 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 287414.591 ops/s
[info]                  ·gc.alloc.rate:               318.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          1743.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3647.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 287896.856 ops/s
[info]                  ·gc.alloc.rate:      298.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   290862.263 ±(99.9%) 16817.859 ops/s [Average]
[info]   (min, avg, max) = (287414.591, 290862.263, 295888.531), stdev = 4367.544
[info]   CI (99.9%): [274044.405, 307680.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   311.271 ±(99.9%) 43.755 MB/sec [Average]
[info]   (min, avg, max) = (298.645, 311.271, 322.735), stdev = 11.363
[info]   CI (99.9%): [267.517, 355.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1683.690 ±(99.9%) 188.685 B/op [Average]
[info]   (min, avg, max) = (1632.002, 1683.690, 1743.457), stdev = 49.001
[info]   CI (99.9%): [1495.005, 1872.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.951 ±(99.9%) 1212.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.951, 666.351), stdev = 314.899
[info]   CI (99.9%): [≈ 0, 1550.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1818.919 ±(99.9%) 6556.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1818.919, 3647.563), stdev = 1702.753
[info]   CI (99.9%): [≈ 0, 8375.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.260), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.49% complete, ETA 01:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18079.321 ops/s
[info] # Warmup Iteration   2: 106403.661 ops/s
[info] # Warmup Iteration   3: 114671.918 ops/s
[info] # Warmup Iteration   4: 113495.723 ops/s
[info] # Warmup Iteration   5: 113492.674 ops/s
[info] Iteration   1: 114255.060 ops/s
[info]                  ·gc.alloc.rate:               1363.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          18777.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18314.296 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 117301.238 ops/s
[info]                  ·gc.alloc.rate:                   1405.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              18858.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17856.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 117112.669 ops/s
[info]                  ·gc.alloc.rate:                   1404.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              18866.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17912.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 117288.496 ops/s
[info]                  ·gc.alloc.rate:               1406.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          18876.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17904.130 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 117380.287 ops/s
[info]                  ·gc.alloc.rate:               1418.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          19018.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17924.605 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   116667.550 ±(99.9%) 5206.694 ops/s [Average]
[info]   (min, avg, max) = (114255.060, 116667.550, 117380.287), stdev = 1352.162
[info]   CI (99.9%): [111460.856, 121874.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1399.646 ±(99.9%) 81.254 MB/sec [Average]
[info]   (min, avg, max) = (1363.291, 1399.646, 1418.418), stdev = 21.102
[info]   CI (99.9%): [1318.392, 1480.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18879.718 ±(99.9%) 335.929 B/op [Average]
[info]   (min, avg, max) = (18777.524, 18879.718, 19018.952), stdev = 87.240
[info]   CI (99.9%): [18543.789, 19215.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1332.954 ±(99.9%) 10.850 MB/sec [Average]
[info]   (min, avg, max) = (1329.659, 1332.954, 1336.802), stdev = 2.818
[info]   CI (99.9%): [1322.104, 1343.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17982.357 ±(99.9%) 721.385 B/op [Average]
[info]   (min, avg, max) = (17856.545, 17982.357, 18314.296), stdev = 187.341
[info]   CI (99.9%): [17260.973, 18703.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.280), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.69% complete, ETA 01:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229030.903 ops/s
[info] # Warmup Iteration   2: 511884.656 ops/s
[info] # Warmup Iteration   3: 524205.195 ops/s
[info] # Warmup Iteration   4: 526599.025 ops/s
[info] # Warmup Iteration   5: 524231.816 ops/s
[info] Iteration   1: 528540.734 ops/s
[info]                  ·gc.alloc.rate:               359.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          1070.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1523.436 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 542794.209 ops/s
[info]                  ·gc.alloc.rate:      367.858 MB/sec
[info]                  ·gc.alloc.rate.norm: 1066.563 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 537144.612 ops/s
[info]                  ·gc.alloc.rate:               363.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1498.992 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 540376.813 ops/s
[info]                  ·gc.alloc.rate:      351.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 541701.093 ops/s
[info]                  ·gc.alloc.rate:               370.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1948.940 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   538111.493 ±(99.9%) 22160.365 ops/s [Average]
[info]   (min, avg, max) = (528540.734, 538111.493, 542794.209), stdev = 5754.977
[info]   CI (99.9%): [515951.127, 560271.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   362.702 ±(99.9%) 29.022 MB/sec [Average]
[info]   (min, avg, max) = (351.604, 362.702, 370.879), stdev = 7.537
[info]   CI (99.9%): [333.680, 391.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1060.788 ±(99.9%) 81.277 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1060.788, 1077.504), stdev = 21.107
[info]   CI (99.9%): [979.511, 1142.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.825 ±(99.9%) 1217.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.825, 670.828), stdev = 316.056
[info]   CI (99.9%): [≈ 0, 1555.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   994.273 ±(99.9%) 3562.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 994.273, 1948.940), stdev = 925.108
[info]   CI (99.9%): [≈ 0, 4556.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.90% complete, ETA 01:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4572.965 ops/s
[info] # Warmup Iteration   2: 32037.595 ops/s
[info] # Warmup Iteration   3: 41620.845 ops/s
[info] # Warmup Iteration   4: 41626.882 ops/s
[info] # Warmup Iteration   5: 41634.549 ops/s
[info] Iteration   1: 41315.971 ops/s
[info]                  ·gc.alloc.rate:                   2053.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              78238.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76582.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 41468.277 ops/s
[info]                  ·gc.alloc.rate:                   2046.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              77677.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76144.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 41862.998 ops/s
[info]                  ·gc.alloc.rate:               2077.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          78111.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75205.964 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 42571.943 ops/s
[info]                  ·gc.alloc.rate:               2113.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          78101.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73948.469 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 42586.514 ops/s
[info]                  ·gc.alloc.rate:               2127.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          78600.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74033.202 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   41961.140 ±(99.9%) 2304.734 ops/s [Average]
[info]   (min, avg, max) = (41315.971, 41961.140, 42586.514), stdev = 598.532
[info]   CI (99.9%): [39656.407, 44265.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2083.787 ±(99.9%) 136.432 MB/sec [Average]
[info]   (min, avg, max) = (2046.893, 2083.787, 2127.038), stdev = 35.431
[info]   CI (99.9%): [1947.355, 2220.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78145.928 ±(99.9%) 1273.207 B/op [Average]
[info]   (min, avg, max) = (77677.939, 78145.928, 78600.456), stdev = 330.648
[info]   CI (99.9%): [76872.721, 79419.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.358 ±(99.9%) 16.146 MB/sec [Average]
[info]   (min, avg, max) = (2000.511, 2004.358, 2010.511), stdev = 4.193
[info]   CI (99.9%): [1988.212, 2020.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75182.797 ±(99.9%) 4607.965 B/op [Average]
[info]   (min, avg, max) = (73948.469, 75182.797, 76582.106), stdev = 1196.674
[info]   CI (99.9%): [70574.832, 79790.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.903 ±(99.9%) 5.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.903, 3.518), stdev = 1.524
[info]   CI (99.9%): [≈ 0, 6.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.387 ±(99.9%) 223.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.387, 134.012), stdev = 58.063
[info]   CI (99.9%): [≈ 0, 257.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24.10% complete, ETA 01:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29607.237 ops/s
[info] # Warmup Iteration   2: 83783.639 ops/s
[info] # Warmup Iteration   3: 85240.162 ops/s
[info] # Warmup Iteration   4: 86458.749 ops/s
[info] # Warmup Iteration   5: 86519.902 ops/s
[info] Iteration   1: 86976.419 ops/s
[info]                  ·gc.alloc.rate:                   1527.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              27631.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24323.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 87739.838 ops/s
[info]                  ·gc.alloc.rate:               1538.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          27598.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24135.959 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 87794.081 ops/s
[info]                  ·gc.alloc.rate:                   1540.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              27616.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24121.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 88117.702 ops/s
[info]                  ·gc.alloc.rate:                   1558.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              27840.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35953.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 87782.275 ops/s
[info]                  ·gc.alloc.rate:               1540.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          27621.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24028.324 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   87682.063 ±(99.9%) 1626.462 ops/s [Average]
[info]   (min, avg, max) = (86976.419, 87682.063, 88117.702), stdev = 422.387
[info]   CI (99.9%): [86055.601, 89308.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1541.210 ±(99.9%) 43.794 MB/sec [Average]
[info]   (min, avg, max) = (1527.112, 1541.210, 1558.857), stdev = 11.373
[info]   CI (99.9%): [1497.416, 1585.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27661.716 ±(99.9%) 386.750 B/op [Average]
[info]   (min, avg, max) = (27598.622, 27661.716, 27840.095), stdev = 100.438
[info]   CI (99.9%): [27274.967, 28048.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477.809 ±(99.9%) 1152.398 MB/sec [Average]
[info]   (min, avg, max) = (1340.345, 1477.809, 2013.152), stdev = 299.274
[info]   CI (99.9%): [325.411, 2630.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26512.542 ±(99.9%) 20326.547 B/op [Average]
[info]   (min, avg, max) = (24028.324, 26512.542, 35953.489), stdev = 5278.740
[info]   CI (99.9%): [6185.994, 46839.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.435), stdev = 1.532
[info]   CI (99.9%): [≈ 0, 6.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12.464 ±(99.9%) 105.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.464, 61.572), stdev = 27.453
[info]   CI (99.9%): [≈ 0, 118.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.30% complete, ETA 01:41:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28951.567 ops/s
[info] # Warmup Iteration   2: 67719.655 ops/s
[info] # Warmup Iteration   3: 75201.105 ops/s
[info] # Warmup Iteration   4: 75362.442 ops/s
[info] # Warmup Iteration   5: 75357.773 ops/s
[info] Iteration   1: 75396.507 ops/s
[info]                  ·gc.alloc.rate:               622.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          12983.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13967.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 75496.604 ops/s
[info]                  ·gc.alloc.rate:               613.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          12779.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13947.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 75558.806 ops/s
[info]                  ·gc.alloc.rate:               622.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          12957.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13944.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 75652.395 ops/s
[info]                  ·gc.alloc.rate:               618.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          12873.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13927.244 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 75715.654 ops/s
[info]                  ·gc.alloc.rate:      600.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 12472.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   75563.993 ±(99.9%) 484.920 ops/s [Average]
[info]   (min, avg, max) = (75396.507, 75563.993, 75715.654), stdev = 125.932
[info]   CI (99.9%): [75079.074, 76048.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   615.255 ±(99.9%) 35.423 MB/sec [Average]
[info]   (min, avg, max) = (600.160, 615.255, 622.109), stdev = 9.199
[info]   CI (99.9%): [579.832, 650.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12813.188 ±(99.9%) 795.907 B/op [Average]
[info]   (min, avg, max) = (12472.006, 12813.188, 12983.617), stdev = 206.694
[info]   CI (99.9%): [12017.282, 13609.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.461 ±(99.9%) 1152.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.461, 669.504), stdev = 299.332
[info]   CI (99.9%): [≈ 0, 1688.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11157.211 ±(99.9%) 24016.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11157.211, 13967.016), stdev = 6237.087
[info]   CI (99.9%): [≈ 0, 35174.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.50% complete, ETA 01:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.700 ops/s
[info] # Warmup Iteration   2: 80872.467 ops/s
[info] # Warmup Iteration   3: 81119.241 ops/s
[info] # Warmup Iteration   4: 86723.916 ops/s
[info] # Warmup Iteration   5: 86775.427 ops/s
[info] Iteration   1: 86915.874 ops/s
[info]                  ·gc.alloc.rate:               507.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          9184.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12062.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 87265.775 ops/s
[info]                  ·gc.alloc.rate:      493.403 MB/sec
[info]                  ·gc.alloc.rate.norm: 8897.257 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 86890.819 ops/s
[info]                  ·gc.alloc.rate:                   511.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              9257.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12066.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 86802.873 ops/s
[info]                  ·gc.alloc.rate:                   512.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              9298.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12078.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 86781.612 ops/s
[info]                  ·gc.alloc.rate:                   516.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              9373.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12081.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   86931.391 ±(99.9%) 752.232 ops/s [Average]
[info]   (min, avg, max) = (86781.612, 86931.391, 87265.775), stdev = 195.352
[info]   CI (99.9%): [86179.159, 87683.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   508.333 ±(99.9%) 34.817 MB/sec [Average]
[info]   (min, avg, max) = (493.403, 508.333, 516.945), stdev = 9.042
[info]   CI (99.9%): [473.516, 543.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9202.277 ±(99.9%) 707.762 B/op [Average]
[info]   (min, avg, max) = (8897.257, 9202.277, 9373.738), stdev = 183.804
[info]   CI (99.9%): [8494.515, 9910.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.993 ±(99.9%) 1147.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.993, 666.260), stdev = 297.952
[info]   CI (99.9%): [≈ 0, 1680.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9657.679 ±(99.9%) 20788.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9657.679, 12081.065), stdev = 5398.812
[info]   CI (99.9%): [≈ 0, 30446.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.341), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.70% complete, ETA 01:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31211.482 ops/s
[info] # Warmup Iteration   2: 71328.074 ops/s
[info] # Warmup Iteration   3: 74936.634 ops/s
[info] # Warmup Iteration   4: 76245.322 ops/s
[info] # Warmup Iteration   5: 76079.731 ops/s
[info] Iteration   1: 75296.403 ops/s
[info]                  ·gc.alloc.rate:               470.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          9823.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10692.226 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 78253.637 ops/s
[info]                  ·gc.alloc.rate:      461.543 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 77536.748 ops/s
[info]                  ·gc.alloc.rate:               482.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          9796.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13547.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 77813.926 ops/s
[info]                  ·gc.alloc.rate:                   481.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              9741.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13499.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.842 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 77968.767 ops/s
[info]                  ·gc.alloc.rate:      472.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 9545.115 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   77373.896 ±(99.9%) 4582.080 ops/s [Average]
[info]   (min, avg, max) = (75296.403, 77373.896, 78253.637), stdev = 1189.952
[info]   CI (99.9%): [72791.817, 81955.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.792 ±(99.9%) 33.595 MB/sec [Average]
[info]   (min, avg, max) = (461.543, 473.792, 482.683), stdev = 8.725
[info]   CI (99.9%): [440.197, 507.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9637.303 ±(99.9%) 876.087 B/op [Average]
[info]   (min, avg, max) = (9280.006, 9637.303, 9823.835), stdev = 227.517
[info]   CI (99.9%): [8761.216, 10513.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.350 ±(99.9%) 1321.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.350, 667.509), stdev = 343.112
[info]   CI (99.9%): [≈ 0, 1690.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7547.925 ±(99.9%) 26902.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7547.925, 13547.633), stdev = 6986.592
[info]   CI (99.9%): [≈ 0, 34450.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.168 ±(99.9%) 1.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.842), stdev = 0.377
[info]   CI (99.9%): [≈ 0, 1.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.90% complete, ETA 01:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48988.362 ops/s
[info] # Warmup Iteration   2: 81453.119 ops/s
[info] # Warmup Iteration   3: 85643.353 ops/s
[info] # Warmup Iteration   4: 86961.459 ops/s
[info] # Warmup Iteration   5: 86997.252 ops/s
[info] Iteration   1: 87021.936 ops/s
[info]                  ·gc.alloc.rate:               504.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          9118.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9252.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 86891.696 ops/s
[info]                  ·gc.alloc.rate:               515.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          9341.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12143.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 85961.778 ops/s
[info]                  ·gc.alloc.rate:                   500.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              9159.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12275.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 87022.626 ops/s
[info]                  ·gc.alloc.rate:      491.939 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86677.147 ops/s
[info]                  ·gc.alloc.rate:                   513.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              9330.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12185.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   86715.037 ±(99.9%) 1710.008 ops/s [Average]
[info]   (min, avg, max) = (85961.778, 86715.037, 87022.626), stdev = 444.084
[info]   CI (99.9%): [85005.029, 88425.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   505.262 ±(99.9%) 37.884 MB/sec [Average]
[info]   (min, avg, max) = (491.939, 505.262, 515.766), stdev = 9.838
[info]   CI (99.9%): [467.379, 543.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9169.289 ±(99.9%) 702.126 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9169.289, 9341.165), stdev = 182.340
[info]   CI (99.9%): [8467.163, 9871.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.799 ±(99.9%) 1118.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.799, 671.185), stdev = 290.487
[info]   CI (99.9%): [≈ 0, 1623.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9171.504 ±(99.9%) 20346.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9171.504, 12275.423), stdev = 5283.893
[info]   CI (99.9%): [≈ 0, 29517.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 0.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.381), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.10% complete, ETA 01:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41418.779 ops/s
[info] # Warmup Iteration   2: 84128.921 ops/s
[info] # Warmup Iteration   3: 86666.087 ops/s
[info] # Warmup Iteration   4: 86895.062 ops/s
[info] # Warmup Iteration   5: 87450.807 ops/s
[info] Iteration   1: 87555.490 ops/s
[info]                  ·gc.alloc.rate:                   438.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              7886.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9196.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 87847.405 ops/s
[info]                  ·gc.alloc.rate:      427.369 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 84193.402 ops/s
[info]                  ·gc.alloc.rate:               436.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          8165.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12538.932 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 87947.705 ops/s
[info]                  ·gc.alloc.rate:      427.978 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86802.445 ops/s
[info]                  ·gc.alloc.rate:               447.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          8119.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12162.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   86869.289 ±(99.9%) 6013.482 ops/s [Average]
[info]   (min, avg, max) = (84193.402, 86869.289, 87947.705), stdev = 1561.682
[info]   CI (99.9%): [80855.808, 92882.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   435.766 ±(99.9%) 32.626 MB/sec [Average]
[info]   (min, avg, max) = (427.369, 435.766, 447.837), stdev = 8.473
[info]   CI (99.9%): [403.140, 468.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7896.740 ±(99.9%) 939.145 B/op [Average]
[info]   (min, avg, max) = (7656.006, 7896.740, 8165.929), stdev = 243.893
[info]   CI (99.9%): [6957.595, 8835.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.665 ±(99.9%) 1326.762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.665, 670.872), stdev = 344.556
[info]   CI (99.9%): [≈ 0, 1697.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6779.553 ±(99.9%) 24347.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6779.553, 12538.932), stdev = 6322.840
[info]   CI (99.9%): [≈ 0, 31126.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.374), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.30% complete, ETA 01:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1627.327 ops/s
[info] # Warmup Iteration   2: 8000.135 ops/s
[info] # Warmup Iteration   3: 9877.225 ops/s
[info] # Warmup Iteration   4: 9880.212 ops/s
[info] # Warmup Iteration   5: 9904.144 ops/s
[info] Iteration   1: 10026.420 ops/s
[info]                  ·gc.alloc.rate:                   1640.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              257461.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210572.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9904.345 ops/s
[info]                  ·gc.alloc.rate:                   1634.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              259745.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320065.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 499.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9944.607 ops/s
[info]                  ·gc.alloc.rate:                   1637.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              259121.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212308.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9904.059 ops/s
[info]                  ·gc.alloc.rate:                   1632.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              259465.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212742.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10156.397 ops/s
[info]                  ·gc.alloc.rate:               1673.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          259166.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310887.972 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9987.166 ±(99.9%) 411.845 ops/s [Average]
[info]   (min, avg, max) = (9904.059, 9987.166, 10156.397), stdev = 106.955
[info]   CI (99.9%): [9575.321, 10399.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1643.750 ±(99.9%) 64.065 MB/sec [Average]
[info]   (min, avg, max) = (1632.958, 1643.750, 1673.085), stdev = 16.638
[info]   CI (99.9%): [1579.685, 1707.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258992.080 ±(99.9%) 3434.782 B/op [Average]
[info]   (min, avg, max) = (257461.246, 258992.080, 259745.494), stdev = 892.002
[info]   CI (99.9%): [255557.298, 262426.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.731 ±(99.9%) 1413.064 MB/sec [Average]
[info]   (min, avg, max) = (1338.901, 1608.731, 2014.445), stdev = 366.968
[info]   CI (99.9%): [195.667, 3021.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   253315.447 ±(99.9%) 218885.853 B/op [Average]
[info]   (min, avg, max) = (210572.546, 253315.447, 320065.996), stdev = 56843.961
[info]   CI (99.9%): [34429.594, 472201.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.143), stdev = 1.349
[info]   CI (99.9%): [≈ 0, 5.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.904 ±(99.9%) 825.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.904, 499.442), stdev = 214.409
[info]   CI (99.9%): [≈ 0, 952.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.50% complete, ETA 01:39:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1345.443 ops/s
[info] # Warmup Iteration   2: 8320.397 ops/s
[info] # Warmup Iteration   3: 9596.023 ops/s
[info] # Warmup Iteration   4: 9592.591 ops/s
[info] # Warmup Iteration   5: 9616.251 ops/s
[info] Iteration   1: 9626.221 ops/s
[info]                  ·gc.alloc.rate:               1479.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          241901.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218743.757 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 9698.334 ops/s
[info]                  ·gc.alloc.rate:               1497.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          242908.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 217205.801 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 9859.578 ops/s
[info]                  ·gc.alloc.rate:                   1544.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              246578.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320643.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 648.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9823.458 ops/s
[info]                  ·gc.alloc.rate:                   1527.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              244729.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214069.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9919.482 ops/s
[info]                  ·gc.alloc.rate:               1542.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          244703.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211575.202 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9785.415 ±(99.9%) 463.068 ops/s [Average]
[info]   (min, avg, max) = (9626.221, 9785.415, 9919.482), stdev = 120.257
[info]   CI (99.9%): [9322.347, 10248.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1518.366 ±(99.9%) 111.056 MB/sec [Average]
[info]   (min, avg, max) = (1479.668, 1518.366, 1544.995), stdev = 28.841
[info]   CI (99.9%): [1407.310, 1629.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   244164.484 ±(99.9%) 6978.163 B/op [Average]
[info]   (min, avg, max) = (241901.783, 244164.484, 246578.918), stdev = 1812.207
[info]   CI (99.9%): [237186.321, 251142.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.126 ±(99.9%) 1157.974 MB/sec [Average]
[info]   (min, avg, max) = (1333.614, 1471.126, 2009.062), stdev = 300.722
[info]   CI (99.9%): [313.152, 2629.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   236447.449 ±(99.9%) 181553.124 B/op [Average]
[info]   (min, avg, max) = (211575.202, 236447.449, 320643.335), stdev = 47148.770
[info]   CI (99.9%): [54894.324, 418000.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.900 ±(99.9%) 6.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 4.061), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 7.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   143.647 ±(99.9%) 1092.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 143.647, 648.202), stdev = 283.680
[info]   CI (99.9%): [≈ 0, 1235.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.70% complete, ETA 01:39:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88314.410 ops/s
[info] # Warmup Iteration   2: 143750.706 ops/s
[info] # Warmup Iteration   3: 154189.921 ops/s
[info] # Warmup Iteration   4: 155706.876 ops/s
[info] # Warmup Iteration   5: 155844.753 ops/s
[info] Iteration   1: 156466.580 ops/s
[info]                  ·gc.alloc.rate:      407.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 155851.764 ops/s
[info]                  ·gc.alloc.rate:               417.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          4210.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5166.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 154816.118 ops/s
[info]                  ·gc.alloc.rate:               427.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          4347.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6822.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 156502.811 ops/s
[info]                  ·gc.alloc.rate:      407.342 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 155845.250 ops/s
[info]                  ·gc.alloc.rate:               425.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          4297.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6777.397 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   155896.505 ±(99.9%) 2628.933 ops/s [Average]
[info]   (min, avg, max) = (154816.118, 155896.505, 156502.811), stdev = 682.725
[info]   CI (99.9%): [153267.572, 158525.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   416.992 ±(99.9%) 37.395 MB/sec [Average]
[info]   (min, avg, max) = (407.263, 416.992, 427.728), stdev = 9.711
[info]   CI (99.9%): [379.597, 454.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4209.686 ±(99.9%) 441.856 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4209.686, 4347.870), stdev = 114.749
[info]   CI (99.9%): [3767.830, 4651.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.795 ±(99.9%) 1327.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.795, 671.192), stdev = 344.698
[info]   CI (99.9%): [≈ 0, 1698.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3753.201 ±(99.9%) 13440.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3753.201, 6822.346), stdev = 3490.530
[info]   CI (99.9%): [≈ 0, 17193.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25.90% complete, ETA 01:39:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 713.101 ops/s
[info] # Warmup Iteration   2: 4252.897 ops/s
[info] # Warmup Iteration   3: 5344.055 ops/s
[info] # Warmup Iteration   4: 5733.822 ops/s
[info] # Warmup Iteration   5: 5845.780 ops/s
[info] Iteration   1: 5670.043 ops/s
[info]                  ·gc.alloc.rate:                   1480.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              410695.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371031.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 5739.843 ops/s
[info]                  ·gc.alloc.rate:               1491.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          408790.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366782.462 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 5832.447 ops/s
[info]                  ·gc.alloc.rate:                   1512.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              408191.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361178.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1118.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 5853.939 ops/s
[info]                  ·gc.alloc.rate:                   1557.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              418636.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538791.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5857.386 ops/s
[info]                  ·gc.alloc.rate:                   1543.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              414675.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357936.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5790.731 ±(99.9%) 318.310 ops/s [Average]
[info]   (min, avg, max) = (5670.043, 5790.731, 5857.386), stdev = 82.664
[info]   CI (99.9%): [5472.421, 6109.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1516.958 ±(99.9%) 127.210 MB/sec [Average]
[info]   (min, avg, max) = (1480.078, 1516.958, 1557.267), stdev = 33.036
[info]   CI (99.9%): [1389.747, 1644.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   412197.859 ±(99.9%) 16950.866 B/op [Average]
[info]   (min, avg, max) = (408191.606, 412197.859, 418636.545), stdev = 4402.086
[info]   CI (99.9%): [395246.993, 429148.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.030 ±(99.9%) 1149.942 MB/sec [Average]
[info]   (min, avg, max) = (1332.214, 1470.030, 2004.228), stdev = 298.636
[info]   CI (99.9%): [320.088, 2619.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   399144.219 ±(99.9%) 301228.473 B/op [Average]
[info]   (min, avg, max) = (357936.849, 399144.219, 538791.869), stdev = 78228.078
[info]   CI (99.9%): [97915.746, 700372.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.966 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.966, 4.145), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   260.627 ±(99.9%) 1856.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 260.627, 1118.322), stdev = 482.219
[info]   CI (99.9%): [≈ 0, 2117.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:38:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1523.144 ops/s
[info] # Warmup Iteration   2: 7672.082 ops/s
[info] # Warmup Iteration   3: 9808.903 ops/s
[info] # Warmup Iteration   4: 10151.063 ops/s
[info] # Warmup Iteration   5: 10213.075 ops/s
[info] Iteration   1: 9907.380 ops/s
[info]                  ·gc.alloc.rate:               1596.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          253538.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320392.344 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 9883.075 ops/s
[info]                  ·gc.alloc.rate:                   1573.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              250424.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214254.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10147.529 ops/s
[info]                  ·gc.alloc.rate:                   1613.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              250215.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208682.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9882.096 ops/s
[info]                  ·gc.alloc.rate:                   1586.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              252585.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320354.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9907.242 ops/s
[info]                  ·gc.alloc.rate:                   1575.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              250199.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212805.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   9945.464 ±(99.9%) 437.559 ops/s [Average]
[info]   (min, avg, max) = (9882.096, 9945.464, 10147.529), stdev = 113.633
[info]   CI (99.9%): [9507.905, 10383.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1588.899 ±(99.9%) 63.791 MB/sec [Average]
[info]   (min, avg, max) = (1573.199, 1588.899, 1613.412), stdev = 16.566
[info]   CI (99.9%): [1525.108, 1652.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   251392.874 ±(99.9%) 6018.784 B/op [Average]
[info]   (min, avg, max) = (250199.450, 251392.874, 253538.582), stdev = 1563.059
[info]   CI (99.9%): [245374.091, 257411.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1612.126 ±(99.9%) 1415.147 MB/sec [Average]
[info]   (min, avg, max) = (1339.659, 1612.126, 2017.121), stdev = 367.509
[info]   CI (99.9%): [196.979, 3027.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   255297.701 ±(99.9%) 228884.920 B/op [Average]
[info]   (min, avg, max) = (208682.120, 255297.701, 320392.344), stdev = 59440.687
[info]   CI (99.9%): [26412.781, 484182.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.601), stdev = 1.582
[info]   CI (99.9%): [≈ 0, 6.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   120.317 ±(99.9%) 944.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.317, 558.509), stdev = 245.308
[info]   CI (99.9%): [≈ 0, 1064.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.31% complete, ETA 01:38:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8471.962 ops/s
[info] # Warmup Iteration   2: 19761.532 ops/s
[info] # Warmup Iteration   3: 20296.416 ops/s
[info] # Warmup Iteration   4: 20347.893 ops/s
[info] # Warmup Iteration   5: 20455.720 ops/s
[info] Iteration   1: 20149.837 ops/s
[info]                  ·gc.alloc.rate:               1577.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          123201.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157047.070 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 20248.792 ops/s
[info]                  ·gc.alloc.rate:                   1570.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              122015.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104241.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20488.507 ops/s
[info]                  ·gc.alloc.rate:                   1586.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              121855.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102949.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19966.330 ops/s
[info]                  ·gc.alloc.rate:               1561.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          123067.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105487.691 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20088.823 ops/s
[info]                  ·gc.alloc.rate:                   1575.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              123386.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157192.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20188.458 ±(99.9%) 756.603 ops/s [Average]
[info]   (min, avg, max) = (19966.330, 20188.458, 20488.507), stdev = 196.487
[info]   CI (99.9%): [19431.855, 20945.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1574.181 ±(99.9%) 34.867 MB/sec [Average]
[info]   (min, avg, max) = (1561.929, 1574.181, 1586.386), stdev = 9.055
[info]   CI (99.9%): [1539.314, 1609.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122705.353 ±(99.9%) 2750.253 B/op [Average]
[info]   (min, avg, max) = (121855.083, 122705.353, 123386.938), stdev = 714.232
[info]   CI (99.9%): [119955.101, 125455.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1607.570 ±(99.9%) 1410.156 MB/sec [Average]
[info]   (min, avg, max) = (1338.815, 1607.570, 2010.815), stdev = 366.213
[info]   CI (99.9%): [197.415, 3017.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   125383.559 ±(99.9%) 111610.943 B/op [Average]
[info]   (min, avg, max) = (102949.051, 125383.559, 157192.460), stdev = 28985.007
[info]   CI (99.9%): [13772.616, 236994.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 4.917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.019), stdev = 1.277
[info]   CI (99.9%): [≈ 0, 5.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61.065 ±(99.9%) 382.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.065, 234.589), stdev = 99.232
[info]   CI (99.9%): [≈ 0, 443.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.51% complete, ETA 01:38:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7943.531 ops/s
[info] # Warmup Iteration   2: 22697.153 ops/s
[info] # Warmup Iteration   3: 22888.155 ops/s
[info] # Warmup Iteration   4: 23309.178 ops/s
[info] # Warmup Iteration   5: 23206.352 ops/s
[info] Iteration   1: 22612.931 ops/s
[info]                  ·gc.alloc.rate:                   1551.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              107965.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93184.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 23006.913 ops/s
[info]                  ·gc.alloc.rate:                   1580.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              108129.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137565.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 23511.203 ops/s
[info]                  ·gc.alloc.rate:                   1584.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              106049.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89666.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23137.506 ops/s
[info]                  ·gc.alloc.rate:                   1562.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              106270.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90938.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23515.969 ops/s
[info]                  ·gc.alloc.rate:                   1585.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              106069.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89432.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23156.904 ±(99.9%) 1457.706 ops/s [Average]
[info]   (min, avg, max) = (22612.931, 23156.904, 23515.969), stdev = 378.562
[info]   CI (99.9%): [21699.198, 24614.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1573.011 ±(99.9%) 58.172 MB/sec [Average]
[info]   (min, avg, max) = (1551.395, 1573.011, 1585.394), stdev = 15.107
[info]   CI (99.9%): [1514.839, 1631.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106896.907 ±(99.9%) 4064.777 B/op [Average]
[info]   (min, avg, max) = (106049.844, 106896.907, 108129.564), stdev = 1055.610
[info]   CI (99.9%): [102832.130, 110961.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.814 ±(99.9%) 1158.978 MB/sec [Average]
[info]   (min, avg, max) = (1336.724, 1472.814, 2011.224), stdev = 300.983
[info]   CI (99.9%): [313.835, 2631.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100157.222 ±(99.9%) 80727.194 B/op [Average]
[info]   (min, avg, max) = (89432.120, 100157.222, 137565.224), stdev = 20964.596
[info]   CI (99.9%): [19430.028, 180884.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.351 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.808, 3.229), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55.056 ±(99.9%) 366.047 B/op [Average]
[info]   (min, avg, max) = (1.393, 55.056, 220.863), stdev = 95.061
[info]   CI (99.9%): [≈ 0, 421.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.493
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.71% complete, ETA 01:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98439.559 ops/s
[info] # Warmup Iteration   2: 131599.469 ops/s
[info] # Warmup Iteration   3: 134095.609 ops/s
[info] # Warmup Iteration   4: 134762.483 ops/s
[info] # Warmup Iteration   5: 134324.910 ops/s
[info] Iteration   1: 133760.229 ops/s
[info]                  ·gc.alloc.rate:      310.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 3656.978 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134107.915 ops/s
[info]                  ·gc.alloc.rate:               310.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          3646.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6003.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 134220.597 ops/s
[info]                  ·gc.alloc.rate:                   313.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              3676.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5998.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 134276.960 ops/s
[info]                  ·gc.alloc.rate:      296.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 134260.574 ops/s
[info]                  ·gc.alloc.rate:      296.879 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134125.255 ±(99.9%) 825.782 ops/s [Average]
[info]   (min, avg, max) = (133760.229, 134125.255, 134276.960), stdev = 214.453
[info]   CI (99.9%): [133299.473, 134951.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   305.806 ±(99.9%) 31.591 MB/sec [Average]
[info]   (min, avg, max) = (296.879, 305.806, 313.586), stdev = 8.204
[info]   CI (99.9%): [274.215, 337.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3588.139 ±(99.9%) 382.375 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3588.139, 3676.849), stdev = 99.302
[info]   CI (99.9%): [3205.764, 3970.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.645 ±(99.9%) 1079.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.645, 511.624), stdev = 280.221
[info]   CI (99.9%): [≈ 0, 1283.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2400.460 ±(99.9%) 12656.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2400.460, 6003.432), stdev = 3286.966
[info]   CI (99.9%): [≈ 0, 15057.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.098 ±(99.9%) 0.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.488), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26.91% complete, ETA 01:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90429.447 ops/s
[info] # Warmup Iteration   2: 133077.309 ops/s
[info] # Warmup Iteration   3: 139706.180 ops/s
[info] # Warmup Iteration   4: 140326.583 ops/s
[info] # Warmup Iteration   5: 140283.321 ops/s
[info] Iteration   1: 140146.346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 139421.206 ops/s
[info]                  ·gc.alloc.rate:      1.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 14.186 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 139793.994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 139745.971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140289.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   139879.378 ±(99.9%) 1326.066 ops/s [Average]
[info]   (min, avg, max) = (139421.206, 139879.378, 140289.372), stdev = 344.375
[info]   CI (99.9%): [138553.312, 141205.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.252 ±(99.9%) 2.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.252, 1.257), stdev = 0.562
[info]   CI (99.9%): [≈ 0, 2.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.840 ±(99.9%) 24.423 B/op [Average]
[info]   (min, avg, max) = (0.003, 2.840, 14.186), stdev = 6.343
[info]   CI (99.9%): [≈ 0, 27.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7974.473 ops/s
[info] # Warmup Iteration   2: 20710.672 ops/s
[info] # Warmup Iteration   3: 23303.978 ops/s
[info] # Warmup Iteration   4: 23311.351 ops/s
[info] # Warmup Iteration   5: 23378.892 ops/s
[info] Iteration   1: 22935.746 ops/s
[info]                  ·gc.alloc.rate:                   1604.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              110109.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137945.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 23188.512 ops/s
[info]                  ·gc.alloc.rate:                   1606.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              109059.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91005.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23428.885 ops/s
[info]                  ·gc.alloc.rate:                   1622.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              108976.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89984.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23622.777 ops/s
[info]                  ·gc.alloc.rate:                   1675.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              111608.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133585.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23684.850 ops/s
[info]                  ·gc.alloc.rate:                   1652.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              109829.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88698.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23372.154 ±(99.9%) 1199.253 ops/s [Average]
[info]   (min, avg, max) = (22935.746, 23372.154, 23684.850), stdev = 311.442
[info]   CI (99.9%): [22172.901, 24571.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1632.556 ±(99.9%) 118.907 MB/sec [Average]
[info]   (min, avg, max) = (1604.815, 1632.556, 1675.753), stdev = 30.880
[info]   CI (99.9%): [1513.650, 1751.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109916.593 ±(99.9%) 4096.749 B/op [Average]
[info]   (min, avg, max) = (108976.327, 109916.593, 111608.893), stdev = 1063.913
[info]   CI (99.9%): [105819.844, 114013.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.334 ±(99.9%) 1412.369 MB/sec [Average]
[info]   (min, avg, max) = (1334.953, 1606.334, 2010.522), stdev = 366.788
[info]   CI (99.9%): [193.965, 3018.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108243.606 ±(99.9%) 96975.183 B/op [Average]
[info]   (min, avg, max) = (88698.084, 108243.606, 137945.267), stdev = 25184.147
[info]   CI (99.9%): [11268.422, 205218.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.822 ±(99.9%) 5.288 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.822, 3.192), stdev = 1.373
[info]   CI (99.9%): [≈ 0, 6.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55.628 ±(99.9%) 358.857 B/op [Average]
[info]   (min, avg, max) = (1.383, 55.628, 216.611), stdev = 93.194
[info]   CI (99.9%): [≈ 0, 414.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27.31% complete, ETA 01:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4360.781 ops/s
[info] # Warmup Iteration   2: 8431.343 ops/s
[info] # Warmup Iteration   3: 9394.340 ops/s
[info] # Warmup Iteration   4: 9375.380 ops/s
[info] # Warmup Iteration   5: 9418.293 ops/s
[info] Iteration   1: 9408.097 ops/s
[info]                  ·gc.alloc.rate:               1191.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          199359.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225092.829 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 9378.124 ops/s
[info]                  ·gc.alloc.rate:               1193.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          200285.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112906.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9388.607 ops/s
[info]                  ·gc.alloc.rate:                   1196.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              200494.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225604.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9427.132 ops/s
[info]                  ·gc.alloc.rate:                   1187.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              198175.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224806.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9451.439 ops/s
[info]                  ·gc.alloc.rate:                   1189.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              197972.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112133.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   9410.680 ±(99.9%) 113.672 ops/s [Average]
[info]   (min, avg, max) = (9378.124, 9410.680, 9451.439), stdev = 29.520
[info]   CI (99.9%): [9297.008, 9524.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1191.592 ±(99.9%) 13.848 MB/sec [Average]
[info]   (min, avg, max) = (1187.161, 1191.592, 1196.227), stdev = 3.596
[info]   CI (99.9%): [1177.744, 1205.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   199257.615 ±(99.9%) 4481.191 B/op [Average]
[info]   (min, avg, max) = (197972.955, 199257.615, 200494.887), stdev = 1163.751
[info]   CI (99.9%): [194776.424, 203738.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1076.970 ±(99.9%) 1419.378 MB/sec [Average]
[info]   (min, avg, max) = (672.871, 1076.970, 1346.687), stdev = 368.608
[info]   CI (99.9%): [≈ 0, 2496.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   180108.571 ±(99.9%) 237588.416 B/op [Average]
[info]   (min, avg, max) = (112133.524, 180108.571, 225604.069), stdev = 61700.957
[info]   CI (99.9%): [≈ 0, 417696.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.540), stdev = 1.098
[info]   CI (99.9%): [≈ 0, 4.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   102.824 ±(99.9%) 705.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.824, 423.979), stdev = 183.313
[info]   CI (99.9%): [≈ 0, 808.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.51% complete, ETA 01:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39004.553 ops/s
[info] # Warmup Iteration   2: 113542.124 ops/s
[info] # Warmup Iteration   3: 117712.980 ops/s
[info] # Warmup Iteration   4: 124488.164 ops/s
[info] # Warmup Iteration   5: 124608.804 ops/s
[info] Iteration   1: 124800.006 ops/s
[info]                  ·gc.alloc.rate:                   1766.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              22265.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25411.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 125184.404 ops/s
[info]                  ·gc.alloc.rate:                   1781.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              22400.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16899.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 122435.986 ops/s
[info]                  ·gc.alloc.rate:                   1758.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              22599.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25851.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 126041.981 ops/s
[info]                  ·gc.alloc.rate:               1792.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          22378.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16717.996 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 125631.671 ops/s
[info]                  ·gc.alloc.rate:                   1802.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              22576.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25158.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   124818.810 ±(99.9%) 5434.987 ops/s [Average]
[info]   (min, avg, max) = (122435.986, 124818.810, 126041.981), stdev = 1411.449
[info]   CI (99.9%): [119383.822, 130253.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1780.225 ±(99.9%) 70.215 MB/sec [Average]
[info]   (min, avg, max) = (1758.200, 1780.225, 1802.276), stdev = 18.235
[info]   CI (99.9%): [1710.010, 1850.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22444.077 ±(99.9%) 543.492 B/op [Average]
[info]   (min, avg, max) = (22265.411, 22444.077, 22599.064), stdev = 141.143
[info]   CI (99.9%): [21900.585, 22987.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.748 ±(99.9%) 1413.062 MB/sec [Average]
[info]   (min, avg, max) = (1339.216, 1743.748, 2015.632), stdev = 366.968
[info]   CI (99.9%): [330.686, 3156.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22007.762 ±(99.9%) 18301.761 B/op [Average]
[info]   (min, avg, max) = (16717.996, 22007.762, 25851.123), stdev = 4752.909
[info]   CI (99.9%): [3706.001, 40309.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 5.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.310), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.122 ±(99.9%) 70.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.122, 41.610), stdev = 18.218
[info]   CI (99.9%): [≈ 0, 79.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.715 ops/s
[info] # Warmup Iteration   2: 507523.285 ops/s
[info] # Warmup Iteration   3: 543440.644 ops/s
[info] # Warmup Iteration   4: 564893.190 ops/s
[info] # Warmup Iteration   5: 563620.334 ops/s
[info] Iteration   1: 566077.397 ops/s
[info]                  ·gc.alloc.rate:               600.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          1670.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1850.206 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 563244.213 ops/s
[info]                  ·gc.alloc.rate:               598.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          1672.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1859.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 565246.385 ops/s
[info]                  ·gc.alloc.rate:               603.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          1681.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1853.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 565745.924 ops/s
[info]                  ·gc.alloc.rate:                   612.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1703.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1852.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 565820.888 ops/s
[info]                  ·gc.alloc.rate:               609.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          1695.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1853.754 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   565226.961 ±(99.9%) 4422.788 ops/s [Average]
[info]   (min, avg, max) = (563244.213, 565226.961, 566077.397), stdev = 1148.584
[info]   CI (99.9%): [560804.173, 569649.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   605.060 ±(99.9%) 22.298 MB/sec [Average]
[info]   (min, avg, max) = (598.629, 605.060, 612.439), stdev = 5.791
[info]   CI (99.9%): [582.762, 627.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1684.631 ±(99.9%) 55.355 B/op [Average]
[info]   (min, avg, max) = (1670.462, 1684.631, 1703.642), stdev = 14.376
[info]   CI (99.9%): [1629.276, 1739.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.847 ±(99.9%) 1.579 MB/sec [Average]
[info]   (min, avg, max) = (665.501, 665.847, 666.516), stdev = 0.410
[info]   CI (99.9%): [664.268, 667.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1853.892 ±(99.9%) 13.253 B/op [Average]
[info]   (min, avg, max) = (1850.206, 1853.892, 1859.451), stdev = 3.442
[info]   CI (99.9%): [1840.640, 1867.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.91% complete, ETA 01:36:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116704.024 ops/s
[info] # Warmup Iteration   2: 310776.944 ops/s
[info] # Warmup Iteration   3: 347441.141 ops/s
[info] # Warmup Iteration   4: 347049.982 ops/s
[info] # Warmup Iteration   5: 334282.646 ops/s
[info] Iteration   1: 339698.288 ops/s
[info]                  ·gc.alloc.rate:               507.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          2351.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2370.256 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 347834.209 ops/s
[info]                  ·gc.alloc.rate:               505.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          2285.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3015.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 328384.990 ops/s
[info]                  ·gc.alloc.rate:      464.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 347287.004 ops/s
[info]                  ·gc.alloc.rate:                   511.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              2317.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3020.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 346627.784 ops/s
[info]                  ·gc.alloc.rate:                   505.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              2293.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3029.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   341966.455 ±(99.9%) 31873.677 ops/s [Average]
[info]   (min, avg, max) = (328384.990, 341966.455, 347834.209), stdev = 8277.493
[info]   CI (99.9%): [310092.778, 373840.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   498.706 ±(99.9%) 75.156 MB/sec [Average]
[info]   (min, avg, max) = (464.085, 498.706, 511.389), stdev = 19.518
[info]   CI (99.9%): [423.550, 573.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2294.532 ±(99.9%) 181.191 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2294.532, 2351.827), stdev = 47.055
[info]   CI (99.9%): [2113.342, 2475.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.357 ±(99.9%) 1111.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.357, 667.186), stdev = 288.747
[info]   CI (99.9%): [≈ 0, 1614.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2287.005 ±(99.9%) 5041.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2287.005, 3029.107), stdev = 1309.223
[info]   CI (99.9%): [≈ 0, 7328.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.377), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:36:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458840.055 ops/s
[info] # Warmup Iteration   2: 727698.510 ops/s
[info] # Warmup Iteration   3: 742572.038 ops/s
[info] # Warmup Iteration   4: 744077.359 ops/s
[info] # Warmup Iteration   5: 744592.384 ops/s
[info] Iteration   1: 744773.744 ops/s
[info]                  ·gc.alloc.rate:               496.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          1049.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1081.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 745239.756 ops/s
[info]                  ·gc.alloc.rate:                   510.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              1076.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 748056.585 ops/s
[info]                  ·gc.alloc.rate:               502.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          1057.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1410.571 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 767931.674 ops/s
[info]                  ·gc.alloc.rate:      499.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 765315.919 ops/s
[info]                  ·gc.alloc.rate:               520.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          1070.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1380.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   754263.536 ±(99.9%) 43861.191 ops/s [Average]
[info]   (min, avg, max) = (744773.744, 754263.536, 767931.674), stdev = 11390.612
[info]   CI (99.9%): [710402.344, 798124.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   505.969 ±(99.9%) 36.573 MB/sec [Average]
[info]   (min, avg, max) = (496.796, 505.969, 520.485), stdev = 9.498
[info]   CI (99.9%): [469.396, 542.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.763 ±(99.9%) 79.554 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1055.763, 1076.869), stdev = 20.660
[info]   CI (99.9%): [976.209, 1135.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.775 ±(99.9%) 1118.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.775, 671.142), stdev = 290.470
[info]   CI (99.9%): [≈ 0, 1623.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1057.536 ±(99.9%) 2339.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1057.536, 1415.875), stdev = 607.467
[info]   CI (99.9%): [≈ 0, 3396.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.31% complete, ETA 01:35:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7093.194 ops/s
[info] # Warmup Iteration   2: 58193.191 ops/s
[info] # Warmup Iteration   3: 75078.927 ops/s
[info] # Warmup Iteration   4: 76425.241 ops/s
[info] # Warmup Iteration   5: 75997.624 ops/s
[info] Iteration   1: 75317.988 ops/s
[info]                  ·gc.alloc.rate:               3092.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          64610.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55996.990 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 76202.975 ops/s
[info]                  ·gc.alloc.rate:                   3171.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              65489.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69468.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 76175.327 ops/s
[info]                  ·gc.alloc.rate:               3143.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          64939.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55779.272 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 76121.968 ops/s
[info]                  ·gc.alloc.rate:               3170.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          65527.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3385.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69962.910 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 75459.868 ops/s
[info]                  ·gc.alloc.rate:                   3116.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              64981.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56572.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   75855.625 ±(99.9%) 1655.639 ops/s [Average]
[info]   (min, avg, max) = (75317.988, 75855.625, 76202.975), stdev = 429.964
[info]   CI (99.9%): [74199.986, 77511.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3138.953 ±(99.9%) 133.121 MB/sec [Average]
[info]   (min, avg, max) = (3092.261, 3138.953, 3171.965), stdev = 34.571
[info]   CI (99.9%): [3005.832, 3272.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65109.747 ±(99.9%) 1507.343 B/op [Average]
[info]   (min, avg, max) = (64610.876, 65109.747, 65527.492), stdev = 391.452
[info]   CI (99.9%): [63602.404, 66617.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2968.627 ±(99.9%) 1429.071 MB/sec [Average]
[info]   (min, avg, max) = (2680.002, 2968.627, 3385.066), stdev = 371.125
[info]   CI (99.9%): [1539.556, 4397.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61556.104 ±(99.9%) 28712.511 B/op [Average]
[info]   (min, avg, max) = (55779.272, 61556.104, 69962.910), stdev = 7456.548
[info]   CI (99.9%): [32843.592, 90268.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.173 ±(99.9%) 0.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.434), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28.51% complete, ETA 01:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117930.951 ops/s
[info] # Warmup Iteration   2: 221966.297 ops/s
[info] # Warmup Iteration   3: 232320.067 ops/s
[info] # Warmup Iteration   4: 226310.606 ops/s
[info] # Warmup Iteration   5: 232432.747 ops/s
[info] Iteration   1: 232128.748 ops/s
[info]                  ·gc.alloc.rate:               1343.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          9107.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9116.540 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 232232.990 ops/s
[info]                  ·gc.alloc.rate:                   1329.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              9010.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9116.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 230191.704 ops/s
[info]                  ·gc.alloc.rate:                   1310.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              8960.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4599.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 232654.020 ops/s
[info]                  ·gc.alloc.rate:                   1339.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              9063.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9106.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 226237.478 ops/s
[info]                  ·gc.alloc.rate:                   1296.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              9019.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9351.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   230688.988 ±(99.9%) 10257.005 ops/s [Average]
[info]   (min, avg, max) = (226237.478, 230688.988, 232654.020), stdev = 2663.712
[info]   CI (99.9%): [220431.983, 240945.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1324.148 ±(99.9%) 76.260 MB/sec [Average]
[info]   (min, avg, max) = (1296.923, 1324.148, 1343.436), stdev = 19.804
[info]   CI (99.9%): [1247.888, 1400.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9032.306 ±(99.9%) 214.581 B/op [Average]
[info]   (min, avg, max) = (8960.913, 9032.306, 9107.837), stdev = 55.726
[info]   CI (99.9%): [8817.725, 9246.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210.786 ±(99.9%) 1157.887 MB/sec [Average]
[info]   (min, avg, max) = (672.879, 1210.786, 1346.315), stdev = 300.700
[info]   CI (99.9%): [52.899, 2368.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8258.189 ±(99.9%) 7884.845 B/op [Average]
[info]   (min, avg, max) = (4599.856, 8258.189, 9351.280), stdev = 2047.669
[info]   CI (99.9%): [373.344, 16143.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 5.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 2.998), stdev = 1.329
[info]   CI (99.9%): [≈ 0, 5.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4.199 ±(99.9%) 34.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.199, 20.277), stdev = 8.989
[info]   CI (99.9%): [≈ 0, 38.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63001.218 ops/s
[info] # Warmup Iteration   2: 184773.827 ops/s
[info] # Warmup Iteration   3: 197376.021 ops/s
[info] # Warmup Iteration   4: 199298.004 ops/s
[info] # Warmup Iteration   5: 198037.644 ops/s
[info] Iteration   1: 198495.796 ops/s
[info]                  ·gc.alloc.rate:               1443.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          11444.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10631.742 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 197725.477 ops/s
[info]                  ·gc.alloc.rate:                   1446.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              11509.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10678.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 199436.249 ops/s
[info]                  ·gc.alloc.rate:                   1445.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              11408.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10591.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 200877.382 ops/s
[info]                  ·gc.alloc.rate:                   1479.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              11594.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15761.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 200300.497 ops/s
[info]                  ·gc.alloc.rate:                   1474.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              11585.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10509.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   199367.080 ±(99.9%) 4950.385 ops/s [Average]
[info]   (min, avg, max) = (197725.477, 199367.080, 200877.382), stdev = 1285.599
[info]   CI (99.9%): [194416.695, 204317.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1457.978 ±(99.9%) 68.210 MB/sec [Average]
[info]   (min, avg, max) = (1443.552, 1457.978, 1479.970), stdev = 17.714
[info]   CI (99.9%): [1389.768, 1526.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11508.539 ±(99.9%) 318.299 B/op [Average]
[info]   (min, avg, max) = (11408.493, 11508.539, 11594.599), stdev = 82.661
[info]   CI (99.9%): [11190.240, 11826.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.887 ±(99.9%) 1155.879 MB/sec [Average]
[info]   (min, avg, max) = (1337.642, 1474.887, 2011.853), stdev = 300.178
[info]   CI (99.9%): [319.009, 2630.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11634.690 ±(99.9%) 8886.564 B/op [Average]
[info]   (min, avg, max) = (10509.784, 11634.690, 15761.546), stdev = 2307.812
[info]   CI (99.9%): [2748.126, 20521.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.081), stdev = 1.335
[info]   CI (99.9%): [≈ 0, 5.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.613 ±(99.9%) 40.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.613, 24.312), stdev = 10.539
[info]   CI (99.9%): [≈ 0, 46.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.92% complete, ETA 01:35:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.808 ops/s
[info] # Warmup Iteration   2: 602155.229 ops/s
[info] # Warmup Iteration   3: 644458.697 ops/s
[info] # Warmup Iteration   4: 654510.228 ops/s
[info] # Warmup Iteration   5: 653835.656 ops/s
[info] Iteration   1: 652356.264 ops/s
[info]                  ·gc.alloc.rate:                   372.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              898.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 608759.085 ops/s
[info]                  ·gc.alloc.rate:      331.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 609322.980 ops/s
[info]                  ·gc.alloc.rate:               345.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          891.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1718.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 656979.700 ops/s
[info]                  ·gc.alloc.rate:      365.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 876.542 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 655212.171 ops/s
[info]                  ·gc.alloc.rate:               381.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          916.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1598.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   636526.040 ±(99.9%) 96825.320 ops/s [Average]
[info]   (min, avg, max) = (608759.085, 636526.040, 656979.700), stdev = 25145.228
[info]   CI (99.9%): [539700.720, 733351.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   359.171 ±(99.9%) 79.174 MB/sec [Average]
[info]   (min, avg, max) = (331.189, 359.171, 381.375), stdev = 20.561
[info]   CI (99.9%): [279.996, 438.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   887.545 ±(99.9%) 87.147 B/op [Average]
[info]   (min, avg, max) = (856.001, 887.545, 916.001), stdev = 22.632
[info]   CI (99.9%): [800.398, 974.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.552 ±(99.9%) 1317.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.552, 665.605), stdev = 342.261
[info]   CI (99.9%): [≈ 0, 1686.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   910.305 ±(99.9%) 3272.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 910.305, 1718.799), stdev = 849.930
[info]   CI (99.9%): [≈ 0, 4183.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.12% complete, ETA 01:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180375.204 ops/s
[info] # Warmup Iteration   2: 627921.250 ops/s
[info] # Warmup Iteration   3: 656743.907 ops/s
[info] # Warmup Iteration   4: 660053.929 ops/s
[info] # Warmup Iteration   5: 656809.853 ops/s
[info] Iteration   1: 653817.422 ops/s
[info]                  ·gc.alloc.rate:               496.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          1196.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 659807.518 ops/s
[info]                  ·gc.alloc.rate:               508.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          1213.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1591.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 660729.910 ops/s
[info]                  ·gc.alloc.rate:      490.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 660100.535 ops/s
[info]                  ·gc.alloc.rate:                   505.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1205.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1590.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 657983.423 ops/s
[info]                  ·gc.alloc.rate:               512.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          1225.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1598.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   658487.762 ±(99.9%) 10794.938 ops/s [Average]
[info]   (min, avg, max) = (653817.422, 658487.762, 660729.910), stdev = 2803.411
[info]   CI (99.9%): [647692.824, 669282.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   502.854 ±(99.9%) 34.844 MB/sec [Average]
[info]   (min, avg, max) = (490.370, 502.854, 512.542), stdev = 9.049
[info]   CI (99.9%): [468.010, 537.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1201.807 ±(99.9%) 84.005 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1201.807, 1225.875), stdev = 21.816
[info]   CI (99.9%): [1117.802, 1285.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.819 ±(99.9%) 1113.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.819, 668.159), stdev = 289.075
[info]   CI (99.9%): [≈ 0, 1615.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1202.282 ±(99.9%) 2657.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1202.282, 1598.072), stdev = 690.126
[info]   CI (99.9%): [≈ 0, 3859.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.32% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 726847.312 ops/s
[info] # Warmup Iteration   2: 1126927.858 ops/s
[info] # Warmup Iteration   3: 1151066.030 ops/s
[info] # Warmup Iteration   4: 1151711.492 ops/s
[info] # Warmup Iteration   5: 1148519.913 ops/s
[info] Iteration   1: 1150131.147 ops/s
[info]                  ·gc.alloc.rate:               644.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          881.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1143449.185 ops/s
[info]                  ·gc.alloc.rate:               639.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 923.302 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1153374.337 ops/s
[info]                  ·gc.alloc.rate:                   650.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              887.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1152724.670 ops/s
[info]                  ·gc.alloc.rate:               641.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916.773 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1146161.379 ops/s
[info]                  ·gc.alloc.rate:               640.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1149168.143 ±(99.9%) 16451.697 ops/s [Average]
[info]   (min, avg, max) = (1143449.185, 1149168.143, 1153374.337), stdev = 4272.454
[info]   CI (99.9%): [1132716.446, 1165619.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   643.369 ±(99.9%) 17.156 MB/sec [Average]
[info]   (min, avg, max) = (639.296, 643.369, 650.531), stdev = 4.455
[info]   CI (99.9%): [626.213, 660.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   881.016 ±(99.9%) 15.964 B/op [Average]
[info]   (min, avg, max) = (876.317, 881.016, 887.546), stdev = 4.146
[info]   CI (99.9%): [865.051, 896.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.404 ±(99.9%) 2.006 MB/sec [Average]
[info]   (min, avg, max) = (670.844, 671.404, 672.155), stdev = 0.521
[info]   CI (99.9%): [669.398, 673.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   919.420 ±(99.9%) 13.171 B/op [Average]
[info]   (min, avg, max) = (916.215, 919.420, 923.302), stdev = 3.421
[info]   CI (99.9%): [906.248, 932.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.52% complete, ETA 01:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 772165.827 ops/s
[info] # Warmup Iteration   2: 1151235.399 ops/s
[info] # Warmup Iteration   3: 1166666.917 ops/s
[info] # Warmup Iteration   4: 1165487.928 ops/s
[info] # Warmup Iteration   5: 1165753.626 ops/s
[info] Iteration   1: 1166374.223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1169560.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1169527.293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1169191.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1169662.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1168863.306 ±(99.9%) 5401.102 ops/s [Average]
[info]   (min, avg, max) = (1166374.223, 1168863.306, 1169662.907), stdev = 1402.649
[info]   CI (99.9%): [1163462.204, 1174264.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.72% complete, ETA 01:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9533.008 ops/s
[info] # Warmup Iteration   2: 31699.385 ops/s
[info] # Warmup Iteration   3: 35237.887 ops/s
[info] # Warmup Iteration   4: 34587.008 ops/s
[info] # Warmup Iteration   5: 34381.897 ops/s
[info] Iteration   1: 34629.319 ops/s
[info]                  ·gc.alloc.rate:                   1931.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              87784.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91450.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34458.920 ops/s
[info]                  ·gc.alloc.rate:                   1935.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              88385.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91787.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.226 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34567.953 ops/s
[info]                  ·gc.alloc.rate:               1926.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          87699.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60835.361 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34396.068 ops/s
[info]                  ·gc.alloc.rate:                   1919.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              87826.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91714.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.905 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33762.331 ops/s
[info]                  ·gc.alloc.rate:                   1910.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              89067.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93493.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34362.918 ±(99.9%) 1339.489 ops/s [Average]
[info]   (min, avg, max) = (33762.331, 34362.918, 34629.319), stdev = 347.861
[info]   CI (99.9%): [33023.429, 35702.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1924.790 ±(99.9%) 37.606 MB/sec [Average]
[info]   (min, avg, max) = (1910.872, 1924.790, 1935.318), stdev = 9.766
[info]   CI (99.9%): [1887.184, 1962.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88152.649 ±(99.9%) 2226.856 B/op [Average]
[info]   (min, avg, max) = (87699.526, 88152.649, 89067.232), stdev = 578.307
[info]   CI (99.9%): [85925.793, 90379.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1873.795 ±(99.9%) 1157.145 MB/sec [Average]
[info]   (min, avg, max) = (1336.261, 1873.795, 2012.423), stdev = 300.507
[info]   CI (99.9%): [716.650, 3030.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85856.212 ±(99.9%) 53948.954 B/op [Average]
[info]   (min, avg, max) = (60835.361, 85856.212, 93493.110), stdev = 14010.372
[info]   CI (99.9%): [31907.258, 139805.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.247), stdev = 1.392
[info]   CI (99.9%): [≈ 0, 6.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.323 ±(99.9%) 243.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.323, 147.574), stdev = 63.239
[info]   CI (99.9%): [≈ 0, 280.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29.92% complete, ETA 01:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33945.243 ops/s
[info] # Warmup Iteration   2: 92681.019 ops/s
[info] # Warmup Iteration   3: 100873.639 ops/s
[info] # Warmup Iteration   4: 102087.075 ops/s
[info] # Warmup Iteration   5: 102289.878 ops/s
[info] Iteration   1: 102965.473 ops/s
[info]                  ·gc.alloc.rate:                   1822.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              27851.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20558.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 102812.534 ops/s
[info]                  ·gc.alloc.rate:                   1828.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              27985.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30875.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 103347.210 ops/s
[info]                  ·gc.alloc.rate:                   1834.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              27933.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20430.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 101123.453 ops/s
[info]                  ·gc.alloc.rate:               1802.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          28048.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20859.756 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 103047.476 ops/s
[info]                  ·gc.alloc.rate:                   1832.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              27989.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30726.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   102659.229 ±(99.9%) 3389.851 ops/s [Average]
[info]   (min, avg, max) = (101123.453, 102659.229, 103347.210), stdev = 880.334
[info]   CI (99.9%): [99269.378, 106049.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1824.025 ±(99.9%) 49.997 MB/sec [Average]
[info]   (min, avg, max) = (1802.341, 1824.025, 1834.326), stdev = 12.984
[info]   CI (99.9%): [1774.028, 1874.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   27961.615 ±(99.9%) 283.752 B/op [Average]
[info]   (min, avg, max) = (27851.451, 27961.615, 28048.021), stdev = 73.689
[info]   CI (99.9%): [27677.863, 28245.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1611.266 ±(99.9%) 1417.684 MB/sec [Average]
[info]   (min, avg, max) = (1340.430, 1611.266, 2017.125), stdev = 368.168
[info]   CI (99.9%): [193.581, 3028.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   24690.083 ±(99.9%) 21489.575 B/op [Average]
[info]   (min, avg, max) = (20430.823, 24690.083, 30875.559), stdev = 5580.774
[info]   CI (99.9%): [3200.508, 46179.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.352), stdev = 1.487
[info]   CI (99.9%): [≈ 0, 6.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10.578 ±(99.9%) 87.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.578, 51.302), stdev = 22.767
[info]   CI (99.9%): [≈ 0, 98.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28216.520 ops/s
[info] # Warmup Iteration   2: 124933.261 ops/s
[info] # Warmup Iteration   3: 127205.386 ops/s
[info] # Warmup Iteration   4: 131079.609 ops/s
[info] # Warmup Iteration   5: 131614.549 ops/s
[info] Iteration   1: 129334.738 ops/s
[info]                  ·gc.alloc.rate:                   1651.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24455.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 128117.056 ops/s
[info]                  ·gc.alloc.rate:                   1633.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              20059.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16471.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 128468.010 ops/s
[info]                  ·gc.alloc.rate:                   1663.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              20376.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24603.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 129549.438 ops/s
[info]                  ·gc.alloc.rate:                   1663.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              20202.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16233.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 132136.342 ops/s
[info]                  ·gc.alloc.rate:               1682.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          20043.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15915.886 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   129521.117 ±(99.9%) 6074.800 ops/s [Average]
[info]   (min, avg, max) = (128117.056, 129521.117, 132136.342), stdev = 1577.606
[info]   CI (99.9%): [123446.317, 135595.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1658.965 ±(99.9%) 70.214 MB/sec [Average]
[info]   (min, avg, max) = (1633.106, 1658.965, 1682.898), stdev = 18.234
[info]   CI (99.9%): [1588.751, 1729.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20156.488 ±(99.9%) 530.481 B/op [Average]
[info]   (min, avg, max) = (20043.245, 20156.488, 20376.590), stdev = 137.764
[info]   CI (99.9%): [19626.007, 20686.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.505 ±(99.9%) 1416.207 MB/sec [Average]
[info]   (min, avg, max) = (1336.351, 1606.505, 2009.866), stdev = 367.785
[info]   CI (99.9%): [190.298, 3022.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19536.095 ±(99.9%) 17570.060 B/op [Average]
[info]   (min, avg, max) = (15915.886, 19536.095, 24603.733), stdev = 4562.889
[info]   CI (99.9%): [1966.035, 37106.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.414), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.916 ±(99.9%) 69.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.916, 41.937), stdev = 18.108
[info]   CI (99.9%): [≈ 0, 79.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.32% complete, ETA 01:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61774.758 ops/s
[info] # Warmup Iteration   2: 172793.512 ops/s
[info] # Warmup Iteration   3: 199058.042 ops/s
[info] # Warmup Iteration   4: 204039.270 ops/s
[info] # Warmup Iteration   5: 203391.531 ops/s
[info] Iteration   1: 203388.084 ops/s
[info]                  ·gc.alloc.rate:               1246.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          9646.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10334.683 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 204440.681 ops/s
[info]                  ·gc.alloc.rate:               1232.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          9487.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5145.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 204168.253 ops/s
[info]                  ·gc.alloc.rate:                   1244.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              9594.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10308.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 202728.064 ops/s
[info]                  ·gc.alloc.rate:                   1248.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              9691.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10388.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 204881.076 ops/s
[info]                  ·gc.alloc.rate:                   1259.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              9676.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10270.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   203921.232 ±(99.9%) 3312.474 ops/s [Average]
[info]   (min, avg, max) = (202728.064, 203921.232, 204881.076), stdev = 860.239
[info]   CI (99.9%): [200608.757, 207233.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1246.397 ±(99.9%) 37.590 MB/sec [Average]
[info]   (min, avg, max) = (1232.448, 1246.397, 1259.776), stdev = 9.762
[info]   CI (99.9%): [1208.807, 1283.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9619.303 ±(99.9%) 317.618 B/op [Average]
[info]   (min, avg, max) = (9487.328, 9619.303, 9691.210), stdev = 82.485
[info]   CI (99.9%): [9301.684, 9936.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.320 ±(99.9%) 1151.309 MB/sec [Average]
[info]   (min, avg, max) = (668.471, 1203.320, 1338.345), stdev = 298.991
[info]   CI (99.9%): [52.011, 2354.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9289.513 ±(99.9%) 8921.077 B/op [Average]
[info]   (min, avg, max) = (5145.860, 9289.513, 10388.853), stdev = 2316.775
[info]   CI (99.9%): [368.436, 18210.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.602), stdev = 1.561
[info]   CI (99.9%): [≈ 0, 6.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.519 ±(99.9%) 46.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.519, 27.957), stdev = 12.123
[info]   CI (99.9%): [≈ 0, 53.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.52% complete, ETA 01:32:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97669.311 ops/s
[info] # Warmup Iteration   2: 245438.606 ops/s
[info] # Warmup Iteration   3: 253090.843 ops/s
[info] # Warmup Iteration   4: 254499.597 ops/s
[info] # Warmup Iteration   5: 254668.027 ops/s
[info] Iteration   1: 248227.422 ops/s
[info]                  ·gc.alloc.rate:                   1340.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              8499.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8524.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 252743.712 ops/s
[info]                  ·gc.alloc.rate:                   1352.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              8422.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8376.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 253680.329 ops/s
[info]                  ·gc.alloc.rate:                   1352.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              8391.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8350.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 255786.114 ops/s
[info]                  ·gc.alloc.rate:                   1360.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8277.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 254385.577 ops/s
[info]                  ·gc.alloc.rate:                   1352.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              8369.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8312.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   252964.631 ±(99.9%) 11057.121 ops/s [Average]
[info]   (min, avg, max) = (248227.422, 252964.631, 255786.114), stdev = 2871.499
[info]   CI (99.9%): [241907.510, 264021.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1351.924 ±(99.9%) 26.719 MB/sec [Average]
[info]   (min, avg, max) = (1340.965, 1351.924, 1360.304), stdev = 6.939
[info]   CI (99.9%): [1325.204, 1378.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8410.137 ±(99.9%) 209.245 B/op [Average]
[info]   (min, avg, max) = (8368.639, 8410.137, 8499.054), stdev = 54.340
[info]   CI (99.9%): [8200.892, 8619.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.145 ±(99.9%) 3.371 MB/sec [Average]
[info]   (min, avg, max) = (1343.703, 1345.145, 1346.001), stdev = 0.875
[info]   CI (99.9%): [1341.774, 1348.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8368.345 ±(99.9%) 366.984 B/op [Average]
[info]   (min, avg, max) = (8277.078, 8368.345, 8524.922), stdev = 95.304
[info]   CI (99.9%): [8001.362, 8735.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.347 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.595, 2.602), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 4.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.691 ±(99.9%) 26.970 B/op [Average]
[info]   (min, avg, max) = (0.129, 3.691, 16.143), stdev = 7.004
[info]   CI (99.9%): [≈ 0, 30.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:32:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5871.004 ops/s
[info] # Warmup Iteration   2: 53750.750 ops/s
[info] # Warmup Iteration   3: 66280.816 ops/s
[info] # Warmup Iteration   4: 66546.622 ops/s
[info] # Warmup Iteration   5: 67054.466 ops/s
[info] Iteration   1: 66726.164 ops/s
[info]                  ·gc.alloc.rate:                   2679.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              63188.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63283.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 66942.517 ops/s
[info]                  ·gc.alloc.rate:                   2673.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              62849.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63253.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 66661.991 ops/s
[info]                  ·gc.alloc.rate:               2704.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          63810.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63635.267 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 66926.264 ops/s
[info]                  ·gc.alloc.rate:               2686.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          63170.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47689.602 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 66383.445 ops/s
[info]                  ·gc.alloc.rate:               2693.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          63850.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64212.389 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66728.076 ±(99.9%) 878.935 ops/s [Average]
[info]   (min, avg, max) = (66383.445, 66728.076, 66942.517), stdev = 228.257
[info]   CI (99.9%): [65849.141, 67607.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2687.586 ±(99.9%) 46.675 MB/sec [Average]
[info]   (min, avg, max) = (2673.488, 2687.586, 2704.711), stdev = 12.121
[info]   CI (99.9%): [2640.911, 2734.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63373.937 ±(99.9%) 1687.077 B/op [Average]
[info]   (min, avg, max) = (62849.627, 63373.937, 63850.043), stdev = 438.129
[info]   CI (99.9%): [61686.859, 65061.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2561.720 ±(99.9%) 1149.124 MB/sec [Average]
[info]   (min, avg, max) = (2028.136, 2561.720, 2708.704), stdev = 298.424
[info]   CI (99.9%): [1412.596, 3710.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60414.833 ±(99.9%) 27432.352 B/op [Average]
[info]   (min, avg, max) = (47689.602, 60414.833, 64212.389), stdev = 7124.095
[info]   CI (99.9%): [32982.481, 87847.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.479), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.356 ±(99.9%) 19.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.356, 11.292), stdev = 5.000
[info]   CI (99.9%): [≈ 0, 21.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30.92% complete, ETA 01:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44236.931 ops/s
[info] # Warmup Iteration   2: 171670.739 ops/s
[info] # Warmup Iteration   3: 175206.938 ops/s
[info] # Warmup Iteration   4: 182873.537 ops/s
[info] # Warmup Iteration   5: 183134.178 ops/s
[info] Iteration   1: 183502.629 ops/s
[info]                  ·gc.alloc.rate:               1430.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          12269.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11526.109 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 178597.301 ops/s
[info]                  ·gc.alloc.rate:               1390.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          12253.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11848.598 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 178217.320 ops/s
[info]                  ·gc.alloc.rate:                   1400.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              12367.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11879.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 176939.077 ops/s
[info]                  ·gc.alloc.rate:                   1403.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              12479.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11956.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 182334.131 ops/s
[info]                  ·gc.alloc.rate:                   1443.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              12462.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11579.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   179918.092 ±(99.9%) 10924.874 ops/s [Average]
[info]   (min, avg, max) = (176939.077, 179918.092, 183502.629), stdev = 2837.155
[info]   CI (99.9%): [168993.217, 190842.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1413.777 ±(99.9%) 86.569 MB/sec [Average]
[info]   (min, avg, max) = (1390.623, 1413.777, 1443.946), stdev = 22.482
[info]   CI (99.9%): [1327.207, 1500.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   12366.375 ±(99.9%) 404.385 B/op [Average]
[info]   (min, avg, max) = (12253.446, 12366.375, 12479.153), stdev = 105.018
[info]   CI (99.9%): [11961.990, 12770.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1343.991 ±(99.9%) 5.404 MB/sec [Average]
[info]   (min, avg, max) = (1341.644, 1343.991, 1345.333), stdev = 1.403
[info]   CI (99.9%): [1338.587, 1349.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11758.058 ±(99.9%) 740.364 B/op [Average]
[info]   (min, avg, max) = (11526.109, 11758.058, 11956.167), stdev = 192.270
[info]   CI (99.9%): [11017.695, 12498.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.039), stdev = 1.312
[info]   CI (99.9%): [≈ 0, 5.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.288 ±(99.9%) 44.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.288, 26.839), stdev = 11.588
[info]   CI (99.9%): [≈ 0, 50.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.12% complete, ETA 01:32:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71533.602 ops/s
[info] # Warmup Iteration   2: 174572.490 ops/s
[info] # Warmup Iteration   3: 180643.284 ops/s
[info] # Warmup Iteration   4: 178945.904 ops/s
[info] # Warmup Iteration   5: 182511.109 ops/s
[info] Iteration   1: 181574.891 ops/s
[info]                  ·gc.alloc.rate:               1209.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          10483.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11628.327 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 178135.323 ops/s
[info]                  ·gc.alloc.rate:               1170.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          10341.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5929.528 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 182032.314 ops/s
[info]                  ·gc.alloc.rate:                   1220.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              10549.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11607.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 182036.296 ops/s
[info]                  ·gc.alloc.rate:                   1208.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              10444.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11615.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 180652.311 ops/s
[info]                  ·gc.alloc.rate:                   1224.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              10669.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11699.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   180886.227 ±(99.9%) 6307.486 ops/s [Average]
[info]   (min, avg, max) = (178135.323, 180886.227, 182036.296), stdev = 1638.034
[info]   CI (99.9%): [174578.741, 187193.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1206.762 ±(99.9%) 82.567 MB/sec [Average]
[info]   (min, avg, max) = (1170.523, 1206.762, 1224.985), stdev = 21.442
[info]   CI (99.9%): [1124.195, 1289.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10497.621 ±(99.9%) 470.681 B/op [Average]
[info]   (min, avg, max) = (10341.134, 10497.621, 10669.563), stdev = 122.234
[info]   CI (99.9%): [10026.940, 10968.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.548 ±(99.9%) 1156.750 MB/sec [Average]
[info]   (min, avg, max) = (671.169, 1208.548, 1343.642), stdev = 300.404
[info]   CI (99.9%): [51.798, 2365.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10496.188 ±(99.9%) 9831.077 B/op [Average]
[info]   (min, avg, max) = (5929.528, 10496.188, 11699.528), stdev = 2553.099
[info]   CI (99.9%): [665.111, 20327.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 4.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 2.914), stdev = 1.272
[info]   CI (99.9%): [≈ 0, 5.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.655 ±(99.9%) 42.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.655, 25.196), stdev = 10.993
[info]   CI (99.9%): [≈ 0, 47.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.33% complete, ETA 01:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158524.273 ops/s
[info] # Warmup Iteration   2: 668715.048 ops/s
[info] # Warmup Iteration   3: 724028.549 ops/s
[info] # Warmup Iteration   4: 720928.724 ops/s
[info] # Warmup Iteration   5: 721237.665 ops/s
[info] Iteration   1: 695284.809 ops/s
[info]                  ·gc.alloc.rate:               718.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          1625.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1508.561 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 698388.342 ops/s
[info]                  ·gc.alloc.rate:               731.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1503.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 699630.443 ops/s
[info]                  ·gc.alloc.rate:                   723.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1627.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1500.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 699067.897 ops/s
[info]                  ·gc.alloc.rate:                   725.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 678483.249 ops/s
[info]                  ·gc.alloc.rate:               702.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1548.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   694170.948 ±(99.9%) 34382.886 ops/s [Average]
[info]   (min, avg, max) = (678483.249, 694170.948, 699630.443), stdev = 8929.126
[info]   CI (99.9%): [659788.062, 728553.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   720.054 ±(99.9%) 42.003 MB/sec [Average]
[info]   (min, avg, max) = (702.316, 720.054, 731.000), stdev = 10.908
[info]   CI (99.9%): [678.050, 762.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1632.291 ±(99.9%) 33.772 B/op [Average]
[info]   (min, avg, max) = (1625.357, 1632.291, 1647.210), stdev = 8.771
[info]   CI (99.9%): [1598.519, 1666.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.329 ±(99.9%) 1.916 MB/sec [Average]
[info]   (min, avg, max) = (666.671, 667.329, 667.847), stdev = 0.498
[info]   CI (99.9%): [665.412, 669.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1512.999 ±(99.9%) 78.259 B/op [Average]
[info]   (min, avg, max) = (1500.678, 1512.999, 1548.995), stdev = 20.324
[info]   CI (99.9%): [1434.740, 1591.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.047), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441883.563 ops/s
[info] # Warmup Iteration   2: 672834.261 ops/s
[info] # Warmup Iteration   3: 705572.137 ops/s
[info] # Warmup Iteration   4: 706755.947 ops/s
[info] # Warmup Iteration   5: 701321.343 ops/s
[info] Iteration   1: 700360.256 ops/s
[info]                  ·gc.alloc.rate:               576.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          1294.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1507.375 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 710212.338 ops/s
[info]                  ·gc.alloc.rate:      545.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.639 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 702125.557 ops/s
[info]                  ·gc.alloc.rate:                   562.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              1260.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 701265.743 ops/s
[info]                  ·gc.alloc.rate:               562.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1506.882 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 703176.989 ops/s
[info]                  ·gc.alloc.rate:                   558.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1250.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1502.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   703428.177 ±(99.9%) 15144.468 ops/s [Average]
[info]   (min, avg, max) = (700360.256, 703428.177, 710212.338), stdev = 3932.970
[info]   CI (99.9%): [688283.708, 718572.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.899 ±(99.9%) 42.045 MB/sec [Average]
[info]   (min, avg, max) = (545.442, 560.899, 576.064), stdev = 10.919
[info]   CI (99.9%): [518.854, 602.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1254.983 ±(99.9%) 118.552 B/op [Average]
[info]   (min, avg, max) = (1208.639, 1254.983, 1294.420), stdev = 30.788
[info]   CI (99.9%): [1136.430, 1373.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.929 ±(99.9%) 1155.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.929, 671.498), stdev = 300.152
[info]   CI (99.9%): [≈ 0, 1692.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.127 ±(99.9%) 2591.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1204.127, 1507.375), stdev = 673.130
[info]   CI (99.9%): [≈ 0, 3796.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.73% complete, ETA 01:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424037.411 ops/s
[info] # Warmup Iteration   2: 761403.782 ops/s
[info] # Warmup Iteration   3: 776744.567 ops/s
[info] # Warmup Iteration   4: 774397.410 ops/s
[info] # Warmup Iteration   5: 766489.055 ops/s
[info] Iteration   1: 778069.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 779936.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 777028.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 777396.770 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 777662.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   778018.834 ±(99.9%) 4379.900 ops/s [Average]
[info]   (min, avg, max) = (777028.706, 778018.834, 779936.693), stdev = 1137.446
[info]   CI (99.9%): [773638.934, 782398.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.93% complete, ETA 01:31:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88735.829 ops/s
[info] # Warmup Iteration   2: 318836.583 ops/s
[info] # Warmup Iteration   3: 351079.108 ops/s
[info] # Warmup Iteration   4: 352690.752 ops/s
[info] # Warmup Iteration   5: 354935.359 ops/s
[info] Iteration   1: 349025.290 ops/s
[info]                  ·gc.alloc.rate:               1011.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          4558.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6007.293 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 355182.033 ops/s
[info]                  ·gc.alloc.rate:               990.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          4389.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2954.558 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 352081.826 ops/s
[info]                  ·gc.alloc.rate:                   999.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              4468.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5965.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 343320.263 ops/s
[info]                  ·gc.alloc.rate:                   968.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              4440.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3061.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 352213.757 ops/s
[info]                  ·gc.alloc.rate:               996.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          4445.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5950.810 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   350364.634 ±(99.9%) 17327.079 ops/s [Average]
[info]   (min, avg, max) = (343320.263, 350364.634, 355182.033), stdev = 4499.787
[info]   CI (99.9%): [333037.555, 367691.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   993.311 ±(99.9%) 60.082 MB/sec [Average]
[info]   (min, avg, max) = (968.727, 993.311, 1011.010), stdev = 15.603
[info]   CI (99.9%): [933.229, 1053.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4460.441 ±(99.9%) 238.376 B/op [Average]
[info]   (min, avg, max) = (4389.272, 4460.441, 4558.232), stdev = 61.905
[info]   CI (99.9%): [4222.065, 4698.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1067.088 ±(99.9%) 1404.968 MB/sec [Average]
[info]   (min, avg, max) = (666.979, 1067.088, 1334.657), stdev = 364.866
[info]   CI (99.9%): [≈ 0, 2472.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4787.926 ±(99.9%) 6259.278 B/op [Average]
[info]   (min, avg, max) = (2954.558, 4787.926, 6007.293), stdev = 1625.515
[info]   CI (99.9%): [≈ 0, 11047.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32.13% complete, ETA 01:30:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18806.128 ops/s
[info] # Warmup Iteration   2: 40264.717 ops/s
[info] # Warmup Iteration   3: 41170.199 ops/s
[info] # Warmup Iteration   4: 41123.869 ops/s
[info] # Warmup Iteration   5: 41761.253 ops/s
[info] Iteration   1: 41776.808 ops/s
[info]                  ·gc.alloc.rate:               1089.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          41011.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50625.842 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 41927.423 ops/s
[info]                  ·gc.alloc.rate:               1065.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          39989.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25228.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 41704.375 ops/s
[info]                  ·gc.alloc.rate:               1074.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          40545.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50753.361 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 41940.059 ops/s
[info]                  ·gc.alloc.rate:                   1063.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              39920.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25247.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41792.547 ops/s
[info]                  ·gc.alloc.rate:                   1087.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              40937.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50684.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   41828.242 ±(99.9%) 392.703 ops/s [Average]
[info]   (min, avg, max) = (41704.375, 41828.242, 41940.059), stdev = 101.984
[info]   CI (99.9%): [41435.539, 42220.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1076.053 ±(99.9%) 45.293 MB/sec [Average]
[info]   (min, avg, max) = (1063.922, 1076.053, 1089.039), stdev = 11.762
[info]   CI (99.9%): [1030.761, 1121.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   40481.027 ±(99.9%) 1972.663 B/op [Average]
[info]   (min, avg, max) = (39920.328, 40481.027, 41011.195), stdev = 512.294
[info]   CI (99.9%): [38508.364, 42453.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1076.113 ±(99.9%) 1418.560 MB/sec [Average]
[info]   (min, avg, max) = (672.235, 1076.113, 1346.078), stdev = 368.396
[info]   CI (99.9%): [≈ 0, 2494.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40507.919 ±(99.9%) 53675.766 B/op [Average]
[info]   (min, avg, max) = (25228.633, 40507.919, 50753.361), stdev = 13939.426
[info]   CI (99.9%): [≈ 0, 94183.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.520 ±(99.9%) 4.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.520, 2.582), stdev = 1.152
[info]   CI (99.9%): [≈ 0, 4.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   19.597 ±(99.9%) 167.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.597, 97.204), stdev = 43.385
[info]   CI (99.9%): [≈ 0, 186.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1831.166 ops/s
[info] # Warmup Iteration   2: 8952.930 ops/s
[info] # Warmup Iteration   3: 10912.128 ops/s
[info] # Warmup Iteration   4: 11263.499 ops/s
[info] # Warmup Iteration   5: 11009.090 ops/s
[info] Iteration   1: 11227.242 ops/s
[info]                  ·gc.alloc.rate:                   1406.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              197113.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188146.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11045.622 ops/s
[info]                  ·gc.alloc.rate:                   1376.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              196136.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191340.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11022.054 ops/s
[info]                  ·gc.alloc.rate:               1380.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          197039.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 191739.611 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 10869.935 ops/s
[info]                  ·gc.alloc.rate:                   1352.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              195767.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194612.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11230.412 ops/s
[info]                  ·gc.alloc.rate:                   1409.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              197472.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187815.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11079.053 ±(99.9%) 587.039 ops/s [Average]
[info]   (min, avg, max) = (10869.935, 11079.053, 11230.412), stdev = 152.452
[info]   CI (99.9%): [10492.014, 11666.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1384.935 ±(99.9%) 90.683 MB/sec [Average]
[info]   (min, avg, max) = (1352.175, 1384.935, 1409.298), stdev = 23.550
[info]   CI (99.9%): [1294.252, 1475.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   196705.952 ±(99.9%) 2770.086 B/op [Average]
[info]   (min, avg, max) = (195767.480, 196705.952, 197472.203), stdev = 719.382
[info]   CI (99.9%): [193935.867, 199476.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.603 ±(99.9%) 5.394 MB/sec [Average]
[info]   (min, avg, max) = (1340.384, 1342.603, 1344.200), stdev = 1.401
[info]   CI (99.9%): [1337.208, 1347.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   190730.976 ±(99.9%) 10829.520 B/op [Average]
[info]   (min, avg, max) = (187815.803, 190730.976, 194612.928), stdev = 2812.392
[info]   CI (99.9%): [179901.456, 201560.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.684), stdev = 1.623
[info]   CI (99.9%): [≈ 0, 7.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   113.113 ±(99.9%) 905.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.113, 533.426), stdev = 235.137
[info]   CI (99.9%): [≈ 0, 1018.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.53% complete, ETA 01:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1551.319 ops/s
[info] # Warmup Iteration   2: 8675.536 ops/s
[info] # Warmup Iteration   3: 11062.505 ops/s
[info] # Warmup Iteration   4: 10907.949 ops/s
[info] # Warmup Iteration   5: 11071.453 ops/s
[info] Iteration   1: 11096.450 ops/s
[info]                  ·gc.alloc.rate:                   1294.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              183565.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189705.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11023.605 ops/s
[info]                  ·gc.alloc.rate:               1283.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          183199.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95519.597 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 11066.180 ops/s
[info]                  ·gc.alloc.rate:                   1294.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              184067.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190361.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11085.500 ops/s
[info]                  ·gc.alloc.rate:                   1289.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              183041.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190112.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 541.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 11144.505 ops/s
[info]                  ·gc.alloc.rate:                   1292.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              182462.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188935.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11083.248 ±(99.9%) 169.826 ops/s [Average]
[info]   (min, avg, max) = (11023.605, 11083.248, 11144.505), stdev = 44.103
[info]   CI (99.9%): [10913.422, 11253.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1290.696 ±(99.9%) 17.744 MB/sec [Average]
[info]   (min, avg, max) = (1283.295, 1290.696, 1294.351), stdev = 4.608
[info]   CI (99.9%): [1272.952, 1308.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   183267.480 ±(99.9%) 2303.902 B/op [Average]
[info]   (min, avg, max) = (182462.893, 183267.480, 184067.547), stdev = 598.316
[info]   CI (99.9%): [180963.578, 185571.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.498 ±(99.9%) 1152.475 MB/sec [Average]
[info]   (min, avg, max) = (669.106, 1204.498, 1339.212), stdev = 299.294
[info]   CI (99.9%): [52.023, 2356.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   170927.040 ±(99.9%) 162333.541 B/op [Average]
[info]   (min, avg, max) = (95519.597, 170927.040, 190361.683), stdev = 42157.505
[info]   CI (99.9%): [8593.499, 333260.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.976 ±(99.9%) 6.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.976, 3.816), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 7.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   138.414 ±(99.9%) 880.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 138.414, 541.717), stdev = 228.707
[info]   CI (99.9%): [≈ 0, 1019.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.73% complete, ETA 01:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131273.563 ops/s
[info] # Warmup Iteration   2: 258850.353 ops/s
[info] # Warmup Iteration   3: 274502.004 ops/s
[info] # Warmup Iteration   4: 273209.206 ops/s
[info] # Warmup Iteration   5: 267745.131 ops/s
[info] Iteration   1: 273937.726 ops/s
[info]                  ·gc.alloc.rate:                   1822.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              10466.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7738.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 268265.108 ops/s
[info]                  ·gc.alloc.rate:                   1811.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              10622.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11844.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 269432.496 ops/s
[info]                  ·gc.alloc.rate:                   1819.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              10627.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11770.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 275083.589 ops/s
[info]                  ·gc.alloc.rate:                   1843.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7682.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 276353.734 ops/s
[info]                  ·gc.alloc.rate:                   1878.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11473.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   272614.531 ±(99.9%) 13732.224 ops/s [Average]
[info]   (min, avg, max) = (268265.108, 272614.531, 276353.734), stdev = 3566.215
[info]   CI (99.9%): [258882.306, 286346.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1834.866 ±(99.9%) 104.055 MB/sec [Average]
[info]   (min, avg, max) = (1811.310, 1834.866, 1878.418), stdev = 27.023
[info]   CI (99.9%): [1730.811, 1938.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10591.596 ±(99.9%) 339.832 B/op [Average]
[info]   (min, avg, max) = (10466.856, 10591.596, 10696.952), stdev = 88.253
[info]   CI (99.9%): [10251.765, 10931.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.941 ±(99.9%) 1416.465 MB/sec [Average]
[info]   (min, avg, max) = (1342.970, 1747.941, 2019.720), stdev = 367.852
[info]   CI (99.9%): [331.476, 3164.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10102.020 ±(99.9%) 8423.616 B/op [Average]
[info]   (min, avg, max) = (7682.992, 10102.020, 11844.806), stdev = 2187.586
[info]   CI (99.9%): [1678.405, 18525.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 4.710 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.633, 2.811), stdev = 1.223
[info]   CI (99.9%): [≈ 0, 5.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.709 ±(99.9%) 27.630 B/op [Average]
[info]   (min, avg, max) = (0.119, 3.709, 16.486), stdev = 7.175
[info]   CI (99.9%): [≈ 0, 31.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.93% complete, ETA 01:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1147.448 ops/s
[info] # Warmup Iteration   2: 6665.047 ops/s
[info] # Warmup Iteration   3: 8603.087 ops/s
[info] # Warmup Iteration   4: 8728.721 ops/s
[info] # Warmup Iteration   5: 8689.814 ops/s
[info] Iteration   1: 8633.011 ops/s
[info]                  ·gc.alloc.rate:                   1555.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              283476.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365878.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8484.203 ops/s
[info]                  ·gc.alloc.rate:                   1531.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              284032.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248366.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8537.043 ops/s
[info]                  ·gc.alloc.rate:                   1542.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              284357.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247070.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 764.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8335.967 ops/s
[info]                  ·gc.alloc.rate:                   1504.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              284069.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252271.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8462.100 ops/s
[info]                  ·gc.alloc.rate:               1528.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          284215.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 248020.930 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8490.465 ±(99.9%) 418.297 ops/s [Average]
[info]   (min, avg, max) = (8335.967, 8490.465, 8633.011), stdev = 108.631
[info]   CI (99.9%): [8072.167, 8908.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1532.473 ±(99.9%) 72.292 MB/sec [Average]
[info]   (min, avg, max) = (1504.809, 1532.473, 1555.385), stdev = 18.774
[info]   CI (99.9%): [1460.181, 1604.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284030.271 ±(99.9%) 1290.770 B/op [Average]
[info]   (min, avg, max) = (283476.652, 284030.271, 284357.823), stdev = 335.209
[info]   CI (99.9%): [282739.501, 285321.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.372 ±(99.9%) 1154.113 MB/sec [Average]
[info]   (min, avg, max) = (1333.720, 1471.372, 2007.508), stdev = 299.719
[info]   CI (99.9%): [317.260, 2625.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   272321.632 ±(99.9%) 201532.959 B/op [Average]
[info]   (min, avg, max) = (247070.490, 272321.632, 365878.343), stdev = 52337.469
[info]   CI (99.9%): [70788.674, 473854.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.929 ±(99.9%) 6.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.929, 4.145), stdev = 1.807
[info]   CI (99.9%): [≈ 0, 7.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   171.621 ±(99.9%) 1282.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 171.621, 764.058), stdev = 332.942
[info]   CI (99.9%): [≈ 0, 1453.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.701
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33.13% complete, ETA 01:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1505.997 ops/s
[info] # Warmup Iteration   2: 8580.897 ops/s
[info] # Warmup Iteration   3: 10611.797 ops/s
[info] # Warmup Iteration   4: 10658.976 ops/s
[info] # Warmup Iteration   5: 10632.610 ops/s
[info] Iteration   1: 10408.878 ops/s
[info]                  ·gc.alloc.rate:                   1264.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              191253.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202946.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10520.775 ops/s
[info]                  ·gc.alloc.rate:               1258.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          188298.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100443.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 10672.159 ops/s
[info]                  ·gc.alloc.rate:                   1301.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              191805.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198026.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10625.785 ops/s
[info]                  ·gc.alloc.rate:                   1283.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              190146.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198981.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 496.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10638.410 ops/s
[info]                  ·gc.alloc.rate:                   1297.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              191883.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198560.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10573.201 ±(99.9%) 415.444 ops/s [Average]
[info]   (min, avg, max) = (10408.878, 10573.201, 10672.159), stdev = 107.889
[info]   CI (99.9%): [10157.758, 10988.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1281.227 ±(99.9%) 72.592 MB/sec [Average]
[info]   (min, avg, max) = (1258.907, 1281.227, 1301.171), stdev = 18.852
[info]   CI (99.9%): [1208.636, 1353.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   190677.404 ±(99.9%) 5775.223 B/op [Average]
[info]   (min, avg, max) = (188298.727, 190677.404, 191883.099), stdev = 1499.807
[info]   CI (99.9%): [184902.181, 196452.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208.621 ±(99.9%) 1156.124 MB/sec [Average]
[info]   (min, avg, max) = (671.533, 1208.621, 1343.547), stdev = 300.242
[info]   CI (99.9%): [52.496, 2364.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   179791.709 ±(99.9%) 170967.677 B/op [Average]
[info]   (min, avg, max) = (100443.277, 179791.709, 202946.945), stdev = 44399.763
[info]   CI (99.9%): [8824.032, 350759.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.351), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   111.598 ±(99.9%) 832.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.598, 496.345), stdev = 216.321
[info]   CI (99.9%): [≈ 0, 944.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 01:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8055.813 ops/s
[info] # Warmup Iteration   2: 23145.865 ops/s
[info] # Warmup Iteration   3: 25399.452 ops/s
[info] # Warmup Iteration   4: 25417.508 ops/s
[info] # Warmup Iteration   5: 25469.171 ops/s
[info] Iteration   1: 25543.856 ops/s
[info]                  ·gc.alloc.rate:                   1346.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              82960.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82168.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25693.645 ops/s
[info]                  ·gc.alloc.rate:                   1341.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              82142.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81709.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 25702.170 ops/s
[info]                  ·gc.alloc.rate:               1341.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          82104.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81745.363 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 25401.594 ops/s
[info]                  ·gc.alloc.rate:               1337.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          82864.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82817.073 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 25687.890 ops/s
[info]                  ·gc.alloc.rate:               1365.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          83622.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82014.381 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25605.831 ±(99.9%) 506.765 ops/s [Average]
[info]   (min, avg, max) = (25401.594, 25605.831, 25702.170), stdev = 131.605
[info]   CI (99.9%): [25099.066, 26112.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1346.341 ±(99.9%) 42.044 MB/sec [Average]
[info]   (min, avg, max) = (1337.622, 1346.341, 1365.024), stdev = 10.919
[info]   CI (99.9%): [1304.298, 1388.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82738.835 ±(99.9%) 2439.148 B/op [Average]
[info]   (min, avg, max) = (82104.162, 82738.835, 83622.510), stdev = 633.439
[info]   CI (99.9%): [80299.688, 85177.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1335.782 ±(99.9%) 8.025 MB/sec [Average]
[info]   (min, avg, max) = (1333.693, 1335.782, 1338.774), stdev = 2.084
[info]   CI (99.9%): [1327.758, 1343.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   82091.050 ±(99.9%) 1726.399 B/op [Average]
[info]   (min, avg, max) = (81709.605, 82091.050, 82817.073), stdev = 448.340
[info]   CI (99.9%): [80364.651, 83817.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.512 ±(99.9%) 2.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 1.283), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.53% complete, ETA 01:28:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11705.409 ops/s
[info] # Warmup Iteration   2: 32245.833 ops/s
[info] # Warmup Iteration   3: 31812.741 ops/s
[info] # Warmup Iteration   4: 32131.278 ops/s
[info] # Warmup Iteration   5: 31966.083 ops/s
[info] Iteration   1: 29419.242 ops/s
[info]                  ·gc.alloc.rate:               1204.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          64428.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35794.691 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 29807.499 ops/s
[info]                  ·gc.alloc.rate:                   1249.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              65925.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70695.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28757.107 ops/s
[info]                  ·gc.alloc.rate:               1204.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          65878.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73351.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 29138.735 ops/s
[info]                  ·gc.alloc.rate:                   1205.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              65095.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72426.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 29930.535 ops/s
[info]                  ·gc.alloc.rate:                   1263.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              66424.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70337.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29410.624 ±(99.9%) 1855.616 ops/s [Average]
[info]   (min, avg, max) = (28757.107, 29410.624, 29930.535), stdev = 481.898
[info]   CI (99.9%): [27555.008, 31266.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1225.426 ±(99.9%) 110.477 MB/sec [Average]
[info]   (min, avg, max) = (1204.115, 1225.426, 1263.655), stdev = 28.690
[info]   CI (99.9%): [1114.949, 1335.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65550.581 ±(99.9%) 3031.287 B/op [Average]
[info]   (min, avg, max) = (64428.484, 65550.581, 66424.767), stdev = 787.216
[info]   CI (99.9%): [62519.293, 68581.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.776 ±(99.9%) 1154.818 MB/sec [Average]
[info]   (min, avg, max) = (669.299, 1205.776, 1341.421), stdev = 299.903
[info]   CI (99.9%): [50.958, 2360.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64520.901 ±(99.9%) 62018.544 B/op [Average]
[info]   (min, avg, max) = (35794.691, 64520.901, 73351.468), stdev = 16106.019
[info]   CI (99.9%): [2502.358, 126539.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.830 ±(99.9%) 6.750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.830, 3.963), stdev = 1.753
[info]   CI (99.9%): [≈ 0, 7.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44.775 ±(99.9%) 364.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.775, 213.988), stdev = 94.665
[info]   CI (99.9%): [≈ 0, 409.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.73% complete, ETA 01:28:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345330.799 ops/s
[info] # Warmup Iteration   2: 577518.659 ops/s
[info] # Warmup Iteration   3: 588080.308 ops/s
[info] # Warmup Iteration   4: 606156.291 ops/s
[info] # Warmup Iteration   5: 615650.058 ops/s
[info] Iteration   1: 606184.478 ops/s
[info]                  ·gc.alloc.rate:                   1131.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              2936.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3490.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 604458.724 ops/s
[info]                  ·gc.alloc.rate:                   1122.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              2921.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3502.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 614262.641 ops/s
[info]                  ·gc.alloc.rate:               1122.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          2876.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1723.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 612298.849 ops/s
[info]                  ·gc.alloc.rate:                   1133.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              2911.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3460.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 609673.420 ops/s
[info]                  ·gc.alloc.rate:                   1127.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              2910.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3477.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   609375.622 ±(99.9%) 15744.871 ops/s [Average]
[info]   (min, avg, max) = (604458.724, 609375.622, 614262.641), stdev = 4088.893
[info]   CI (99.9%): [593630.752, 625120.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1127.531 ±(99.9%) 18.469 MB/sec [Average]
[info]   (min, avg, max) = (1122.440, 1127.531, 1133.076), stdev = 4.796
[info]   CI (99.9%): [1109.062, 1146.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2911.205 ±(99.9%) 85.082 B/op [Average]
[info]   (min, avg, max) = (2876.300, 2911.205, 2936.284), stdev = 22.096
[info]   CI (99.9%): [2826.123, 2996.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.525 ±(99.9%) 1159.165 MB/sec [Average]
[info]   (min, avg, max) = (673.026, 1211.525, 1347.347), stdev = 301.031
[info]   CI (99.9%): [52.360, 2370.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3130.845 ±(99.9%) 3029.287 B/op [Average]
[info]   (min, avg, max) = (1723.840, 3130.845, 3502.677), stdev = 786.696
[info]   CI (99.9%): [101.558, 6160.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.596 ±(99.9%) 4.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 2.749), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.537 ±(99.9%) 11.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.537, 7.093), stdev = 3.107
[info]   CI (99.9%): [≈ 0, 13.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.94% complete, ETA 01:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482007.135 ops/s
[info] # Warmup Iteration   2: 719507.885 ops/s
[info] # Warmup Iteration   3: 728967.694 ops/s
[info] # Warmup Iteration   4: 718749.699 ops/s
[info] # Warmup Iteration   5: 761834.262 ops/s
[info] Iteration   1: 771247.278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 765510.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 757447.823 ops/s
[info]                  ·gc.alloc.rate:      0.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.167 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 763837.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 771053.346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   765819.362 ±(99.9%) 22033.092 ops/s [Average]
[info]   (min, avg, max) = (757447.823, 765819.362, 771247.278), stdev = 5721.924
[info]   CI (99.9%): [743786.270, 787852.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.034 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.034, 0.167), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.14% complete, ETA 01:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9249.652 ops/s
[info] # Warmup Iteration   2: 25407.876 ops/s
[info] # Warmup Iteration   3: 30377.472 ops/s
[info] # Warmup Iteration   4: 30602.440 ops/s
[info] # Warmup Iteration   5: 30385.978 ops/s
[info] Iteration   1: 29706.804 ops/s
[info]                  ·gc.alloc.rate:                   1345.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              71295.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71003.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30130.713 ops/s
[info]                  ·gc.alloc.rate:               1370.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          71576.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70039.602 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 30523.795 ops/s
[info]                  ·gc.alloc.rate:                   1388.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              71600.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69172.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 29722.411 ops/s
[info]                  ·gc.alloc.rate:                   1337.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              70809.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35519.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30654.139 ops/s
[info]                  ·gc.alloc.rate:                   1394.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              71607.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103041.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   30147.572 ±(99.9%) 1693.273 ops/s [Average]
[info]   (min, avg, max) = (29706.804, 30147.572, 30654.139), stdev = 439.738
[info]   CI (99.9%): [28454.300, 31840.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1367.522 ±(99.9%) 97.825 MB/sec [Average]
[info]   (min, avg, max) = (1337.525, 1367.522, 1394.946), stdev = 25.405
[info]   CI (99.9%): [1269.697, 1465.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71377.894 ±(99.9%) 1322.887 B/op [Average]
[info]   (min, avg, max) = (70809.174, 71377.894, 71607.317), stdev = 343.550
[info]   CI (99.9%): [70055.007, 72700.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.266 ±(99.9%) 1819.355 MB/sec [Average]
[info]   (min, avg, max) = (670.928, 1340.266, 2007.302), stdev = 472.481
[info]   CI (99.9%): [≈ 0, 3159.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69755.320 ±(99.9%) 91974.524 B/op [Average]
[info]   (min, avg, max) = (35519.242, 69755.320, 103041.632), stdev = 23885.492
[info]   CI (99.9%): [≈ 0, 161729.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 5.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.208), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   41.672 ±(99.9%) 274.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.672, 165.402), stdev = 71.162
[info]   CI (99.9%): [≈ 0, 315.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.400, 7.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34.34% complete, ETA 01:27:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5943.971 ops/s
[info] # Warmup Iteration   2: 13210.858 ops/s
[info] # Warmup Iteration   3: 14247.894 ops/s
[info] # Warmup Iteration   4: 14108.137 ops/s
[info] # Warmup Iteration   5: 13995.939 ops/s
[info] Iteration   1: 14239.436 ops/s
[info]                  ·gc.alloc.rate:               1321.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          146066.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148576.490 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 14283.297 ops/s
[info]                  ·gc.alloc.rate:                   1313.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              144738.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148192.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14140.459 ops/s
[info]                  ·gc.alloc.rate:                   1318.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              146749.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149764.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 14169.344 ops/s
[info]                  ·gc.alloc.rate:                   1323.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              146993.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149458.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14278.799 ops/s
[info]                  ·gc.alloc.rate:                   1312.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              144648.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148013.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   14222.267 ±(99.9%) 248.872 ops/s [Average]
[info]   (min, avg, max) = (14140.459, 14222.267, 14283.297), stdev = 64.631
[info]   CI (99.9%): [13973.395, 14471.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1318.043 ±(99.9%) 18.416 MB/sec [Average]
[info]   (min, avg, max) = (1312.481, 1318.043, 1323.544), stdev = 4.783
[info]   CI (99.9%): [1299.627, 1336.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   145839.161 ±(99.9%) 4236.463 B/op [Average]
[info]   (min, avg, max) = (144648.239, 145839.161, 146993.491), stdev = 1100.196
[info]   CI (99.9%): [141602.698, 150075.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.821 ±(99.9%) 4.454 MB/sec [Average]
[info]   (min, avg, max) = (1343.016, 1344.821, 1345.738), stdev = 1.157
[info]   CI (99.9%): [1340.367, 1349.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   148801.086 ±(99.9%) 2983.967 B/op [Average]
[info]   (min, avg, max) = (148013.529, 148801.086, 149764.797), stdev = 774.927
[info]   CI (99.9%): [145817.119, 151785.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 4.723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.831), stdev = 1.227
[info]   CI (99.9%): [≈ 0, 5.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   73.449 ±(99.9%) 524.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.449, 314.454), stdev = 136.235
[info]   CI (99.9%): [≈ 0, 598.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.54% complete, ETA 01:27:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3726.140 ops/s
[info] # Warmup Iteration   2: 26530.728 ops/s
[info] # Warmup Iteration   3: 32803.707 ops/s
[info] # Warmup Iteration   4: 33159.458 ops/s
[info] # Warmup Iteration   5: 33099.957 ops/s
[info] Iteration   1: 33525.920 ops/s
[info]                  ·gc.alloc.rate:                   1769.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              83041.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94534.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.932 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 32906.840 ops/s
[info]                  ·gc.alloc.rate:                   1731.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              82812.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64243.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 33202.212 ops/s
[info]                  ·gc.alloc.rate:                   1786.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              84690.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95375.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.762 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33609.948 ops/s
[info]                  ·gc.alloc.rate:                   1794.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              84036.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93952.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33736.091 ops/s
[info]                  ·gc.alloc.rate:               1774.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          82785.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62414.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   33396.202 ±(99.9%) 1298.909 ops/s [Average]
[info]   (min, avg, max) = (32906.840, 33396.202, 33736.091), stdev = 337.322
[info]   CI (99.9%): [32097.294, 34695.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1771.479 ±(99.9%) 93.591 MB/sec [Average]
[info]   (min, avg, max) = (1731.838, 1771.479, 1794.805), stdev = 24.305
[info]   CI (99.9%): [1677.887, 1865.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83473.457 ±(99.9%) 3276.087 B/op [Average]
[info]   (min, avg, max) = (82785.648, 83473.457, 84690.861), stdev = 850.789
[info]   CI (99.9%): [80197.370, 86749.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.889 ±(99.9%) 1413.615 MB/sec [Average]
[info]   (min, avg, max) = (1338.007, 1742.889, 2014.212), stdev = 367.111
[info]   CI (99.9%): [329.274, 3156.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   82104.258 ±(99.9%) 66072.302 B/op [Average]
[info]   (min, avg, max) = (62414.868, 82104.258, 95375.325), stdev = 17158.767
[info]   CI (99.9%): [16031.955, 148176.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.415), stdev = 1.481
[info]   CI (99.9%): [≈ 0, 6.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   37.184 ±(99.9%) 272.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.184, 163.277), stdev = 70.842
[info]   CI (99.9%): [≈ 0, 309.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.74% complete, ETA 01:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4765.825 ops/s
[info] # Warmup Iteration   2: 27126.645 ops/s
[info] # Warmup Iteration   3: 32896.352 ops/s
[info] # Warmup Iteration   4: 33515.554 ops/s
[info] # Warmup Iteration   5: 33380.073 ops/s
[info] Iteration   1: 33123.428 ops/s
[info]                  ·gc.alloc.rate:                   1457.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              69225.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63587.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 31471.954 ops/s
[info]                  ·gc.alloc.rate:               1407.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          70371.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66970.426 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 32307.281 ops/s
[info]                  ·gc.alloc.rate:                   1430.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              69683.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65270.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 32471.733 ops/s
[info]                  ·gc.alloc.rate:                   1449.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              70244.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64858.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33687.052 ops/s
[info]                  ·gc.alloc.rate:               1490.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          69621.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62396.714 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   32612.290 ±(99.9%) 3238.622 ops/s [Average]
[info]   (min, avg, max) = (31471.954, 32612.290, 33687.052), stdev = 841.060
[info]   CI (99.9%): [29373.668, 35850.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1446.923 ±(99.9%) 119.119 MB/sec [Average]
[info]   (min, avg, max) = (1407.322, 1446.923, 1490.313), stdev = 30.935
[info]   CI (99.9%): [1327.805, 1566.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69829.205 ±(99.9%) 1821.398 B/op [Average]
[info]   (min, avg, max) = (69225.580, 69829.205, 70371.214), stdev = 473.011
[info]   CI (99.9%): [68007.807, 71650.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.309 ±(99.9%) 6.270 MB/sec [Average]
[info]   (min, avg, max) = (1335.669, 1338.309, 1339.930), stdev = 1.628
[info]   CI (99.9%): [1332.039, 1344.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64616.595 ±(99.9%) 6673.167 B/op [Average]
[info]   (min, avg, max) = (62396.714, 64616.595, 66970.426), stdev = 1733.000
[info]   CI (99.9%): [57943.428, 71289.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 5.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 3.541), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42.763 ±(99.9%) 286.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.763, 172.490), stdev = 74.434
[info]   CI (99.9%): [≈ 0, 329.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.94% complete, ETA 01:27:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219820.068 ops/s
[info] # Warmup Iteration   2: 430770.974 ops/s
[info] # Warmup Iteration   3: 445690.150 ops/s
[info] # Warmup Iteration   4: 446035.510 ops/s
[info] # Warmup Iteration   5: 460160.226 ops/s
[info] Iteration   1: 459436.016 ops/s
[info]                  ·gc.alloc.rate:               1228.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          4206.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4605.063 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 461001.976 ops/s
[info]                  ·gc.alloc.rate:               1226.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          4187.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2295.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 458792.369 ops/s
[info]                  ·gc.alloc.rate:                   1222.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4614.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 445826.980 ops/s
[info]                  ·gc.alloc.rate:                   1214.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              4286.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4751.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 421220.601 ops/s
[info]                  ·gc.alloc.rate:                   1135.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              4241.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5026.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   449255.588 ±(99.9%) 64728.763 ops/s [Average]
[info]   (min, avg, max) = (421220.601, 449255.588, 461001.976), stdev = 16809.854
[info]   CI (99.9%): [384526.825, 513984.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1205.322 ±(99.9%) 151.990 MB/sec [Average]
[info]   (min, avg, max) = (1135.358, 1205.322, 1228.124), stdev = 39.471
[info]   CI (99.9%): [1053.332, 1357.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4222.723 ±(99.9%) 161.147 B/op [Average]
[info]   (min, avg, max) = (4187.326, 4222.723, 4286.844), stdev = 41.849
[info]   CI (99.9%): [4061.576, 4383.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.791 ±(99.9%) 1158.606 MB/sec [Average]
[info]   (min, avg, max) = (672.550, 1210.791, 1345.993), stdev = 300.886
[info]   CI (99.9%): [52.185, 2369.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4258.657 ±(99.9%) 4275.552 B/op [Average]
[info]   (min, avg, max) = (2295.843, 4258.657, 5026.417), stdev = 1110.347
[info]   CI (99.9%): [≈ 0, 8534.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.540), stdev = 1.103
[info]   CI (99.9%): [≈ 0, 4.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.070 ±(99.9%) 14.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.070, 8.965), stdev = 3.889
[info]   CI (99.9%): [≈ 0, 17.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.14% complete, ETA 01:26:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1182.414 ops/s
[info] # Warmup Iteration   2: 12500.792 ops/s
[info] # Warmup Iteration   3: 18077.705 ops/s
[info] # Warmup Iteration   4: 17980.532 ops/s
[info] # Warmup Iteration   5: 18119.897 ops/s
[info] Iteration   1: 18281.642 ops/s
[info]                  ·gc.alloc.rate:               1839.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          158336.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115081.316 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 17945.807 ops/s
[info]                  ·gc.alloc.rate:                   1840.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              161357.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176008.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 18260.083 ops/s
[info]                  ·gc.alloc.rate:                   1875.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              161601.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172466.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18467.106 ops/s
[info]                  ·gc.alloc.rate:               1867.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          159158.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113531.399 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 18130.085 ops/s
[info]                  ·gc.alloc.rate:               1848.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          160411.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173461.704 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18216.944 ±(99.9%) 744.897 ops/s [Average]
[info]   (min, avg, max) = (17945.807, 18216.944, 18467.106), stdev = 193.447
[info]   CI (99.9%): [17472.048, 18961.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1854.073 ±(99.9%) 63.106 MB/sec [Average]
[info]   (min, avg, max) = (1839.430, 1854.073, 1875.109), stdev = 16.389
[info]   CI (99.9%): [1790.966, 1917.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160173.010 ±(99.9%) 5412.101 B/op [Average]
[info]   (min, avg, max) = (158336.711, 160173.010, 161601.357), stdev = 1405.505
[info]   CI (99.9%): [154760.909, 165585.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1735.187 ±(99.9%) 1408.211 MB/sec [Average]
[info]   (min, avg, max) = (1332.264, 1735.187, 2007.149), stdev = 365.708
[info]   CI (99.9%): [326.977, 3143.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   150109.897 ±(99.9%) 125970.446 B/op [Average]
[info]   (min, avg, max) = (113531.399, 150109.897, 176008.885), stdev = 32714.125
[info]   CI (99.9%): [24139.451, 276080.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 7.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.937, 4.309), stdev = 1.892
[info]   CI (99.9%): [≈ 0, 8.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82.035 ±(99.9%) 639.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.035, 377.882), stdev = 165.973
[info]   CI (99.9%): [≈ 0, 721.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35.34% complete, ETA 01:26:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4247.456 ops/s
[info] # Warmup Iteration   2: 26510.752 ops/s
[info] # Warmup Iteration   3: 33335.796 ops/s
[info] # Warmup Iteration   4: 33891.585 ops/s
[info] # Warmup Iteration   5: 33200.743 ops/s
[info] Iteration   1: 33519.921 ops/s
[info]                  ·gc.alloc.rate:               1646.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          77311.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63112.216 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 33616.376 ops/s
[info]                  ·gc.alloc.rate:                   1664.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              77912.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94416.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 33582.401 ops/s
[info]                  ·gc.alloc.rate:                   1647.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              77186.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62948.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33353.786 ops/s
[info]                  ·gc.alloc.rate:               1662.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          78440.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63241.454 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 33555.777 ops/s
[info]                  ·gc.alloc.rate:                   1673.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              78465.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94189.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   33525.652 ±(99.9%) 394.242 ops/s [Average]
[info]   (min, avg, max) = (33353.786, 33525.652, 33616.376), stdev = 102.383
[info]   CI (99.9%): [33131.410, 33919.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1658.831 ±(99.9%) 44.424 MB/sec [Average]
[info]   (min, avg, max) = (1646.844, 1658.831, 1673.188), stdev = 11.537
[info]   CI (99.9%): [1614.407, 1703.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   77863.149 ±(99.9%) 2326.774 B/op [Average]
[info]   (min, avg, max) = (77186.309, 77863.149, 78465.283), stdev = 604.256
[info]   CI (99.9%): [75536.375, 80189.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1610.728 ±(99.9%) 1413.457 MB/sec [Average]
[info]   (min, avg, max) = (1340.315, 1610.728, 2017.152), stdev = 367.070
[info]   CI (99.9%): [197.271, 3024.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   75581.618 ±(99.9%) 65809.393 B/op [Average]
[info]   (min, avg, max) = (62948.899, 75581.618, 94416.436), stdev = 17090.490
[info]   CI (99.9%): [9772.225, 141391.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.165), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 6.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   35.285 ±(99.9%) 246.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.285, 148.135), stdev = 64.063
[info]   CI (99.9%): [≈ 0, 281.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.54% complete, ETA 01:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9949.107 ops/s
[info] # Warmup Iteration   2: 52803.749 ops/s
[info] # Warmup Iteration   3: 56099.167 ops/s
[info] # Warmup Iteration   4: 56755.606 ops/s
[info] # Warmup Iteration   5: 56648.879 ops/s
[info] Iteration   1: 56356.630 ops/s
[info]                  ·gc.alloc.rate:                   1709.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              47709.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37455.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 56865.094 ops/s
[info]                  ·gc.alloc.rate:                   1749.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              48407.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55711.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 57145.728 ops/s
[info]                  ·gc.alloc.rate:                   1741.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              47949.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36875.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56448.977 ops/s
[info]                  ·gc.alloc.rate:                   1760.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              49071.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55937.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.902 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 55120.967 ops/s
[info]                  ·gc.alloc.rate:               1682.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          48020.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38190.206 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   56387.479 ±(99.9%) 2990.046 ops/s [Average]
[info]   (min, avg, max) = (55120.967, 56387.479, 57145.728), stdev = 776.505
[info]   CI (99.9%): [53397.433, 59377.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1728.516 ±(99.9%) 124.423 MB/sec [Average]
[info]   (min, avg, max) = (1682.062, 1728.516, 1760.567), stdev = 32.312
[info]   CI (99.9%): [1604.093, 1852.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48231.873 ±(99.9%) 2049.937 B/op [Average]
[info]   (min, avg, max) = (47709.793, 48231.873, 49071.878), stdev = 532.362
[info]   CI (99.9%): [46181.936, 50281.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1607.812 ±(99.9%) 1414.715 MB/sec [Average]
[info]   (min, avg, max) = (1337.730, 1607.812, 2013.626), stdev = 367.397
[info]   CI (99.9%): [193.097, 3022.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44833.923 ±(99.9%) 38676.500 B/op [Average]
[info]   (min, avg, max) = (36875.180, 44833.923, 55937.920), stdev = 10044.164
[info]   CI (99.9%): [6157.423, 83510.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.384 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.748), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.667 ±(99.9%) 176.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.667, 103.698), stdev = 45.870
[info]   CI (99.9%): [≈ 0, 198.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.74% complete, ETA 01:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64052.056 ops/s
[info] # Warmup Iteration   2: 142263.112 ops/s
[info] # Warmup Iteration   3: 159498.310 ops/s
[info] # Warmup Iteration   4: 160003.812 ops/s
[info] # Warmup Iteration   5: 156081.864 ops/s
[info] Iteration   1: 159609.340 ops/s
[info]                  ·gc.alloc.rate:                   1923.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              18967.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19826.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 157521.808 ops/s
[info]                  ·gc.alloc.rate:                   1913.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              19116.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20063.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.576 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 157336.754 ops/s
[info]                  ·gc.alloc.rate:                   1897.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              18976.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13366.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 160437.685 ops/s
[info]                  ·gc.alloc.rate:               1948.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          19108.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19664.680 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 157240.672 ops/s
[info]                  ·gc.alloc.rate:               1924.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          19256.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20084.278 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   158429.252 ±(99.9%) 5729.618 ops/s [Average]
[info]   (min, avg, max) = (157240.672, 158429.252, 160437.685), stdev = 1487.964
[info]   CI (99.9%): [152699.633, 164158.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1921.386 ±(99.9%) 71.449 MB/sec [Average]
[info]   (min, avg, max) = (1897.215, 1921.386, 1948.094), stdev = 18.555
[info]   CI (99.9%): [1849.938, 1992.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19085.225 ±(99.9%) 457.869 B/op [Average]
[info]   (min, avg, max) = (18967.713, 19085.225, 19256.970), stdev = 118.907
[info]   CI (99.9%): [18627.356, 19543.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.469 ±(99.9%) 1156.266 MB/sec [Average]
[info]   (min, avg, max) = (1336.328, 1873.469, 2010.763), stdev = 300.278
[info]   CI (99.9%): [717.204, 3029.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18601.096 ±(99.9%) 11287.610 B/op [Average]
[info]   (min, avg, max) = (13366.569, 18601.096, 20084.278), stdev = 2931.356
[info]   CI (99.9%): [7313.486, 29888.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 5.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.771, 3.250), stdev = 1.398
[info]   CI (99.9%): [≈ 0, 6.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.615 ±(99.9%) 53.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.615, 32.042), stdev = 13.782
[info]   CI (99.9%): [≈ 0, 60.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.94% complete, ETA 01:25:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 621293.496 ops/s
[info] # Warmup Iteration   2: 1099878.354 ops/s
[info] # Warmup Iteration   3: 1139011.675 ops/s
[info] # Warmup Iteration   4: 1152997.796 ops/s
[info] # Warmup Iteration   5: 1167976.072 ops/s
[info] Iteration   1: 1178160.457 ops/s
[info]                  ·gc.alloc.rate:               1305.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1795.649 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1174675.969 ops/s
[info]                  ·gc.alloc.rate:               1288.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          1725.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1802.743 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1191395.142 ops/s
[info]                  ·gc.alloc.rate:               1318.564 MB/sec
[info]                  ·gc.alloc.rate.norm:          1741.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1778.369 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1172771.325 ops/s
[info]                  ·gc.alloc.rate:                   1303.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1749.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1807.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1181313.622 ops/s
[info]                  ·gc.alloc.rate:               1302.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          1734.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1790.921 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1179663.303 ±(99.9%) 28230.172 ops/s [Average]
[info]   (min, avg, max) = (1172771.325, 1179663.303, 1191395.142), stdev = 7331.286
[info]   CI (99.9%): [1151433.131, 1207893.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1303.615 ±(99.9%) 41.873 MB/sec [Average]
[info]   (min, avg, max) = (1288.029, 1303.615, 1318.564), stdev = 10.874
[info]   CI (99.9%): [1261.742, 1345.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1738.991 ±(99.9%) 35.045 B/op [Average]
[info]   (min, avg, max) = (1725.589, 1738.991, 1749.031), stdev = 9.101
[info]   CI (99.9%): [1703.946, 1774.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.581 ±(99.9%) 4.909 MB/sec [Average]
[info]   (min, avg, max) = (1344.326, 1345.581, 1347.216), stdev = 1.275
[info]   CI (99.9%): [1340.672, 1350.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1795.029 ±(99.9%) 43.437 B/op [Average]
[info]   (min, avg, max) = (1778.369, 1795.029, 1807.466), stdev = 11.280
[info]   CI (99.9%): [1751.592, 1838.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 5.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.977), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 5.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.799 ±(99.9%) 6.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.14% complete, ETA 01:25:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 840599.690 ops/s
[info] # Warmup Iteration   2: 1336515.829 ops/s
[info] # Warmup Iteration   3: 1373341.666 ops/s
[info] # Warmup Iteration   4: 1375682.955 ops/s
[info] # Warmup Iteration   5: 1385173.513 ops/s
[info] Iteration   1: 1379437.347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1380067.777 ops/s
[info]                  ·gc.alloc.rate:      1.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.338 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1386733.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1385518.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1370308.632 ops/s
[info]                  ·gc.alloc.rate:      1.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.468 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1380413.116 ±(99.9%) 25042.646 ops/s [Average]
[info]   (min, avg, max) = (1370308.632, 1380413.116, 1386733.277), stdev = 6503.496
[info]   CI (99.9%): [1355370.469, 1405455.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.491 ±(99.9%) 2.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.491, 1.278), stdev = 0.672
[info]   CI (99.9%): [≈ 0, 3.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.561 ±(99.9%) 2.964 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.561, 1.468), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.35% complete, ETA 01:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25468.996 ops/s
[info] # Warmup Iteration   2: 65632.838 ops/s
[info] # Warmup Iteration   3: 66709.854 ops/s
[info] # Warmup Iteration   4: 68167.157 ops/s
[info] # Warmup Iteration   5: 67296.920 ops/s
[info] Iteration   1: 68012.945 ops/s
[info]                  ·gc.alloc.rate:                   1724.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              39855.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46397.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 66725.721 ops/s
[info]                  ·gc.alloc.rate:                   1689.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              39851.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31674.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 68934.039 ops/s
[info]                  ·gc.alloc.rate:               1728.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          39472.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30568.069 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 68659.680 ops/s
[info]                  ·gc.alloc.rate:                   1751.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              40147.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45974.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 68053.709 ops/s
[info]                  ·gc.alloc.rate:               1723.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          39819.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46292.370 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   68077.219 ±(99.9%) 3281.321 ops/s [Average]
[info]   (min, avg, max) = (66725.721, 68077.219, 68934.039), stdev = 852.149
[info]   CI (99.9%): [64795.897, 71358.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1723.669 ±(99.9%) 85.208 MB/sec [Average]
[info]   (min, avg, max) = (1689.797, 1723.669, 1751.642), stdev = 22.128
[info]   CI (99.9%): [1638.461, 1808.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39829.348 ±(99.9%) 923.566 B/op [Average]
[info]   (min, avg, max) = (39472.431, 39829.348, 40147.881), stdev = 239.847
[info]   CI (99.9%): [38905.782, 40752.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1739.803 ±(99.9%) 1401.902 MB/sec [Average]
[info]   (min, avg, max) = (1338.931, 1739.803, 2007.623), stdev = 364.069
[info]   CI (99.9%): [337.902, 3141.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40181.309 ±(99.9%) 31889.181 B/op [Average]
[info]   (min, avg, max) = (30568.069, 40181.309, 46397.372), stdev = 8281.519
[info]   CI (99.9%): [8292.129, 72070.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.817 ±(99.9%) 6.458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 3.812), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.222 ±(99.9%) 152.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.222, 89.901), stdev = 39.570
[info]   CI (99.9%): [≈ 0, 171.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36.55% complete, ETA 01:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11406.588 ops/s
[info] # Warmup Iteration   2: 24562.011 ops/s
[info] # Warmup Iteration   3: 26701.092 ops/s
[info] # Warmup Iteration   4: 26917.135 ops/s
[info] # Warmup Iteration   5: 26781.663 ops/s
[info] Iteration   1: 27524.782 ops/s
[info]                  ·gc.alloc.rate:                   1229.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              70292.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76862.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27013.335 ops/s
[info]                  ·gc.alloc.rate:               1196.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          69727.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39196.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 27231.478 ops/s
[info]                  ·gc.alloc.rate:               1222.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          70659.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77763.548 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 27469.560 ops/s
[info]                  ·gc.alloc.rate:                   1219.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              69860.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77111.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 27559.735 ops/s
[info]                  ·gc.alloc.rate:                   1235.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              70536.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76781.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   27359.778 ±(99.9%) 894.280 ops/s [Average]
[info]   (min, avg, max) = (27013.335, 27359.778, 27559.735), stdev = 232.242
[info]   CI (99.9%): [26465.498, 28254.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1220.873 ±(99.9%) 56.727 MB/sec [Average]
[info]   (min, avg, max) = (1196.888, 1220.873, 1235.291), stdev = 14.732
[info]   CI (99.9%): [1164.146, 1277.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   70215.356 ±(99.9%) 1575.740 B/op [Average]
[info]   (min, avg, max) = (69727.539, 70215.356, 70659.519), stdev = 409.215
[info]   CI (99.9%): [68639.616, 71791.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210.827 ±(99.9%) 1158.097 MB/sec [Average]
[info]   (min, avg, max) = (672.823, 1210.827, 1346.054), stdev = 300.754
[info]   CI (99.9%): [52.730, 2368.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   69543.216 ±(99.9%) 65339.554 B/op [Average]
[info]   (min, avg, max) = (39196.927, 69543.216, 77763.548), stdev = 16968.475
[info]   CI (99.9%): [4203.663, 134882.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 4.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 2.540), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 4.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   39.800 ±(99.9%) 242.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.800, 145.503), stdev = 62.987
[info]   CI (99.9%): [≈ 0, 282.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.75% complete, ETA 01:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2856.850 ops/s
[info] # Warmup Iteration   2: 14387.909 ops/s
[info] # Warmup Iteration   3: 17035.310 ops/s
[info] # Warmup Iteration   4: 17475.110 ops/s
[info] # Warmup Iteration   5: 17458.869 ops/s
[info] Iteration   1: 17163.870 ops/s
[info]                  ·gc.alloc.rate:                   1492.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              136825.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123070.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16815.977 ops/s
[info]                  ·gc.alloc.rate:                   1491.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              139580.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125679.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17406.264 ops/s
[info]                  ·gc.alloc.rate:                   1540.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              139269.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182251.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336.902 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 17725.921 ops/s
[info]                  ·gc.alloc.rate:                   1535.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              136345.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118999.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17601.940 ops/s
[info]                  ·gc.alloc.rate:               1535.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          137279.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119704.536 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17342.794 ±(99.9%) 1398.373 ops/s [Average]
[info]   (min, avg, max) = (16815.977, 17342.794, 17725.921), stdev = 363.153
[info]   CI (99.9%): [15944.421, 18741.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1519.101 ±(99.9%) 95.868 MB/sec [Average]
[info]   (min, avg, max) = (1491.557, 1519.101, 1540.441), stdev = 24.897
[info]   CI (99.9%): [1423.233, 1614.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   137860.172 ±(99.9%) 5660.987 B/op [Average]
[info]   (min, avg, max) = (136345.897, 137860.172, 139580.377), stdev = 1470.140
[info]   CI (99.9%): [132199.185, 143521.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1476.079 ±(99.9%) 1161.932 MB/sec [Average]
[info]   (min, avg, max) = (1338.901, 1476.079, 2015.858), stdev = 301.750
[info]   CI (99.9%): [314.146, 2638.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133941.012 ±(99.9%) 104504.584 B/op [Average]
[info]   (min, avg, max) = (118999.093, 133941.012, 182251.061), stdev = 27139.508
[info]   CI (99.9%): [29436.428, 238445.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.726), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.903 ±(99.9%) 576.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.903, 336.902), stdev = 149.822
[info]   CI (99.9%): [≈ 0, 645.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:24:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2822.820 ops/s
[info] # Warmup Iteration   2: 15735.696 ops/s
[info] # Warmup Iteration   3: 17496.357 ops/s
[info] # Warmup Iteration   4: 17938.266 ops/s
[info] # Warmup Iteration   5: 17620.133 ops/s
[info] Iteration   1: 17894.543 ops/s
[info]                  ·gc.alloc.rate:               1465.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          128846.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117611.818 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 17753.815 ops/s
[info]                  ·gc.alloc.rate:               1480.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          131236.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118627.615 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 17893.378 ops/s
[info]                  ·gc.alloc.rate:                   1465.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              128887.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117823.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 18034.136 ops/s
[info]                  ·gc.alloc.rate:                   1491.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              130120.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175101.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18071.902 ops/s
[info]                  ·gc.alloc.rate:                   1488.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              129607.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116134.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17929.555 ±(99.9%) 489.421 ops/s [Average]
[info]   (min, avg, max) = (17753.815, 17929.555, 18071.902), stdev = 127.101
[info]   CI (99.9%): [17440.133, 18418.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1478.166 ±(99.9%) 47.434 MB/sec [Average]
[info]   (min, avg, max) = (1465.183, 1478.166, 1491.131), stdev = 12.319
[info]   CI (99.9%): [1430.731, 1525.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   129739.869 ±(99.9%) 3815.555 B/op [Average]
[info]   (min, avg, max) = (128846.624, 129739.869, 131236.674), stdev = 990.888
[info]   CI (99.9%): [125924.314, 133555.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.150 ±(99.9%) 1152.611 MB/sec [Average]
[info]   (min, avg, max) = (1333.652, 1471.150, 2006.592), stdev = 299.329
[info]   CI (99.9%): [318.540, 2623.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   129059.856 ±(99.9%) 99169.358 B/op [Average]
[info]   (min, avg, max) = (116134.607, 129059.856, 175101.786), stdev = 25753.967
[info]   CI (99.9%): [29890.497, 228229.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 6.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.729), stdev = 1.613
[info]   CI (99.9%): [≈ 0, 7.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   79.392 ±(99.9%) 546.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.392, 327.928), stdev = 141.901
[info]   CI (99.9%): [≈ 0, 625.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 11.000), stdev = 3.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.15% complete, ETA 01:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334843.916 ops/s
[info] # Warmup Iteration   2: 615060.046 ops/s
[info] # Warmup Iteration   3: 663665.381 ops/s
[info] # Warmup Iteration   4: 652172.855 ops/s
[info] # Warmup Iteration   5: 663046.535 ops/s
[info] Iteration   1: 666550.659 ops/s
[info]                  ·gc.alloc.rate:               1776.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          4193.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4765.011 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 628565.334 ops/s
[info]                  ·gc.alloc.rate:                   1705.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              4270.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5055.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 663495.927 ops/s
[info]                  ·gc.alloc.rate:                   1756.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              4165.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3188.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 670381.386 ops/s
[info]                  ·gc.alloc.rate:                   1798.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              4221.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4732.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 660656.479 ops/s
[info]                  ·gc.alloc.rate:                   1760.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              4192.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3202.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   657929.957 ±(99.9%) 64722.029 ops/s [Average]
[info]   (min, avg, max) = (628565.334, 657929.957, 670381.386), stdev = 16808.105
[info]   CI (99.9%): [593207.928, 722651.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1759.467 ±(99.9%) 132.550 MB/sec [Average]
[info]   (min, avg, max) = (1705.630, 1759.467, 1798.818), stdev = 34.423
[info]   CI (99.9%): [1626.917, 1892.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4208.613 ±(99.9%) 152.945 B/op [Average]
[info]   (min, avg, max) = (4165.548, 4208.613, 4270.154), stdev = 39.719
[info]   CI (99.9%): [4055.667, 4361.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.601 ±(99.9%) 1420.149 MB/sec [Average]
[info]   (min, avg, max) = (1344.289, 1748.601, 2019.233), stdev = 368.808
[info]   CI (99.9%): [328.452, 3168.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4188.699 ±(99.9%) 3524.539 B/op [Average]
[info]   (min, avg, max) = (3188.530, 4188.699, 5055.279), stdev = 915.312
[info]   CI (99.9%): [664.160, 7713.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 4.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.644), stdev = 1.173
[info]   CI (99.9%): [≈ 0, 5.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.363 ±(99.9%) 11.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.363, 6.619), stdev = 2.938
[info]   CI (99.9%): [≈ 0, 12.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.35% complete, ETA 01:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1284.390 ops/s
[info] # Warmup Iteration   2: 10376.520 ops/s
[info] # Warmup Iteration   3: 12880.228 ops/s
[info] # Warmup Iteration   4: 12969.747 ops/s
[info] # Warmup Iteration   5: 12593.587 ops/s
[info] Iteration   1: 12903.482 ops/s
[info]                  ·gc.alloc.rate:                   1775.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              216476.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244616.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 12954.846 ops/s
[info]                  ·gc.alloc.rate:                   1782.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              216577.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243896.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 13050.042 ops/s
[info]                  ·gc.alloc.rate:                   1787.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              215483.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160973.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12567.351 ops/s
[info]                  ·gc.alloc.rate:               1749.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          219095.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 250256.802 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 12625.532 ops/s
[info]                  ·gc.alloc.rate:               1725.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          215051.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166099.952 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12820.251 ±(99.9%) 816.211 ops/s [Average]
[info]   (min, avg, max) = (12567.351, 12820.251, 13050.042), stdev = 211.967
[info]   CI (99.9%): [12004.040, 13636.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1764.017 ±(99.9%) 100.145 MB/sec [Average]
[info]   (min, avg, max) = (1725.381, 1764.017, 1787.011), stdev = 26.007
[info]   CI (99.9%): [1663.871, 1864.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216536.789 ±(99.9%) 6047.616 B/op [Average]
[info]   (min, avg, max) = (215051.574, 216536.789, 219095.252), stdev = 1570.547
[info]   CI (99.9%): [210489.173, 222584.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1735.957 ±(99.9%) 1413.713 MB/sec [Average]
[info]   (min, avg, max) = (1332.637, 1735.957, 2007.819), stdev = 367.137
[info]   CI (99.9%): [322.243, 3149.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   213168.537 ±(99.9%) 174859.965 B/op [Average]
[info]   (min, avg, max) = (160973.365, 213168.537, 250256.802), stdev = 45410.578
[info]   CI (99.9%): [38308.572, 388028.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.309), stdev = 1.895
[info]   CI (99.9%): [≈ 0, 8.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   112.239 ±(99.9%) 886.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 112.239, 523.459), stdev = 230.210
[info]   CI (99.9%): [≈ 0, 998.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 3.493
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37.55% complete, ETA 01:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1464.348 ops/s
[info] # Warmup Iteration   2: 15813.362 ops/s
[info] # Warmup Iteration   3: 17365.830 ops/s
[info] # Warmup Iteration   4: 17565.741 ops/s
[info] # Warmup Iteration   5: 17165.115 ops/s
[info] Iteration   1: 16993.583 ops/s
[info]                  ·gc.alloc.rate:               1474.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          136563.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124455.941 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17407.936 ops/s
[info]                  ·gc.alloc.rate:                   1521.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              137537.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121526.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17612.830 ops/s
[info]                  ·gc.alloc.rate:                   1571.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              140398.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180288.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 329.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 17690.014 ops/s
[info]                  ·gc.alloc.rate:               1543.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          137301.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119359.750 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17758.274 ops/s
[info]                  ·gc.alloc.rate:               1560.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          138299.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118659.935 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   17492.527 ±(99.9%) 1187.154 ops/s [Average]
[info]   (min, avg, max) = (16993.583, 17492.527, 17758.274), stdev = 308.300
[info]   CI (99.9%): [16305.373, 18679.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1534.372 ±(99.9%) 147.514 MB/sec [Average]
[info]   (min, avg, max) = (1474.779, 1534.372, 1571.448), stdev = 38.309
[info]   CI (99.9%): [1386.859, 1681.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   138019.894 ±(99.9%) 5648.927 B/op [Average]
[info]   (min, avg, max) = (136563.044, 138019.894, 140398.702), stdev = 1467.008
[info]   CI (99.9%): [132370.967, 143668.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477.432 ±(99.9%) 1163.473 MB/sec [Average]
[info]   (min, avg, max) = (1339.076, 1477.432, 2017.921), stdev = 302.150
[info]   CI (99.9%): [313.959, 2640.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   132858.139 ±(99.9%) 102466.158 B/op [Average]
[info]   (min, avg, max) = (118659.935, 132858.139, 180288.171), stdev = 26610.136
[info]   CI (99.9%): [30391.981, 235324.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.685), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   66.221 ±(99.9%) 566.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.221, 329.224), stdev = 147.025
[info]   CI (99.9%): [≈ 0, 632.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.75% complete, ETA 01:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15418.476 ops/s
[info] # Warmup Iteration   2: 41965.188 ops/s
[info] # Warmup Iteration   3: 45206.957 ops/s
[info] # Warmup Iteration   4: 45185.833 ops/s
[info] # Warmup Iteration   5: 45685.071 ops/s
[info] Iteration   1: 44986.897 ops/s
[info]                  ·gc.alloc.rate:               1748.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          61160.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70458.919 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 45609.281 ops/s
[info]                  ·gc.alloc.rate:                   1770.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              61100.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46363.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 44829.553 ops/s
[info]                  ·gc.alloc.rate:               1777.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          62406.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70550.474 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 45375.996 ops/s
[info]                  ·gc.alloc.rate:               1758.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          60979.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46440.106 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 44364.371 ops/s
[info]                  ·gc.alloc.rate:               1748.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          62038.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71245.699 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   45033.219 ±(99.9%) 1866.994 ops/s [Average]
[info]   (min, avg, max) = (44364.371, 45033.219, 45609.281), stdev = 484.852
[info]   CI (99.9%): [43166.226, 46900.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1760.962 ±(99.9%) 50.178 MB/sec [Average]
[info]   (min, avg, max) = (1748.859, 1760.962, 1777.797), stdev = 13.031
[info]   CI (99.9%): [1710.783, 1811.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61536.831 ±(99.9%) 2474.381 B/op [Average]
[info]   (min, avg, max) = (60979.006, 61536.831, 62406.411), stdev = 642.589
[info]   CI (99.9%): [59062.450, 64011.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1743.188 ±(99.9%) 1412.276 MB/sec [Average]
[info]   (min, avg, max) = (1339.090, 1743.188, 2014.756), stdev = 366.764
[info]   CI (99.9%): [330.912, 3155.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61011.801 ±(99.9%) 51369.128 B/op [Average]
[info]   (min, avg, max) = (46363.807, 61011.801, 71245.699), stdev = 13340.399
[info]   CI (99.9%): [9642.673, 112380.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.581), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 6.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.711 ±(99.9%) 212.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.711, 123.553), stdev = 55.254
[info]   CI (99.9%): [≈ 0, 237.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.95% complete, ETA 01:22:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11236.884 ops/s
[info] # Warmup Iteration   2: 51178.722 ops/s
[info] # Warmup Iteration   3: 47524.400 ops/s
[info] # Warmup Iteration   4: 54177.522 ops/s
[info] # Warmup Iteration   5: 54173.758 ops/s
[info] Iteration   1: 52818.523 ops/s
[info]                  ·gc.alloc.rate:                   1615.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              48132.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39857.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 54213.182 ops/s
[info]                  ·gc.alloc.rate:                   1666.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              48380.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58322.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 54525.771 ops/s
[info]                  ·gc.alloc.rate:                   1663.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              47999.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38628.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 54341.998 ops/s
[info]                  ·gc.alloc.rate:                   1684.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              48772.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58010.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 54524.836 ops/s
[info]                  ·gc.alloc.rate:               1676.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          48397.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38529.242 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54084.862 ±(99.9%) 2772.850 ops/s [Average]
[info]   (min, avg, max) = (52818.523, 54084.862, 54525.771), stdev = 720.100
[info]   CI (99.9%): [51312.012, 56857.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1661.244 ±(99.9%) 103.688 MB/sec [Average]
[info]   (min, avg, max) = (1615.456, 1661.244, 1684.182), stdev = 26.928
[info]   CI (99.9%): [1557.555, 1764.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48336.667 ±(99.9%) 1140.325 B/op [Average]
[info]   (min, avg, max) = (47999.992, 48336.667, 48772.800), stdev = 296.139
[info]   CI (99.9%): [47196.342, 49476.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1604.675 ±(99.9%) 1411.388 MB/sec [Average]
[info]   (min, avg, max) = (1334.985, 1604.675, 2009.181), stdev = 366.533
[info]   CI (99.9%): [193.287, 3016.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46669.727 ±(99.9%) 40466.775 B/op [Average]
[info]   (min, avg, max) = (38529.242, 46669.727, 58322.979), stdev = 10509.093
[info]   CI (99.9%): [6202.952, 87136.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.500), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22.605 ±(99.9%) 170.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.605, 101.587), stdev = 44.357
[info]   CI (99.9%): [≈ 0, 193.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.15% complete, ETA 01:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 812861.416 ops/s
[info] # Warmup Iteration   2: 1240322.711 ops/s
[info] # Warmup Iteration   3: 1348903.013 ops/s
[info] # Warmup Iteration   4: 1348733.638 ops/s
[info] # Warmup Iteration   5: 1354977.398 ops/s
[info] Iteration   1: 1349494.218 ops/s
[info]                  ·gc.alloc.rate:                   1258.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              1467.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1567.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1348576.719 ops/s
[info]                  ·gc.alloc.rate:                   1267.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              1479.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1352752.550 ops/s
[info]                  ·gc.alloc.rate:                   1269.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1476.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1565.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1345260.906 ops/s
[info]                  ·gc.alloc.rate:                   1276.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              1493.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1575.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1358509.845 ops/s
[info]                  ·gc.alloc.rate:               1262.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          1463.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 778.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1350918.847 ±(99.9%) 19302.554 ops/s [Average]
[info]   (min, avg, max) = (1345260.906, 1350918.847, 1358509.845), stdev = 5012.812
[info]   CI (99.9%): [1331616.293, 1370221.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1267.096 ±(99.9%) 26.725 MB/sec [Average]
[info]   (min, avg, max) = (1258.549, 1267.096, 1276.969), stdev = 6.940
[info]   CI (99.9%): [1240.372, 1293.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1476.018 ±(99.9%) 45.879 B/op [Average]
[info]   (min, avg, max) = (1463.019, 1476.018, 1493.810), stdev = 11.915
[info]   CI (99.9%): [1430.139, 1521.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.923 ±(99.9%) 1159.683 MB/sec [Average]
[info]   (min, avg, max) = (672.183, 1210.923, 1347.016), stdev = 301.166
[info]   CI (99.9%): [51.240, 2370.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1411.439 ±(99.9%) 1362.151 B/op [Average]
[info]   (min, avg, max) = (778.675, 1411.439, 1575.751), stdev = 353.746
[info]   CI (99.9%): [49.288, 2773.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 4.428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.602), stdev = 1.150
[info]   CI (99.9%): [≈ 0, 4.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.638 ±(99.9%) 5.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.638, 3.044), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:22:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 877207.145 ops/s
[info] # Warmup Iteration   2: 1558385.234 ops/s
[info] # Warmup Iteration   3: 1530662.795 ops/s
[info] # Warmup Iteration   4: 1575418.560 ops/s
[info] # Warmup Iteration   5: 1562922.384 ops/s
[info] Iteration   1: 1574135.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1562742.799 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1558725.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1565531.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1560769.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1564381.152 ±(99.9%) 23118.977 ops/s [Average]
[info]   (min, avg, max) = (1558725.711, 1564381.152, 1574135.928), stdev = 6003.925
[info]   CI (99.9%): [1541262.174, 1587500.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.55% complete, ETA 01:22:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1539.187 ops/s
[info] # Warmup Iteration   2: 3454.326 ops/s
[info] # Warmup Iteration   3: 3684.767 ops/s
[info] # Warmup Iteration   4: 3783.946 ops/s
[info] # Warmup Iteration   5: 3848.269 ops/s
[info] Iteration   1: 3942.807 ops/s
[info]                  ·gc.alloc.rate:      532.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432.110 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3928.671 ops/s
[info]                  ·gc.alloc.rate:               539.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          216140.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 267747.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3693.066 ops/s
[info]                  ·gc.alloc.rate:                   512.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              218227.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284852.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3773.215 ops/s
[info]                  ·gc.alloc.rate:               522.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          217869.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 278879.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3883.665 ops/s
[info]                  ·gc.alloc.rate:      524.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432.111 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3844.285 ±(99.9%) 414.265 ops/s [Average]
[info]   (min, avg, max) = (3693.066, 3844.285, 3942.807), stdev = 107.583
[info]   CI (99.9%): [3430.020, 4258.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   526.186 ±(99.9%) 40.068 MB/sec [Average]
[info]   (min, avg, max) = (512.140, 526.186, 539.597), stdev = 10.406
[info]   CI (99.9%): [486.117, 566.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   215420.392 ±(99.9%) 10934.999 B/op [Average]
[info]   (min, avg, max) = (212432.110, 215420.392, 218227.331), stdev = 2839.784
[info]   CI (99.9%): [204485.393, 226355.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   401.135 ±(99.9%) 1410.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.135, 668.743), stdev = 366.184
[info]   CI (99.9%): [≈ 0, 1811.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   166295.873 ±(99.9%) 585031.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 166295.873, 284852.738), stdev = 151930.738
[info]   CI (99.9%): [≈ 0, 751327.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.548 ±(99.9%) 30.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.548, 17.741), stdev = 7.934
[info]   CI (99.9%): [≈ 0, 34.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38.76% complete, ETA 01:21:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11440.733 ops/s
[info] # Warmup Iteration   2: 29424.341 ops/s
[info] # Warmup Iteration   3: 29850.625 ops/s
[info] # Warmup Iteration   4: 29858.575 ops/s
[info] # Warmup Iteration   5: 29568.088 ops/s
[info] Iteration   1: 30214.394 ops/s
[info]                  ·gc.alloc.rate:                   1247.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              64953.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70018.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30098.880 ops/s
[info]                  ·gc.alloc.rate:                   1232.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              64439.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70357.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 30331.052 ops/s
[info]                  ·gc.alloc.rate:               1222.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          63411.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34908.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 30196.715 ops/s
[info]                  ·gc.alloc.rate:                   1230.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              64124.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70164.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 30336.275 ops/s
[info]                  ·gc.alloc.rate:                   1234.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              64059.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69808.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   30235.463 ±(99.9%) 384.585 ops/s [Average]
[info]   (min, avg, max) = (30098.880, 30235.463, 30336.275), stdev = 99.875
[info]   CI (99.9%): [29850.878, 30620.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1233.497 ±(99.9%) 34.736 MB/sec [Average]
[info]   (min, avg, max) = (1222.158, 1233.497, 1247.109), stdev = 9.021
[info]   CI (99.9%): [1198.761, 1268.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   64197.860 ±(99.9%) 2171.852 B/op [Average]
[info]   (min, avg, max) = (63411.641, 64197.860, 64953.671), stdev = 564.023
[info]   CI (99.9%): [62026.008, 66369.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1211.064 ±(99.9%) 1158.635 MB/sec [Average]
[info]   (min, avg, max) = (672.810, 1211.064, 1346.332), stdev = 300.894
[info]   CI (99.9%): [52.429, 2369.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   63051.524 ±(99.9%) 60584.384 B/op [Average]
[info]   (min, avg, max) = (34908.753, 63051.524, 70357.865), stdev = 15733.572
[info]   CI (99.9%): [2467.140, 123635.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 4.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 2.519), stdev = 1.082
[info]   CI (99.9%): [≈ 0, 4.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   34.251 ±(99.9%) 217.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.251, 131.276), stdev = 56.396
[info]   CI (99.9%): [≈ 0, 251.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.96% complete, ETA 01:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41667.227 ops/s
[info] # Warmup Iteration   2: 112241.749 ops/s
[info] # Warmup Iteration   3: 119569.300 ops/s
[info] # Warmup Iteration   4: 124282.410 ops/s
[info] # Warmup Iteration   5: 122964.766 ops/s
[info] Iteration   1: 124395.549 ops/s
[info]                  ·gc.alloc.rate:                   1964.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              24842.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25503.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 124791.476 ops/s
[info]                  ·gc.alloc.rate:                   1968.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              24814.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25396.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 124631.982 ops/s
[info]                  ·gc.alloc.rate:                   1977.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              24975.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25361.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 125465.730 ops/s
[info]                  ·gc.alloc.rate:                   1991.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              24984.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25201.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 115514.808 ops/s
[info]                  ·gc.alloc.rate:               1826.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          24877.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18260.254 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   122959.909 ±(99.9%) 16099.214 ops/s [Average]
[info]   (min, avg, max) = (115514.808, 122959.909, 125465.730), stdev = 4180.915
[info]   CI (99.9%): [106860.695, 139059.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1945.726 ±(99.9%) 260.038 MB/sec [Average]
[info]   (min, avg, max) = (1826.458, 1945.726, 1991.938), stdev = 67.531
[info]   CI (99.9%): [1685.688, 2205.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24898.894 ±(99.9%) 297.600 B/op [Average]
[info]   (min, avg, max) = (24814.525, 24898.894, 24984.641), stdev = 77.286
[info]   CI (99.9%): [24601.294, 25196.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.797 ±(99.9%) 1156.379 MB/sec [Average]
[info]   (min, avg, max) = (1340.622, 1877.797, 2016.239), stdev = 300.308
[info]   CI (99.9%): [721.418, 3034.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23944.355 ±(99.9%) 12242.572 B/op [Average]
[info]   (min, avg, max) = (18260.254, 23944.355, 25503.283), stdev = 3179.357
[info]   CI (99.9%): [11701.783, 36186.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 4.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 2.769), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.159 ±(99.9%) 57.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.159, 35.029), stdev = 14.984
[info]   CI (99.9%): [≈ 0, 66.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 12.000), stdev = 4.219
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.16% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.832 ops/s
[info] # Warmup Iteration   2: 343030.068 ops/s
[info] # Warmup Iteration   3: 374973.907 ops/s
[info] # Warmup Iteration   4: 380214.364 ops/s
[info] # Warmup Iteration   5: 382283.639 ops/s
[info] Iteration   1: 379128.373 ops/s
[info]                  ·gc.alloc.rate:                   794.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              3298.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5532.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 381662.657 ops/s
[info]                  ·gc.alloc.rate:               789.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          3254.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2748.379 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 378779.012 ops/s
[info]                  ·gc.alloc.rate:               773.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          3215.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2772.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 381811.582 ops/s
[info]                  ·gc.alloc.rate:               784.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          3231.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2750.009 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 380941.609 ops/s
[info]                  ·gc.alloc.rate:                   776.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              3206.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2757.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   380464.647 ±(99.9%) 5480.898 ops/s [Average]
[info]   (min, avg, max) = (378779.012, 380464.647, 381811.582), stdev = 1423.372
[info]   CI (99.9%): [374983.749, 385945.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   783.702 ±(99.9%) 33.928 MB/sec [Average]
[info]   (min, avg, max) = (773.811, 783.702, 794.834), stdev = 8.811
[info]   CI (99.9%): [749.774, 817.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3241.377 ±(99.9%) 141.629 B/op [Average]
[info]   (min, avg, max) = (3206.913, 3241.377, 3298.441), stdev = 36.781
[info]   CI (99.9%): [3099.748, 3383.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.327 ±(99.9%) 1146.753 MB/sec [Average]
[info]   (min, avg, max) = (666.683, 800.327, 1333.062), stdev = 297.808
[info]   CI (99.9%): [≈ 0, 1947.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3311.999 ±(99.9%) 4778.871 B/op [Average]
[info]   (min, avg, max) = (2748.379, 3311.999, 5532.007), stdev = 1241.058
[info]   CI (99.9%): [≈ 0, 8090.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.173), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.36% complete, ETA 01:21:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83942.146 ops/s
[info] # Warmup Iteration   2: 225141.793 ops/s
[info] # Warmup Iteration   3: 246583.567 ops/s
[info] # Warmup Iteration   4: 250369.409 ops/s
[info] # Warmup Iteration   5: 251681.330 ops/s
[info] Iteration   1: 256913.256 ops/s
[info]                  ·gc.alloc.rate:               572.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          3503.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4082.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 259132.270 ops/s
[info]                  ·gc.alloc.rate:      562.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 257246.768 ops/s
[info]                  ·gc.alloc.rate:               577.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          3535.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4077.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 252133.256 ops/s
[info]                  ·gc.alloc.rate:                   573.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4164.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 252214.889 ops/s
[info]                  ·gc.alloc.rate:                   568.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              3549.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4162.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   255528.088 ±(99.9%) 12232.213 ops/s [Average]
[info]   (min, avg, max) = (252133.256, 255528.088, 259132.270), stdev = 3176.667
[info]   CI (99.9%): [243295.875, 267760.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   570.917 ±(99.9%) 21.952 MB/sec [Average]
[info]   (min, avg, max) = (562.559, 570.917, 577.980), stdev = 5.701
[info]   CI (99.9%): [548.965, 592.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3516.454 ±(99.9%) 238.732 B/op [Average]
[info]   (min, avg, max) = (3416.002, 3516.454, 3576.880), stdev = 61.998
[info]   CI (99.9%): [3277.722, 3755.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.493 ±(99.9%) 1148.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.493, 667.223), stdev = 298.232
[info]   CI (99.9%): [≈ 0, 1681.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3297.483 ±(99.9%) 7099.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3297.483, 4164.200), stdev = 1843.822
[info]   CI (99.9%): [≈ 0, 10397.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.130), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.56% complete, ETA 01:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318715.955 ops/s
[info] # Warmup Iteration   2: 474851.755 ops/s
[info] # Warmup Iteration   3: 502298.683 ops/s
[info] # Warmup Iteration   4: 517352.315 ops/s
[info] # Warmup Iteration   5: 515944.867 ops/s
[info] Iteration   1: 517224.974 ops/s
[info]                  ·gc.alloc.rate:               671.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          2043.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2041.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 492342.006 ops/s
[info]                  ·gc.alloc.rate:               654.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          2090.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2144.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 501882.187 ops/s
[info]                  ·gc.alloc.rate:               651.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          2043.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2105.558 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 501856.509 ops/s
[info]                  ·gc.alloc.rate:                   650.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              2040.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2105.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 516127.646 ops/s
[info]                  ·gc.alloc.rate:               667.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          2036.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2049.575 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   505886.664 ±(99.9%) 40804.596 ops/s [Average]
[info]   (min, avg, max) = (492342.006, 505886.664, 517224.974), stdev = 10596.824
[info]   CI (99.9%): [465082.068, 546691.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   659.250 ±(99.9%) 37.801 MB/sec [Average]
[info]   (min, avg, max) = (650.742, 659.250, 671.738), stdev = 9.817
[info]   CI (99.9%): [621.449, 697.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2050.945 ±(99.9%) 86.284 B/op [Average]
[info]   (min, avg, max) = (2036.521, 2050.945, 2090.703), stdev = 22.408
[info]   CI (99.9%): [1964.660, 2137.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.428 ±(99.9%) 2.112 MB/sec [Average]
[info]   (min, avg, max) = (670.875, 671.428, 672.179), stdev = 0.548
[info]   CI (99.9%): [669.317, 673.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2089.274 ±(99.9%) 166.174 B/op [Average]
[info]   (min, avg, max) = (2041.246, 2089.274, 2144.353), stdev = 43.155
[info]   CI (99.9%): [1923.100, 2255.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.131), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8016.037 ops/s
[info] # Warmup Iteration   2: 64438.882 ops/s
[info] # Warmup Iteration   3: 72483.090 ops/s
[info] # Warmup Iteration   4: 74344.611 ops/s
[info] # Warmup Iteration   5: 73391.114 ops/s
[info] Iteration   1: 75138.664 ops/s
[info]                  ·gc.alloc.rate:                   3163.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              66257.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69900.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 75607.739 ops/s
[info]                  ·gc.alloc.rate:                   3184.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              66271.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55616.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 75204.359 ops/s
[info]                  ·gc.alloc.rate:               3194.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          66850.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3350.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70108.603 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 74672.903 ops/s
[info]                  ·gc.alloc.rate:               3162.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          66608.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70787.782 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 74638.362 ops/s
[info]                  ·gc.alloc.rate:               3145.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          66323.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56927.673 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   75052.406 ±(99.9%) 1557.465 ops/s [Average]
[info]   (min, avg, max) = (74638.362, 75052.406, 75607.739), stdev = 404.469
[info]   CI (99.9%): [73494.941, 76609.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3170.049 ±(99.9%) 74.838 MB/sec [Average]
[info]   (min, avg, max) = (3145.531, 3170.049, 3194.738), stdev = 19.435
[info]   CI (99.9%): [3095.211, 3244.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66462.333 ±(99.9%) 999.433 B/op [Average]
[info]   (min, avg, max) = (66257.844, 66462.333, 66850.665), stdev = 259.550
[info]   CI (99.9%): [65462.899, 67461.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3084.148 ±(99.9%) 1400.253 MB/sec [Average]
[info]   (min, avg, max) = (2672.158, 3084.148, 3360.527), stdev = 363.641
[info]   CI (99.9%): [1683.895, 4484.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64668.214 ±(99.9%) 29594.310 B/op [Average]
[info]   (min, avg, max) = (55616.597, 64668.214, 70787.782), stdev = 7685.548
[info]   CI (99.9%): [35073.904, 94262.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.312), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.395 ±(99.9%) 11.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.395, 6.540), stdev = 2.882
[info]   CI (99.9%): [≈ 0, 12.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.96% complete, ETA 01:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42417.561 ops/s
[info] # Warmup Iteration   2: 126319.616 ops/s
[info] # Warmup Iteration   3: 134041.813 ops/s
[info] # Warmup Iteration   4: 135896.123 ops/s
[info] # Warmup Iteration   5: 135870.783 ops/s
[info] Iteration   1: 136083.337 ops/s
[info]                  ·gc.alloc.rate:               1177.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          13617.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7750.508 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 136325.373 ops/s
[info]                  ·gc.alloc.rate:                   1195.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              13803.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15481.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 136175.432 ops/s
[info]                  ·gc.alloc.rate:                   1203.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              13902.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15510.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 136919.092 ops/s
[info]                  ·gc.alloc.rate:                   1194.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              13731.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7714.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 135594.605 ops/s
[info]                  ·gc.alloc.rate:                   1197.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              13899.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15588.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   136219.568 ±(99.9%) 1838.269 ops/s [Average]
[info]   (min, avg, max) = (135594.605, 136219.568, 136919.092), stdev = 477.393
[info]   CI (99.9%): [134381.299, 138057.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1193.793 ±(99.9%) 36.845 MB/sec [Average]
[info]   (min, avg, max) = (1177.649, 1193.793, 1203.057), stdev = 9.569
[info]   CI (99.9%): [1156.947, 1230.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13790.903 ±(99.9%) 462.763 B/op [Average]
[info]   (min, avg, max) = (13617.790, 13790.903, 13902.532), stdev = 120.178
[info]   CI (99.9%): [13328.140, 14253.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.610 ±(99.9%) 1416.103 MB/sec [Average]
[info]   (min, avg, max) = (670.254, 1073.610, 1343.133), stdev = 367.757
[info]   CI (99.9%): [≈ 0, 2489.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12408.940 ±(99.9%) 16438.582 B/op [Average]
[info]   (min, avg, max) = (7714.791, 12408.940, 15588.184), stdev = 4269.048
[info]   CI (99.9%): [≈ 0, 28847.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.560), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.504 ±(99.9%) 70.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.504, 41.319), stdev = 18.346
[info]   CI (99.9%): [≈ 0, 79.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.16% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.725 ops/s
[info] # Warmup Iteration   2: 193752.315 ops/s
[info] # Warmup Iteration   3: 202110.072 ops/s
[info] # Warmup Iteration   4: 208932.638 ops/s
[info] # Warmup Iteration   5: 208956.162 ops/s
[info] Iteration   1: 207304.300 ops/s
[info]                  ·gc.alloc.rate:                   177.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1343.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3883.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 208357.024 ops/s
[info]                  ·gc.alloc.rate:      163.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 208132.819 ops/s
[info]                  ·gc.alloc.rate:      162.938 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 205162.225 ops/s
[info]                  ·gc.alloc.rate:               173.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          1329.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3924.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 205710.247 ops/s
[info]                  ·gc.alloc.rate:      161.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   206933.323 ±(99.9%) 5525.387 ops/s [Average]
[info]   (min, avg, max) = (205162.225, 206933.323, 208357.024), stdev = 1434.925
[info]   CI (99.9%): [201407.936, 212458.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   167.509 ±(99.9%) 27.670 MB/sec [Average]
[info]   (min, avg, max) = (161.044, 167.509, 177.031), stdev = 7.186
[info]   CI (99.9%): [139.838, 195.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1273.955 ±(99.9%) 222.030 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1273.955, 1343.912), stdev = 57.660
[info]   CI (99.9%): [1051.925, 1495.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.650 ±(99.9%) 1079.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.650, 511.629), stdev = 280.229
[info]   CI (99.9%): [≈ 0, 1283.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1561.701 ±(99.9%) 8234.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1561.701, 3924.514), stdev = 2138.495
[info]   CI (99.9%): [≈ 0, 9796.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.427 ±(99.9%) 3.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.427, 2.135), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 4.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   3.241 ±(99.9%) 27.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.241, 16.206), stdev = 7.248
[info]   CI (99.9%): [≈ 0, 31.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.36% complete, ETA 01:19:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208235.711 ops/s
[info] # Warmup Iteration   2: 372770.214 ops/s
[info] # Warmup Iteration   3: 368177.822 ops/s
[info] # Warmup Iteration   4: 389192.342 ops/s
[info] # Warmup Iteration   5: 392820.514 ops/s
[info] Iteration   1: 389005.149 ops/s
[info]                  ·gc.alloc.rate:                   396.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              1602.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 390952.754 ops/s
[info]                  ·gc.alloc.rate:               400.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          1612.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2059.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 392575.424 ops/s
[info]                  ·gc.alloc.rate:      385.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 387031.388 ops/s
[info]                  ·gc.alloc.rate:                   397.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1618.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2712.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 383786.198 ops/s
[info]                  ·gc.alloc.rate:               401.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          1646.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2735.874 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   388670.182 ±(99.9%) 13215.087 ops/s [Average]
[info]   (min, avg, max) = (383786.198, 388670.182, 392575.424), stdev = 3431.916
[info]   CI (99.9%): [375455.095, 401885.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   396.267 ±(99.9%) 25.204 MB/sec [Average]
[info]   (min, avg, max) = (385.189, 396.267, 401.455), stdev = 6.545
[info]   CI (99.9%): [371.064, 421.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1604.722 ±(99.9%) 144.742 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1604.722, 1646.168), stdev = 37.589
[info]   CI (99.9%): [1459.980, 1749.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.509 ±(99.9%) 1058.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.509, 667.204), stdev = 274.819
[info]   CI (99.9%): [≈ 0, 1529.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1915.571 ±(99.9%) 4314.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1915.571, 2735.874), stdev = 1120.524
[info]   CI (99.9%): [≈ 0, 6230.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.254), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.56% complete, ETA 01:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230108.334 ops/s
[info] # Warmup Iteration   2: 435373.886 ops/s
[info] # Warmup Iteration   3: 467459.295 ops/s
[info] # Warmup Iteration   4: 468748.006 ops/s
[info] # Warmup Iteration   5: 468364.825 ops/s
[info] Iteration   1: 467639.431 ops/s
[info]                  ·gc.alloc.rate:               379.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          1276.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1721.704 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 465821.385 ops/s
[info]                  ·gc.alloc.rate:               384.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          1297.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1728.415 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 463345.715 ops/s
[info]                  ·gc.alloc.rate:      371.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 1261.558 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 468249.983 ops/s
[info]                  ·gc.alloc.rate:               389.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          1308.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2253.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 465625.078 ops/s
[info]                  ·gc.alloc.rate:      364.511 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   466136.318 ±(99.9%) 7425.590 ops/s [Average]
[info]   (min, avg, max) = (463345.715, 466136.318, 468249.983), stdev = 1928.402
[info]   CI (99.9%): [458710.728, 473561.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   377.747 ±(99.9%) 38.041 MB/sec [Average]
[info]   (min, avg, max) = (364.511, 377.747, 389.231), stdev = 9.879
[info]   CI (99.9%): [339.706, 415.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1275.260 ±(99.9%) 116.287 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1275.260, 1308.160), stdev = 30.199
[info]   CI (99.9%): [1158.973, 1391.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.748 ±(99.9%) 1216.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.748, 670.510), stdev = 315.964
[info]   CI (99.9%): [≈ 0, 1555.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1140.725 ±(99.9%) 4094.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1140.725, 2253.507), stdev = 1063.450
[info]   CI (99.9%): [≈ 0, 5235.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.76% complete, ETA 01:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257398.538 ops/s
[info] # Warmup Iteration   2: 482121.405 ops/s
[info] # Warmup Iteration   3: 491371.764 ops/s
[info] # Warmup Iteration   4: 490217.328 ops/s
[info] # Warmup Iteration   5: 490681.572 ops/s
[info] Iteration   1: 490834.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 487804.427 ops/s
[info]                  ·gc.alloc.rate:      13.788 MB/sec
[info]                  ·gc.alloc.rate.norm: 44.482 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 490533.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 490711.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 490493.870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   490075.459 ±(99.9%) 4917.181 ops/s [Average]
[info]   (min, avg, max) = (487804.427, 490075.459, 490834.561), stdev = 1276.976
[info]   CI (99.9%): [485158.279, 494992.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.758 ±(99.9%) 23.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.758, 13.788), stdev = 6.166
[info]   CI (99.9%): [≈ 0, 26.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   8.897 ±(99.9%) 76.600 B/op [Average]
[info]   (min, avg, max) = (0.001, 8.897, 44.482), stdev = 19.893
[info]   CI (99.9%): [≈ 0, 85.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.96% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9569.397 ops/s
[info] # Warmup Iteration   2: 25432.097 ops/s
[info] # Warmup Iteration   3: 29003.204 ops/s
[info] # Warmup Iteration   4: 28169.927 ops/s
[info] # Warmup Iteration   5: 28932.907 ops/s
[info] Iteration   1: 28803.886 ops/s
[info]                  ·gc.alloc.rate:                   1639.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              89557.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109956.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 26890.749 ops/s
[info]                  ·gc.alloc.rate:                   1518.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              88881.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78554.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28628.799 ops/s
[info]                  ·gc.alloc.rate:                   1613.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              88699.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73715.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 29170.924 ops/s
[info]                  ·gc.alloc.rate:                   1680.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              90677.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108210.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 29168.995 ops/s
[info]                  ·gc.alloc.rate:                   1643.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              88648.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72097.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28532.671 ±(99.9%) 3648.463 ops/s [Average]
[info]   (min, avg, max) = (26890.749, 28532.671, 29170.924), stdev = 947.494
[info]   CI (99.9%): [24884.207, 32181.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619.189 ±(99.9%) 235.037 MB/sec [Average]
[info]   (min, avg, max) = (1518.786, 1619.189, 1680.831), stdev = 61.038
[info]   CI (99.9%): [1384.152, 1854.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89292.985 ±(99.9%) 3292.528 B/op [Average]
[info]   (min, avg, max) = (88648.958, 89292.985, 90677.928), stdev = 855.059
[info]   CI (99.9%): [86000.457, 92585.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.718 ±(99.9%) 1412.227 MB/sec [Average]
[info]   (min, avg, max) = (1336.350, 1607.718, 2013.090), stdev = 366.751
[info]   CI (99.9%): [195.491, 3019.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88507.101 ±(99.9%) 72944.834 B/op [Average]
[info]   (min, avg, max) = (72097.462, 88507.101, 109956.892), stdev = 18943.542
[info]   CI (99.9%): [15562.267, 161451.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 4.931 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.845, 2.977), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48.555 ±(99.9%) 288.132 B/op [Average]
[info]   (min, avg, max) = (2.246, 48.555, 174.214), stdev = 74.827
[info]   CI (99.9%): [≈ 0, 336.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.16% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 826.391 ops/s
[info] # Warmup Iteration   2: 6639.901 ops/s
[info] # Warmup Iteration   3: 8139.411 ops/s
[info] # Warmup Iteration   4: 8436.254 ops/s
[info] # Warmup Iteration   5: 8408.974 ops/s
[info] Iteration   1: 8148.219 ops/s
[info]                  ·gc.alloc.rate:                   1191.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              230116.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258895.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8150.875 ops/s
[info]                  ·gc.alloc.rate:               1178.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          227547.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 258960.846 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 8187.948 ops/s
[info]                  ·gc.alloc.rate:                   1178.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              226431.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128927.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8299.903 ops/s
[info]                  ·gc.alloc.rate:                   1207.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              228970.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254502.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 8353.403 ops/s
[info]                  ·gc.alloc.rate:                   1228.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              231432.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253013.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 694.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8228.070 ±(99.9%) 359.234 ops/s [Average]
[info]   (min, avg, max) = (8148.219, 8228.070, 8353.403), stdev = 93.292
[info]   CI (99.9%): [7868.836, 8587.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1196.859 ±(99.9%) 82.319 MB/sec [Average]
[info]   (min, avg, max) = (1178.086, 1196.859, 1228.449), stdev = 21.378
[info]   CI (99.9%): [1114.540, 1279.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228899.593 ±(99.9%) 7657.657 B/op [Average]
[info]   (min, avg, max) = (226431.397, 228899.593, 231432.034), stdev = 1988.669
[info]   CI (99.9%): [221241.936, 236557.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1207.588 ±(99.9%) 1155.506 MB/sec [Average]
[info]   (min, avg, max) = (670.789, 1207.588, 1343.005), stdev = 300.081
[info]   CI (99.9%): [52.082, 2363.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   230860.068 ±(99.9%) 219652.639 B/op [Average]
[info]   (min, avg, max) = (128927.476, 230860.068, 258960.846), stdev = 57043.093
[info]   CI (99.9%): [11207.430, 450512.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.685), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   142.810 ±(99.9%) 1186.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.810, 694.187), stdev = 308.259
[info]   CI (99.9%): [≈ 0, 1329.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.37% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1470.488 ops/s
[info] # Warmup Iteration   2: 6643.410 ops/s
[info] # Warmup Iteration   3: 8097.193 ops/s
[info] # Warmup Iteration   4: 7959.906 ops/s
[info] # Warmup Iteration   5: 8084.715 ops/s
[info] Iteration   1: 8122.900 ops/s
[info]                  ·gc.alloc.rate:               1071.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          207575.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129378.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 8062.377 ops/s
[info]                  ·gc.alloc.rate:                   1086.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              212128.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260973.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8107.562 ops/s
[info]                  ·gc.alloc.rate:               1067.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          207228.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129811.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 7841.370 ops/s
[info]                  ·gc.alloc.rate:                   1048.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              210321.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268594.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 7896.702 ops/s
[info]                  ·gc.alloc.rate:               1039.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          207223.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133411.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8006.182 ±(99.9%) 495.402 ops/s [Average]
[info]   (min, avg, max) = (7841.370, 8006.182, 8122.900), stdev = 128.654
[info]   CI (99.9%): [7510.780, 8501.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1062.782 ±(99.9%) 72.379 MB/sec [Average]
[info]   (min, avg, max) = (1039.858, 1062.782, 1086.792), stdev = 18.797
[info]   CI (99.9%): [990.403, 1135.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   208895.675 ±(99.9%) 8567.121 B/op [Average]
[info]   (min, avg, max) = (207223.958, 208895.675, 212128.748), stdev = 2224.854
[info]   CI (99.9%): [200328.554, 217462.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.342 ±(99.9%) 1411.286 MB/sec [Average]
[info]   (min, avg, max) = (667.814, 936.342, 1338.619), stdev = 366.506
[info]   CI (99.9%): [≈ 0, 2347.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   184433.949 ±(99.9%) 282697.497 B/op [Average]
[info]   (min, avg, max) = (129378.146, 184433.949, 268594.821), stdev = 73415.642
[info]   CI (99.9%): [≈ 0, 467131.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.025), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.824 ±(99.9%) 9.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.824, 4.944), stdev = 2.513
[info]   CI (99.9%): [≈ 0, 11.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74029.449 ops/s
[info] # Warmup Iteration   2: 170572.367 ops/s
[info] # Warmup Iteration   3: 179875.416 ops/s
[info] # Warmup Iteration   4: 180290.867 ops/s
[info] # Warmup Iteration   5: 182675.085 ops/s
[info] Iteration   1: 181160.846 ops/s
[info]                  ·gc.alloc.rate:                   1822.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              15830.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17528.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 183342.701 ops/s
[info]                  ·gc.alloc.rate:                   1840.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              15800.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17314.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.838 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 182854.529 ops/s
[info]                  ·gc.alloc.rate:               1824.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          15700.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11558.347 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 183761.857 ops/s
[info]                  ·gc.alloc.rate:               1833.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          15703.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17246.729 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 179100.046 ops/s
[info]                  ·gc.alloc.rate:                   1815.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              15949.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17704.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   182043.996 ±(99.9%) 7392.193 ops/s [Average]
[info]   (min, avg, max) = (179100.046, 182043.996, 183761.857), stdev = 1919.729
[info]   CI (99.9%): [174651.803, 189436.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1827.242 ±(99.9%) 38.796 MB/sec [Average]
[info]   (min, avg, max) = (1815.119, 1827.242, 1840.842), stdev = 10.075
[info]   CI (99.9%): [1788.446, 1866.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15796.993 ±(99.9%) 396.949 B/op [Average]
[info]   (min, avg, max) = (15700.687, 15796.993, 15949.781), stdev = 103.086
[info]   CI (99.9%): [15400.044, 16193.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1881.324 ±(99.9%) 1158.889 MB/sec [Average]
[info]   (min, avg, max) = (1342.959, 1881.324, 2017.824), stdev = 300.960
[info]   CI (99.9%): [722.435, 3040.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16270.447 ±(99.9%) 10166.987 B/op [Average]
[info]   (min, avg, max) = (11558.347, 16270.447, 17704.463), stdev = 2640.334
[info]   CI (99.9%): [6103.460, 26437.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.894), stdev = 1.289
[info]   CI (99.9%): [≈ 0, 5.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.040 ±(99.9%) 42.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.040, 24.838), stdev = 11.068
[info]   CI (99.9%): [≈ 0, 47.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.77% complete, ETA 01:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 823.563 ops/s
[info] # Warmup Iteration   2: 6075.808 ops/s
[info] # Warmup Iteration   3: 7632.009 ops/s
[info] # Warmup Iteration   4: 7787.529 ops/s
[info] # Warmup Iteration   5: 7797.278 ops/s
[info] Iteration   1: 7813.703 ops/s
[info]                  ·gc.alloc.rate:               1312.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          264370.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 268886.283 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 7797.800 ops/s
[info]                  ·gc.alloc.rate:                   1309.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              264187.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269572.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7812.787 ops/s
[info]                  ·gc.alloc.rate:                   1298.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              261559.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269323.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7677.953 ops/s
[info]                  ·gc.alloc.rate:                   1275.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              261366.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137079.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 849.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7774.768 ops/s
[info]                  ·gc.alloc.rate:                   1315.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              266240.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270334.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7775.402 ±(99.9%) 218.361 ops/s [Average]
[info]   (min, avg, max) = (7677.953, 7775.402, 7813.703), stdev = 56.708
[info]   CI (99.9%): [7557.041, 7993.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1302.227 ±(99.9%) 62.690 MB/sec [Average]
[info]   (min, avg, max) = (1275.430, 1302.227, 1315.302), stdev = 16.281
[info]   CI (99.9%): [1239.536, 1364.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   263545.046 ±(99.9%) 7949.037 B/op [Average]
[info]   (min, avg, max) = (261366.749, 263545.046, 266240.601), stdev = 2064.340
[info]   CI (99.9%): [255596.009, 271494.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.501 ±(99.9%) 1148.562 MB/sec [Average]
[info]   (min, avg, max) = (668.927, 1202.501, 1337.094), stdev = 298.278
[info]   CI (99.9%): [53.939, 2351.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   243039.266 ±(99.9%) 228095.452 B/op [Average]
[info]   (min, avg, max) = (137079.467, 243039.266, 270334.947), stdev = 59235.665
[info]   CI (99.9%): [14943.815, 471134.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.936 ±(99.9%) 6.950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.936, 4.146), stdev = 1.805
[info]   CI (99.9%): [≈ 0, 7.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   191.622 ±(99.9%) 1424.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 191.622, 849.517), stdev = 369.982
[info]   CI (99.9%): [≈ 0, 1616.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41.97% complete, ETA 01:17:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1406.426 ops/s
[info] # Warmup Iteration   2: 6843.144 ops/s
[info] # Warmup Iteration   3: 7998.326 ops/s
[info] # Warmup Iteration   4: 8053.210 ops/s
[info] # Warmup Iteration   5: 8162.288 ops/s
[info] Iteration   1: 8190.667 ops/s
[info]                  ·gc.alloc.rate:                   1122.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              215577.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129008.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8066.262 ops/s
[info]                  ·gc.alloc.rate:               1121.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          218700.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 262014.033 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 8107.608 ops/s
[info]                  ·gc.alloc.rate:               1130.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          219487.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 260915.705 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 8352.106 ops/s
[info]                  ·gc.alloc.rate:                   1135.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              213982.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126647.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.845 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8294.083 ops/s
[info]                  ·gc.alloc.rate:                   1162.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              220547.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255065.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 631.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8202.145 ±(99.9%) 465.570 ops/s [Average]
[info]   (min, avg, max) = (8066.262, 8202.145, 8352.106), stdev = 120.907
[info]   CI (99.9%): [7736.575, 8667.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1134.483 ±(99.9%) 65.062 MB/sec [Average]
[info]   (min, avg, max) = (1121.178, 1134.483, 1162.694), stdev = 16.896
[info]   CI (99.9%): [1069.421, 1199.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   217659.100 ±(99.9%) 10653.948 B/op [Average]
[info]   (min, avg, max) = (213982.493, 217659.100, 220547.810), stdev = 2766.796
[info]   CI (99.9%): [207005.152, 228313.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1075.153 ±(99.9%) 1417.758 MB/sec [Average]
[info]   (min, avg, max) = (671.484, 1075.153, 1344.668), stdev = 368.187
[info]   CI (99.9%): [≈ 0, 2492.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   206730.269 ±(99.9%) 277558.034 B/op [Average]
[info]   (min, avg, max) = (126647.496, 206730.269, 262014.033), stdev = 72080.940
[info]   CI (99.9%): [≈ 0, 484288.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.332), stdev = 1.479
[info]   CI (99.9%): [≈ 0, 6.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   130.364 ±(99.9%) 1079.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.364, 631.977), stdev = 280.458
[info]   CI (99.9%): [≈ 0, 1210.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.17% complete, ETA 01:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6950.847 ops/s
[info] # Warmup Iteration   2: 19106.743 ops/s
[info] # Warmup Iteration   3: 20740.358 ops/s
[info] # Warmup Iteration   4: 20683.265 ops/s
[info] # Warmup Iteration   5: 20481.223 ops/s
[info] Iteration   1: 20848.516 ops/s
[info]                  ·gc.alloc.rate:                   1186.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              89578.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101226.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 20889.776 ops/s
[info]                  ·gc.alloc.rate:                   1190.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              89719.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101068.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20863.470 ops/s
[info]                  ·gc.alloc.rate:               1178.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          88907.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101244.939 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 20727.559 ops/s
[info]                  ·gc.alloc.rate:                   1168.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              88678.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50982.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.161 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20414.806 ops/s
[info]                  ·gc.alloc.rate:                   1178.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              90830.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103532.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20748.825 ±(99.9%) 757.926 ops/s [Average]
[info]   (min, avg, max) = (20414.806, 20748.825, 20889.776), stdev = 196.831
[info]   CI (99.9%): [19990.900, 21506.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1180.530 ±(99.9%) 33.875 MB/sec [Average]
[info]   (min, avg, max) = (1168.022, 1180.530, 1190.850), stdev = 8.797
[info]   CI (99.9%): [1146.655, 1214.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89542.979 ±(99.9%) 3244.708 B/op [Average]
[info]   (min, avg, max) = (88678.472, 89542.979, 90830.104), stdev = 842.640
[info]   CI (99.9%): [86298.271, 92787.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.888 ±(99.9%) 1154.599 MB/sec [Average]
[info]   (min, avg, max) = (671.509, 1207.888, 1343.125), stdev = 299.846
[info]   CI (99.9%): [53.289, 2362.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91611.106 ±(99.9%) 87544.925 B/op [Average]
[info]   (min, avg, max) = (50982.279, 91611.106, 103532.629), stdev = 22735.139
[info]   CI (99.9%): [4066.181, 179156.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.581), stdev = 1.592
[info]   CI (99.9%): [≈ 0, 6.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56.467 ±(99.9%) 472.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.467, 276.036), stdev = 122.748
[info]   CI (99.9%): [≈ 0, 529.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.37% complete, ETA 01:17:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8066.846 ops/s
[info] # Warmup Iteration   2: 22551.692 ops/s
[info] # Warmup Iteration   3: 23449.299 ops/s
[info] # Warmup Iteration   4: 23678.595 ops/s
[info] # Warmup Iteration   5: 23503.799 ops/s
[info] Iteration   1: 22791.137 ops/s
[info]                  ·gc.alloc.rate:               1006.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          69515.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46161.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 23517.866 ops/s
[info]                  ·gc.alloc.rate:                   1050.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              70266.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89558.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23637.685 ops/s
[info]                  ·gc.alloc.rate:               1045.642 MB/sec
[info]                  ·gc.alloc.rate.norm:          69607.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44574.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 23653.277 ops/s
[info]                  ·gc.alloc.rate:                   1048.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              69738.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89132.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 23931.027 ops/s
[info]                  ·gc.alloc.rate:                   1045.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              68729.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44068.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23506.198 ±(99.9%) 1645.953 ops/s [Average]
[info]   (min, avg, max) = (22791.137, 23506.198, 23931.027), stdev = 427.449
[info]   CI (99.9%): [21860.246, 25152.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1039.202 ±(99.9%) 70.221 MB/sec [Average]
[info]   (min, avg, max) = (1006.771, 1039.202, 1050.117), stdev = 18.236
[info]   CI (99.9%): [968.981, 1109.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69571.440 ±(99.9%) 2129.530 B/op [Average]
[info]   (min, avg, max) = (68729.795, 69571.440, 70266.203), stdev = 553.032
[info]   CI (99.9%): [67441.910, 71700.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   937.294 ±(99.9%) 1412.264 MB/sec [Average]
[info]   (min, avg, max) = (668.541, 937.294, 1339.685), stdev = 366.761
[info]   CI (99.9%): [≈ 0, 2349.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62698.817 ±(99.9%) 93714.615 B/op [Average]
[info]   (min, avg, max) = (44068.490, 62698.817, 89558.251), stdev = 24337.388
[info]   CI (99.9%): [≈ 0, 156413.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.383 ±(99.9%) 6.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.383, 4.155), stdev = 1.696
[info]   CI (99.9%): [≈ 0, 7.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.57% complete, ETA 01:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212643.892 ops/s
[info] # Warmup Iteration   2: 361451.578 ops/s
[info] # Warmup Iteration   3: 359048.574 ops/s
[info] # Warmup Iteration   4: 371381.118 ops/s
[info] # Warmup Iteration   5: 368858.249 ops/s
[info] Iteration   1: 369113.724 ops/s
[info]                  ·gc.alloc.rate:               861.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          3672.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2864.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 356531.516 ops/s
[info]                  ·gc.alloc.rate:               827.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          3653.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2965.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 348984.392 ops/s
[info]                  ·gc.alloc.rate:                   809.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              3649.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3031.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 372183.873 ops/s
[info]                  ·gc.alloc.rate:                   885.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              3745.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5687.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 377576.962 ops/s
[info]                  ·gc.alloc.rate:               882.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          3676.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2804.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   364878.094 ±(99.9%) 45351.504 ops/s [Average]
[info]   (min, avg, max) = (348984.392, 364878.094, 377576.962), stdev = 11777.642
[info]   CI (99.9%): [319526.589, 410229.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   853.384 ±(99.9%) 129.644 MB/sec [Average]
[info]   (min, avg, max) = (809.403, 853.384, 885.957), stdev = 33.668
[info]   CI (99.9%): [723.740, 983.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3679.752 ±(99.9%) 148.714 B/op [Average]
[info]   (min, avg, max) = (3649.908, 3679.752, 3745.679), stdev = 38.621
[info]   CI (99.9%): [3531.038, 3828.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.800 ±(99.9%) 1158.863 MB/sec [Average]
[info]   (min, avg, max) = (671.905, 806.800, 1345.161), stdev = 300.953
[info]   CI (99.9%): [≈ 0, 1965.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3470.459 ±(99.9%) 4783.465 B/op [Average]
[info]   (min, avg, max) = (2804.466, 3470.459, 5687.117), stdev = 1242.251
[info]   CI (99.9%): [≈ 0, 8253.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.188), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.77% complete, ETA 01:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252706.194 ops/s
[info] # Warmup Iteration   2: 402990.227 ops/s
[info] # Warmup Iteration   3: 415815.436 ops/s
[info] # Warmup Iteration   4: 422510.564 ops/s
[info] # Warmup Iteration   5: 423590.247 ops/s
[info] Iteration   1: 425262.316 ops/s
[info]                  ·gc.alloc.rate:      1.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.986 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 426429.667 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 425510.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 424767.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 422864.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   424966.917 ±(99.9%) 5087.423 ops/s [Average]
[info]   (min, avg, max) = (422864.465, 424966.917, 426429.667), stdev = 1321.187
[info]   CI (99.9%): [419879.495, 430054.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.216 ±(99.9%) 1.854 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.216, 1.077), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.798 ±(99.9%) 6.861 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.798, 3.986), stdev = 1.782
[info]   CI (99.9%): [≈ 0, 7.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.97% complete, ETA 01:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6756.349 ops/s
[info] # Warmup Iteration   2: 18799.271 ops/s
[info] # Warmup Iteration   3: 20982.927 ops/s
[info] # Warmup Iteration   4: 21495.454 ops/s
[info] # Warmup Iteration   5: 21861.279 ops/s
[info] Iteration   1: 21788.234 ops/s
[info]                  ·gc.alloc.rate:               1155.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          83423.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96735.743 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 21672.462 ops/s
[info]                  ·gc.alloc.rate:               1121.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          81467.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48636.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 21218.452 ops/s
[info]                  ·gc.alloc.rate:               1103.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          81821.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99403.266 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 21064.192 ops/s
[info]                  ·gc.alloc.rate:                   1106.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              82673.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100189.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 21233.348 ops/s
[info]                  ·gc.alloc.rate:                   1088.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              80657.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49715.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   21395.338 ±(99.9%) 1215.171 ops/s [Average]
[info]   (min, avg, max) = (21064.192, 21395.338, 21788.234), stdev = 315.576
[info]   CI (99.9%): [20180.167, 22610.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1115.008 ±(99.9%) 97.743 MB/sec [Average]
[info]   (min, avg, max) = (1088.321, 1115.008, 1155.118), stdev = 25.384
[info]   CI (99.9%): [1017.264, 1212.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82008.832 ±(99.9%) 4129.347 B/op [Average]
[info]   (min, avg, max) = (80657.370, 82008.832, 83423.994), stdev = 1072.378
[info]   CI (99.9%): [77879.485, 86138.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.254 ±(99.9%) 1413.011 MB/sec [Average]
[info]   (min, avg, max) = (669.730, 1072.254, 1340.991), stdev = 366.954
[info]   CI (99.9%): [≈ 0, 2485.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78936.108 ±(99.9%) 104736.521 B/op [Average]
[info]   (min, avg, max) = (48636.552, 78936.108, 100189.078), stdev = 27199.742
[info]   CI (99.9%): [≈ 0, 183672.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.268), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48.756 ±(99.9%) 416.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.756, 242.223), stdev = 108.154
[info]   CI (99.9%): [≈ 0, 465.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43.17% complete, ETA 01:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4580.087 ops/s
[info] # Warmup Iteration   2: 10355.691 ops/s
[info] # Warmup Iteration   3: 11272.463 ops/s
[info] # Warmup Iteration   4: 11332.259 ops/s
[info] # Warmup Iteration   5: 10998.908 ops/s
[info] Iteration   1: 11141.818 ops/s
[info]                  ·gc.alloc.rate:               1369.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          193416.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190004.417 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 11188.739 ops/s
[info]                  ·gc.alloc.rate:               1394.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          196142.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189253.352 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 11278.387 ops/s
[info]                  ·gc.alloc.rate:                   1381.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              192712.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187853.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11295.587 ops/s
[info]                  ·gc.alloc.rate:                   1408.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              196247.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187368.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.604 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11113.211 ops/s
[info]                  ·gc.alloc.rate:               1394.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          197510.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190041.432 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11203.548 ±(99.9%) 312.013 ops/s [Average]
[info]   (min, avg, max) = (11113.211, 11203.548, 11295.587), stdev = 81.029
[info]   CI (99.9%): [10891.535, 11515.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1389.731 ±(99.9%) 57.580 MB/sec [Average]
[info]   (min, avg, max) = (1369.436, 1389.731, 1408.711), stdev = 14.953
[info]   CI (99.9%): [1332.151, 1447.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   195205.852 ±(99.9%) 7865.950 B/op [Average]
[info]   (min, avg, max) = (192712.211, 195205.852, 197510.333), stdev = 2042.762
[info]   CI (99.9%): [187339.902, 203071.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.842 ±(99.9%) 6.229 MB/sec [Average]
[info]   (min, avg, max) = (1342.094, 1344.842, 1346.339), stdev = 1.618
[info]   CI (99.9%): [1338.613, 1351.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   188904.152 ±(99.9%) 4750.945 B/op [Average]
[info]   (min, avg, max) = (187368.346, 188904.152, 190041.432), stdev = 1233.805
[info]   CI (99.9%): [184153.207, 193655.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 4.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 2.519), stdev = 1.098
[info]   CI (99.9%): [≈ 0, 4.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   95.815 ±(99.9%) 590.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.815, 351.470), stdev = 153.225
[info]   CI (99.9%): [≈ 0, 685.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.37% complete, ETA 01:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2424.948 ops/s
[info] # Warmup Iteration   2: 12559.011 ops/s
[info] # Warmup Iteration   3: 12854.462 ops/s
[info] # Warmup Iteration   4: 13453.991 ops/s
[info] # Warmup Iteration   5: 13104.881 ops/s
[info] Iteration   1: 13385.399 ops/s
[info]                  ·gc.alloc.rate:                   1307.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              153692.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157740.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13395.303 ops/s
[info]                  ·gc.alloc.rate:               1301.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          152880.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157779.461 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 13300.438 ops/s
[info]                  ·gc.alloc.rate:               1301.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          154022.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158906.203 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 13303.115 ops/s
[info]                  ·gc.alloc.rate:                   1301.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              153976.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158949.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 455.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13227.223 ops/s
[info]                  ·gc.alloc.rate:               1306.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          155442.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159453.927 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13322.295 ±(99.9%) 266.757 ops/s [Average]
[info]   (min, avg, max) = (13227.223, 13322.295, 13395.303), stdev = 69.276
[info]   CI (99.9%): [13055.539, 13589.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1303.747 ±(99.9%) 11.250 MB/sec [Average]
[info]   (min, avg, max) = (1301.385, 1303.747, 1307.307), stdev = 2.922
[info]   CI (99.9%): [1292.497, 1314.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154002.992 ±(99.9%) 3565.674 B/op [Average]
[info]   (min, avg, max) = (152880.857, 154002.992, 155442.756), stdev = 925.994
[info]   CI (99.9%): [150437.318, 157568.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.380 ±(99.9%) 5.330 MB/sec [Average]
[info]   (min, avg, max) = (1340.268, 1342.380, 1343.730), stdev = 1.384
[info]   CI (99.9%): [1337.049, 1347.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   158565.888 ±(99.9%) 2951.963 B/op [Average]
[info]   (min, avg, max) = (157740.668, 158565.888, 159453.927), stdev = 766.615
[info]   CI (99.9%): [155613.925, 161517.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.851), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   91.608 ±(99.9%) 783.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.608, 455.590), stdev = 203.475
[info]   CI (99.9%): [≈ 0, 875.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.57% complete, ETA 01:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1722.319 ops/s
[info] # Warmup Iteration   2: 11380.888 ops/s
[info] # Warmup Iteration   3: 13582.880 ops/s
[info] # Warmup Iteration   4: 13332.588 ops/s
[info] # Warmup Iteration   5: 13479.288 ops/s
[info] Iteration   1: 13616.990 ops/s
[info]                  ·gc.alloc.rate:               1231.356 MB/sec
[info]                  ·gc.alloc.rate.norm:          142304.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154360.858 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13701.478 ops/s
[info]                  ·gc.alloc.rate:                   1228.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              141100.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153529.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 13641.342 ops/s
[info]                  ·gc.alloc.rate:                   1240.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              143062.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154281.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13215.416 ops/s
[info]                  ·gc.alloc.rate:                   1180.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              140552.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79640.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.958 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13389.188 ops/s
[info]                  ·gc.alloc.rate:                   1215.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              142854.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157368.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 504.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13512.883 ±(99.9%) 786.077 ops/s [Average]
[info]   (min, avg, max) = (13215.416, 13512.883, 13701.478), stdev = 204.142
[info]   CI (99.9%): [12726.806, 14298.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1219.164 ±(99.9%) 90.282 MB/sec [Average]
[info]   (min, avg, max) = (1180.313, 1219.164, 1240.102), stdev = 23.446
[info]   CI (99.9%): [1128.882, 1309.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   141974.845 ±(99.9%) 4240.970 B/op [Average]
[info]   (min, avg, max) = (140552.764, 141974.845, 143062.067), stdev = 1101.366
[info]   CI (99.9%): [137733.875, 146215.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.518 ±(99.9%) 1151.042 MB/sec [Average]
[info]   (min, avg, max) = (668.795, 1203.518, 1338.961), stdev = 298.922
[info]   CI (99.9%): [52.476, 2354.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   139836.217 ±(99.9%) 129699.001 B/op [Average]
[info]   (min, avg, max) = (79640.692, 139836.217, 157368.607), stdev = 33682.419
[info]   CI (99.9%): [10137.216, 269535.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 4.288), stdev = 1.909
[info]   CI (99.9%): [≈ 0, 8.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   102.752 ±(99.9%) 863.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.752, 504.010), stdev = 224.317
[info]   CI (99.9%): [≈ 0, 966.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 01:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128306.067 ops/s
[info] # Warmup Iteration   2: 250098.493 ops/s
[info] # Warmup Iteration   3: 273715.644 ops/s
[info] # Warmup Iteration   4: 275721.869 ops/s
[info] # Warmup Iteration   5: 275379.338 ops/s
[info] Iteration   1: 275406.298 ops/s
[info]                  ·gc.alloc.rate:                   1622.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              9269.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7681.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 261898.851 ops/s
[info]                  ·gc.alloc.rate:                   1567.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              9417.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8081.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 276161.901 ops/s
[info]                  ·gc.alloc.rate:                   1639.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              9336.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11487.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 275505.335 ops/s
[info]                  ·gc.alloc.rate:               1647.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          9408.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7663.922 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 276293.511 ops/s
[info]                  ·gc.alloc.rate:                   1638.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              9332.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7642.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   273053.179 ±(99.9%) 24057.526 ops/s [Average]
[info]   (min, avg, max) = (261898.851, 273053.179, 276293.511), stdev = 6247.663
[info]   CI (99.9%): [248995.654, 297110.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1622.970 ±(99.9%) 124.193 MB/sec [Average]
[info]   (min, avg, max) = (1567.648, 1622.970, 1647.520), stdev = 32.253
[info]   CI (99.9%): [1498.777, 1747.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9352.824 ±(99.9%) 234.394 B/op [Average]
[info]   (min, avg, max) = (9269.481, 9352.824, 9417.022), stdev = 60.871
[info]   CI (99.9%): [9118.429, 9587.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.019 ±(99.9%) 1159.360 MB/sec [Average]
[info]   (min, avg, max) = (1341.694, 1478.019, 2016.604), stdev = 301.082
[info]   CI (99.9%): [318.659, 2637.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8511.520 ±(99.9%) 6445.326 B/op [Average]
[info]   (min, avg, max) = (7642.041, 8511.520, 11487.978), stdev = 1673.831
[info]   CI (99.9%): [2066.194, 14956.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.665), stdev = 1.158
[info]   CI (99.9%): [≈ 0, 5.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.606 ±(99.9%) 26.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.606, 16.012), stdev = 6.968
[info]   CI (99.9%): [≈ 0, 30.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.98% complete, ETA 01:14:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366.865 ops/s
[info] # Warmup Iteration   2: 8447.827 ops/s
[info] # Warmup Iteration   3: 11971.413 ops/s
[info] # Warmup Iteration   4: 12219.786 ops/s
[info] # Warmup Iteration   5: 12265.522 ops/s
[info] Iteration   1: 12227.070 ops/s
[info]                  ·gc.alloc.rate:                   1502.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              193323.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171575.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12247.004 ops/s
[info]                  ·gc.alloc.rate:                   1500.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              192768.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171638.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12095.028 ops/s
[info]                  ·gc.alloc.rate:               1491.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          194107.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174141.455 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 12138.195 ops/s
[info]                  ·gc.alloc.rate:                   1522.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              197399.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260783.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12172.397 ops/s
[info]                  ·gc.alloc.rate:               1513.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          195687.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173442.187 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12175.939 ±(99.9%) 240.845 ops/s [Average]
[info]   (min, avg, max) = (12095.028, 12175.939, 12247.004), stdev = 62.547
[info]   CI (99.9%): [11935.094, 12416.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1506.110 ±(99.9%) 46.553 MB/sec [Average]
[info]   (min, avg, max) = (1491.861, 1506.110, 1522.636), stdev = 12.090
[info]   CI (99.9%): [1459.557, 1552.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   194657.446 ±(99.9%) 7263.743 B/op [Average]
[info]   (min, avg, max) = (192768.316, 194657.446, 197399.949), stdev = 1886.371
[info]   CI (99.9%): [187393.703, 201921.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.100 ±(99.9%) 1161.257 MB/sec [Average]
[info]   (min, avg, max) = (1333.120, 1472.100, 2011.544), stdev = 301.575
[info]   CI (99.9%): [310.843, 2633.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   190316.252 ±(99.9%) 151747.880 B/op [Average]
[info]   (min, avg, max) = (171575.810, 190316.252, 260783.727), stdev = 39408.443
[info]   CI (99.9%): [38568.372, 342064.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.302 ±(99.9%) 2.422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.426), stdev = 0.629
[info]   CI (99.9%): [≈ 0, 2.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39.127 ±(99.9%) 314.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.127, 184.922), stdev = 81.568
[info]   CI (99.9%): [≈ 0, 353.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44.18% complete, ETA 01:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1815.227 ops/s
[info] # Warmup Iteration   2: 10731.917 ops/s
[info] # Warmup Iteration   3: 13315.463 ops/s
[info] # Warmup Iteration   4: 13611.229 ops/s
[info] # Warmup Iteration   5: 13472.851 ops/s
[info] Iteration   1: 13634.811 ops/s
[info]                  ·gc.alloc.rate:               1271.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          146787.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77424.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13165.700 ops/s
[info]                  ·gc.alloc.rate:                   1242.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              148532.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160443.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13434.443 ops/s
[info]                  ·gc.alloc.rate:                   1263.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              148050.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157309.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13525.087 ops/s
[info]                  ·gc.alloc.rate:                   1281.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              149082.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156329.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 13622.596 ops/s
[info]                  ·gc.alloc.rate:                   1292.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              149331.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155062.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   13476.528 ±(99.9%) 738.513 ops/s [Average]
[info]   (min, avg, max) = (13165.700, 13476.528, 13634.811), stdev = 191.789
[info]   CI (99.9%): [12738.015, 14215.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1270.466 ±(99.9%) 72.769 MB/sec [Average]
[info]   (min, avg, max) = (1242.676, 1270.466, 1292.667), stdev = 18.898
[info]   CI (99.9%): [1197.697, 1343.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   148356.983 ±(99.9%) 3881.328 B/op [Average]
[info]   (min, avg, max) = (146787.596, 148356.983, 149331.485), stdev = 1007.969
[info]   CI (99.9%): [144475.655, 152238.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208.389 ±(99.9%) 1157.174 MB/sec [Average]
[info]   (min, avg, max) = (670.814, 1208.389, 1343.615), stdev = 300.514
[info]   CI (99.9%): [51.216, 2365.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   141313.901 ±(99.9%) 137739.819 B/op [Average]
[info]   (min, avg, max) = (77424.551, 141313.901, 160443.514), stdev = 35770.594
[info]   CI (99.9%): [3574.082, 279053.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 5.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.518), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 6.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   89.103 ±(99.9%) 691.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.103, 409.328), stdev = 179.472
[info]   CI (99.9%): [≈ 0, 780.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.38% complete, ETA 01:14:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11663.399 ops/s
[info] # Warmup Iteration   2: 29487.197 ops/s
[info] # Warmup Iteration   3: 32024.751 ops/s
[info] # Warmup Iteration   4: 32265.707 ops/s
[info] # Warmup Iteration   5: 31967.854 ops/s
[info] Iteration   1: 32943.698 ops/s
[info]                  ·gc.alloc.rate:                   1413.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              67550.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64105.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32403.336 ops/s
[info]                  ·gc.alloc.rate:               1412.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          68612.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65206.409 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 33046.231 ops/s
[info]                  ·gc.alloc.rate:                   1414.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              67366.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63969.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 29652.077 ops/s
[info]                  ·gc.alloc.rate:                   1285.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              68205.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71223.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 32328.989 ops/s
[info]                  ·gc.alloc.rate:                   1410.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              68681.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65211.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   32074.866 ±(99.9%) 5356.685 ops/s [Average]
[info]   (min, avg, max) = (29652.077, 32074.866, 33046.231), stdev = 1391.114
[info]   CI (99.9%): [26718.181, 37431.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1387.494 ±(99.9%) 220.360 MB/sec [Average]
[info]   (min, avg, max) = (1285.154, 1387.494, 1414.595), stdev = 57.227
[info]   CI (99.9%): [1167.135, 1607.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68083.200 ±(99.9%) 2319.684 B/op [Average]
[info]   (min, avg, max) = (67366.110, 68083.200, 68681.738), stdev = 602.414
[info]   CI (99.9%): [65763.516, 70402.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.902 ±(99.9%) 5.241 MB/sec [Average]
[info]   (min, avg, max) = (1339.674, 1341.902, 1343.274), stdev = 1.361
[info]   CI (99.9%): [1336.661, 1347.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   65943.524 ±(99.9%) 11589.277 B/op [Average]
[info]   (min, avg, max) = (63969.671, 65943.524, 71223.830), stdev = 3009.699
[info]   CI (99.9%): [54354.247, 77532.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.754 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.914), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   36.623 ±(99.9%) 226.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.623, 138.789), stdev = 58.712
[info]   CI (99.9%): [≈ 0, 262.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.58% complete, ETA 01:14:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29755.032 ops/s
[info] # Warmup Iteration   2: 72950.410 ops/s
[info] # Warmup Iteration   3: 81122.334 ops/s
[info] # Warmup Iteration   4: 79380.476 ops/s
[info] # Warmup Iteration   5: 80177.085 ops/s
[info] Iteration   1: 79873.425 ops/s
[info]                  ·gc.alloc.rate:                   2011.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              39623.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39654.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 80468.780 ops/s
[info]                  ·gc.alloc.rate:                   2022.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              39553.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39268.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 79124.242 ops/s
[info]                  ·gc.alloc.rate:                   1991.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              39616.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26606.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 81295.703 ops/s
[info]                  ·gc.alloc.rate:               2033.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          39355.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38842.357 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 81294.536 ops/s
[info]                  ·gc.alloc.rate:                   2032.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              39336.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38901.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   80411.337 ±(99.9%) 3607.811 ops/s [Average]
[info]   (min, avg, max) = (79124.242, 80411.337, 81295.703), stdev = 936.937
[info]   CI (99.9%): [76803.526, 84019.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2018.376 ±(99.9%) 66.216 MB/sec [Average]
[info]   (min, avg, max) = (1991.890, 2018.376, 2033.127), stdev = 17.196
[info]   CI (99.9%): [1952.160, 2084.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39497.151 ±(99.9%) 542.468 B/op [Average]
[info]   (min, avg, max) = (39336.023, 39497.151, 39623.787), stdev = 140.877
[info]   CI (99.9%): [38954.683, 40039.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1875.151 ±(99.9%) 1156.766 MB/sec [Average]
[info]   (min, avg, max) = (1337.782, 1875.151, 2013.238), stdev = 300.408
[info]   CI (99.9%): [718.385, 3031.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36654.701 ±(99.9%) 21664.837 B/op [Average]
[info]   (min, avg, max) = (26606.945, 36654.701, 39654.350), stdev = 5626.289
[info]   CI (99.9%): [14989.864, 58319.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.746 ±(99.9%) 5.842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 3.457), stdev = 1.517
[info]   CI (99.9%): [≈ 0, 6.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.682 ±(99.9%) 115.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.682, 68.092), stdev = 29.884
[info]   CI (99.9%): [≈ 0, 129.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 01:13:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389764.858 ops/s
[info] # Warmup Iteration   2: 587547.181 ops/s
[info] # Warmup Iteration   3: 618566.050 ops/s
[info] # Warmup Iteration   4: 627190.112 ops/s
[info] # Warmup Iteration   5: 629528.462 ops/s
[info] Iteration   1: 577209.400 ops/s
[info]                  ·gc.alloc.rate:                   816.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              2226.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1830.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 630820.182 ops/s
[info]                  ·gc.alloc.rate:               892.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          2227.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1675.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 626887.768 ops/s
[info]                  ·gc.alloc.rate:                   892.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              2241.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3374.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 626405.312 ops/s
[info]                  ·gc.alloc.rate:               874.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          2197.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1688.620 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 618208.616 ops/s
[info]                  ·gc.alloc.rate:               862.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          2196.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1711.062 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   615906.256 ±(99.9%) 85150.538 ops/s [Average]
[info]   (min, avg, max) = (577209.400, 615906.256, 630820.182), stdev = 22113.324
[info]   CI (99.9%): [530755.717, 701056.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   867.978 ±(99.9%) 121.049 MB/sec [Average]
[info]   (min, avg, max) = (816.522, 867.978, 892.898), stdev = 31.436
[info]   CI (99.9%): [746.929, 989.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2217.909 ±(99.9%) 75.743 B/op [Average]
[info]   (min, avg, max) = (2196.865, 2217.909, 2241.108), stdev = 19.670
[info]   CI (99.9%): [2142.166, 2293.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.301 ±(99.9%) 1158.070 MB/sec [Average]
[info]   (min, avg, max) = (671.377, 806.301, 1344.293), stdev = 300.747
[info]   CI (99.9%): [≈ 0, 1964.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2056.066 ±(99.9%) 2848.302 B/op [Average]
[info]   (min, avg, max) = (1675.193, 2056.066, 3374.676), stdev = 739.695
[info]   CI (99.9%): [≈ 0, 4904.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.98% complete, ETA 01:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480700.338 ops/s
[info] # Warmup Iteration   2: 702594.048 ops/s
[info] # Warmup Iteration   3: 694884.621 ops/s
[info] # Warmup Iteration   4: 721497.620 ops/s
[info] # Warmup Iteration   5: 724016.345 ops/s
[info] Iteration   1: 723158.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 723889.062 ops/s
[info]                  ·gc.alloc.rate:      0.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 725033.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 725344.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 725768.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   724638.883 ±(99.9%) 4166.500 ops/s [Average]
[info]   (min, avg, max) = (723158.711, 724638.883, 725768.563), stdev = 1082.027
[info]   CI (99.9%): [720472.383, 728805.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.186 ±(99.9%) 1.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.186, 0.930), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 1.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.405 ±(99.9%) 3.479 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.405, 2.021), stdev = 0.903
[info]   CI (99.9%): [≈ 0, 3.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:13:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24643.627 ops/s
[info] # Warmup Iteration   2: 69636.772 ops/s
[info] # Warmup Iteration   3: 71373.780 ops/s
[info] # Warmup Iteration   4: 74054.533 ops/s
[info] # Warmup Iteration   5: 73349.550 ops/s
[info] Iteration   1: 74222.312 ops/s
[info]                  ·gc.alloc.rate:                   2132.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              45221.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42615.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 73981.131 ops/s
[info]                  ·gc.alloc.rate:                   2165.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              46068.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56852.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 74328.262 ops/s
[info]                  ·gc.alloc.rate:                   2149.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              45513.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42413.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73844.429 ops/s
[info]                  ·gc.alloc.rate:                   2140.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              45624.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42735.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 74584.761 ops/s
[info]                  ·gc.alloc.rate:                   2133.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              45020.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42401.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   74192.179 ±(99.9%) 1121.024 ops/s [Average]
[info]   (min, avg, max) = (73844.429, 74192.179, 74584.761), stdev = 291.126
[info]   CI (99.9%): [73071.155, 75313.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2144.528 ±(99.9%) 52.416 MB/sec [Average]
[info]   (min, avg, max) = (2132.790, 2144.528, 2165.713), stdev = 13.612
[info]   CI (99.9%): [2092.112, 2196.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45489.524 ±(99.9%) 1547.694 B/op [Average]
[info]   (min, avg, max) = (45020.226, 45489.524, 46068.323), stdev = 401.931
[info]   CI (99.9%): [43941.830, 47037.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2140.128 ±(99.9%) 1146.390 MB/sec [Average]
[info]   (min, avg, max) = (2003.144, 2140.128, 2672.670), stdev = 297.714
[info]   CI (99.9%): [993.738, 3286.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   45403.703 ±(99.9%) 24649.541 B/op [Average]
[info]   (min, avg, max) = (42401.564, 45403.703, 56852.128), stdev = 6401.407
[info]   CI (99.9%): [20754.163, 70053.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.262 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.799, 3.706), stdev = 1.626
[info]   CI (99.9%): [≈ 0, 7.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.950 ±(99.9%) 132.762 B/op [Average]
[info]   (min, avg, max) = (0.439, 16.950, 78.572), stdev = 34.478
[info]   CI (99.9%): [≈ 0, 149.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45.38% complete, ETA 01:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6398.433 ops/s
[info] # Warmup Iteration   2: 18946.438 ops/s
[info] # Warmup Iteration   3: 19643.216 ops/s
[info] # Warmup Iteration   4: 20060.415 ops/s
[info] # Warmup Iteration   5: 20027.346 ops/s
[info] Iteration   1: 19797.229 ops/s
[info]                  ·gc.alloc.rate:                   1300.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              103374.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106859.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 19830.759 ops/s
[info]                  ·gc.alloc.rate:               1320.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          104827.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106734.305 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 20058.019 ops/s
[info]                  ·gc.alloc.rate:                   1315.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              103210.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105578.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20002.085 ops/s
[info]                  ·gc.alloc.rate:                   1312.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              103242.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105926.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 20049.681 ops/s
[info]                  ·gc.alloc.rate:                   1328.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              104314.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105417.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   19947.555 ±(99.9%) 478.800 ops/s [Average]
[info]   (min, avg, max) = (19797.229, 19947.555, 20058.019), stdev = 124.343
[info]   CI (99.9%): [19468.755, 20426.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1315.629 ±(99.9%) 40.733 MB/sec [Average]
[info]   (min, avg, max) = (1300.476, 1315.629, 1328.991), stdev = 10.578
[info]   CI (99.9%): [1274.896, 1356.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   103793.766 ±(99.9%) 2828.839 B/op [Average]
[info]   (min, avg, max) = (103210.006, 103793.766, 104827.015), stdev = 734.641
[info]   CI (99.9%): [100964.927, 106622.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.875 ±(99.9%) 4.946 MB/sec [Average]
[info]   (min, avg, max) = (1343.038, 1344.875, 1346.382), stdev = 1.284
[info]   CI (99.9%): [1339.929, 1349.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   106103.269 ±(99.9%) 2544.494 B/op [Average]
[info]   (min, avg, max) = (105417.105, 106103.269, 106859.225), stdev = 660.797
[info]   CI (99.9%): [103558.775, 108647.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.373), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   54.706 ±(99.9%) 453.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.706, 265.341), stdev = 117.762
[info]   CI (99.9%): [≈ 0, 508.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.58% complete, ETA 01:12:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1977.482 ops/s
[info] # Warmup Iteration   2: 11713.979 ops/s
[info] # Warmup Iteration   3: 14170.194 ops/s
[info] # Warmup Iteration   4: 13964.415 ops/s
[info] # Warmup Iteration   5: 14093.437 ops/s
[info] Iteration   1: 14218.735 ops/s
[info]                  ·gc.alloc.rate:               746.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          82567.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74139.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 14573.365 ops/s
[info]                  ·gc.alloc.rate:               772.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          83369.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72365.196 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 14239.924 ops/s
[info]                  ·gc.alloc.rate:               771.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          85307.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74056.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14604.757 ops/s
[info]                  ·gc.alloc.rate:                   779.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              83993.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72283.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14228.921 ops/s
[info]                  ·gc.alloc.rate:               748.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          82809.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74193.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   14373.140 ±(99.9%) 760.741 ops/s [Average]
[info]   (min, avg, max) = (14218.735, 14373.140, 14604.757), stdev = 197.562
[info]   CI (99.9%): [13612.399, 15133.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   763.653 ±(99.9%) 58.523 MB/sec [Average]
[info]   (min, avg, max) = (746.013, 763.653, 779.507), stdev = 15.198
[info]   CI (99.9%): [705.130, 822.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83609.480 ±(99.9%) 4223.429 B/op [Average]
[info]   (min, avg, max) = (82567.974, 83609.480, 85307.297), stdev = 1096.811
[info]   CI (99.9%): [79386.052, 87832.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   670.364 ±(99.9%) 1.714 MB/sec [Average]
[info]   (min, avg, max) = (669.864, 670.364, 670.838), stdev = 0.445
[info]   CI (99.9%): [668.650, 672.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73407.707 ±(99.9%) 3814.525 B/op [Average]
[info]   (min, avg, max) = (72283.409, 73407.707, 74193.088), stdev = 990.620
[info]   CI (99.9%): [69593.183, 77222.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.897 ±(99.9%) 7.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.897, 4.486), stdev = 2.006
[info]   CI (99.9%): [≈ 0, 8.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.78% complete, ETA 01:12:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5703.100 ops/s
[info] # Warmup Iteration   2: 15295.822 ops/s
[info] # Warmup Iteration   3: 17112.510 ops/s
[info] # Warmup Iteration   4: 17018.765 ops/s
[info] # Warmup Iteration   5: 17590.156 ops/s
[info] Iteration   1: 17637.464 ops/s
[info]                  ·gc.alloc.rate:               772.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          68919.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59528.874 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17539.723 ops/s
[info]                  ·gc.alloc.rate:               791.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          71006.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59921.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17683.072 ops/s
[info]                  ·gc.alloc.rate:               781.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          69556.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59433.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17674.107 ops/s
[info]                  ·gc.alloc.rate:               772.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          68744.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59522.911 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17568.468 ops/s
[info]                  ·gc.alloc.rate:                   784.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              70240.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119793.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17620.567 ±(99.9%) 245.876 ops/s [Average]
[info]   (min, avg, max) = (17539.723, 17620.567, 17683.072), stdev = 63.853
[info]   CI (99.9%): [17374.690, 17866.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   780.360 ±(99.9%) 31.663 MB/sec [Average]
[info]   (min, avg, max) = (772.062, 780.360, 791.371), stdev = 8.223
[info]   CI (99.9%): [748.697, 812.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69693.470 ±(99.9%) 3623.354 B/op [Average]
[info]   (min, avg, max) = (68744.172, 69693.470, 71006.146), stdev = 940.974
[info]   CI (99.9%): [66070.116, 73316.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801.807 ±(99.9%) 1153.545 MB/sec [Average]
[info]   (min, avg, max) = (667.183, 801.807, 1337.697), stdev = 299.572
[info]   CI (99.9%): [≈ 0, 1955.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   71640.019 ±(99.9%) 103657.142 B/op [Average]
[info]   (min, avg, max) = (59433.337, 71640.019, 119793.781), stdev = 26919.431
[info]   CI (99.9%): [≈ 0, 175297.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.746 ±(99.9%) 6.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 3.730), stdev = 1.668
[info]   CI (99.9%): [≈ 0, 7.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.98% complete, ETA 01:12:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71853.172 ops/s
[info] # Warmup Iteration   2: 106042.217 ops/s
[info] # Warmup Iteration   3: 121117.419 ops/s
[info] # Warmup Iteration   4: 121909.548 ops/s
[info] # Warmup Iteration   5: 121284.133 ops/s
[info] Iteration   1: 120752.770 ops/s
[info]                  ·gc.alloc.rate:      303.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 120186.510 ops/s
[info]                  ·gc.alloc.rate:               312.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          4094.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6699.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 120247.544 ops/s
[info]                  ·gc.alloc.rate:               319.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          4180.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6695.932 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 120768.177 ops/s
[info]                  ·gc.alloc.rate:      303.274 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 120762.343 ops/s
[info]                  ·gc.alloc.rate:      303.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   120543.469 ±(99.9%) 1150.689 ops/s [Average]
[info]   (min, avg, max) = (120186.510, 120543.469, 120768.177), stdev = 298.830
[info]   CI (99.9%): [119392.780, 121694.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   308.385 ±(99.9%) 28.560 MB/sec [Average]
[info]   (min, avg, max) = (303.232, 308.385, 319.442), stdev = 7.417
[info]   CI (99.9%): [279.825, 336.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4026.323 ±(99.9%) 408.959 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4026.323, 4180.774), stdev = 106.205
[info]   CI (99.9%): [3617.364, 4435.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.649 ±(99.9%) 1079.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.649, 511.627), stdev = 280.227
[info]   CI (99.9%): [≈ 0, 1283.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2679.052 ±(99.9%) 14125.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2679.052, 6699.330), stdev = 3668.444
[info]   CI (99.9%): [≈ 0, 16804.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.18% complete, ETA 01:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1540.233 ops/s
[info] # Warmup Iteration   2: 11202.627 ops/s
[info] # Warmup Iteration   3: 15002.584 ops/s
[info] # Warmup Iteration   4: 14790.704 ops/s
[info] # Warmup Iteration   5: 13721.320 ops/s
[info] Iteration   1: 14603.717 ops/s
[info]                  ·gc.alloc.rate:                   1097.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              118272.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72001.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14628.286 ops/s
[info]                  ·gc.alloc.rate:               1121.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          120607.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143909.549 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 14962.552 ops/s
[info]                  ·gc.alloc.rate:                   1136.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              119558.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140688.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14850.609 ops/s
[info]                  ·gc.alloc.rate:               1126.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          119417.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70945.125 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15032.847 ops/s
[info]                  ·gc.alloc.rate:                   1146.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              120020.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140198.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14815.602 ±(99.9%) 745.668 ops/s [Average]
[info]   (min, avg, max) = (14603.717, 14815.602, 15032.847), stdev = 193.648
[info]   CI (99.9%): [14069.934, 15561.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1125.874 ±(99.9%) 71.159 MB/sec [Average]
[info]   (min, avg, max) = (1097.639, 1125.874, 1146.544), stdev = 18.480
[info]   CI (99.9%): [1054.716, 1197.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119575.267 ±(99.9%) 3327.126 B/op [Average]
[info]   (min, avg, max) = (118272.507, 119575.267, 120607.522), stdev = 864.044
[info]   CI (99.9%): [116248.141, 122902.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.569 ±(99.9%) 1412.056 MB/sec [Average]
[info]   (min, avg, max) = (668.214, 1070.569, 1339.299), stdev = 366.706
[info]   CI (99.9%): [≈ 0, 2482.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113548.494 ±(99.9%) 148009.524 B/op [Average]
[info]   (min, avg, max) = (70945.125, 113548.494, 143909.549), stdev = 38437.603
[info]   CI (99.9%): [≈ 0, 261558.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.685), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78.467 ±(99.9%) 661.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.467, 385.711), stdev = 171.764
[info]   CI (99.9%): [≈ 0, 739.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46.39% complete, ETA 01:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2217.891 ops/s
[info] # Warmup Iteration   2: 13267.960 ops/s
[info] # Warmup Iteration   3: 15379.402 ops/s
[info] # Warmup Iteration   4: 15241.467 ops/s
[info] # Warmup Iteration   5: 15231.956 ops/s
[info] Iteration   1: 15294.648 ops/s
[info]                  ·gc.alloc.rate:               746.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          76800.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69027.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15330.835 ops/s
[info]                  ·gc.alloc.rate:               750.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          77043.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68890.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14875.226 ops/s
[info]                  ·gc.alloc.rate:               735.812 MB/sec
[info]                  ·gc.alloc.rate.norm:          77844.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71006.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 15280.239 ops/s
[info]                  ·gc.alloc.rate:               751.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          77445.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69154.973 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15366.403 ops/s
[info]                  ·gc.alloc.rate:                   750.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              76840.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68768.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   15229.470 ±(99.9%) 773.348 ops/s [Average]
[info]   (min, avg, max) = (14875.226, 15229.470, 15366.403), stdev = 200.836
[info]   CI (99.9%): [14456.123, 16002.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   747.005 ±(99.9%) 25.368 MB/sec [Average]
[info]   (min, avg, max) = (735.812, 747.005, 751.974), stdev = 6.588
[info]   CI (99.9%): [721.637, 772.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   77194.814 ±(99.9%) 1711.581 B/op [Average]
[info]   (min, avg, max) = (76800.047, 77194.814, 77844.854), stdev = 444.492
[info]   CI (99.9%): [75483.233, 78906.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   671.222 ±(99.9%) 0.946 MB/sec [Average]
[info]   (min, avg, max) = (670.873, 671.222, 671.471), stdev = 0.246
[info]   CI (99.9%): [670.276, 672.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   69369.666 ±(99.9%) 3568.246 B/op [Average]
[info]   (min, avg, max) = (68768.029, 69369.666, 71006.877), stdev = 926.662
[info]   CI (99.9%): [65801.419, 72937.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.853 ±(99.9%) 7.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 4.264), stdev = 1.907
[info]   CI (99.9%): [≈ 0, 8.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:11:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14373.763 ops/s
[info] # Warmup Iteration   2: 43694.186 ops/s
[info] # Warmup Iteration   3: 46158.629 ops/s
[info] # Warmup Iteration   4: 47050.286 ops/s
[info] # Warmup Iteration   5: 46866.075 ops/s
[info] Iteration   1: 47172.100 ops/s
[info]                  ·gc.alloc.rate:                   1443.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              48144.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44757.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 46341.733 ops/s
[info]                  ·gc.alloc.rate:               1423.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          48357.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45586.326 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 47291.456 ops/s
[info]                  ·gc.alloc.rate:                   1456.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              48460.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44693.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 44591.260 ops/s
[info]                  ·gc.alloc.rate:                   1372.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              48437.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47353.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47121.669 ops/s
[info]                  ·gc.alloc.rate:                   1450.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              48455.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44741.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   46503.644 ±(99.9%) 4361.975 ops/s [Average]
[info]   (min, avg, max) = (44591.260, 46503.644, 47291.456), stdev = 1132.791
[info]   CI (99.9%): [42141.669, 50865.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1429.387 ±(99.9%) 131.101 MB/sec [Average]
[info]   (min, avg, max) = (1372.567, 1429.387, 1456.332), stdev = 34.046
[info]   CI (99.9%): [1298.287, 1560.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48371.188 ±(99.9%) 513.219 B/op [Average]
[info]   (min, avg, max) = (48144.604, 48371.188, 48460.666), stdev = 133.281
[info]   CI (99.9%): [47857.969, 48884.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.738 ±(99.9%) 4.933 MB/sec [Average]
[info]   (min, avg, max) = (1339.683, 1341.738, 1343.132), stdev = 1.281
[info]   CI (99.9%): [1336.805, 1346.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   45426.627 ±(99.9%) 4387.346 B/op [Average]
[info]   (min, avg, max) = (44693.839, 45426.627, 47353.680), stdev = 1139.380
[info]   CI (99.9%): [41039.281, 49813.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 4.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 2.915), stdev = 1.253
[info]   CI (99.9%): [≈ 0, 5.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.665 ±(99.9%) 160.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.665, 96.992), stdev = 41.701
[info]   CI (99.9%): [≈ 0, 185.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.79% complete, ETA 01:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34141.765 ops/s
[info] # Warmup Iteration   2: 74930.834 ops/s
[info] # Warmup Iteration   3: 76746.768 ops/s
[info] # Warmup Iteration   4: 76768.409 ops/s
[info] # Warmup Iteration   5: 76063.357 ops/s
[info] Iteration   1: 77024.477 ops/s
[info]                  ·gc.alloc.rate:                   1627.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              33252.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27393.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 76609.763 ops/s
[info]                  ·gc.alloc.rate:                   1619.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              33259.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27554.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 77295.608 ops/s
[info]                  ·gc.alloc.rate:                   1646.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              33526.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40919.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 76175.438 ops/s
[info]                  ·gc.alloc.rate:               1635.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          33795.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27633.942 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 78163.355 ops/s
[info]                  ·gc.alloc.rate:                   1678.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              33787.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40407.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.838 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   77053.728 ±(99.9%) 2893.838 ops/s [Average]
[info]   (min, avg, max) = (76175.438, 77053.728, 78163.355), stdev = 751.520
[info]   CI (99.9%): [74159.891, 79947.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1641.470 ±(99.9%) 88.052 MB/sec [Average]
[info]   (min, avg, max) = (1619.139, 1641.470, 1678.079), stdev = 22.867
[info]   CI (99.9%): [1553.418, 1729.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33524.266 ±(99.9%) 1030.831 B/op [Average]
[info]   (min, avg, max) = (33252.701, 33524.266, 33795.168), stdev = 267.704
[info]   CI (99.9%): [32493.435, 34555.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1607.304 ±(99.9%) 1409.778 MB/sec [Average]
[info]   (min, avg, max) = (1337.614, 1607.304, 2009.878), stdev = 366.115
[info]   CI (99.9%): [197.526, 3017.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32781.804 ±(99.9%) 27716.198 B/op [Average]
[info]   (min, avg, max) = (27393.156, 32781.804, 40919.841), stdev = 7197.809
[info]   CI (99.9%): [5065.606, 60498.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.728 ±(99.9%) 5.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.728, 3.042), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.935 ±(99.9%) 103.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.935, 62.483), stdev = 26.937
[info]   CI (99.9%): [≈ 0, 118.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.99% complete, ETA 01:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153347.190 ops/s
[info] # Warmup Iteration   2: 276175.543 ops/s
[info] # Warmup Iteration   3: 300156.280 ops/s
[info] # Warmup Iteration   4: 299586.034 ops/s
[info] # Warmup Iteration   5: 287101.395 ops/s
[info] Iteration   1: 291745.484 ops/s
[info]                  ·gc.alloc.rate:                   576.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              3106.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3618.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 299329.381 ops/s
[info]                  ·gc.alloc.rate:               597.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          3139.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3526.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 300563.212 ops/s
[info]                  ·gc.alloc.rate:      576.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 299349.584 ops/s
[info]                  ·gc.alloc.rate:               598.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          3140.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3516.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 299554.683 ops/s
[info]                  ·gc.alloc.rate:                   592.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              3111.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3527.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   298108.468 ±(99.9%) 13834.998 ops/s [Average]
[info]   (min, avg, max) = (291745.484, 298108.468, 300563.212), stdev = 3592.905
[info]   CI (99.9%): [284273.470, 311943.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   587.949 ±(99.9%) 42.710 MB/sec [Average]
[info]   (min, avg, max) = (576.023, 587.949, 598.173), stdev = 11.092
[info]   CI (99.9%): [545.239, 630.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3102.828 ±(99.9%) 196.435 B/op [Average]
[info]   (min, avg, max) = (3016.001, 3102.828, 3140.746), stdev = 51.014
[info]   CI (99.9%): [2906.393, 3299.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.648 ±(99.9%) 1155.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.648, 671.593), stdev = 299.996
[info]   CI (99.9%): [≈ 0, 1691.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2837.994 ±(99.9%) 6111.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2837.994, 3618.592), stdev = 1587.024
[info]   CI (99.9%): [≈ 0, 8949.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.112), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.19% complete, ETA 01:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185448.651 ops/s
[info] # Warmup Iteration   2: 332768.508 ops/s
[info] # Warmup Iteration   3: 357234.486 ops/s
[info] # Warmup Iteration   4: 357583.243 ops/s
[info] # Warmup Iteration   5: 357913.127 ops/s
[info] Iteration   1: 353875.419 ops/s
[info]                  ·gc.alloc.rate:      1.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.647 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 358462.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 353086.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 358367.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 357835.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   356325.507 ±(99.9%) 10099.053 ops/s [Average]
[info]   (min, avg, max) = (353086.202, 356325.507, 358462.277), stdev = 2622.692
[info]   CI (99.9%): [346226.454, 366424.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.209 ±(99.9%) 1.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.209, 1.045), stdev = 0.467
[info]   CI (99.9%): [≈ 0, 2.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.930 ±(99.9%) 7.999 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.930, 4.647), stdev = 2.077
[info]   CI (99.9%): [≈ 0, 8.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.39% complete, ETA 01:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15164.747 ops/s
[info] # Warmup Iteration   2: 63321.323 ops/s
[info] # Warmup Iteration   3: 67270.780 ops/s
[info] # Warmup Iteration   4: 67443.343 ops/s
[info] # Warmup Iteration   5: 66383.062 ops/s
[info] Iteration   1: 62366.310 ops/s
[info]                  ·gc.alloc.rate:               1437.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          36259.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33789.784 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 65029.004 ops/s
[info]                  ·gc.alloc.rate:               1510.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          36544.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32438.496 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 66569.657 ops/s
[info]                  ·gc.alloc.rate:                   1543.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              36495.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31703.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 64014.260 ops/s
[info]                  ·gc.alloc.rate:               1488.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          36601.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32887.253 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 68193.016 ops/s
[info]                  ·gc.alloc.rate:               1592.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          36745.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46242.620 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   65234.449 ±(99.9%) 8673.183 ops/s [Average]
[info]   (min, avg, max) = (62366.310, 65234.449, 68193.016), stdev = 2252.398
[info]   CI (99.9%): [56561.266, 73907.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1514.451 ±(99.9%) 224.385 MB/sec [Average]
[info]   (min, avg, max) = (1437.097, 1514.451, 1592.313), stdev = 58.272
[info]   CI (99.9%): [1290.066, 1738.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36529.287 ±(99.9%) 683.002 B/op [Average]
[info]   (min, avg, max) = (36259.904, 36529.287, 36745.247), stdev = 177.374
[info]   CI (99.9%): [35846.285, 37212.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.493 ±(99.9%) 1143.842 MB/sec [Average]
[info]   (min, avg, max) = (1337.807, 1472.493, 2003.871), stdev = 297.052
[info]   CI (99.9%): [328.651, 2616.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35412.414 ±(99.9%) 23493.650 B/op [Average]
[info]   (min, avg, max) = (31703.919, 35412.414, 46242.620), stdev = 6101.226
[info]   CI (99.9%): [11918.764, 58906.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.792 ±(99.9%) 6.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.792, 3.958), stdev = 1.770
[info]   CI (99.9%): [≈ 0, 7.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.713 ±(99.9%) 161.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.713, 93.565), stdev = 41.844
[info]   CI (99.9%): [≈ 0, 179.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47.59% complete, ETA 01:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7404.746 ops/s
[info] # Warmup Iteration   2: 13899.659 ops/s
[info] # Warmup Iteration   3: 15015.860 ops/s
[info] # Warmup Iteration   4: 15160.024 ops/s
[info] # Warmup Iteration   5: 15117.466 ops/s
[info] Iteration   1: 15083.846 ops/s
[info]                  ·gc.alloc.rate:               1112.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          116022.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140245.650 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 15087.833 ops/s
[info]                  ·gc.alloc.rate:                   1122.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              117030.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140277.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14967.846 ops/s
[info]                  ·gc.alloc.rate:               1101.651 MB/sec
[info]                  ·gc.alloc.rate.norm:          115823.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70736.158 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 15129.589 ops/s
[info]                  ·gc.alloc.rate:                   1117.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              116270.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139967.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14686.617 ops/s
[info]                  ·gc.alloc.rate:                   1064.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              114069.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72134.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   14991.146 ±(99.9%) 695.223 ops/s [Average]
[info]   (min, avg, max) = (14686.617, 14991.146, 15129.589), stdev = 180.547
[info]   CI (99.9%): [14295.923, 15686.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1103.650 ±(99.9%) 89.246 MB/sec [Average]
[info]   (min, avg, max) = (1064.526, 1103.650, 1122.089), stdev = 23.177
[info]   CI (99.9%): [1014.405, 1192.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   115843.272 ±(99.9%) 4205.851 B/op [Average]
[info]   (min, avg, max) = (114069.312, 115843.272, 117030.560), stdev = 1092.246
[info]   CI (99.9%): [111637.420, 120049.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1076.194 ±(99.9%) 1417.309 MB/sec [Average]
[info]   (min, avg, max) = (672.807, 1076.194, 1345.700), stdev = 368.071
[info]   CI (99.9%): [≈ 0, 2493.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   112672.324 ±(99.9%) 144966.813 B/op [Average]
[info]   (min, avg, max) = (70736.158, 112672.324, 140277.958), stdev = 37647.421
[info]   CI (99.9%): [≈ 0, 257639.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.504 ±(99.9%) 4.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.436), stdev = 1.080
[info]   CI (99.9%): [≈ 0, 4.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   53.936 ±(99.9%) 445.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.936, 261.002), stdev = 115.784
[info]   CI (99.9%): [≈ 0, 499.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.79% complete, ETA 01:09:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39298.832 ops/s
[info] # Warmup Iteration   2: 133828.824 ops/s
[info] # Warmup Iteration   3: 137220.059 ops/s
[info] # Warmup Iteration   4: 143015.432 ops/s
[info] # Warmup Iteration   5: 144912.696 ops/s
[info] Iteration   1: 144963.329 ops/s
[info]                  ·gc.alloc.rate:                   1880.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              20410.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14594.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 138456.809 ops/s
[info]                  ·gc.alloc.rate:                   1837.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              20882.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22911.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 136413.045 ops/s
[info]                  ·gc.alloc.rate:                   1797.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              20736.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23201.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 139338.542 ops/s
[info]                  ·gc.alloc.rate:               1809.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          20432.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15122.607 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 139097.421 ops/s
[info]                  ·gc.alloc.rate:               1844.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          20863.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22739.585 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   139653.829 ±(99.9%) 12258.017 ops/s [Average]
[info]   (min, avg, max) = (136413.045, 139653.829, 144963.329), stdev = 3183.368
[info]   CI (99.9%): [127395.812, 151911.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1833.574 ±(99.9%) 124.782 MB/sec [Average]
[info]   (min, avg, max) = (1797.351, 1833.574, 1880.116), stdev = 32.405
[info]   CI (99.9%): [1708.792, 1958.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20665.129 ±(99.9%) 884.738 B/op [Average]
[info]   (min, avg, max) = (20410.125, 20665.129, 20882.749), stdev = 229.764
[info]   CI (99.9%): [19780.391, 21549.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.996 ±(99.9%) 1414.302 MB/sec [Average]
[info]   (min, avg, max) = (1338.965, 1743.996, 2015.810), stdev = 367.290
[info]   CI (99.9%): [329.694, 3158.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19714.012 ±(99.9%) 17095.334 B/op [Average]
[info]   (min, avg, max) = (14594.090, 19714.012, 23201.781), stdev = 4439.604
[info]   CI (99.9%): [2618.678, 36809.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.331), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.337 ±(99.9%) 63.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.337, 37.859), stdev = 16.574
[info]   CI (99.9%): [≈ 0, 72.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.99% complete, ETA 01:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.790 ops/s
[info] # Warmup Iteration   2: 766292.955 ops/s
[info] # Warmup Iteration   3: 829343.412 ops/s
[info] # Warmup Iteration   4: 827320.852 ops/s
[info] # Warmup Iteration   5: 854462.287 ops/s
[info] Iteration   1: 858603.474 ops/s
[info]                  ·gc.alloc.rate:      475.772 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 827818.516 ops/s
[info]                  ·gc.alloc.rate:               482.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          917.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1265.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 823992.138 ops/s
[info]                  ·gc.alloc.rate:                   482.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1271.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 825372.636 ops/s
[info]                  ·gc.alloc.rate:      457.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 822713.146 ops/s
[info]                  ·gc.alloc.rate:               470.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          900.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1274.283 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   831699.982 ±(99.9%) 58368.480 ops/s [Average]
[info]   (min, avg, max) = (822713.146, 831699.982, 858603.474), stdev = 15158.109
[info]   CI (99.9%): [773331.502, 890068.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   473.726 ±(99.9%) 39.994 MB/sec [Average]
[info]   (min, avg, max) = (457.339, 473.726, 482.668), stdev = 10.386
[info]   CI (99.9%): [433.732, 513.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   896.509 ±(99.9%) 91.240 B/op [Average]
[info]   (min, avg, max) = (872.001, 896.509, 920.724), stdev = 23.695
[info]   CI (99.9%): [805.269, 987.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.614 ±(99.9%) 1404.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.614, 666.357), stdev = 364.796
[info]   CI (99.9%): [≈ 0, 1804.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   762.361 ±(99.9%) 2679.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 762.361, 1274.283), stdev = 695.944
[info]   CI (99.9%): [≈ 0, 3442.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.19% complete, ETA 01:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119560.029 ops/s
[info] # Warmup Iteration   2: 353952.075 ops/s
[info] # Warmup Iteration   3: 390723.370 ops/s
[info] # Warmup Iteration   4: 387157.767 ops/s
[info] # Warmup Iteration   5: 377733.251 ops/s
[info] Iteration   1: 390905.032 ops/s
[info]                  ·gc.alloc.rate:               414.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          1667.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2059.755 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 390062.690 ops/s
[info]                  ·gc.alloc.rate:               419.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          1692.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2064.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 391997.684 ops/s
[info]                  ·gc.alloc.rate:                   416.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1672.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2673.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 392688.920 ops/s
[info]                  ·gc.alloc.rate:      401.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 385706.995 ops/s
[info]                  ·gc.alloc.rate:               409.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          1672.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2716.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   390272.264 ±(99.9%) 10563.563 ops/s [Average]
[info]   (min, avg, max) = (385706.995, 390272.264, 392688.920), stdev = 2743.324
[info]   CI (99.9%): [379708.701, 400835.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   412.297 ±(99.9%) 27.457 MB/sec [Average]
[info]   (min, avg, max) = (401.255, 412.297, 419.589), stdev = 7.130
[info]   CI (99.9%): [384.840, 439.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1662.581 ±(99.9%) 123.294 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1662.581, 1692.626), stdev = 32.019
[info]   CI (99.9%): [1539.287, 1785.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   470.994 ±(99.9%) 1056.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470.994, 665.840), stdev = 274.349
[info]   CI (99.9%): [≈ 0, 1527.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1902.740 ±(99.9%) 4273.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1902.740, 2716.736), stdev = 1109.858
[info]   CI (99.9%): [≈ 0, 6176.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.167), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.39% complete, ETA 01:09:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645876.486 ops/s
[info] # Warmup Iteration   2: 1127812.190 ops/s
[info] # Warmup Iteration   3: 1139747.578 ops/s
[info] # Warmup Iteration   4: 1051218.486 ops/s
[info] # Warmup Iteration   5: 1152963.925 ops/s
[info] Iteration   1: 1107165.416 ops/s
[info]                  ·gc.alloc.rate:                   392.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 981949.088 ops/s
[info]                  ·gc.alloc.rate:               355.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          570.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 819.973 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1112811.295 ops/s
[info]                  ·gc.alloc.rate:      384.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1142285.033 ops/s
[info]                  ·gc.alloc.rate:               411.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          566.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 923.773 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1143980.204 ops/s
[info]                  ·gc.alloc.rate:               418.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          575.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1097638.207 ±(99.9%) 257200.837 ops/s [Average]
[info]   (min, avg, max) = (981949.088, 1097638.207, 1143980.204), stdev = 66794.241
[info]   CI (99.9%): [840437.370, 1354839.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   392.610 ±(99.9%) 94.742 MB/sec [Average]
[info]   (min, avg, max) = (355.932, 392.610, 418.347), stdev = 24.604
[info]   CI (99.9%): [297.867, 487.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   562.996 ±(99.9%) 47.517 B/op [Average]
[info]   (min, avg, max) = (544.000, 562.996, 575.509), stdev = 12.340
[info]   CI (99.9%): [515.479, 610.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.842 ±(99.9%) 1062.809 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.842, 670.507), stdev = 276.008
[info]   CI (99.9%): [≈ 0, 1535.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   678.672 ±(99.9%) 1494.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 678.672, 923.773), stdev = 388.071
[info]   CI (99.9%): [≈ 0, 2172.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.59% complete, ETA 01:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3559.614 ops/s
[info] # Warmup Iteration   2: 66417.200 ops/s
[info] # Warmup Iteration   3: 74218.226 ops/s
[info] # Warmup Iteration   4: 76914.754 ops/s
[info] # Warmup Iteration   5: 75719.473 ops/s
[info] Iteration   1: 77422.481 ops/s
[info]                  ·gc.alloc.rate:                   3107.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              63170.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54217.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 75041.770 ops/s
[info]                  ·gc.alloc.rate:                   3030.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              63543.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69983.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 77483.741 ops/s
[info]                  ·gc.alloc.rate:               3125.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          63478.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54390.652 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 77304.704 ops/s
[info]                  ·gc.alloc.rate:               3146.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          64048.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68397.479 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 76963.671 ops/s
[info]                  ·gc.alloc.rate:               3107.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          63538.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55153.082 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76843.273 ±(99.9%) 3954.421 ops/s [Average]
[info]   (min, avg, max) = (75041.770, 76843.273, 77483.741), stdev = 1026.951
[info]   CI (99.9%): [72888.852, 80797.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3103.404 ±(99.9%) 169.388 MB/sec [Average]
[info]   (min, avg, max) = (3030.037, 3103.404, 3146.231), stdev = 43.990
[info]   CI (99.9%): [2934.016, 3272.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63555.934 ±(99.9%) 1215.355 B/op [Average]
[info]   (min, avg, max) = (63170.022, 63555.934, 64048.999), stdev = 315.624
[info]   CI (99.9%): [62340.579, 64771.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2947.945 ±(99.9%) 1408.933 MB/sec [Average]
[info]   (min, avg, max) = (2667.362, 2947.945, 3359.838), stdev = 365.896
[info]   CI (99.9%): [1539.011, 4356.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60428.505 ±(99.9%) 30905.425 B/op [Average]
[info]   (min, avg, max) = (54217.546, 60428.505, 69983.766), stdev = 8026.041
[info]   CI (99.9%): [29523.079, 91333.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.032 ±(99.9%) 5.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.032, 2.619), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48.80% complete, ETA 01:08:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116183.768 ops/s
[info] # Warmup Iteration   2: 273321.849 ops/s
[info] # Warmup Iteration   3: 287195.158 ops/s
[info] # Warmup Iteration   4: 284022.918 ops/s
[info] # Warmup Iteration   5: 275011.990 ops/s
[info] Iteration   1: 280054.835 ops/s
[info]                  ·gc.alloc.rate:               1391.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          7820.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7552.505 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 278739.572 ops/s
[info]                  ·gc.alloc.rate:                   1400.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              7905.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7591.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 286035.531 ops/s
[info]                  ·gc.alloc.rate:                   1424.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              7839.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7401.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 287416.539 ops/s
[info]                  ·gc.alloc.rate:                   1439.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              7883.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7361.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 282131.312 ops/s
[info]                  ·gc.alloc.rate:               1404.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          7831.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7488.024 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   282875.558 ±(99.9%) 14436.410 ops/s [Average]
[info]   (min, avg, max) = (278739.572, 282875.558, 287416.539), stdev = 3749.090
[info]   CI (99.9%): [268439.148, 297311.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1412.239 ±(99.9%) 75.735 MB/sec [Average]
[info]   (min, avg, max) = (1391.670, 1412.239, 1439.881), stdev = 19.668
[info]   CI (99.9%): [1336.504, 1487.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7855.926 ±(99.9%) 141.059 B/op [Average]
[info]   (min, avg, max) = (7820.130, 7855.926, 7905.585), stdev = 36.633
[info]   CI (99.9%): [7714.867, 7996.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.311 ±(99.9%) 3.742 MB/sec [Average]
[info]   (min, avg, max) = (1342.799, 1344.311, 1345.371), stdev = 0.972
[info]   CI (99.9%): [1340.569, 1348.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7479.083 ±(99.9%) 375.376 B/op [Average]
[info]   (min, avg, max) = (7361.218, 7479.083, 7591.754), stdev = 97.484
[info]   CI (99.9%): [7103.708, 7854.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 4.660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 2.790), stdev = 1.210
[info]   CI (99.9%): [≈ 0, 5.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.550 ±(99.9%) 25.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.550, 15.348), stdev = 6.658
[info]   CI (99.9%): [≈ 0, 29.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 01:08:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97109.220 ops/s
[info] # Warmup Iteration   2: 245126.983 ops/s
[info] # Warmup Iteration   3: 261161.130 ops/s
[info] # Warmup Iteration   4: 263052.143 ops/s
[info] # Warmup Iteration   5: 265596.193 ops/s
[info] Iteration   1: 270171.532 ops/s
[info]                  ·gc.alloc.rate:                   1634.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              9522.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11731.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 257942.293 ops/s
[info]                  ·gc.alloc.rate:                   1557.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              9502.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8196.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 266330.002 ops/s
[info]                  ·gc.alloc.rate:                   1609.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              9507.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7929.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 261746.884 ops/s
[info]                  ·gc.alloc.rate:                   1594.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              9587.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8054.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 271023.570 ops/s
[info]                  ·gc.alloc.rate:                   1661.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              9649.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11662.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   265442.856 ±(99.9%) 21457.662 ops/s [Average]
[info]   (min, avg, max) = (257942.293, 265442.856, 271023.570), stdev = 5572.487
[info]   CI (99.9%): [243985.194, 286900.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1611.612 ±(99.9%) 152.508 MB/sec [Average]
[info]   (min, avg, max) = (1557.642, 1611.612, 1661.834), stdev = 39.606
[info]   CI (99.9%): [1459.105, 1764.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9554.055 ±(99.9%) 243.767 B/op [Average]
[info]   (min, avg, max) = (9502.743, 9554.055, 9649.479), stdev = 63.305
[info]   CI (99.9%): [9310.288, 9797.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.558 ±(99.9%) 1412.366 MB/sec [Average]
[info]   (min, avg, max) = (1339.575, 1609.558, 2014.129), stdev = 366.787
[info]   CI (99.9%): [197.193, 3021.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9514.902 ±(99.9%) 7679.329 B/op [Average]
[info]   (min, avg, max) = (7929.712, 9514.902, 11731.130), stdev = 1994.297
[info]   CI (99.9%): [1835.573, 17194.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.953 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.704, 2.977), stdev = 1.286
[info]   CI (99.9%): [≈ 0, 5.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.272 ±(99.9%) 30.242 B/op [Average]
[info]   (min, avg, max) = (0.121, 4.272, 18.164), stdev = 7.854
[info]   CI (99.9%): [≈ 0, 34.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.20% complete, ETA 01:07:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.789 ops/s
[info] # Warmup Iteration   2: 1149672.621 ops/s
[info] # Warmup Iteration   3: 1178516.852 ops/s
[info] # Warmup Iteration   4: 1234536.972 ops/s
[info] # Warmup Iteration   5: 1244905.382 ops/s
[info] Iteration   1: 1238404.134 ops/s
[info]                  ·gc.alloc.rate:                   437.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1242879.720 ops/s
[info]                  ·gc.alloc.rate:               448.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          567.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 843.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1238481.099 ops/s
[info]                  ·gc.alloc.rate:      421.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1241330.809 ops/s
[info]                  ·gc.alloc.rate:                   447.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              567.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1243222.671 ops/s
[info]                  ·gc.alloc.rate:                   444.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              562.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1240863.687 ±(99.9%) 8942.603 ops/s [Average]
[info]   (min, avg, max) = (1238404.134, 1240863.687, 1243222.671), stdev = 2322.365
[info]   CI (99.9%): [1231921.084, 1249806.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   439.987 ±(99.9%) 42.212 MB/sec [Average]
[info]   (min, avg, max) = (421.832, 439.987, 448.090), stdev = 10.962
[info]   CI (99.9%): [397.775, 482.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   557.987 ±(99.9%) 50.513 B/op [Average]
[info]   (min, avg, max) = (536.000, 557.987, 567.595), stdev = 13.118
[info]   CI (99.9%): [507.474, 608.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501.917 ±(99.9%) 1110.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.917, 666.258), stdev = 288.432
[info]   CI (99.9%): [≈ 0, 1612.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   636.143 ±(99.9%) 1406.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 636.143, 844.170), stdev = 365.335
[info]   CI (99.9%): [≈ 0, 2042.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.40% complete, ETA 01:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435778.237 ops/s
[info] # Warmup Iteration   2: 895106.465 ops/s
[info] # Warmup Iteration   3: 927383.412 ops/s
[info] # Warmup Iteration   4: 915609.157 ops/s
[info] # Warmup Iteration   5: 927721.189 ops/s
[info] Iteration   1: 931168.968 ops/s
[info]                  ·gc.alloc.rate:      544.355 MB/sec
[info]                  ·gc.alloc.rate.norm: 920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 930015.978 ops/s
[info]                  ·gc.alloc.rate:                   566.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1128.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 932343.418 ops/s
[info]                  ·gc.alloc.rate:                   559.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 917223.852 ops/s
[info]                  ·gc.alloc.rate:                   558.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1143.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 900515.278 ops/s
[info]                  ·gc.alloc.rate:               546.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          954.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1161.862 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   922253.499 ±(99.9%) 52353.032 ops/s [Average]
[info]   (min, avg, max) = (900515.278, 922253.499, 932343.418), stdev = 13595.916
[info]   CI (99.9%): [869900.467, 974606.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   555.141 ±(99.9%) 36.442 MB/sec [Average]
[info]   (min, avg, max) = (544.355, 555.141, 566.640), stdev = 9.464
[info]   CI (99.9%): [518.699, 591.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   947.323 ±(99.9%) 63.034 B/op [Average]
[info]   (min, avg, max) = (920.001, 947.323, 958.833), stdev = 16.370
[info]   CI (99.9%): [884.289, 1010.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.847 ±(99.9%) 1146.998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.847, 666.847), stdev = 297.872
[info]   CI (99.9%): [≈ 0, 1679.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   911.544 ±(99.9%) 1962.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 911.544, 1161.862), stdev = 509.780
[info]   CI (99.9%): [≈ 0, 2874.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.664), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.254 ±(99.9%) 10.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.254, 6.200), stdev = 2.765
[info]   CI (99.9%): [≈ 0, 11.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.60% complete, ETA 01:07:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1048246.718 ops/s
[info] # Warmup Iteration   2: 1764895.730 ops/s
[info] # Warmup Iteration   3: 1901920.118 ops/s
[info] # Warmup Iteration   4: 1911165.864 ops/s
[info] # Warmup Iteration   5: 1866440.618 ops/s
[info] Iteration   1: 1880547.661 ops/s
[info]                  ·gc.alloc.rate:               672.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1898077.280 ops/s
[info]                  ·gc.alloc.rate:               670.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 556.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1831879.679 ops/s
[info]                  ·gc.alloc.rate:               647.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 576.870 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1844354.422 ops/s
[info]                  ·gc.alloc.rate:               647.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 572.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1903844.789 ops/s
[info]                  ·gc.alloc.rate:               664.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1871740.766 ±(99.9%) 123892.034 ops/s [Average]
[info]   (min, avg, max) = (1831879.679, 1871740.766, 1903844.789), stdev = 32174.368
[info]   CI (99.9%): [1747848.732, 1995632.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   660.364 ±(99.9%) 47.574 MB/sec [Average]
[info]   (min, avg, max) = (647.182, 660.364, 672.635), stdev = 12.355
[info]   CI (99.9%): [612.790, 707.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   555.236 ±(99.9%) 19.371 B/op [Average]
[info]   (min, avg, max) = (549.496, 555.236, 562.897), stdev = 5.030
[info]   CI (99.9%): [535.865, 574.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.371 ±(99.9%) 2.141 MB/sec [Average]
[info]   (min, avg, max) = (670.823, 671.371, 672.172), stdev = 0.556
[info]   CI (99.9%): [669.230, 673.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   564.619 ±(99.9%) 37.623 B/op [Average]
[info]   (min, avg, max) = (555.640, 564.619, 576.870), stdev = 9.771
[info]   CI (99.9%): [526.995, 602.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.80% complete, ETA 01:07:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 876747.699 ops/s
[info] # Warmup Iteration   2: 1977017.086 ops/s
[info] # Warmup Iteration   3: 2021032.666 ops/s
[info] # Warmup Iteration   4: 2021609.501 ops/s
[info] # Warmup Iteration   5: 2021900.382 ops/s
[info] Iteration   1: 2021792.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2010137.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2021863.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1929062.439 ops/s
[info]                  ·gc.alloc.rate:      0.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2012205.084 ops/s
[info]                  ·gc.alloc.rate:      9.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.609 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1999012.183 ±(99.9%) 151989.605 ops/s [Average]
[info]   (min, avg, max) = (1929062.439, 1999012.183, 2021863.464), stdev = 39471.218
[info]   CI (99.9%): [1847022.578, 2151001.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.964 ±(99.9%) 16.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.964, 9.729), stdev = 4.341
[info]   CI (99.9%): [≈ 0, 18.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.536 ±(99.9%) 13.072 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.536, 7.609), stdev = 3.395
[info]   CI (99.9%): [≈ 0, 14.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 01:06:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12238.567 ops/s
[info] # Warmup Iteration   2: 36721.779 ops/s
[info] # Warmup Iteration   3: 42423.977 ops/s
[info] # Warmup Iteration   4: 41258.791 ops/s
[info] # Warmup Iteration   5: 42540.015 ops/s
[info] Iteration   1: 42639.187 ops/s
[info]                  ·gc.alloc.rate:                   2136.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              78839.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74299.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.285 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 41787.500 ops/s
[info]                  ·gc.alloc.rate:                   2094.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              78872.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75589.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42794.665 ops/s
[info]                  ·gc.alloc.rate:                   2130.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              78331.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73711.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42855.318 ops/s
[info]                  ·gc.alloc.rate:                   2133.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              78339.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73629.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 42848.943 ops/s
[info]                  ·gc.alloc.rate:                   2147.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              78849.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73760.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42585.123 ±(99.9%) 1749.437 ops/s [Average]
[info]   (min, avg, max) = (41787.500, 42585.123, 42855.318), stdev = 454.323
[info]   CI (99.9%): [40835.685, 44334.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2128.202 ±(99.9%) 76.787 MB/sec [Average]
[info]   (min, avg, max) = (2094.387, 2128.202, 2147.005), stdev = 19.941
[info]   CI (99.9%): [2051.415, 2204.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78646.728 ±(99.9%) 1093.806 B/op [Average]
[info]   (min, avg, max) = (78331.870, 78646.728, 78872.804), stdev = 284.058
[info]   CI (99.9%): [77552.921, 79740.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.673 ±(99.9%) 13.319 MB/sec [Average]
[info]   (min, avg, max) = (2004.471, 2007.673, 2013.155), stdev = 3.459
[info]   CI (99.9%): [1994.353, 2020.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74198.362 ±(99.9%) 3162.656 B/op [Average]
[info]   (min, avg, max) = (73629.771, 74198.362, 75589.996), stdev = 821.332
[info]   CI (99.9%): [71035.706, 77361.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 6.822 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.849, 4.018), stdev = 1.772
[info]   CI (99.9%): [≈ 0, 7.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.355 ±(99.9%) 251.758 B/op [Average]
[info]   (min, avg, max) = (0.765, 31.355, 148.285), stdev = 65.381
[info]   CI (99.9%): [≈ 0, 283.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50.20% complete, ETA 01:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34833.426 ops/s
[info] # Warmup Iteration   2: 104202.730 ops/s
[info] # Warmup Iteration   3: 112377.315 ops/s
[info] # Warmup Iteration   4: 114192.496 ops/s
[info] # Warmup Iteration   5: 112597.168 ops/s
[info] Iteration   1: 113289.129 ops/s
[info]                  ·gc.alloc.rate:                   1879.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              26109.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28038.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 115180.858 ops/s
[info]                  ·gc.alloc.rate:                   1908.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              26078.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18367.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 114877.456 ops/s
[info]                  ·gc.alloc.rate:                   1918.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              26283.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27561.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.711 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 115157.494 ops/s
[info]                  ·gc.alloc.rate:                   1908.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              26070.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27475.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 113483.491 ops/s
[info]                  ·gc.alloc.rate:                   1908.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              26466.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27899.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   114397.685 ±(99.9%) 3594.477 ops/s [Average]
[info]   (min, avg, max) = (113289.129, 114397.685, 115180.858), stdev = 933.474
[info]   CI (99.9%): [110803.208, 117992.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1904.712 ±(99.9%) 56.673 MB/sec [Average]
[info]   (min, avg, max) = (1879.596, 1904.712, 1918.624), stdev = 14.718
[info]   CI (99.9%): [1848.039, 1961.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   26201.673 ±(99.9%) 660.508 B/op [Average]
[info]   (min, avg, max) = (26070.089, 26201.673, 26466.614), stdev = 171.532
[info]   CI (99.9%): [25541.166, 26862.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1879.516 ±(99.9%) 1152.068 MB/sec [Average]
[info]   (min, avg, max) = (1344.339, 1879.516, 2018.476), stdev = 299.188
[info]   CI (99.9%): [727.448, 3031.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   25868.695 ±(99.9%) 16172.060 B/op [Average]
[info]   (min, avg, max) = (18367.328, 25868.695, 28038.771), stdev = 4199.833
[info]   CI (99.9%): [9696.635, 42040.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 4.286 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.712, 2.623), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9.849 ±(99.9%) 59.544 B/op [Average]
[info]   (min, avg, max) = (0.284, 9.849, 36.437), stdev = 15.463
[info]   CI (99.9%): [≈ 0, 69.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.40% complete, ETA 01:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3567.364 ops/s
[info] # Warmup Iteration   2: 13023.537 ops/s
[info] # Warmup Iteration   3: 14253.788 ops/s
[info] # Warmup Iteration   4: 15415.838 ops/s
[info] # Warmup Iteration   5: 15083.496 ops/s
[info] Iteration   1: 14019.774 ops/s
[info]                  ·gc.alloc.rate:                   1754.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              196858.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226270.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 15219.767 ops/s
[info]                  ·gc.alloc.rate:                   1870.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              193408.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139001.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15071.455 ops/s
[info]                  ·gc.alloc.rate:                   1879.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              196215.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209993.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15385.056 ops/s
[info]                  ·gc.alloc.rate:                   1916.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              196024.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205436.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15513.539 ops/s
[info]                  ·gc.alloc.rate:                   1932.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              196064.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203795.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   15041.918 ±(99.9%) 2292.226 ops/s [Average]
[info]   (min, avg, max) = (14019.774, 15041.918, 15513.539), stdev = 595.284
[info]   CI (99.9%): [12749.692, 17334.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1870.599 ±(99.9%) 269.591 MB/sec [Average]
[info]   (min, avg, max) = (1754.121, 1870.599, 1932.841), stdev = 70.012
[info]   CI (99.9%): [1601.008, 2140.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195714.370 ±(99.9%) 5128.132 B/op [Average]
[info]   (min, avg, max) = (193408.977, 195714.370, 196858.870), stdev = 1331.760
[info]   CI (99.9%): [190586.239, 200842.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.814 ±(99.9%) 1148.462 MB/sec [Average]
[info]   (min, avg, max) = (1344.313, 1877.814, 2016.195), stdev = 298.252
[info]   CI (99.9%): [729.352, 3026.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   196899.580 ±(99.9%) 129250.193 B/op [Average]
[info]   (min, avg, max) = (139001.929, 196899.580, 226270.482), stdev = 33565.865
[info]   CI (99.9%): [67649.387, 326149.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 5.729 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.762, 3.414), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   78.865 ±(99.9%) 592.211 B/op [Average]
[info]   (min, avg, max) = (2.112, 78.865, 353.015), stdev = 153.795
[info]   CI (99.9%): [≈ 0, 671.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.60% complete, ETA 01:06:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30347.120 ops/s
[info] # Warmup Iteration   2: 89434.067 ops/s
[info] # Warmup Iteration   3: 96913.027 ops/s
[info] # Warmup Iteration   4: 97939.422 ops/s
[info] # Warmup Iteration   5: 98441.666 ops/s
[info] Iteration   1: 94963.730 ops/s
[info]                  ·gc.alloc.rate:                   1281.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              21232.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22168.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 98239.053 ops/s
[info]                  ·gc.alloc.rate:               1327.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          21264.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21440.020 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 98155.195 ops/s
[info]                  ·gc.alloc.rate:                   1313.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              21056.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21467.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 96919.167 ops/s
[info]                  ·gc.alloc.rate:                   1296.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              21057.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21763.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 98205.782 ops/s
[info]                  ·gc.alloc.rate:                   1337.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              21428.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21414.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97296.585 ±(99.9%) 5458.127 ops/s [Average]
[info]   (min, avg, max) = (94963.730, 97296.585, 98239.053), stdev = 1417.458
[info]   CI (99.9%): [91838.458, 102754.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1311.286 ±(99.9%) 87.598 MB/sec [Average]
[info]   (min, avg, max) = (1281.189, 1311.286, 1337.561), stdev = 22.749
[info]   CI (99.9%): [1223.689, 1398.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21207.865 ±(99.9%) 602.656 B/op [Average]
[info]   (min, avg, max) = (21056.945, 21207.865, 21428.580), stdev = 156.508
[info]   CI (99.9%): [20605.209, 21810.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.434 ±(99.9%) 5.306 MB/sec [Average]
[info]   (min, avg, max) = (1336.685, 1338.434, 1340.353), stdev = 1.378
[info]   CI (99.9%): [1333.128, 1343.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21650.955 ±(99.9%) 1240.030 B/op [Average]
[info]   (min, avg, max) = (21414.543, 21650.955, 22168.953), stdev = 322.032
[info]   CI (99.9%): [20410.925, 22890.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.902 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 4.039), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.520 ±(99.9%) 112.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.520, 65.577), stdev = 29.103
[info]   CI (99.9%): [≈ 0, 125.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.80% complete, ETA 01:05:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107568.466 ops/s
[info] # Warmup Iteration   2: 248538.707 ops/s
[info] # Warmup Iteration   3: 256252.805 ops/s
[info] # Warmup Iteration   4: 256427.487 ops/s
[info] # Warmup Iteration   5: 255060.520 ops/s
[info] Iteration   1: 249840.652 ops/s
[info]                  ·gc.alloc.rate:                   827.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              5214.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4229.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 255989.439 ops/s
[info]                  ·gc.alloc.rate:               850.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          5225.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4128.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 256436.057 ops/s
[info]                  ·gc.alloc.rate:               850.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          5222.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4124.985 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 256493.381 ops/s
[info]                  ·gc.alloc.rate:               850.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          5215.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4124.052 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 254163.952 ops/s
[info]                  ·gc.alloc.rate:                   866.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              5365.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8327.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   254584.696 ±(99.9%) 10844.690 ops/s [Average]
[info]   (min, avg, max) = (249840.652, 254584.696, 256493.381), stdev = 2816.332
[info]   CI (99.9%): [243740.006, 265429.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   849.101 ±(99.9%) 53.153 MB/sec [Average]
[info]   (min, avg, max) = (827.844, 849.101, 866.563), stdev = 13.804
[info]   CI (99.9%): [795.948, 902.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5248.773 ±(99.9%) 252.051 B/op [Average]
[info]   (min, avg, max) = (5214.439, 5248.773, 5365.550), stdev = 65.457
[info]   CI (99.9%): [4996.722, 5500.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.461 ±(99.9%) 1159.237 MB/sec [Average]
[info]   (min, avg, max) = (671.502, 806.461, 1344.996), stdev = 301.050
[info]   CI (99.9%): [≈ 0, 1965.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4986.948 ±(99.9%) 7193.726 B/op [Average]
[info]   (min, avg, max) = (4124.052, 4986.948, 8327.892), stdev = 1868.188
[info]   CI (99.9%): [≈ 0, 12180.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.131), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 6.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 01:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2607.823 ops/s
[info] # Warmup Iteration   2: 10914.372 ops/s
[info] # Warmup Iteration   3: 13524.898 ops/s
[info] # Warmup Iteration   4: 13245.809 ops/s
[info] # Warmup Iteration   5: 13285.507 ops/s
[info] Iteration   1: 13569.045 ops/s
[info]                  ·gc.alloc.rate:                   2052.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              238097.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232978.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 13696.613 ops/s
[info]                  ·gc.alloc.rate:                   2076.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              238561.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230512.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13291.711 ops/s
[info]                  ·gc.alloc.rate:               2021.023 MB/sec
[info]                  ·gc.alloc.rate.norm:          239280.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 236785.403 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 13447.123 ops/s
[info]                  ·gc.alloc.rate:               2044.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          239307.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234021.645 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13664.653 ops/s
[info]                  ·gc.alloc.rate:                   2103.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              242222.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230613.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13533.829 ±(99.9%) 641.432 ops/s [Average]
[info]   (min, avg, max) = (13291.711, 13533.829, 13696.613), stdev = 166.578
[info]   CI (99.9%): [12892.397, 14175.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2059.732 ±(99.9%) 120.848 MB/sec [Average]
[info]   (min, avg, max) = (2021.023, 2059.732, 2103.291), stdev = 31.384
[info]   CI (99.9%): [1938.885, 2180.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   239494.044 ±(99.9%) 6192.962 B/op [Average]
[info]   (min, avg, max) = (238097.429, 239494.044, 242222.907), stdev = 1608.293
[info]   CI (99.9%): [233301.082, 245687.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.481 ±(99.9%) 15.461 MB/sec [Average]
[info]   (min, avg, max) = (1999.755, 2003.481, 2008.844), stdev = 4.015
[info]   CI (99.9%): [1988.020, 2018.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   232982.116 ±(99.9%) 10052.041 B/op [Average]
[info]   (min, avg, max) = (230512.200, 232982.116, 236785.403), stdev = 2610.483
[info]   CI (99.9%): [222930.074, 243034.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 5.491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 3.268), stdev = 1.426
[info]   CI (99.9%): [≈ 0, 6.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   106.910 ±(99.9%) 636.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.910, 379.058), stdev = 165.279
[info]   CI (99.9%): [≈ 0, 743.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51.20% complete, ETA 01:05:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5151.870 ops/s
[info] # Warmup Iteration   2: 13702.842 ops/s
[info] # Warmup Iteration   3: 15138.900 ops/s
[info] # Warmup Iteration   4: 15180.365 ops/s
[info] # Warmup Iteration   5: 15238.303 ops/s
[info] Iteration   1: 14953.091 ops/s
[info]                  ·gc.alloc.rate:                   1744.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              183563.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212365.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 15233.735 ops/s
[info]                  ·gc.alloc.rate:                   1760.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              181891.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139011.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14844.105 ops/s
[info]                  ·gc.alloc.rate:                   1757.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              186295.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213430.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15251.184 ops/s
[info]                  ·gc.alloc.rate:                   1763.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              181953.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138297.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15292.254 ops/s
[info]                  ·gc.alloc.rate:                   1794.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              184723.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206904.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   15114.874 ±(99.9%) 778.890 ops/s [Average]
[info]   (min, avg, max) = (14844.105, 15114.874, 15292.254), stdev = 202.275
[info]   CI (99.9%): [14335.983, 15893.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1764.182 ±(99.9%) 71.861 MB/sec [Average]
[info]   (min, avg, max) = (1744.225, 1764.182, 1794.850), stdev = 18.662
[info]   CI (99.9%): [1692.321, 1836.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   183685.713 ±(99.9%) 7235.345 B/op [Average]
[info]   (min, avg, max) = (181891.492, 183685.713, 186295.457), stdev = 1878.996
[info]   CI (99.9%): [176450.368, 190921.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.588 ±(99.9%) 1415.266 MB/sec [Average]
[info]   (min, avg, max) = (1340.279, 1745.588, 2017.896), stdev = 367.540
[info]   CI (99.9%): [330.322, 3160.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   182001.927 ±(99.9%) 152671.934 B/op [Average]
[info]   (min, avg, max) = (138297.929, 182001.927, 213430.098), stdev = 39648.416
[info]   CI (99.9%): [29329.993, 334673.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.569 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.729, 3.310), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   75.410 ±(99.9%) 575.080 B/op [Average]
[info]   (min, avg, max) = (2.142, 75.410, 341.938), stdev = 149.346
[info]   CI (99.9%): [≈ 0, 650.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.41% complete, ETA 01:05:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10644.905 ops/s
[info] # Warmup Iteration   2: 30310.169 ops/s
[info] # Warmup Iteration   3: 32542.363 ops/s
[info] # Warmup Iteration   4: 31454.270 ops/s
[info] # Warmup Iteration   5: 32601.257 ops/s
[info] Iteration   1: 32383.117 ops/s
[info]                  ·gc.alloc.rate:                   2687.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              130594.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130169.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32658.178 ops/s
[info]                  ·gc.alloc.rate:                   2706.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              130402.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129057.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 32910.580 ops/s
[info]                  ·gc.alloc.rate:                   2755.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              131742.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128308.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33049.184 ops/s
[info]                  ·gc.alloc.rate:               2779.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          132337.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128102.192 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 33063.260 ops/s
[info]                  ·gc.alloc.rate:               2782.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          132380.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128396.738 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   32812.864 ±(99.9%) 1117.191 ops/s [Average]
[info]   (min, avg, max) = (32383.117, 32812.864, 33063.260), stdev = 290.131
[info]   CI (99.9%): [31695.673, 33930.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2742.007 ±(99.9%) 166.030 MB/sec [Average]
[info]   (min, avg, max) = (2687.326, 2742.007, 2782.113), stdev = 43.117
[info]   CI (99.9%): [2575.977, 2908.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131491.460 ±(99.9%) 3632.282 B/op [Average]
[info]   (min, avg, max) = (130402.183, 131491.460, 132380.706), stdev = 943.292
[info]   CI (99.9%): [127859.179, 135123.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.781 ±(99.9%) 32.955 MB/sec [Average]
[info]   (min, avg, max) = (2678.342, 2685.781, 2698.386), stdev = 8.558
[info]   CI (99.9%): [2652.826, 2718.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128806.955 ±(99.9%) 3240.705 B/op [Average]
[info]   (min, avg, max) = (128102.192, 128806.955, 130169.618), stdev = 841.601
[info]   CI (99.9%): [125566.250, 132047.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.209 ±(99.9%) 8.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.209, 5.058), stdev = 2.295
[info]   CI (99.9%): [≈ 0, 11.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.61% complete, ETA 01:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46778.738 ops/s
[info] # Warmup Iteration   2: 100993.084 ops/s
[info] # Warmup Iteration   3: 106433.819 ops/s
[info] # Warmup Iteration   4: 106144.964 ops/s
[info] # Warmup Iteration   5: 106492.358 ops/s
[info] Iteration   1: 106745.815 ops/s
[info]                  ·gc.alloc.rate:               1490.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          21979.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19730.714 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 104868.888 ops/s
[info]                  ·gc.alloc.rate:                   1477.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              22167.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20095.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 107147.883 ops/s
[info]                  ·gc.alloc.rate:                   1520.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              22334.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19687.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.429 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 106924.685 ops/s
[info]                  ·gc.alloc.rate:               1504.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          22149.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19688.990 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 94097.688 ops/s
[info]                  ·gc.alloc.rate:               1341.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          22442.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22350.903 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   103956.992 ±(99.9%) 21508.867 ops/s [Average]
[info]   (min, avg, max) = (94097.688, 103956.992, 107147.883), stdev = 5585.785
[info]   CI (99.9%): [82448.124, 125465.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1467.161 ±(99.9%) 276.607 MB/sec [Average]
[info]   (min, avg, max) = (1341.946, 1467.161, 1520.665), stdev = 71.834
[info]   CI (99.9%): [1190.554, 1743.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22214.498 ±(99.9%) 688.594 B/op [Average]
[info]   (min, avg, max) = (21979.614, 22214.498, 22442.366), stdev = 178.826
[info]   CI (99.9%): [21525.904, 22903.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.465 ±(99.9%) 5.719 MB/sec [Average]
[info]   (min, avg, max) = (1336.477, 1338.465, 1340.451), stdev = 1.485
[info]   CI (99.9%): [1332.746, 1344.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20310.616 ±(99.9%) 4440.937 B/op [Average]
[info]   (min, avg, max) = (19687.342, 20310.616, 22350.903), stdev = 1153.297
[info]   CI (99.9%): [15869.679, 24751.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 6.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.706), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.011 ±(99.9%) 93.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.011, 54.429), stdev = 24.273
[info]   CI (99.9%): [≈ 0, 104.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.81% complete, ETA 01:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114296.593 ops/s
[info] # Warmup Iteration   2: 166221.287 ops/s
[info] # Warmup Iteration   3: 178028.621 ops/s
[info] # Warmup Iteration   4: 172855.261 ops/s
[info] # Warmup Iteration   5: 175583.881 ops/s
[info] Iteration   1: 174710.482 ops/s
[info]                  ·gc.alloc.rate:                   578.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              5213.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6045.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 178819.721 ops/s
[info]                  ·gc.alloc.rate:               590.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          5199.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5906.851 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 179146.458 ops/s
[info]                  ·gc.alloc.rate:      570.993 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 178721.675 ops/s
[info]                  ·gc.alloc.rate:                   591.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              5212.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5913.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 178868.362 ops/s
[info]                  ·gc.alloc.rate:                   587.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              5168.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5908.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   178053.340 ±(99.9%) 7221.339 ops/s [Average]
[info]   (min, avg, max) = (174710.482, 178053.340, 179146.458), stdev = 1875.359
[info]   CI (99.9%): [170832.001, 185274.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   584.037 ±(99.9%) 34.345 MB/sec [Average]
[info]   (min, avg, max) = (570.993, 584.037, 591.937), stdev = 8.919
[info]   CI (99.9%): [549.691, 618.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5162.144 ±(99.9%) 322.263 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5162.144, 5213.916), stdev = 83.691
[info]   CI (99.9%): [4839.881, 5484.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.104 ±(99.9%) 1156.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.104, 671.715), stdev = 300.251
[info]   CI (99.9%): [≈ 0, 1693.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4754.764 ±(99.9%) 10237.521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4754.764, 6045.784), stdev = 2658.652
[info]   CI (99.9%): [≈ 0, 14992.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.188), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.01% complete, ETA 01:04:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109690.339 ops/s
[info] # Warmup Iteration   2: 185241.196 ops/s
[info] # Warmup Iteration   3: 193720.766 ops/s
[info] # Warmup Iteration   4: 193607.924 ops/s
[info] # Warmup Iteration   5: 193693.855 ops/s
[info] Iteration   1: 193681.834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 193977.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 193457.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 193870.094 ops/s
[info]                  ·gc.alloc.rate:      1.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.488 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 193590.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   193715.470 ±(99.9%) 808.095 ops/s [Average]
[info]   (min, avg, max) = (193457.214, 193715.470, 193977.763), stdev = 209.860
[info]   CI (99.9%): [192907.375, 194523.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.209 ±(99.9%) 1.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.209, 1.046), stdev = 0.467
[info]   CI (99.9%): [≈ 0, 2.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.700 ±(99.9%) 14.612 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.700, 8.488), stdev = 3.795
[info]   CI (99.9%): [≈ 0, 16.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.21% complete, ETA 01:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9591.376 ops/s
[info] # Warmup Iteration   2: 44342.310 ops/s
[info] # Warmup Iteration   3: 48162.317 ops/s
[info] # Warmup Iteration   4: 48586.105 ops/s
[info] # Warmup Iteration   5: 48616.791 ops/s
[info] Iteration   1: 48565.269 ops/s
[info]                  ·gc.alloc.rate:                   3441.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              111504.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108408.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.675 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 49338.539 ops/s
[info]                  ·gc.alloc.rate:                   3495.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              111497.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107003.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.984 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 49526.585 ops/s
[info]                  ·gc.alloc.rate:                   3508.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              111476.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106963.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 49470.113 ops/s
[info]                  ·gc.alloc.rate:                   3505.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              111522.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107455.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 49211.413 ops/s
[info]                  ·gc.alloc.rate:               3489.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          111561.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108276.870 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   49222.384 ±(99.9%) 1490.503 ops/s [Average]
[info]   (min, avg, max) = (48565.269, 49222.384, 49526.585), stdev = 387.079
[info]   CI (99.9%): [47731.881, 50712.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3488.128 ±(99.9%) 105.406 MB/sec [Average]
[info]   (min, avg, max) = (3441.021, 3488.128, 3508.236), stdev = 27.374
[info]   CI (99.9%): [3382.722, 3593.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111512.665 ±(99.9%) 122.979 B/op [Average]
[info]   (min, avg, max) = (111476.772, 111512.665, 111561.853), stdev = 31.937
[info]   CI (99.9%): [111389.686, 111635.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3366.315 ±(99.9%) 64.440 MB/sec [Average]
[info]   (min, avg, max) = (3345.473, 3366.315, 3386.924), stdev = 16.735
[info]   CI (99.9%): [3301.874, 3430.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107621.749 ±(99.9%) 2647.440 B/op [Average]
[info]   (min, avg, max) = (106963.854, 107621.749, 108408.619), stdev = 687.532
[info]   CI (99.9%): [104974.310, 110269.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.461 ±(99.9%) 5.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.461, 3.984), stdev = 1.513
[info]   CI (99.9%): [≈ 0, 7.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52.41% complete, ETA 01:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3734.554 ops/s
[info] # Warmup Iteration   2: 8824.208 ops/s
[info] # Warmup Iteration   3: 9330.346 ops/s
[info] # Warmup Iteration   4: 9347.082 ops/s
[info] # Warmup Iteration   5: 9345.471 ops/s
[info] Iteration   1: 9212.063 ops/s
[info]                  ·gc.alloc.rate:                   1391.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              237715.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229710.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.556 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8927.823 ops/s
[info]                  ·gc.alloc.rate:               1347.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          237525.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 237133.173 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 9268.621 ops/s
[info]                  ·gc.alloc.rate:                   1422.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              241520.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228467.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9330.811 ops/s
[info]                  ·gc.alloc.rate:                   1419.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              239429.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226725.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9136.650 ops/s
[info]                  ·gc.alloc.rate:                   1390.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              239520.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231168.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   9175.193 ±(99.9%) 599.584 ops/s [Average]
[info]   (min, avg, max) = (8927.823, 9175.193, 9330.811), stdev = 155.710
[info]   CI (99.9%): [8575.609, 9774.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1394.505 ±(99.9%) 115.721 MB/sec [Average]
[info]   (min, avg, max) = (1347.963, 1394.505, 1422.589), stdev = 30.052
[info]   CI (99.9%): [1278.784, 1510.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   239142.327 ±(99.9%) 6247.469 B/op [Average]
[info]   (min, avg, max) = (237525.781, 239142.327, 241520.399), stdev = 1622.448
[info]   CI (99.9%): [232894.858, 245389.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.546 ±(99.9%) 5.450 MB/sec [Average]
[info]   (min, avg, max) = (1342.263, 1344.546, 1345.735), stdev = 1.415
[info]   CI (99.9%): [1339.096, 1349.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   230640.976 ±(99.9%) 15324.129 B/op [Average]
[info]   (min, avg, max) = (226725.208, 230640.976, 237133.173), stdev = 3979.628
[info]   CI (99.9%): [215316.847, 245965.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 4.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 2.519), stdev = 1.098
[info]   CI (99.9%): [≈ 0, 4.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   121.370 ±(99.9%) 717.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.370, 427.670), stdev = 186.327
[info]   CI (99.9%): [≈ 0, 838.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.61% complete, ETA 01:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3882.646 ops/s
[info] # Warmup Iteration   2: 20733.431 ops/s
[info] # Warmup Iteration   3: 25473.735 ops/s
[info] # Warmup Iteration   4: 25364.036 ops/s
[info] # Warmup Iteration   5: 26110.706 ops/s
[info] Iteration   1: 25382.434 ops/s
[info]                  ·gc.alloc.rate:                   1378.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              85486.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83144.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 24611.695 ops/s
[info]                  ·gc.alloc.rate:                   1329.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              85002.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85787.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26420.487 ops/s
[info]                  ·gc.alloc.rate:               1421.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          84656.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79951.589 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 26307.945 ops/s
[info]                  ·gc.alloc.rate:                   1427.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              85407.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80331.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25809.953 ops/s
[info]                  ·gc.alloc.rate:                   1389.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              84665.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81637.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   25706.503 ±(99.9%) 2846.505 ops/s [Average]
[info]   (min, avg, max) = (24611.695, 25706.503, 26420.487), stdev = 739.228
[info]   CI (99.9%): [22859.998, 28553.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1389.280 ±(99.9%) 151.685 MB/sec [Average]
[info]   (min, avg, max) = (1329.385, 1389.280, 1427.854), stdev = 39.392
[info]   CI (99.9%): [1237.595, 1540.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85043.959 ±(99.9%) 1520.315 B/op [Average]
[info]   (min, avg, max) = (84656.542, 85043.959, 85486.781), stdev = 394.821
[info]   CI (99.9%): [83523.644, 86564.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.471 ±(99.9%) 5.355 MB/sec [Average]
[info]   (min, avg, max) = (1339.325, 1341.471, 1342.990), stdev = 1.391
[info]   CI (99.9%): [1336.116, 1346.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   82170.543 ±(99.9%) 9156.909 B/op [Average]
[info]   (min, avg, max) = (79951.589, 82170.543, 85787.548), stdev = 2378.020
[info]   CI (99.9%): [73013.634, 91327.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.851), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.118 ±(99.9%) 394.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.118, 230.366), stdev = 102.443
[info]   CI (99.9%): [≈ 0, 441.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.81% complete, ETA 01:03:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5371.936 ops/s
[info] # Warmup Iteration   2: 24111.846 ops/s
[info] # Warmup Iteration   3: 29246.180 ops/s
[info] # Warmup Iteration   4: 29437.401 ops/s
[info] # Warmup Iteration   5: 29058.574 ops/s
[info] Iteration   1: 29503.711 ops/s
[info]                  ·gc.alloc.rate:                   1209.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              64509.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70994.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 29455.057 ops/s
[info]                  ·gc.alloc.rate:               1205.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          64406.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71039.227 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28651.488 ops/s
[info]                  ·gc.alloc.rate:               1153.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          63341.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36552.705 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 28456.530 ops/s
[info]                  ·gc.alloc.rate:                   1161.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              64225.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73643.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28463.586 ops/s
[info]                  ·gc.alloc.rate:               1172.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          64836.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73714.477 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   28906.075 ±(99.9%) 2038.708 ops/s [Average]
[info]   (min, avg, max) = (28456.530, 28906.075, 29503.711), stdev = 529.446
[info]   CI (99.9%): [26867.367, 30944.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1180.556 ±(99.9%) 99.033 MB/sec [Average]
[info]   (min, avg, max) = (1153.257, 1180.556, 1209.446), stdev = 25.719
[info]   CI (99.9%): [1081.522, 1279.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64263.625 ±(99.9%) 2161.756 B/op [Average]
[info]   (min, avg, max) = (63341.294, 64263.625, 64836.262), stdev = 561.401
[info]   CI (99.9%): [62101.869, 66425.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.345 ±(99.9%) 1146.963 MB/sec [Average]
[info]   (min, avg, max) = (665.516, 1198.345, 1333.473), stdev = 297.863
[info]   CI (99.9%): [51.382, 2345.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65188.849 ±(99.9%) 61854.235 B/op [Average]
[info]   (min, avg, max) = (36552.705, 65188.849, 73714.477), stdev = 16063.349
[info]   CI (99.9%): [3334.614, 127043.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.674 ±(99.9%) 3.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 2.221), stdev = 0.998
[info]   CI (99.9%): [≈ 0, 4.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.01% complete, ETA 01:02:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272323.487 ops/s
[info] # Warmup Iteration   2: 618106.599 ops/s
[info] # Warmup Iteration   3: 645361.706 ops/s
[info] # Warmup Iteration   4: 635936.557 ops/s
[info] # Warmup Iteration   5: 576427.003 ops/s
[info] Iteration   1: 579368.131 ops/s
[info]                  ·gc.alloc.rate:                   1543.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              4191.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3653.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 581912.566 ops/s
[info]                  ·gc.alloc.rate:                   1566.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              4236.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3640.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 582592.265 ops/s
[info]                  ·gc.alloc.rate:                   1587.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5446.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 647335.194 ops/s
[info]                  ·gc.alloc.rate:               1732.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          4211.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3261.794 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 619288.046 ops/s
[info]                  ·gc.alloc.rate:                   1651.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              4197.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3409.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   602099.240 ±(99.9%) 116262.568 ops/s [Average]
[info]   (min, avg, max) = (579368.131, 602099.240, 647335.194), stdev = 30193.020
[info]   CI (99.9%): [485836.672, 718361.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1616.255 ±(99.9%) 294.444 MB/sec [Average]
[info]   (min, avg, max) = (1543.077, 1616.255, 1732.291), stdev = 76.466
[info]   CI (99.9%): [1321.811, 1910.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4224.941 ±(99.9%) 151.262 B/op [Average]
[info]   (min, avg, max) = (4191.278, 4224.941, 4288.114), stdev = 39.282
[info]   CI (99.9%): [4073.680, 4376.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.186 ±(99.9%) 1158.494 MB/sec [Average]
[info]   (min, avg, max) = (1341.625, 1478.186, 2016.364), stdev = 300.857
[info]   CI (99.9%): [319.692, 2636.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3882.283 ±(99.9%) 3425.810 B/op [Average]
[info]   (min, avg, max) = (3261.794, 3882.283, 5446.421), stdev = 889.672
[info]   CI (99.9%): [456.473, 7308.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 4.525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.728), stdev = 1.175
[info]   CI (99.9%): [≈ 0, 5.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.756 ±(99.9%) 12.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.756, 7.376), stdev = 3.179
[info]   CI (99.9%): [≈ 0, 13.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.21% complete, ETA 01:02:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1617.269 ops/s
[info] # Warmup Iteration   2: 16317.514 ops/s
[info] # Warmup Iteration   3: 24102.079 ops/s
[info] # Warmup Iteration   4: 23823.679 ops/s
[info] # Warmup Iteration   5: 24228.263 ops/s
[info] Iteration   1: 24035.063 ops/s
[info]                  ·gc.alloc.rate:               1780.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          116582.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87079.655 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 23578.981 ops/s
[info]                  ·gc.alloc.rate:               1751.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          116858.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133495.142 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 23804.724 ops/s
[info]                  ·gc.alloc.rate:                   1753.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              115898.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88474.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23908.595 ops/s
[info]                  ·gc.alloc.rate:               1773.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          116741.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132354.548 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 23681.258 ops/s
[info]                  ·gc.alloc.rate:                   1745.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              115987.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133938.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   23801.724 ±(99.9%) 694.195 ops/s [Average]
[info]   (min, avg, max) = (23578.981, 23801.724, 24035.063), stdev = 180.280
[info]   CI (99.9%): [23107.530, 24495.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1760.934 ±(99.9%) 59.339 MB/sec [Average]
[info]   (min, avg, max) = (1745.328, 1760.934, 1780.882), stdev = 15.410
[info]   CI (99.9%): [1701.595, 1820.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   116413.877 ±(99.9%) 1701.488 B/op [Average]
[info]   (min, avg, max) = (115898.685, 116413.877, 116858.514), stdev = 441.871
[info]   CI (99.9%): [114712.389, 118115.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1739.142 ±(99.9%) 1422.875 MB/sec [Average]
[info]   (min, avg, max) = (1330.202, 1739.142, 2015.445), stdev = 369.516
[info]   CI (99.9%): [316.267, 3162.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   115068.559 ±(99.9%) 95977.164 B/op [Average]
[info]   (min, avg, max) = (87079.655, 115068.559, 133938.474), stdev = 24924.965
[info]   CI (99.9%): [19091.395, 211045.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.583), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.984 ±(99.9%) 65.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.984, 38.534), stdev = 17.089
[info]   CI (99.9%): [≈ 0, 73.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 01:02:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4342.338 ops/s
[info] # Warmup Iteration   2: 23349.122 ops/s
[info] # Warmup Iteration   3: 26863.756 ops/s
[info] # Warmup Iteration   4: 27421.587 ops/s
[info] # Warmup Iteration   5: 27519.028 ops/s
[info] Iteration   1: 27966.974 ops/s
[info]                  ·gc.alloc.rate:               1347.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          75837.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75535.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 28363.928 ops/s
[info]                  ·gc.alloc.rate:                   1351.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              74946.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74512.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28323.333 ops/s
[info]                  ·gc.alloc.rate:               1360.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          75575.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74657.693 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 28366.764 ops/s
[info]                  ·gc.alloc.rate:                   1373.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              76180.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74581.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28348.717 ops/s
[info]                  ·gc.alloc.rate:               1373.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          76241.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74406.959 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   28273.943 ±(99.9%) 664.093 ops/s [Average]
[info]   (min, avg, max) = (27966.974, 28273.943, 28366.764), stdev = 172.463
[info]   CI (99.9%): [27609.850, 28938.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1361.158 ±(99.9%) 46.232 MB/sec [Average]
[info]   (min, avg, max) = (1347.767, 1361.158, 1373.363), stdev = 12.006
[info]   CI (99.9%): [1314.926, 1407.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   75756.302 ±(99.9%) 2028.556 B/op [Average]
[info]   (min, avg, max) = (74946.660, 75756.302, 76241.535), stdev = 526.809
[info]   CI (99.9%): [73727.746, 77784.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1342.843 ±(99.9%) 6.160 MB/sec [Average]
[info]   (min, avg, max) = (1340.316, 1342.843, 1344.375), stdev = 1.600
[info]   CI (99.9%): [1336.683, 1349.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   74738.910 ±(99.9%) 1751.220 B/op [Average]
[info]   (min, avg, max) = (74406.959, 74738.910, 75535.558), stdev = 454.786
[info]   CI (99.9%): [72987.690, 76490.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.831), stdev = 1.709
[info]   CI (99.9%): [≈ 0, 7.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   42.964 ±(99.9%) 364.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.964, 212.509), stdev = 94.784
[info]   CI (99.9%): [≈ 0, 407.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.61% complete, ETA 01:02:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25010.436 ops/s
[info] # Warmup Iteration   2: 68449.714 ops/s
[info] # Warmup Iteration   3: 73232.924 ops/s
[info] # Warmup Iteration   4: 74291.882 ops/s
[info] # Warmup Iteration   5: 71414.530 ops/s
[info] Iteration   1: 74167.871 ops/s
[info]                  ·gc.alloc.rate:                   1960.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              41598.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42752.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 73840.079 ops/s
[info]                  ·gc.alloc.rate:                   1964.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              41866.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42883.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 72683.486 ops/s
[info]                  ·gc.alloc.rate:                   1934.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              41887.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43472.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73672.789 ops/s
[info]                  ·gc.alloc.rate:                   1974.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              42180.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42889.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73892.861 ops/s
[info]                  ·gc.alloc.rate:                   1953.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              41613.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28532.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   73651.417 ±(99.9%) 2193.482 ops/s [Average]
[info]   (min, avg, max) = (72683.486, 73651.417, 74167.871), stdev = 569.640
[info]   CI (99.9%): [71457.935, 75844.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1957.687 ±(99.9%) 57.524 MB/sec [Average]
[info]   (min, avg, max) = (1934.621, 1957.687, 1974.660), stdev = 14.939
[info]   CI (99.9%): [1900.162, 2015.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41829.282 ±(99.9%) 919.146 B/op [Average]
[info]   (min, avg, max) = (41598.167, 41829.282, 42180.409), stdev = 238.699
[info]   CI (99.9%): [40910.136, 42748.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1876.543 ±(99.9%) 1155.704 MB/sec [Average]
[info]   (min, avg, max) = (1339.677, 1876.543, 2014.823), stdev = 300.133
[info]   CI (99.9%): [720.839, 3032.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40105.953 ±(99.9%) 24936.876 B/op [Average]
[info]   (min, avg, max) = (28532.005, 40105.953, 43472.511), stdev = 6476.027
[info]   CI (99.9%): [15169.077, 65042.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 4.852 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.758, 2.956), stdev = 1.260
[info]   CI (99.9%): [≈ 0, 5.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.102 ±(99.9%) 102.929 B/op [Average]
[info]   (min, avg, max) = (0.443, 16.102, 62.726), stdev = 26.730
[info]   CI (99.9%): [≈ 0, 119.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.82% complete, ETA 01:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71505.869 ops/s
[info] # Warmup Iteration   2: 176700.767 ops/s
[info] # Warmup Iteration   3: 182607.521 ops/s
[info] # Warmup Iteration   4: 184175.032 ops/s
[info] # Warmup Iteration   5: 184717.285 ops/s
[info] Iteration   1: 184872.498 ops/s
[info]                  ·gc.alloc.rate:                   2056.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              17505.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17119.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 185452.757 ops/s
[info]                  ·gc.alloc.rate:                   2061.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              17491.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17032.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 182098.747 ops/s
[info]                  ·gc.alloc.rate:               2038.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          17614.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17323.223 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 185936.359 ops/s
[info]                  ·gc.alloc.rate:               2094.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          17724.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16979.812 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 185482.038 ops/s
[info]                  ·gc.alloc.rate:               2089.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          17728.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17044.617 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   184768.480 ±(99.9%) 5927.876 ops/s [Average]
[info]   (min, avg, max) = (182098.747, 184768.480, 185936.359), stdev = 1539.451
[info]   CI (99.9%): [178840.603, 190696.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2067.931 ±(99.9%) 90.651 MB/sec [Average]
[info]   (min, avg, max) = (2038.146, 2067.931, 2094.347), stdev = 23.542
[info]   CI (99.9%): [1977.281, 2158.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17612.881 ±(99.9%) 437.902 B/op [Average]
[info]   (min, avg, max) = (17491.968, 17612.881, 17728.081), stdev = 113.722
[info]   CI (99.9%): [17174.979, 18050.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.596 ±(99.9%) 9.693 MB/sec [Average]
[info]   (min, avg, max) = (2004.490, 2007.596, 2011.152), stdev = 2.517
[info]   CI (99.9%): [1997.902, 2017.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17100.004 ±(99.9%) 517.718 B/op [Average]
[info]   (min, avg, max) = (16979.812, 17100.004, 17323.223), stdev = 134.450
[info]   CI (99.9%): [16582.286, 17617.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 5.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.414), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.378 ±(99.9%) 49.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.378, 29.063), stdev = 12.740
[info]   CI (99.9%): [≈ 0, 55.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.02% complete, ETA 01:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 830062.002 ops/s
[info] # Warmup Iteration   2: 1267208.245 ops/s
[info] # Warmup Iteration   3: 1449826.319 ops/s
[info] # Warmup Iteration   4: 1443391.726 ops/s
[info] # Warmup Iteration   5: 1455788.689 ops/s
[info] Iteration   1: 1460820.716 ops/s
[info]                  ·gc.alloc.rate:               1243.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          1339.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1448.247 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1489320.831 ops/s
[info]                  ·gc.alloc.rate:                   1275.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1347.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1422.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1472458.010 ops/s
[info]                  ·gc.alloc.rate:                   1273.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1438.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1489814.072 ops/s
[info]                  ·gc.alloc.rate:                   1259.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1330.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1509260.048 ops/s
[info]                  ·gc.alloc.rate:                   1290.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1345.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1403.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1484334.735 ±(99.9%) 71266.077 ops/s [Average]
[info]   (min, avg, max) = (1460820.716, 1484334.735, 1509260.048), stdev = 18507.574
[info]   CI (99.9%): [1413068.658, 1555600.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1268.690 ±(99.9%) 68.066 MB/sec [Average]
[info]   (min, avg, max) = (1243.784, 1268.690, 1290.673), stdev = 17.676
[info]   CI (99.9%): [1200.624, 1336.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1345.085 ±(99.9%) 42.562 B/op [Average]
[info]   (min, avg, max) = (1330.910, 1345.085, 1360.993), stdev = 11.053
[info]   CI (99.9%): [1302.522, 1387.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.166 ±(99.9%) 1157.381 MB/sec [Average]
[info]   (min, avg, max) = (673.495, 1211.166, 1346.413), stdev = 300.568
[info]   CI (99.9%): [53.785, 2368.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1284.780 ±(99.9%) 1235.976 B/op [Average]
[info]   (min, avg, max) = (711.417, 1284.780, 1448.247), stdev = 320.979
[info]   CI (99.9%): [48.803, 2520.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 4.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.477), stdev = 1.066
[info]   CI (99.9%): [≈ 0, 4.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.641 ±(99.9%) 4.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.617), stdev = 1.126
[info]   CI (99.9%): [≈ 0, 4.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.22% complete, ETA 01:01:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029416.567 ops/s
[info] # Warmup Iteration   2: 1752325.106 ops/s
[info] # Warmup Iteration   3: 1766437.726 ops/s
[info] # Warmup Iteration   4: 1770124.225 ops/s
[info] # Warmup Iteration   5: 1767464.179 ops/s
[info] Iteration   1: 1769665.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1763785.946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1756080.303 ops/s
[info]                  ·gc.alloc.rate:      2.461 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.205 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1449751.992 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1764386.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1700734.108 ±(99.9%) 540580.086 ops/s [Average]
[info]   (min, avg, max) = (1449751.992, 1700734.108, 1769665.710), stdev = 140386.932
[info]   CI (99.9%): [1160154.022, 2241314.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.492 ±(99.9%) 4.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.492, 2.461), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 4.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.441 ±(99.9%) 3.797 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.441, 2.205), stdev = 0.986
[info]   CI (99.9%): [≈ 0, 4.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.42% complete, ETA 01:00:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41296.312 ops/s
[info] # Warmup Iteration   2: 146198.965 ops/s
[info] # Warmup Iteration   3: 156473.896 ops/s
[info] # Warmup Iteration   4: 157072.564 ops/s
[info] # Warmup Iteration   5: 156766.324 ops/s
[info] Iteration   1: 156391.101 ops/s
[info]                  ·gc.alloc.rate:                   2044.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              20568.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20207.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 156266.799 ops/s
[info]                  ·gc.alloc.rate:                   2017.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              20310.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20173.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 157083.115 ops/s
[info]                  ·gc.alloc.rate:               2028.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          20314.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20010.128 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 157097.544 ops/s
[info]                  ·gc.alloc.rate:                   2012.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              20164.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13373.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 152191.478 ops/s
[info]                  ·gc.alloc.rate:                   1991.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              20597.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20737.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   155806.007 ±(99.9%) 7919.268 ops/s [Average]
[info]   (min, avg, max) = (152191.478, 155806.007, 157097.544), stdev = 2056.609
[info]   CI (99.9%): [147886.739, 163725.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2019.011 ±(99.9%) 74.513 MB/sec [Average]
[info]   (min, avg, max) = (1991.926, 2019.011, 2044.060), stdev = 19.351
[info]   CI (99.9%): [1944.497, 2093.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20391.108 ±(99.9%) 714.059 B/op [Average]
[info]   (min, avg, max) = (20164.819, 20391.108, 20597.249), stdev = 185.439
[info]   CI (99.9%): [19677.049, 21105.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1870.177 ±(99.9%) 1152.104 MB/sec [Average]
[info]   (min, avg, max) = (1334.994, 1870.177, 2008.192), stdev = 299.198
[info]   CI (99.9%): [718.073, 3022.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18900.563 ±(99.9%) 11943.207 B/op [Average]
[info]   (min, avg, max) = (13373.809, 18900.563, 20737.589), stdev = 3101.613
[info]   CI (99.9%): [6957.356, 30843.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.018), stdev = 1.783
[info]   CI (99.9%): [≈ 0, 7.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.339 ±(99.9%) 69.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.339, 40.430), stdev = 17.943
[info]   CI (99.9%): [≈ 0, 77.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54.62% complete, ETA 01:00:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14512.461 ops/s
[info] # Warmup Iteration   2: 33775.354 ops/s
[info] # Warmup Iteration   3: 33789.204 ops/s
[info] # Warmup Iteration   4: 33465.456 ops/s
[info] # Warmup Iteration   5: 34177.027 ops/s
[info] Iteration   1: 34886.458 ops/s
[info]                  ·gc.alloc.rate:                   1308.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              59011.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60639.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34890.277 ops/s
[info]                  ·gc.alloc.rate:               1300.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          58630.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60692.957 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 34660.515 ops/s
[info]                  ·gc.alloc.rate:               1289.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          58544.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61097.367 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 34840.458 ops/s
[info]                  ·gc.alloc.rate:                   1308.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              59112.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60843.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34983.349 ops/s
[info]                  ·gc.alloc.rate:               1311.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          59011.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60418.693 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   34852.211 ±(99.9%) 458.471 ops/s [Average]
[info]   (min, avg, max) = (34660.515, 34852.211, 34983.349), stdev = 119.064
[info]   CI (99.9%): [34393.740, 35310.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1303.679 ±(99.9%) 34.739 MB/sec [Average]
[info]   (min, avg, max) = (1289.472, 1303.679, 1311.775), stdev = 9.022
[info]   CI (99.9%): [1268.939, 1338.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   58862.051 ±(99.9%) 984.916 B/op [Average]
[info]   (min, avg, max) = (58544.534, 58862.051, 59112.399), stdev = 255.780
[info]   CI (99.9%): [57877.135, 59846.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1345.214 ±(99.9%) 5.897 MB/sec [Average]
[info]   (min, avg, max) = (1343.060, 1345.214, 1347.017), stdev = 1.531
[info]   CI (99.9%): [1339.318, 1351.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   60738.508 ±(99.9%) 970.224 B/op [Average]
[info]   (min, avg, max) = (60418.693, 60738.508, 61097.367), stdev = 251.964
[info]   CI (99.9%): [59768.284, 61708.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 5.719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.331), stdev = 1.485
[info]   CI (99.9%): [≈ 0, 6.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   30.466 ±(99.9%) 258.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.466, 150.454), stdev = 67.080
[info]   CI (99.9%): [≈ 0, 288.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 01:00:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9261.813 ops/s
[info] # Warmup Iteration   2: 36507.113 ops/s
[info] # Warmup Iteration   3: 39386.822 ops/s
[info] # Warmup Iteration   4: 38544.865 ops/s
[info] # Warmup Iteration   5: 40656.638 ops/s
[info] Iteration   1: 41050.816 ops/s
[info]                  ·gc.alloc.rate:                   1504.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              57692.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51294.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 40867.059 ops/s
[info]                  ·gc.alloc.rate:               1533.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          59035.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77331.678 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 41146.262 ops/s
[info]                  ·gc.alloc.rate:                   1515.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              57961.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51263.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38322.145 ops/s
[info]                  ·gc.alloc.rate:                   1417.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              58195.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54877.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40966.719 ops/s
[info]                  ·gc.alloc.rate:                   1518.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              58327.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51284.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   40470.600 ±(99.9%) 4641.720 ops/s [Average]
[info]   (min, avg, max) = (38322.145, 40470.600, 41146.262), stdev = 1205.440
[info]   CI (99.9%): [35828.880, 45112.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1497.886 ±(99.9%) 177.390 MB/sec [Average]
[info]   (min, avg, max) = (1417.498, 1497.886, 1533.261), stdev = 46.068
[info]   CI (99.9%): [1320.496, 1675.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58242.623 ±(99.9%) 1944.462 B/op [Average]
[info]   (min, avg, max) = (57692.996, 58242.623, 59035.976), stdev = 504.971
[info]   CI (99.9%): [56298.161, 60187.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.686 ±(99.9%) 1155.407 MB/sec [Average]
[info]   (min, avg, max) = (1335.008, 1471.686, 2008.431), stdev = 300.056
[info]   CI (99.9%): [316.279, 2627.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   57210.356 ±(99.9%) 43725.785 B/op [Average]
[info]   (min, avg, max) = (51263.149, 57210.356, 77331.678), stdev = 11355.448
[info]   CI (99.9%): [13484.571, 100936.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 4.164), stdev = 1.850
[info]   CI (99.9%): [≈ 0, 7.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32.670 ±(99.9%) 272.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.670, 159.242), stdev = 70.759
[info]   CI (99.9%): [≈ 0, 305.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.02% complete, ETA 01:00:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431859.823 ops/s
[info] # Warmup Iteration   2: 741343.954 ops/s
[info] # Warmup Iteration   3: 759810.584 ops/s
[info] # Warmup Iteration   4: 773208.531 ops/s
[info] # Warmup Iteration   5: 767227.906 ops/s
[info] Iteration   1: 711004.999 ops/s
[info]                  ·gc.alloc.rate:                   1427.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              3159.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2978.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 738260.988 ops/s
[info]                  ·gc.alloc.rate:               1482.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          3158.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2869.916 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 745209.825 ops/s
[info]                  ·gc.alloc.rate:                   1521.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              3213.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4264.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 750079.877 ops/s
[info]                  ·gc.alloc.rate:                   1517.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              3183.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2819.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 748323.512 ops/s
[info]                  ·gc.alloc.rate:                   1499.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              3154.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2824.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   738575.840 ±(99.9%) 61839.115 ops/s [Average]
[info]   (min, avg, max) = (711004.999, 738575.840, 750079.877), stdev = 16059.422
[info]   CI (99.9%): [676736.725, 800414.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1489.743 ±(99.9%) 147.143 MB/sec [Average]
[info]   (min, avg, max) = (1427.390, 1489.743, 1521.738), stdev = 38.213
[info]   CI (99.9%): [1342.600, 1636.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3174.022 ±(99.9%) 96.056 B/op [Average]
[info]   (min, avg, max) = (3154.516, 3174.022, 3213.540), stdev = 24.945
[info]   CI (99.9%): [3077.966, 3270.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.625 ±(99.9%) 1161.522 MB/sec [Average]
[info]   (min, avg, max) = (1342.978, 1479.625, 2019.214), stdev = 301.644
[info]   CI (99.9%): [318.103, 2641.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3151.210 ±(99.9%) 2408.197 B/op [Average]
[info]   (min, avg, max) = (2819.185, 3151.210, 4264.088), stdev = 625.401
[info]   CI (99.9%): [743.013, 5559.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 4.959 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.915), stdev = 1.288
[info]   CI (99.9%): [≈ 0, 5.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.293 ±(99.9%) 10.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.293, 6.155), stdev = 2.719
[info]   CI (99.9%): [≈ 0, 11.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 00:59:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2219.976 ops/s
[info] # Warmup Iteration   2: 23293.425 ops/s
[info] # Warmup Iteration   3: 32183.762 ops/s
[info] # Warmup Iteration   4: 32357.057 ops/s
[info] # Warmup Iteration   5: 32314.521 ops/s
[info] Iteration   1: 32441.839 ops/s
[info]                  ·gc.alloc.rate:                   2301.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              111654.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129674.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 32351.661 ops/s
[info]                  ·gc.alloc.rate:                   2292.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              111517.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97812.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 32533.356 ops/s
[info]                  ·gc.alloc.rate:               2293.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          110950.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97526.591 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 31578.740 ops/s
[info]                  ·gc.alloc.rate:               2282.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          113728.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134254.910 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 31509.271 ops/s
[info]                  ·gc.alloc.rate:               2250.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          112379.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101134.313 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   32082.973 ±(99.9%) 1912.967 ops/s [Average]
[info]   (min, avg, max) = (31509.271, 32082.973, 32533.356), stdev = 496.792
[info]   CI (99.9%): [30170.006, 33995.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2284.033 ±(99.9%) 78.026 MB/sec [Average]
[info]   (min, avg, max) = (2250.014, 2284.033, 2301.809), stdev = 20.263
[info]   CI (99.9%): [2206.007, 2362.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112046.126 ±(99.9%) 4116.756 B/op [Average]
[info]   (min, avg, max) = (110950.819, 112046.126, 113728.004), stdev = 1069.108
[info]   CI (99.9%): [107929.370, 116162.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2283.831 ±(99.9%) 1405.886 MB/sec [Average]
[info]   (min, avg, max) = (2010.803, 2283.831, 2694.028), stdev = 365.104
[info]   CI (99.9%): [877.945, 3689.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   112080.624 ±(99.9%) 70384.980 B/op [Average]
[info]   (min, avg, max) = (97526.591, 112080.624, 134254.910), stdev = 18278.756
[info]   CI (99.9%): [41695.644, 182465.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 1.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.604), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.059 ±(99.9%) 50.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.059, 29.284), stdev = 12.990
[info]   CI (99.9%): [≈ 0, 56.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55.42% complete, ETA 00:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7221.751 ops/s
[info] # Warmup Iteration   2: 34551.860 ops/s
[info] # Warmup Iteration   3: 39886.385 ops/s
[info] # Warmup Iteration   4: 40191.195 ops/s
[info] # Warmup Iteration   5: 40532.879 ops/s
[info] Iteration   1: 40394.176 ops/s
[info]                  ·gc.alloc.rate:                   1687.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              65721.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78572.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.622 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 40633.358 ops/s
[info]                  ·gc.alloc.rate:                   1679.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              65033.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52103.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39703.054 ops/s
[info]                  ·gc.alloc.rate:                   1669.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              66082.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79592.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 39351.291 ops/s
[info]                  ·gc.alloc.rate:               1650.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          66024.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53603.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 40650.939 ops/s
[info]                  ·gc.alloc.rate:                   1691.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              65495.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51833.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   40146.564 ±(99.9%) 2263.244 ops/s [Average]
[info]   (min, avg, max) = (39351.291, 40146.564, 40650.939), stdev = 587.757
[info]   CI (99.9%): [37883.319, 42409.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1675.762 ±(99.9%) 62.467 MB/sec [Average]
[info]   (min, avg, max) = (1650.979, 1675.762, 1691.795), stdev = 16.222
[info]   CI (99.9%): [1613.295, 1738.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65671.513 ±(99.9%) 1649.090 B/op [Average]
[info]   (min, avg, max) = (65033.790, 65671.513, 66082.054), stdev = 428.264
[info]   CI (99.9%): [64022.422, 67320.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1610.510 ±(99.9%) 1417.681 MB/sec [Average]
[info]   (min, avg, max) = (1338.893, 1610.510, 2016.864), stdev = 368.167
[info]   CI (99.9%): [192.829, 3028.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   63141.144 ±(99.9%) 56113.776 B/op [Average]
[info]   (min, avg, max) = (51833.106, 63141.144, 79592.706), stdev = 14572.569
[info]   CI (99.9%): [7027.368, 119254.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 4.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 2.894), stdev = 1.245
[info]   CI (99.9%): [≈ 0, 5.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29.480 ±(99.9%) 185.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.480, 112.070), stdev = 48.219
[info]   CI (99.9%): [≈ 0, 215.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.62% complete, ETA 00:59:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83563.490 ops/s
[info] # Warmup Iteration   2: 324405.682 ops/s
[info] # Warmup Iteration   3: 349370.679 ops/s
[info] # Warmup Iteration   4: 348952.397 ops/s
[info] # Warmup Iteration   5: 350833.261 ops/s
[info] Iteration   1: 349702.745 ops/s
[info]                  ·gc.alloc.rate:                   1015.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              4569.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6007.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 349894.443 ops/s
[info]                  ·gc.alloc.rate:               990.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          4454.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3005.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 349606.676 ops/s
[info]                  ·gc.alloc.rate:                   1003.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              4518.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 349931.210 ops/s
[info]                  ·gc.alloc.rate:               986.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          4436.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3008.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 349681.962 ops/s
[info]                  ·gc.alloc.rate:                   1025.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              4617.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6026.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   349763.407 ±(99.9%) 545.264 ops/s [Average]
[info]   (min, avg, max) = (349606.676, 349763.407, 349931.210), stdev = 141.603
[info]   CI (99.9%): [349218.143, 350308.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1004.414 ±(99.9%) 63.957 MB/sec [Average]
[info]   (min, avg, max) = (986.520, 1004.414, 1025.989), stdev = 16.609
[info]   CI (99.9%): [940.457, 1068.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4519.328 ±(99.9%) 293.331 B/op [Average]
[info]   (min, avg, max) = (4436.565, 4519.328, 4617.587), stdev = 76.177
[info]   CI (99.9%): [4225.997, 4812.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.581 ±(99.9%) 1409.862 MB/sec [Average]
[info]   (min, avg, max) = (668.139, 1069.581, 1338.943), stdev = 366.137
[info]   CI (99.9%): [≈ 0, 2479.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4813.044 ±(99.9%) 6349.982 B/op [Average]
[info]   (min, avg, max) = (3005.177, 4813.044, 6026.075), stdev = 1649.070
[info]   CI (99.9%): [≈ 0, 11163.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.187), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.82% complete, ETA 00:59:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 942705.057 ops/s
[info] # Warmup Iteration   2: 1822723.737 ops/s
[info] # Warmup Iteration   3: 1969352.679 ops/s
[info] # Warmup Iteration   4: 1961069.020 ops/s
[info] # Warmup Iteration   5: 1962805.030 ops/s
[info] Iteration   1: 1967930.140 ops/s
[info]                  ·gc.alloc.rate:               1166.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          932.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.559 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1915062.219 ops/s
[info]                  ·gc.alloc.rate:               1170.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          961.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1105.071 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1945580.715 ops/s
[info]                  ·gc.alloc.rate:                   1165.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1088.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1884786.922 ops/s
[info]                  ·gc.alloc.rate:               1140.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          952.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1939967.008 ops/s
[info]                  ·gc.alloc.rate:                   1175.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1092.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1930665.401 ±(99.9%) 122465.331 ops/s [Average]
[info]   (min, avg, max) = (1884786.922, 1930665.401, 1967930.140), stdev = 31803.857
[info]   CI (99.9%): [1808200.070, 2053130.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1163.594 ±(99.9%) 52.041 MB/sec [Average]
[info]   (min, avg, max) = (1140.520, 1163.594, 1175.560), stdev = 13.515
[info]   CI (99.9%): [1111.553, 1215.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   948.463 ±(99.9%) 42.715 B/op [Average]
[info]   (min, avg, max) = (932.773, 948.463, 961.615), stdev = 11.093
[info]   CI (99.9%): [905.748, 991.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.442 ±(99.9%) 1419.482 MB/sec [Average]
[info]   (min, avg, max) = (672.211, 1076.442, 1346.692), stdev = 368.635
[info]   CI (99.9%): [≈ 0, 2495.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   876.980 ±(99.9%) 1151.223 B/op [Average]
[info]   (min, avg, max) = (537.559, 876.980, 1105.071), stdev = 298.969
[info]   CI (99.9%): [≈ 0, 2028.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.571 ±(99.9%) 4.868 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.571, 2.832), stdev = 1.264
[info]   CI (99.9%): [≈ 0, 5.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.463 ±(99.9%) 3.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 2.297), stdev = 1.025
[info]   CI (99.9%): [≈ 0, 4.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.02% complete, ETA 00:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1432675.701 ops/s
[info] # Warmup Iteration   2: 2045731.904 ops/s
[info] # Warmup Iteration   3: 2108180.527 ops/s
[info] # Warmup Iteration   4: 1918370.879 ops/s
[info] # Warmup Iteration   5: 2105951.683 ops/s
[info] Iteration   1: 2236853.831 ops/s
[info]                  ·gc.alloc.rate:      1.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.775 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2249470.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2247106.394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2247050.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2246667.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2245429.617 ±(99.9%) 18946.641 ops/s [Average]
[info]   (min, avg, max) = (2236853.831, 2245429.617, 2249470.202), stdev = 4920.383
[info]   CI (99.9%): [2226482.976, 2264376.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.221 ±(99.9%) 1.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.221, 1.102), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.155 ±(99.9%) 1.335 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.155, 0.775), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94249.917 ops/s
[info] # Warmup Iteration   2: 245573.087 ops/s
[info] # Warmup Iteration   3: 245380.915 ops/s
[info] # Warmup Iteration   4: 248298.645 ops/s
[info] # Warmup Iteration   5: 247404.938 ops/s
[info] Iteration   1: 252334.932 ops/s
[info]                  ·gc.alloc.rate:                   1658.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              10346.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8342.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 252887.745 ops/s
[info]                  ·gc.alloc.rate:                   1689.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              10511.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12496.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 256507.793 ops/s
[info]                  ·gc.alloc.rate:                   1710.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              10493.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8198.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 256241.374 ops/s
[info]                  ·gc.alloc.rate:                   1709.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              10501.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8199.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 255954.866 ops/s
[info]                  ·gc.alloc.rate:               1687.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          10375.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8208.448 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   254785.342 ±(99.9%) 7715.723 ops/s [Average]
[info]   (min, avg, max) = (252334.932, 254785.342, 256507.793), stdev = 2003.749
[info]   CI (99.9%): [247069.619, 262501.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1691.239 ±(99.9%) 81.053 MB/sec [Average]
[info]   (min, avg, max) = (1658.890, 1691.239, 1710.331), stdev = 21.049
[info]   CI (99.9%): [1610.186, 1772.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10445.574 ±(99.9%) 301.494 B/op [Average]
[info]   (min, avg, max) = (10346.236, 10445.574, 10511.843), stdev = 78.297
[info]   CI (99.9%): [10144.080, 10747.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.561 ±(99.9%) 1158.563 MB/sec [Average]
[info]   (min, avg, max) = (1335.018, 1470.561, 2008.779), stdev = 300.875
[info]   CI (99.9%): [311.998, 2629.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9089.196 ±(99.9%) 7339.023 B/op [Average]
[info]   (min, avg, max) = (8198.673, 9089.196, 12496.866), stdev = 1905.921
[info]   CI (99.9%): [1750.173, 16428.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.852), stdev = 1.703
[info]   CI (99.9%): [≈ 0, 7.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.024 ±(99.9%) 40.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.024, 23.967), stdev = 10.593
[info]   CI (99.9%): [≈ 0, 45.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 3.033
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56.43% complete, ETA 00:58:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21319.868 ops/s
[info] # Warmup Iteration   2: 45489.832 ops/s
[info] # Warmup Iteration   3: 48735.280 ops/s
[info] # Warmup Iteration   4: 49694.175 ops/s
[info] # Warmup Iteration   5: 49024.665 ops/s
[info] Iteration   1: 49589.216 ops/s
[info]                  ·gc.alloc.rate:                   1237.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              39265.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42664.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 49691.174 ops/s
[info]                  ·gc.alloc.rate:                   1233.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              39052.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42596.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 49840.957 ops/s
[info]                  ·gc.alloc.rate:               1230.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          38840.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21245.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 49627.736 ops/s
[info]                  ·gc.alloc.rate:                   1228.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              38955.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42673.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 49753.003 ops/s
[info]                  ·gc.alloc.rate:                   1243.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              39332.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42519.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   49700.417 ±(99.9%) 386.267 ops/s [Average]
[info]   (min, avg, max) = (49589.216, 49700.417, 49840.957), stdev = 100.312
[info]   CI (99.9%): [49314.150, 50086.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1234.593 ±(99.9%) 23.168 MB/sec [Average]
[info]   (min, avg, max) = (1228.640, 1234.593, 1243.553), stdev = 6.017
[info]   CI (99.9%): [1211.426, 1257.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39089.453 ±(99.9%) 796.366 B/op [Average]
[info]   (min, avg, max) = (38840.883, 39089.453, 39332.790), stdev = 206.814
[info]   CI (99.9%): [38293.087, 39885.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210.553 ±(99.9%) 1157.512 MB/sec [Average]
[info]   (min, avg, max) = (672.821, 1210.553, 1345.888), stdev = 300.602
[info]   CI (99.9%): [53.041, 2368.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   38339.735 ±(99.9%) 36797.621 B/op [Average]
[info]   (min, avg, max) = (21245.396, 38339.735, 42673.131), stdev = 9556.225
[info]   CI (99.9%): [1542.113, 75137.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 2.540), stdev = 1.102
[info]   CI (99.9%): [≈ 0, 4.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   22.298 ±(99.9%) 134.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.298, 80.540), stdev = 34.927
[info]   CI (99.9%): [≈ 0, 156.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.63% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17799.300 ops/s
[info] # Warmup Iteration   2: 64698.479 ops/s
[info] # Warmup Iteration   3: 70128.052 ops/s
[info] # Warmup Iteration   4: 73073.697 ops/s
[info] # Warmup Iteration   5: 72890.038 ops/s
[info] Iteration   1: 73119.692 ops/s
[info]                  ·gc.alloc.rate:                   1601.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              34459.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28876.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 72715.966 ops/s
[info]                  ·gc.alloc.rate:                   1605.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              34733.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43596.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 73529.690 ops/s
[info]                  ·gc.alloc.rate:                   1619.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              34663.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28700.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72658.085 ops/s
[info]                  ·gc.alloc.rate:                   1613.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              34949.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28986.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 73057.609 ops/s
[info]                  ·gc.alloc.rate:                   1634.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              35212.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43190.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   73016.208 ±(99.9%) 1353.879 ops/s [Average]
[info]   (min, avg, max) = (72658.085, 73016.208, 73529.690), stdev = 351.598
[info]   CI (99.9%): [71662.330, 74370.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1614.932 ±(99.9%) 50.740 MB/sec [Average]
[info]   (min, avg, max) = (1601.253, 1614.932, 1634.748), stdev = 13.177
[info]   CI (99.9%): [1564.192, 1665.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34803.654 ±(99.9%) 1109.184 B/op [Average]
[info]   (min, avg, max) = (34459.054, 34803.654, 35212.517), stdev = 288.052
[info]   CI (99.9%): [33694.470, 35912.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.278 ±(99.9%) 1412.501 MB/sec [Average]
[info]   (min, avg, max) = (1338.318, 1608.278, 2015.065), stdev = 366.822
[info]   CI (99.9%): [195.777, 3020.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34670.320 ±(99.9%) 30671.086 B/op [Average]
[info]   (min, avg, max) = (28700.571, 34670.320, 43596.956), stdev = 7965.184
[info]   CI (99.9%): [3999.234, 65341.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.427 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.816, 3.290), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.628 ±(99.9%) 117.433 B/op [Average]
[info]   (min, avg, max) = (0.448, 17.628, 71.184), stdev = 30.497
[info]   CI (99.9%): [≈ 0, 135.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.83% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26409.951 ops/s
[info] # Warmup Iteration   2: 79412.876 ops/s
[info] # Warmup Iteration   3: 86426.158 ops/s
[info] # Warmup Iteration   4: 87549.075 ops/s
[info] # Warmup Iteration   5: 87969.518 ops/s
[info] Iteration   1: 87790.401 ops/s
[info]                  ·gc.alloc.rate:                   1154.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              20701.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23937.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 87862.420 ops/s
[info]                  ·gc.alloc.rate:                   1146.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              20535.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23935.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 88401.372 ops/s
[info]                  ·gc.alloc.rate:               1137.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          20245.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11901.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87611.330 ops/s
[info]                  ·gc.alloc.rate:                   1140.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              20493.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24028.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 87853.270 ops/s
[info]                  ·gc.alloc.rate:                   1142.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              20474.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23985.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   87903.759 ±(99.9%) 1139.430 ops/s [Average]
[info]   (min, avg, max) = (87611.330, 87903.759, 88401.372), stdev = 295.906
[info]   CI (99.9%): [86764.329, 89043.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1144.526 ±(99.9%) 25.733 MB/sec [Average]
[info]   (min, avg, max) = (1137.302, 1144.526, 1154.849), stdev = 6.683
[info]   CI (99.9%): [1118.794, 1170.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20490.105 ±(99.9%) 629.551 B/op [Average]
[info]   (min, avg, max) = (20245.390, 20490.105, 20701.467), stdev = 163.492
[info]   CI (99.9%): [19860.555, 21119.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.414 ±(99.9%) 1151.308 MB/sec [Average]
[info]   (min, avg, max) = (668.568, 1203.414, 1338.969), stdev = 298.991
[info]   CI (99.9%): [52.106, 2354.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21557.746 ±(99.9%) 20786.652 B/op [Average]
[info]   (min, avg, max) = (11901.351, 21557.746, 24028.994), stdev = 5398.228
[info]   CI (99.9%): [771.094, 42344.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.501 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.372), stdev = 1.948
[info]   CI (99.9%): [≈ 0, 8.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.886 ±(99.9%) 134.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.886, 78.311), stdev = 34.897
[info]   CI (99.9%): [≈ 0, 150.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.03% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47470.355 ops/s
[info] # Warmup Iteration   2: 89095.432 ops/s
[info] # Warmup Iteration   3: 88877.038 ops/s
[info] # Warmup Iteration   4: 87777.126 ops/s
[info] # Warmup Iteration   5: 88085.760 ops/s
[info] Iteration   1: 89129.057 ops/s
[info]                  ·gc.alloc.rate:                   1114.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              19675.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23701.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 89897.732 ops/s
[info]                  ·gc.alloc.rate:                   1117.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              19559.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23516.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 89036.747 ops/s
[info]                  ·gc.alloc.rate:               1084.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          19164.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11874.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 89099.857 ops/s
[info]                  ·gc.alloc.rate:                   1098.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              19399.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23744.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 89417.020 ops/s
[info]                  ·gc.alloc.rate:                   1088.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              19153.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11835.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   89316.083 ±(99.9%) 1372.614 ops/s [Average]
[info]   (min, avg, max) = (89036.747, 89316.083, 89897.732), stdev = 356.463
[info]   CI (99.9%): [87943.469, 90688.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1100.496 ±(99.9%) 57.466 MB/sec [Average]
[info]   (min, avg, max) = (1084.229, 1100.496, 1117.289), stdev = 14.924
[info]   CI (99.9%): [1043.031, 1157.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19390.529 ±(99.9%) 896.799 B/op [Average]
[info]   (min, avg, max) = (19153.999, 19390.529, 19675.435), stdev = 232.896
[info]   CI (99.9%): [18493.730, 20287.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.867 ±(99.9%) 1415.626 MB/sec [Average]
[info]   (min, avg, max) = (671.811, 1074.867, 1344.349), stdev = 367.634
[info]   CI (99.9%): [≈ 0, 2490.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18934.659 ±(99.9%) 24888.025 B/op [Average]
[info]   (min, avg, max) = (11835.698, 18934.659, 23744.629), stdev = 6463.341
[info]   CI (99.9%): [≈ 0, 43822.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 5.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.935), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 5.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.771 ±(99.9%) 88.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.771, 51.660), stdev = 22.861
[info]   CI (99.9%): [≈ 0, 98.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.23% complete, ETA 00:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6494.808 ops/s
[info] # Warmup Iteration   2: 39643.895 ops/s
[info] # Warmup Iteration   3: 43136.379 ops/s
[info] # Warmup Iteration   4: 42632.647 ops/s
[info] # Warmup Iteration   5: 44144.322 ops/s
[info] Iteration   1: 44229.291 ops/s
[info]                  ·gc.alloc.rate:                   2085.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              74194.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71439.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 43261.386 ops/s
[info]                  ·gc.alloc.rate:                   2040.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              74224.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72918.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 44606.664 ops/s
[info]                  ·gc.alloc.rate:                   2088.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              73663.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70506.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44164.627 ops/s
[info]                  ·gc.alloc.rate:                   2068.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              73707.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71234.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 44136.510 ops/s
[info]                  ·gc.alloc.rate:                   2080.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              74190.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71388.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44079.696 ±(99.9%) 1906.113 ops/s [Average]
[info]   (min, avg, max) = (43261.386, 44079.696, 44606.664), stdev = 495.012
[info]   CI (99.9%): [42173.582, 45985.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2072.659 ±(99.9%) 75.029 MB/sec [Average]
[info]   (min, avg, max) = (2040.446, 2072.659, 2088.008), stdev = 19.485
[info]   CI (99.9%): [1997.630, 2147.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73995.976 ±(99.9%) 1095.521 B/op [Average]
[info]   (min, avg, max) = (73663.144, 73995.976, 74224.261), stdev = 284.503
[info]   CI (99.9%): [72900.454, 75091.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.494 ±(99.9%) 14.894 MB/sec [Average]
[info]   (min, avg, max) = (1998.538, 2002.494, 2007.886), stdev = 3.868
[info]   CI (99.9%): [1987.600, 2017.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71497.311 ±(99.9%) 3381.282 B/op [Average]
[info]   (min, avg, max) = (70506.724, 71497.311, 72918.077), stdev = 878.108
[info]   CI (99.9%): [68116.029, 74878.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.958 ±(99.9%) 6.222 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.958, 3.789), stdev = 1.616
[info]   CI (99.9%): [≈ 0, 7.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.201 ±(99.9%) 221.329 B/op [Average]
[info]   (min, avg, max) = (1.469, 34.201, 134.808), stdev = 57.478
[info]   CI (99.9%): [≈ 0, 255.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57.43% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22790.392 ops/s
[info] # Warmup Iteration   2: 70492.753 ops/s
[info] # Warmup Iteration   3: 73406.971 ops/s
[info] # Warmup Iteration   4: 76886.457 ops/s
[info] # Warmup Iteration   5: 75338.120 ops/s
[info] Iteration   1: 77149.096 ops/s
[info]                  ·gc.alloc.rate:                   1389.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              28347.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27403.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 78448.145 ops/s
[info]                  ·gc.alloc.rate:                   1410.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              28285.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26961.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77220.097 ops/s
[info]                  ·gc.alloc.rate:                   1387.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              28284.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27398.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 76646.704 ops/s
[info]                  ·gc.alloc.rate:                   1390.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              28542.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27575.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 76702.620 ops/s
[info]                  ·gc.alloc.rate:                   1392.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              28559.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27500.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   77233.332 ±(99.9%) 2795.916 ops/s [Average]
[info]   (min, avg, max) = (76646.704, 77233.332, 78448.145), stdev = 726.090
[info]   CI (99.9%): [74437.417, 80029.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1394.084 ±(99.9%) 35.010 MB/sec [Average]
[info]   (min, avg, max) = (1387.945, 1394.084, 1410.102), stdev = 9.092
[info]   CI (99.9%): [1359.074, 1429.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28403.956 ±(99.9%) 526.885 B/op [Average]
[info]   (min, avg, max) = (28284.809, 28403.956, 28559.442), stdev = 136.830
[info]   CI (99.9%): [27877.071, 28930.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1343.194 ±(99.9%) 5.583 MB/sec [Average]
[info]   (min, avg, max) = (1340.773, 1343.194, 1344.462), stdev = 1.450
[info]   CI (99.9%): [1337.611, 1348.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27368.126 ±(99.9%) 919.426 B/op [Average]
[info]   (min, avg, max) = (26961.779, 27368.126, 27575.747), stdev = 238.772
[info]   CI (99.9%): [26448.700, 28287.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 5.281 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.185), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 6.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16.058 ±(99.9%) 107.616 B/op [Average]
[info]   (min, avg, max) = (0.418, 16.058, 64.916), stdev = 27.947
[info]   CI (99.9%): [≈ 0, 123.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.63% complete, ETA 00:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47741.469 ops/s
[info] # Warmup Iteration   2: 109655.147 ops/s
[info] # Warmup Iteration   3: 114532.554 ops/s
[info] # Warmup Iteration   4: 116063.871 ops/s
[info] # Warmup Iteration   5: 116705.909 ops/s
[info] Iteration   1: 114551.901 ops/s
[info]                  ·gc.alloc.rate:               1103.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          15153.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18400.004 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 114966.292 ops/s
[info]                  ·gc.alloc.rate:               1088.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          14899.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9169.318 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 115010.066 ops/s
[info]                  ·gc.alloc.rate:                   1102.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              15089.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18339.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 115633.692 ops/s
[info]                  ·gc.alloc.rate:                   1105.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              15049.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18250.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 116141.296 ops/s
[info]                  ·gc.alloc.rate:                   1110.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              15046.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9089.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   115260.649 ±(99.9%) 2409.702 ops/s [Average]
[info]   (min, avg, max) = (114551.901, 115260.649, 116141.296), stdev = 625.792
[info]   CI (99.9%): [112850.948, 117670.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1102.182 ±(99.9%) 31.809 MB/sec [Average]
[info]   (min, avg, max) = (1088.429, 1102.182, 1110.479), stdev = 8.261
[info]   CI (99.9%): [1070.373, 1133.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15047.702 ±(99.9%) 360.106 B/op [Average]
[info]   (min, avg, max) = (14899.173, 15047.702, 15153.373), stdev = 93.518
[info]   CI (99.9%): [14687.596, 15407.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1072.361 ±(99.9%) 1413.141 MB/sec [Average]
[info]   (min, avg, max) = (669.846, 1072.361, 1340.996), stdev = 366.988
[info]   CI (99.9%): [≈ 0, 2485.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14649.822 ±(99.9%) 19405.897 B/op [Average]
[info]   (min, avg, max) = (9089.795, 14649.822, 18400.004), stdev = 5039.650
[info]   CI (99.9%): [≈ 0, 34055.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.414), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.480 ±(99.9%) 79.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.480, 46.261), stdev = 20.564
[info]   CI (99.9%): [≈ 0, 88.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.83% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150045.229 ops/s
[info] # Warmup Iteration   2: 286068.265 ops/s
[info] # Warmup Iteration   3: 308317.453 ops/s
[info] # Warmup Iteration   4: 309963.656 ops/s
[info] # Warmup Iteration   5: 310994.488 ops/s
[info] Iteration   1: 310540.696 ops/s
[info]                  ·gc.alloc.rate:               473.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          2399.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2592.686 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 312734.868 ops/s
[info]                  ·gc.alloc.rate:               480.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          2415.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3355.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 309466.151 ops/s
[info]                  ·gc.alloc.rate:      459.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 307718.447 ops/s
[info]                  ·gc.alloc.rate:                   470.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              2405.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3410.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 309461.653 ops/s
[info]                  ·gc.alloc.rate:               483.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          2458.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3394.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   309984.363 ±(99.9%) 7087.415 ops/s [Average]
[info]   (min, avg, max) = (307718.447, 309984.363, 312734.868), stdev = 1840.579
[info]   CI (99.9%): [302896.948, 317071.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.348 ±(99.9%) 36.173 MB/sec [Average]
[info]   (min, avg, max) = (459.383, 473.348, 483.530), stdev = 9.394
[info]   CI (99.9%): [437.175, 509.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2402.931 ±(99.9%) 169.828 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2402.931, 2458.951), stdev = 44.104
[info]   CI (99.9%): [2233.104, 2572.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.589 ±(99.9%) 1112.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.589, 667.493), stdev = 288.912
[info]   CI (99.9%): [≈ 0, 1615.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2550.619 ±(99.9%) 5648.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2550.619, 3410.319), stdev = 1466.852
[info]   CI (99.9%): [≈ 0, 8198.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.03% complete, ETA 00:56:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407832.076 ops/s
[info] # Warmup Iteration   2: 702559.911 ops/s
[info] # Warmup Iteration   3: 728165.655 ops/s
[info] # Warmup Iteration   4: 736742.168 ops/s
[info] # Warmup Iteration   5: 721333.855 ops/s
[info] Iteration   1: 710323.470 ops/s
[info]                  ·gc.alloc.rate:                   919.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              2038.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2972.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 699949.698 ops/s
[info]                  ·gc.alloc.rate:               884.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          1989.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1509.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 702593.073 ops/s
[info]                  ·gc.alloc.rate:               897.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          2009.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1504.069 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 735761.160 ops/s
[info]                  ·gc.alloc.rate:                   927.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1983.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1436.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 704218.668 ops/s
[info]                  ·gc.alloc.rate:                   901.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              2015.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3003.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   710569.214 ±(99.9%) 56179.064 ops/s [Average]
[info]   (min, avg, max) = (699949.698, 710569.214, 735761.160), stdev = 14589.525
[info]   CI (99.9%): [654390.150, 766748.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   906.298 ±(99.9%) 66.352 MB/sec [Average]
[info]   (min, avg, max) = (884.992, 906.298, 927.424), stdev = 17.232
[info]   CI (99.9%): [839.945, 972.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2007.390 ±(99.9%) 83.648 B/op [Average]
[info]   (min, avg, max) = (1983.750, 2007.390, 2038.214), stdev = 21.723
[info]   CI (99.9%): [1923.742, 2091.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.089 ±(99.9%) 1415.691 MB/sec [Average]
[info]   (min, avg, max) = (671.486, 940.089, 1343.985), stdev = 367.651
[info]   CI (99.9%): [≈ 0, 2355.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2085.365 ±(99.9%) 3175.075 B/op [Average]
[info]   (min, avg, max) = (1436.948, 2085.365, 3003.430), stdev = 824.557
[info]   CI (99.9%): [≈ 0, 5260.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.047), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.23% complete, ETA 00:55:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485470.033 ops/s
[info] # Warmup Iteration   2: 745119.098 ops/s
[info] # Warmup Iteration   3: 762040.754 ops/s
[info] # Warmup Iteration   4: 762618.067 ops/s
[info] # Warmup Iteration   5: 757579.478 ops/s
[info] Iteration   1: 763850.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 760147.670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605675.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 608808.820 ops/s
[info]                  ·gc.alloc.rate:      0.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.090 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 748960.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   697488.442 ±(99.9%) 317958.686 ops/s [Average]
[info]   (min, avg, max) = (605675.371, 697488.442, 763850.066), stdev = 82572.861
[info]   CI (99.9%): [379529.756, 1015447.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.007 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.018 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:55:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91066.298 ops/s
[info] # Warmup Iteration   2: 223855.941 ops/s
[info] # Warmup Iteration   3: 232664.971 ops/s
[info] # Warmup Iteration   4: 228066.848 ops/s
[info] # Warmup Iteration   5: 233015.773 ops/s
[info] Iteration   1: 227467.721 ops/s
[info]                  ·gc.alloc.rate:               757.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          5242.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4618.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 234832.039 ops/s
[info]                  ·gc.alloc.rate:               778.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          5216.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4477.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 234855.698 ops/s
[info]                  ·gc.alloc.rate:                   777.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              5207.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4477.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 233498.029 ops/s
[info]                  ·gc.alloc.rate:                   789.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              5318.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9015.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 233392.940 ops/s
[info]                  ·gc.alloc.rate:               779.189 MB/sec
[info]                  ·gc.alloc.rate.norm:          5253.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4514.516 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   232809.285 ±(99.9%) 11810.037 ops/s [Average]
[info]   (min, avg, max) = (227467.721, 232809.285, 234855.698), stdev = 3067.029
[info]   CI (99.9%): [220999.249, 244619.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   776.395 ±(99.9%) 44.189 MB/sec [Average]
[info]   (min, avg, max) = (757.784, 776.395, 789.347), stdev = 11.476
[info]   CI (99.9%): [732.206, 820.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5248.091 ±(99.9%) 168.292 B/op [Average]
[info]   (min, avg, max) = (5207.937, 5248.091, 5318.747), stdev = 43.705
[info]   CI (99.9%): [5079.798, 5416.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.268 ±(99.9%) 1153.240 MB/sec [Average]
[info]   (min, avg, max) = (667.490, 802.268, 1338.015), stdev = 299.493
[info]   CI (99.9%): [≈ 0, 1955.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5420.680 ±(99.9%) 7741.863 B/op [Average]
[info]   (min, avg, max) = (4477.279, 5420.680, 9015.760), stdev = 2010.537
[info]   CI (99.9%): [≈ 0, 13162.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.281), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58.63% complete, ETA 00:55:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13908.203 ops/s
[info] # Warmup Iteration   2: 25525.482 ops/s
[info] # Warmup Iteration   3: 26263.381 ops/s
[info] # Warmup Iteration   4: 26426.517 ops/s
[info] # Warmup Iteration   5: 26009.207 ops/s
[info] Iteration   1: 26341.921 ops/s
[info]                  ·gc.alloc.rate:                   1004.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              59973.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40095.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26494.405 ops/s
[info]                  ·gc.alloc.rate:                   1025.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              60914.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79770.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 26531.403 ops/s
[info]                  ·gc.alloc.rate:                   1017.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              60346.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39849.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26471.160 ops/s
[info]                  ·gc.alloc.rate:               1029.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          61212.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79902.632 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 26499.879 ops/s
[info]                  ·gc.alloc.rate:               1003.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          59607.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39915.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   26467.753 ±(99.9%) 283.219 ops/s [Average]
[info]   (min, avg, max) = (26341.921, 26467.753, 26531.403), stdev = 73.551
[info]   CI (99.9%): [26184.535, 26750.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1016.141 ±(99.9%) 45.964 MB/sec [Average]
[info]   (min, avg, max) = (1003.779, 1016.141, 1029.675), stdev = 11.937
[info]   CI (99.9%): [970.177, 1062.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   60410.797 ±(99.9%) 2536.922 B/op [Average]
[info]   (min, avg, max) = (59607.900, 60410.797, 61212.546), stdev = 658.831
[info]   CI (99.9%): [57873.875, 62947.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   940.518 ±(99.9%) 1416.883 MB/sec [Average]
[info]   (min, avg, max) = (671.374, 940.518, 1344.066), stdev = 367.960
[info]   CI (99.9%): [≈ 0, 2357.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   55906.958 ±(99.9%) 84117.575 B/op [Average]
[info]   (min, avg, max) = (39849.602, 55906.958, 79902.632), stdev = 21845.067
[info]   CI (99.9%): [≈ 0, 140024.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.990 ±(99.9%) 3.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.990, 2.473), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.84% complete, ETA 00:55:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24864.229 ops/s
[info] # Warmup Iteration   2: 111049.839 ops/s
[info] # Warmup Iteration   3: 119893.616 ops/s
[info] # Warmup Iteration   4: 121279.876 ops/s
[info] # Warmup Iteration   5: 121664.518 ops/s
[info] Iteration   1: 120616.927 ops/s
[info]                  ·gc.alloc.rate:                   1679.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              21915.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17497.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 122758.581 ops/s
[info]                  ·gc.alloc.rate:                   1719.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              22039.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17204.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 124460.947 ops/s
[info]                  ·gc.alloc.rate:                   1755.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              22197.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25417.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 124277.559 ops/s
[info]                  ·gc.alloc.rate:                   1766.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              22357.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25399.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 124900.061 ops/s
[info]                  ·gc.alloc.rate:               1748.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          22030.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16846.179 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   123402.815 ±(99.9%) 6753.127 ops/s [Average]
[info]   (min, avg, max) = (120616.927, 123402.815, 124900.061), stdev = 1753.766
[info]   CI (99.9%): [116649.688, 130155.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1733.753 ±(99.9%) 134.362 MB/sec [Average]
[info]   (min, avg, max) = (1679.592, 1733.753, 1766.049), stdev = 34.893
[info]   CI (99.9%): [1599.391, 1868.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22108.110 ±(99.9%) 661.808 B/op [Average]
[info]   (min, avg, max) = (21915.010, 22108.110, 22357.638), stdev = 171.869
[info]   CI (99.9%): [21446.302, 22769.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.294 ±(99.9%) 1409.154 MB/sec [Average]
[info]   (min, avg, max) = (1337.054, 1607.294, 2009.974), stdev = 365.953
[info]   CI (99.9%): [198.140, 3016.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20473.108 ±(99.9%) 17372.530 B/op [Average]
[info]   (min, avg, max) = (16846.179, 20473.108, 25417.752), stdev = 4511.591
[info]   CI (99.9%): [3100.578, 37845.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.102), stdev = 1.327
[info]   CI (99.9%): [≈ 0, 5.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.008 ±(99.9%) 65.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.008, 39.765), stdev = 17.013
[info]   CI (99.9%): [≈ 0, 75.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.04% complete, ETA 00:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34968.612 ops/s
[info] # Warmup Iteration   2: 170229.329 ops/s
[info] # Warmup Iteration   3: 165909.516 ops/s
[info] # Warmup Iteration   4: 182810.114 ops/s
[info] # Warmup Iteration   5: 183945.808 ops/s
[info] Iteration   1: 184747.196 ops/s
[info]                  ·gc.alloc.rate:                   1116.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              9510.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5686.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 180830.621 ops/s
[info]                  ·gc.alloc.rate:               1105.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          9623.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11630.488 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 180865.087 ops/s
[info]                  ·gc.alloc.rate:               1127.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          9809.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11639.895 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 184669.958 ops/s
[info]                  ·gc.alloc.rate:                   1120.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              9549.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5702.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 184193.324 ops/s
[info]                  ·gc.alloc.rate:                   1119.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              9563.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11441.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   183061.237 ±(99.9%) 7823.250 ops/s [Average]
[info]   (min, avg, max) = (180830.621, 183061.237, 184747.196), stdev = 2031.673
[info]   CI (99.9%): [175237.987, 190884.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1117.957 ±(99.9%) 30.357 MB/sec [Average]
[info]   (min, avg, max) = (1105.832, 1117.957, 1127.453), stdev = 7.884
[info]   CI (99.9%): [1087.600, 1148.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9611.063 ±(99.9%) 454.320 B/op [Average]
[info]   (min, avg, max) = (9510.071, 9611.063, 9809.212), stdev = 117.985
[info]   CI (99.9%): [9156.743, 10065.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.067 ±(99.9%) 1411.894 MB/sec [Average]
[info]   (min, avg, max) = (667.571, 1070.067, 1339.154), stdev = 366.664
[info]   CI (99.9%): [≈ 0, 2481.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9220.137 ±(99.9%) 12396.578 B/op [Average]
[info]   (min, avg, max) = (5686.322, 9220.137, 11639.895), stdev = 3219.352
[info]   CI (99.9%): [≈ 0, 21616.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.789), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.581 ±(99.9%) 55.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.581, 32.374), stdev = 14.419
[info]   CI (99.9%): [≈ 0, 62.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.24% complete, ETA 00:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176697.879 ops/s
[info] # Warmup Iteration   2: 496647.814 ops/s
[info] # Warmup Iteration   3: 518245.779 ops/s
[info] # Warmup Iteration   4: 519792.738 ops/s
[info] # Warmup Iteration   5: 518080.710 ops/s
[info] Iteration   1: 517354.119 ops/s
[info]                  ·gc.alloc.rate:               346.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          1054.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1556.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 479949.105 ops/s
[info]                  ·gc.alloc.rate:      312.412 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 506224.761 ops/s
[info]                  ·gc.alloc.rate:               345.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          1072.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1590.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 519636.578 ops/s
[info]                  ·gc.alloc.rate:      338.343 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.463 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 517027.732 ops/s
[info]                  ·gc.alloc.rate:                   350.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2040.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   508038.459 ±(99.9%) 63693.138 ops/s [Average]
[info]   (min, avg, max) = (479949.105, 508038.459, 519636.578), stdev = 16540.906
[info]   CI (99.9%): [444345.321, 571731.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   338.684 ±(99.9%) 59.152 MB/sec [Average]
[info]   (min, avg, max) = (312.412, 338.684, 350.829), stdev = 15.362
[info]   CI (99.9%): [279.532, 397.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.714 ±(99.9%) 89.864 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1048.714, 1072.799), stdev = 23.337
[info]   CI (99.9%): [958.850, 1138.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.780 ±(99.9%) 1216.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.780, 670.485), stdev = 315.982
[info]   CI (99.9%): [≈ 0, 1555.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1037.538 ±(99.9%) 3720.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1037.538, 2040.848), stdev = 966.246
[info]   CI (99.9%): [≈ 0, 4758.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.44% complete, ETA 00:54:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2287.008 ops/s
[info] # Warmup Iteration   2: 48733.120 ops/s
[info] # Warmup Iteration   3: 66392.300 ops/s
[info] # Warmup Iteration   4: 65047.452 ops/s
[info] # Warmup Iteration   5: 67207.179 ops/s
[info] Iteration   1: 68452.761 ops/s
[info]                  ·gc.alloc.rate:                   2757.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              63383.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61700.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.868 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 69433.373 ops/s
[info]                  ·gc.alloc.rate:                   2766.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              62699.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60978.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68729.350 ops/s
[info]                  ·gc.alloc.rate:                   2767.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              63359.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61746.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 69450.665 ops/s
[info]                  ·gc.alloc.rate:               2808.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          63634.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61227.189 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 69166.287 ops/s
[info]                  ·gc.alloc.rate:               2798.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          63660.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61596.243 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   69046.487 ±(99.9%) 1700.920 ops/s [Average]
[info]   (min, avg, max) = (68452.761, 69046.487, 69450.665), stdev = 441.723
[info]   CI (99.9%): [67345.567, 70747.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2779.611 ±(99.9%) 85.555 MB/sec [Average]
[info]   (min, avg, max) = (2757.825, 2779.611, 2808.219), stdev = 22.218
[info]   CI (99.9%): [2694.056, 2865.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63347.383 ±(99.9%) 1494.031 B/op [Average]
[info]   (min, avg, max) = (62699.164, 63347.383, 63660.956), stdev = 387.995
[info]   CI (99.9%): [61853.352, 64841.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2696.303 ±(99.9%) 35.126 MB/sec [Average]
[info]   (min, avg, max) = (2684.611, 2696.303, 2707.641), stdev = 9.122
[info]   CI (99.9%): [2661.178, 2731.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61449.891 ±(99.9%) 1282.617 B/op [Average]
[info]   (min, avg, max) = (60978.820, 61449.891, 61746.442), stdev = 333.092
[info]   CI (99.9%): [60167.274, 62732.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.223 ±(99.9%) 1.403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 0.864), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 1.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.113 ±(99.9%) 32.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.113, 19.868), stdev = 8.378
[info]   CI (99.9%): [≈ 0, 37.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59.64% complete, ETA 00:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49831.809 ops/s
[info] # Warmup Iteration   2: 187062.020 ops/s
[info] # Warmup Iteration   3: 196220.410 ops/s
[info] # Warmup Iteration   4: 202409.819 ops/s
[info] # Warmup Iteration   5: 202472.767 ops/s
[info] Iteration   1: 201666.762 ops/s
[info]                  ·gc.alloc.rate:                   1183.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              9237.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10482.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 201537.855 ops/s
[info]                  ·gc.alloc.rate:                   1176.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              9186.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10494.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 201770.611 ops/s
[info]                  ·gc.alloc.rate:                   1172.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              9143.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10485.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 196335.964 ops/s
[info]                  ·gc.alloc.rate:               1127.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          9038.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5387.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 195090.259 ops/s
[info]                  ·gc.alloc.rate:                   1159.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              9355.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10855.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   199280.290 ±(99.9%) 12657.284 ops/s [Average]
[info]   (min, avg, max) = (195090.259, 199280.290, 201770.611), stdev = 3287.057
[info]   CI (99.9%): [186623.006, 211937.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1163.984 ±(99.9%) 85.258 MB/sec [Average]
[info]   (min, avg, max) = (1127.573, 1163.984, 1183.796), stdev = 22.141
[info]   CI (99.9%): [1078.726, 1249.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9192.372 ±(99.9%) 451.153 B/op [Average]
[info]   (min, avg, max) = (9038.340, 9192.372, 9355.729), stdev = 117.163
[info]   CI (99.9%): [8741.219, 9643.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1209.891 ±(99.9%) 1157.594 MB/sec [Average]
[info]   (min, avg, max) = (672.121, 1209.891, 1345.693), stdev = 300.623
[info]   CI (99.9%): [52.297, 2367.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9541.095 ±(99.9%) 8961.850 B/op [Average]
[info]   (min, avg, max) = (5387.554, 9541.095, 10855.436), stdev = 2327.364
[info]   CI (99.9%): [579.245, 18502.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.456), stdev = 1.532
[info]   CI (99.9%): [≈ 0, 6.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5.770 ±(99.9%) 47.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.770, 27.878), stdev = 12.360
[info]   CI (99.9%): [≈ 0, 53.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.84% complete, ETA 00:53:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36052.158 ops/s
[info] # Warmup Iteration   2: 164692.521 ops/s
[info] # Warmup Iteration   3: 175248.321 ops/s
[info] # Warmup Iteration   4: 181385.906 ops/s
[info] # Warmup Iteration   5: 180097.119 ops/s
[info] Iteration   1: 182230.112 ops/s
[info]                  ·gc.alloc.rate:                   1192.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              10300.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11517.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 182867.004 ops/s
[info]                  ·gc.alloc.rate:               1174.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          10108.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5732.900 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 182131.928 ops/s
[info]                  ·gc.alloc.rate:                   1183.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              10225.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11517.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 180543.169 ops/s
[info]                  ·gc.alloc.rate:               1172.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          10220.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11630.586 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 180127.945 ops/s
[info]                  ·gc.alloc.rate:                   1179.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              10302.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11672.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   181580.031 ±(99.9%) 4542.752 ops/s [Average]
[info]   (min, avg, max) = (180127.945, 181580.031, 182867.004), stdev = 1179.738
[info]   CI (99.9%): [177037.280, 186122.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1180.528 ±(99.9%) 30.769 MB/sec [Average]
[info]   (min, avg, max) = (1172.570, 1180.528, 1192.736), stdev = 7.991
[info]   CI (99.9%): [1149.759, 1211.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10231.397 ±(99.9%) 304.612 B/op [Average]
[info]   (min, avg, max) = (10108.418, 10231.397, 10302.094), stdev = 79.107
[info]   CI (99.9%): [9926.785, 10536.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1200.643 ±(99.9%) 1150.275 MB/sec [Average]
[info]   (min, avg, max) = (666.275, 1200.643, 1335.967), stdev = 298.723
[info]   CI (99.9%): [50.368, 2350.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10414.236 ±(99.9%) 10080.381 B/op [Average]
[info]   (min, avg, max) = (5732.900, 10414.236, 11672.314), stdev = 2617.843
[info]   CI (99.9%): [333.856, 20494.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.144 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.360), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.04% complete, ETA 00:53:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261987.192 ops/s
[info] # Warmup Iteration   2: 508614.352 ops/s
[info] # Warmup Iteration   3: 545282.128 ops/s
[info] # Warmup Iteration   4: 545606.926 ops/s
[info] # Warmup Iteration   5: 545643.290 ops/s
[info] Iteration   1: 548468.175 ops/s
[info]                  ·gc.alloc.rate:                   563.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1617.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1911.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 541090.113 ops/s
[info]                  ·gc.alloc.rate:      533.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 538926.073 ops/s
[info]                  ·gc.alloc.rate:               547.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          1599.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1945.273 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 545147.668 ops/s
[info]                  ·gc.alloc.rate:                   561.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              1621.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1925.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 550385.560 ops/s
[info]                  ·gc.alloc.rate:               562.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1907.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   544803.518 ±(99.9%) 18571.233 ops/s [Average]
[info]   (min, avg, max) = (538926.073, 544803.518, 550385.560), stdev = 4822.890
[info]   CI (99.9%): [526232.285, 563374.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   553.950 ±(99.9%) 50.191 MB/sec [Average]
[info]   (min, avg, max) = (533.761, 553.950, 563.815), stdev = 13.034
[info]   CI (99.9%): [503.759, 604.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1599.887 ±(99.9%) 108.365 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1599.887, 1621.696), stdev = 28.142
[info]   CI (99.9%): [1491.523, 1708.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.366 ±(99.9%) 1148.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.366, 667.193), stdev = 298.161
[info]   CI (99.9%): [≈ 0, 1681.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1538.079 ±(99.9%) 3311.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1538.079, 1945.273), stdev = 859.939
[info]   CI (99.9%): [≈ 0, 4849.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:53:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588039.281 ops/s
[info] # Warmup Iteration   2: 1076770.012 ops/s
[info] # Warmup Iteration   3: 1113969.687 ops/s
[info] # Warmup Iteration   4: 1144194.927 ops/s
[info] # Warmup Iteration   5: 1146120.845 ops/s
[info] Iteration   1: 1158193.475 ops/s
[info]                  ·gc.alloc.rate:               883.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          1199.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 912.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1154339.602 ops/s
[info]                  ·gc.alloc.rate:               875.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          1193.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 915.442 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1160484.094 ops/s
[info]                  ·gc.alloc.rate:                   893.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              1211.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1822.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1158890.864 ops/s
[info]                  ·gc.alloc.rate:                   874.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1187.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     912.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1146374.274 ops/s
[info]                  ·gc.alloc.rate:               865.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          1187.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 922.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1155656.462 ±(99.9%) 21790.780 ops/s [Average]
[info]   (min, avg, max) = (1146374.274, 1155656.462, 1160484.094), stdev = 5658.996
[info]   CI (99.9%): [1133865.682, 1177447.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   878.338 ±(99.9%) 40.870 MB/sec [Average]
[info]   (min, avg, max) = (865.249, 878.338, 893.581), stdev = 10.614
[info]   CI (99.9%): [837.468, 919.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1196.010 ±(99.9%) 39.027 B/op [Average]
[info]   (min, avg, max) = (1187.343, 1196.010, 1211.807), stdev = 10.135
[info]   CI (99.9%): [1156.983, 1235.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.219 ±(99.9%) 1156.931 MB/sec [Average]
[info]   (min, avg, max) = (671.502, 806.219, 1343.682), stdev = 300.451
[info]   CI (99.9%): [≈ 0, 1963.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1097.098 ±(99.9%) 1560.918 B/op [Average]
[info]   (min, avg, max) = (912.335, 1097.098, 1822.200), stdev = 405.365
[info]   CI (99.9%): [≈ 0, 2658.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.44% complete, ETA 00:52:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 804960.884 ops/s
[info] # Warmup Iteration   2: 1201813.552 ops/s
[info] # Warmup Iteration   3: 1282451.468 ops/s
[info] # Warmup Iteration   4: 1276974.106 ops/s
[info] # Warmup Iteration   5: 1281183.151 ops/s
[info] Iteration   1: 1282672.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1285221.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1283360.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1284207.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1282855.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1283663.521 ±(99.9%) 4061.027 ops/s [Average]
[info]   (min, avg, max) = (1282672.287, 1283663.521, 1285221.363), stdev = 1054.636
[info]   CI (99.9%): [1279602.494, 1287724.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.64% complete, ETA 00:52:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104410.509 ops/s
[info] # Warmup Iteration   2: 342554.272 ops/s
[info] # Warmup Iteration   3: 362646.856 ops/s
[info] # Warmup Iteration   4: 351029.944 ops/s
[info] # Warmup Iteration   5: 361222.314 ops/s
[info] Iteration   1: 361614.964 ops/s
[info]                  ·gc.alloc.rate:               1027.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          4471.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5804.033 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 363350.441 ops/s
[info]                  ·gc.alloc.rate:               1005.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          4356.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2891.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 351631.828 ops/s
[info]                  ·gc.alloc.rate:                   997.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              4464.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5977.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 351584.667 ops/s
[info]                  ·gc.alloc.rate:               970.611 MB/sec
[info]                  ·gc.alloc.rate.norm:          4344.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2990.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 348445.501 ops/s
[info]                  ·gc.alloc.rate:                   988.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              4463.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6041.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   355325.480 ±(99.9%) 25753.904 ops/s [Average]
[info]   (min, avg, max) = (348445.501, 355325.480, 363350.441), stdev = 6688.207
[info]   CI (99.9%): [329571.576, 381079.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   997.938 ±(99.9%) 81.199 MB/sec [Average]
[info]   (min, avg, max) = (970.611, 997.938, 1027.532), stdev = 21.087
[info]   CI (99.9%): [916.739, 1079.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4420.138 ±(99.9%) 245.622 B/op [Average]
[info]   (min, avg, max) = (4344.585, 4420.138, 4471.783), stdev = 63.787
[info]   CI (99.9%): [4174.515, 4665.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.524 ±(99.9%) 1408.522 MB/sec [Average]
[info]   (min, avg, max) = (667.487, 1068.524, 1337.643), stdev = 365.789
[info]   CI (99.9%): [≈ 0, 2477.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4741.072 ±(99.9%) 6337.972 B/op [Average]
[info]   (min, avg, max) = (2891.111, 4741.072, 6041.446), stdev = 1645.951
[info]   CI (99.9%): [≈ 0, 11079.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60.84% complete, ETA 00:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18535.083 ops/s
[info] # Warmup Iteration   2: 39102.354 ops/s
[info] # Warmup Iteration   3: 39809.159 ops/s
[info] # Warmup Iteration   4: 39508.389 ops/s
[info] # Warmup Iteration   5: 40464.129 ops/s
[info] Iteration   1: 40677.768 ops/s
[info]                  ·gc.alloc.rate:               1013.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          39217.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25978.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 40204.278 ops/s
[info]                  ·gc.alloc.rate:                   1026.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              40180.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52620.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 40531.999 ops/s
[info]                  ·gc.alloc.rate:               1008.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          39148.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26109.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 39149.647 ops/s
[info]                  ·gc.alloc.rate:                   984.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              39582.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54079.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 40565.999 ops/s
[info]                  ·gc.alloc.rate:               1004.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          38976.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26102.624 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   40225.938 ±(99.9%) 2414.216 ops/s [Average]
[info]   (min, avg, max) = (39149.647, 40225.938, 40677.768), stdev = 626.964
[info]   CI (99.9%): [37811.722, 42640.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1007.608 ±(99.9%) 58.456 MB/sec [Average]
[info]   (min, avg, max) = (984.819, 1007.608, 1026.503), stdev = 15.181
[info]   CI (99.9%): [949.151, 1066.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39421.237 ±(99.9%) 1842.524 B/op [Average]
[info]   (min, avg, max) = (38976.776, 39421.237, 40180.416), stdev = 478.498
[info]   CI (99.9%): [37578.713, 41263.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.328 ±(99.9%) 1418.641 MB/sec [Average]
[info]   (min, avg, max) = (671.476, 941.328, 1345.501), stdev = 368.416
[info]   CI (99.9%): [≈ 0, 2359.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   36978.205 ±(99.9%) 57584.089 B/op [Average]
[info]   (min, avg, max) = (25978.583, 36978.205, 54079.711), stdev = 14954.405
[info]   CI (99.9%): [≈ 0, 94562.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.000 ±(99.9%) 6.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.000, 4.184), stdev = 1.815
[info]   CI (99.9%): [≈ 0, 7.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.04% complete, ETA 00:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186.702 ops/s
[info] # Warmup Iteration   2: 454.308 ops/s
[info] # Warmup Iteration   3: 573.831 ops/s
[info] # Warmup Iteration   4: 570.588 ops/s
[info] # Warmup Iteration   5: 570.548 ops/s
[info] Iteration   1: 573.095 ops/s
[info]                  ·gc.alloc.rate:                   1211.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              3324602.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1835921.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 570.216 ops/s
[info]                  ·gc.alloc.rate:                   1215.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353185.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3691134.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 574.060 ops/s
[info]                  ·gc.alloc.rate:               1221.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          3346431.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3665456.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 589.128 ops/s
[info]                  ·gc.alloc.rate:                   1250.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              3339257.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3572267.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12496.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 584.858 ops/s
[info]                  ·gc.alloc.rate:                   1253.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              3371488.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3589493.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2404.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   578.271 ±(99.9%) 31.675 ops/s [Average]
[info]   (min, avg, max) = (570.216, 578.271, 589.128), stdev = 8.226
[info]   CI (99.9%): [546.596, 609.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1230.438 ±(99.9%) 77.567 MB/sec [Average]
[info]   (min, avg, max) = (1211.218, 1230.438, 1253.651), stdev = 20.144
[info]   CI (99.9%): [1152.870, 1308.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3346993.165 ±(99.9%) 66690.542 B/op [Average]
[info]   (min, avg, max) = (3324602.829, 3346993.165, 3371488.177), stdev = 17319.322
[info]   CI (99.9%): [3280302.623, 3413683.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.417 ±(99.9%) 1150.682 MB/sec [Average]
[info]   (min, avg, max) = (668.862, 1203.417, 1337.978), stdev = 298.829
[info]   CI (99.9%): [52.735, 2354.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3270854.828 ±(99.9%) 3094777.751 B/op [Average]
[info]   (min, avg, max) = (1835921.394, 3270854.828, 3691134.431), stdev = 803703.954
[info]   CI (99.9%): [176077.077, 6365632.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.131 ±(99.9%) 7.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.131, 4.680), stdev = 2.019
[info]   CI (99.9%): [≈ 0, 8.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3025.999 ±(99.9%) 20753.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3025.999, 12496.271), stdev = 5389.523
[info]   CI (99.9%): [≈ 0, 23779.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.24% complete, ETA 00:51:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109.856 ops/s
[info] # Warmup Iteration   2: 537.769 ops/s
[info] # Warmup Iteration   3: 590.518 ops/s
[info] # Warmup Iteration   4: 597.136 ops/s
[info] # Warmup Iteration   5: 597.297 ops/s
[info] Iteration   1: 591.375 ops/s
[info]                  ·gc.alloc.rate:               1268.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          3373596.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3538944.000 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 593.325 ops/s
[info]                  ·gc.alloc.rate:                   1255.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              3327934.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3528793.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 597.654 ops/s
[info]                  ·gc.alloc.rate:               1247.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          3284489.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1754348.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 596.357 ops/s
[info]                  ·gc.alloc.rate:                   1271.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              3353136.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3515452.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14600.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 574.282 ops/s
[info]                  ·gc.alloc.rate:                   1245.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              3412391.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3643573.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1196.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   590.599 ±(99.9%) 36.388 ops/s [Average]
[info]   (min, avg, max) = (574.282, 590.599, 597.654), stdev = 9.450
[info]   CI (99.9%): [554.210, 626.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1257.580 ±(99.9%) 44.541 MB/sec [Average]
[info]   (min, avg, max) = (1245.685, 1257.580, 1271.041), stdev = 11.567
[info]   CI (99.9%): [1213.039, 1302.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3350309.505 ±(99.9%) 185044.123 B/op [Average]
[info]   (min, avg, max) = (3284489.659, 3350309.505, 3412391.040), stdev = 48055.371
[info]   CI (99.9%): [3165265.383, 3535353.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.099 ±(99.9%) 1144.498 MB/sec [Average]
[info]   (min, avg, max) = (666.415, 1198.099, 1332.569), stdev = 297.222
[info]   CI (99.9%): [53.602, 2342.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3196222.327 ±(99.9%) 3109912.515 B/op [Average]
[info]   (min, avg, max) = (1754348.308, 3196222.327, 3643573.649), stdev = 807634.404
[info]   CI (99.9%): [86309.811, 6306134.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.203 ±(99.9%) 9.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.203, 5.534), stdev = 2.429
[info]   CI (99.9%): [≈ 0, 10.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3181.444 ±(99.9%) 24656.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3181.444, 14600.147), stdev = 6403.139
[info]   CI (99.9%): [≈ 0, 27837.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.45% complete, ETA 00:51:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20032.539 ops/s
[info] # Warmup Iteration   2: 40859.043 ops/s
[info] # Warmup Iteration   3: 42070.824 ops/s
[info] # Warmup Iteration   4: 40533.880 ops/s
[info] # Warmup Iteration   5: 42243.899 ops/s
[info] Iteration   1: 42089.746 ops/s
[info]                  ·gc.alloc.rate:               704.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          26348.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25056.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 41283.483 ops/s
[info]                  ·gc.alloc.rate:                   707.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              26974.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25547.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41480.981 ops/s
[info]                  ·gc.alloc.rate:               701.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          26624.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25424.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 42361.422 ops/s
[info]                  ·gc.alloc.rate:               711.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          26444.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24897.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 41878.121 ops/s
[info]                  ·gc.alloc.rate:               702.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          26382.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25183.648 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   41818.751 ±(99.9%) 1691.717 ops/s [Average]
[info]   (min, avg, max) = (41283.483, 41818.751, 42361.422), stdev = 439.333
[info]   CI (99.9%): [40127.034, 43510.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.589 ±(99.9%) 16.213 MB/sec [Average]
[info]   (min, avg, max) = (701.792, 705.589, 711.822), stdev = 4.210
[info]   CI (99.9%): [689.376, 721.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26554.822 ±(99.9%) 993.239 B/op [Average]
[info]   (min, avg, max) = (26348.145, 26554.822, 26974.969), stdev = 257.941
[info]   CI (99.9%): [25561.583, 27548.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.154 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (670.129, 670.154, 670.175), stdev = 0.017
[info]   CI (99.9%): [670.088, 670.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25221.758 ±(99.9%) 1020.254 B/op [Average]
[info]   (min, avg, max) = (24897.153, 25221.758, 25547.152), stdev = 264.957
[info]   CI (99.9%): [24201.503, 26242.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.159 ±(99.9%) 1.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.794), stdev = 0.355
[info]   CI (99.9%): [≈ 0, 1.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:51:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168.630 ops/s
[info] # Warmup Iteration   2: 469.355 ops/s
[info] # Warmup Iteration   3: 567.737 ops/s
[info] # Warmup Iteration   4: 575.431 ops/s
[info] # Warmup Iteration   5: 578.692 ops/s
[info] Iteration   1: 577.430 ops/s
[info]                  ·gc.alloc.rate:               1268.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          3455458.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3628290.657 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 565.232 ops/s
[info]                  ·gc.alloc.rate:               1235.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          3437423.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3708920.763 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 563.486 ops/s
[info]                  ·gc.alloc.rate:                   1213.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              3387465.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1861036.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 570.661 ops/s
[info]                  ·gc.alloc.rate:                   1254.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              3460297.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3677361.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14461.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 556.108 ops/s
[info]                  ·gc.alloc.rate:                   1230.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              3479549.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3762260.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3176.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   566.583 ±(99.9%) 30.771 ops/s [Average]
[info]   (min, avg, max) = (556.108, 566.583, 577.430), stdev = 7.991
[info]   CI (99.9%): [535.812, 597.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1240.319 ±(99.9%) 83.040 MB/sec [Average]
[info]   (min, avg, max) = (1213.131, 1240.319, 1268.202), stdev = 21.565
[info]   CI (99.9%): [1157.278, 1323.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3444038.906 ±(99.9%) 134772.930 B/op [Average]
[info]   (min, avg, max) = (3387465.773, 3444038.906, 3479549.429), stdev = 35000.102
[info]   CI (99.9%): [3309265.975, 3578811.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1198.921 ±(99.9%) 1146.128 MB/sec [Average]
[info]   (min, avg, max) = (666.481, 1198.921, 1333.663), stdev = 297.646
[info]   CI (99.9%): [52.792, 2345.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3327574.002 ±(99.9%) 3162391.518 B/op [Average]
[info]   (min, avg, max) = (1861036.482, 3327574.002, 3762260.567), stdev = 821263.035
[info]   CI (99.9%): [165182.484, 6489965.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.278 ±(99.9%) 8.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 5.245), stdev = 2.270
[info]   CI (99.9%): [≈ 0, 10.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3539.285 ±(99.9%) 24093.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3539.285, 14461.534), stdev = 6256.969
[info]   CI (99.9%): [≈ 0, 27632.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 11.000), stdev = 3.362
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61.85% complete, ETA 00:51:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181.597 ops/s
[info] # Warmup Iteration   2: 534.269 ops/s
[info] # Warmup Iteration   3: 585.844 ops/s
[info] # Warmup Iteration   4: 590.814 ops/s
[info] # Warmup Iteration   5: 591.905 ops/s
[info] Iteration   1: 585.438 ops/s
[info]                  ·gc.alloc.rate:                   1250.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              3359836.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3600230.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 580.921 ops/s
[info]                  ·gc.alloc.rate:                   1233.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              3340476.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3624974.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 566.607 ops/s
[info]                  ·gc.alloc.rate:                   1198.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              3328449.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1860436.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 573.890 ops/s
[info]                  ·gc.alloc.rate:                   1216.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              3332924.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3669104.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13449.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 567.234 ops/s
[info]                  ·gc.alloc.rate:                   1213.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              3364961.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3705091.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1673.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   574.818 ±(99.9%) 31.977 ops/s [Average]
[info]   (min, avg, max) = (566.607, 574.818, 585.438), stdev = 8.304
[info]   CI (99.9%): [542.841, 606.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1222.466 ±(99.9%) 76.668 MB/sec [Average]
[info]   (min, avg, max) = (1198.750, 1222.466, 1250.212), stdev = 19.910
[info]   CI (99.9%): [1145.798, 1299.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3345329.559 ±(99.9%) 62632.021 B/op [Average]
[info]   (min, avg, max) = (3328449.354, 3345329.559, 3364961.225), stdev = 16265.337
[info]   CI (99.9%): [3282697.538, 3407961.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1204.695 ±(99.9%) 1150.895 MB/sec [Average]
[info]   (min, avg, max) = (670.041, 1204.695, 1339.663), stdev = 298.884
[info]   CI (99.9%): [53.800, 2355.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3291967.306 ±(99.9%) 3085387.230 B/op [Average]
[info]   (min, avg, max) = (1860436.430, 3291967.306, 3705091.606), stdev = 801265.266
[info]   CI (99.9%): [206580.076, 6377354.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1.119 ±(99.9%) 8.212 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.119, 4.908), stdev = 2.133
[info]   CI (99.9%): [≈ 0, 9.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3069.614 ±(99.9%) 22501.104 B/op [Average]
[info]   (min, avg, max) = (56.302, 3069.614, 13449.127), stdev = 5843.465
[info]   CI (99.9%): [≈ 0, 25570.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62.05% complete, ETA 00:50:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5962.571 ops/s
[info] # Warmup Iteration   2: 13493.435 ops/s
[info] # Warmup Iteration   3: 14761.558 ops/s
[info] # Warmup Iteration   4: 14519.862 ops/s
[info] # Warmup Iteration   5: 14499.741 ops/s
[info] Iteration   1: 14591.719 ops/s
[info]                  ·gc.alloc.rate:                   1152.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              124260.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71911.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14807.803 ops/s
[info]                  ·gc.alloc.rate:                   1186.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              126151.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141806.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14321.405 ops/s
[info]                  ·gc.alloc.rate:               1174.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          129040.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146727.441 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 14571.342 ops/s
[info]                  ·gc.alloc.rate:               1161.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          125373.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72123.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 14509.311 ops/s
[info]                  ·gc.alloc.rate:                   1173.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              127277.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144945.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 605.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14560.316 ±(99.9%) 672.590 ops/s [Average]
[info]   (min, avg, max) = (14321.405, 14560.316, 14807.803), stdev = 174.670
[info]   CI (99.9%): [13887.726, 15232.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1169.721 ±(99.9%) 51.071 MB/sec [Average]
[info]   (min, avg, max) = (1152.551, 1169.721, 1186.994), stdev = 13.263
[info]   CI (99.9%): [1118.650, 1220.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126420.631 ±(99.9%) 7055.815 B/op [Average]
[info]   (min, avg, max) = (124260.425, 126420.631, 129040.005), stdev = 1832.373
[info]   CI (99.9%): [119364.816, 133476.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1068.215 ±(99.9%) 1408.660 MB/sec [Average]
[info]   (min, avg, max) = (667.002, 1068.215, 1336.667), stdev = 365.825
[info]   CI (99.9%): [≈ 0, 2476.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115502.857 ±(99.9%) 153007.664 B/op [Average]
[info]   (min, avg, max) = (71911.796, 115502.857, 146727.441), stdev = 39735.604
[info]   CI (99.9%): [≈ 0, 268510.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.129 ±(99.9%) 9.583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.129, 5.581), stdev = 2.489
[info]   CI (99.9%): [≈ 0, 10.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   122.362 ±(99.9%) 1039.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.362, 605.142), stdev = 269.888
[info]   CI (99.9%): [≈ 0, 1161.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.25% complete, ETA 00:50:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6577.429 ops/s
[info] # Warmup Iteration   2: 15864.718 ops/s
[info] # Warmup Iteration   3: 17246.360 ops/s
[info] # Warmup Iteration   4: 17600.550 ops/s
[info] # Warmup Iteration   5: 17207.880 ops/s
[info] Iteration   1: 17311.281 ops/s
[info]                  ·gc.alloc.rate:               1042.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          94799.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60555.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 17240.507 ops/s
[info]                  ·gc.alloc.rate:                   1066.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              97314.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121670.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 17347.372 ops/s
[info]                  ·gc.alloc.rate:               1041.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          94495.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60490.121 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 17168.629 ops/s
[info]                  ·gc.alloc.rate:                   1047.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              95977.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122302.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17292.729 ops/s
[info]                  ·gc.alloc.rate:                   1060.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              96542.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121523.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17272.104 ±(99.9%) 267.689 ops/s [Average]
[info]   (min, avg, max) = (17168.629, 17272.104, 17347.372), stdev = 69.518
[info]   CI (99.9%): [17004.415, 17539.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1051.740 ±(99.9%) 42.916 MB/sec [Average]
[info]   (min, avg, max) = (1041.661, 1051.740, 1066.282), stdev = 11.145
[info]   CI (99.9%): [1008.824, 1094.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   95826.030 ±(99.9%) 4547.038 B/op [Average]
[info]   (min, avg, max) = (94495.497, 95826.030, 97314.695), stdev = 1180.851
[info]   CI (99.9%): [91278.991, 100373.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.136 ±(99.9%) 1408.377 MB/sec [Average]
[info]   (min, avg, max) = (666.148, 1067.136, 1335.340), stdev = 365.751
[info]   CI (99.9%): [≈ 0, 2475.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   97308.271 ±(99.9%) 129311.326 B/op [Average]
[info]   (min, avg, max) = (60490.121, 97308.271, 122302.319), stdev = 33581.741
[info]   CI (99.9%): [≈ 0, 226619.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.016 ±(99.9%) 8.569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.016, 4.996), stdev = 2.225
[info]   CI (99.9%): [≈ 0, 9.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   92.460 ±(99.9%) 779.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.460, 454.690), stdev = 202.506
[info]   CI (99.9%): [≈ 0, 872.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.45% complete, ETA 00:50:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119311.407 ops/s
[info] # Warmup Iteration   2: 194444.380 ops/s
[info] # Warmup Iteration   3: 206386.250 ops/s
[info] # Warmup Iteration   4: 206475.032 ops/s
[info] # Warmup Iteration   5: 206512.814 ops/s
[info] Iteration   1: 204716.885 ops/s
[info]                  ·gc.alloc.rate:                   769.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              5911.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5146.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 208363.750 ops/s
[info]                  ·gc.alloc.rate:               772.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          5836.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5061.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 206818.138 ops/s
[info]                  ·gc.alloc.rate:                   786.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              5986.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10198.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 206111.176 ops/s
[info]                  ·gc.alloc.rate:               763.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          5826.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5117.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 206901.030 ops/s
[info]                  ·gc.alloc.rate:                   764.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              5819.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5100.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   206582.196 ±(99.9%) 5105.737 ops/s [Average]
[info]   (min, avg, max) = (204716.885, 206582.196, 208363.750), stdev = 1325.944
[info]   CI (99.9%): [201476.459, 211687.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   771.340 ±(99.9%) 36.241 MB/sec [Average]
[info]   (min, avg, max) = (763.083, 771.340, 786.780), stdev = 9.412
[info]   CI (99.9%): [735.099, 807.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5876.149 ±(99.9%) 277.199 B/op [Average]
[info]   (min, avg, max) = (5819.028, 5876.149, 5986.471), stdev = 71.988
[info]   CI (99.9%): [5598.950, 6153.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.147 ±(99.9%) 1154.309 MB/sec [Average]
[info]   (min, avg, max) = (669.514, 804.147, 1340.392), stdev = 299.770
[info]   CI (99.9%): [≈ 0, 1958.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6124.902 ±(99.9%) 8770.185 B/op [Average]
[info]   (min, avg, max) = (5061.598, 6124.902, 10198.805), stdev = 2277.589
[info]   CI (99.9%): [≈ 0, 14895.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 0.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.475), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.65% complete, ETA 00:49:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147069.996 ops/s
[info] # Warmup Iteration   2: 227256.071 ops/s
[info] # Warmup Iteration   3: 229131.868 ops/s
[info] # Warmup Iteration   4: 229490.222 ops/s
[info] # Warmup Iteration   5: 228695.946 ops/s
[info] Iteration   1: 228768.793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 228278.482 ops/s
[info]                  ·gc.alloc.rate:      10.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 69.896 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 228669.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 229256.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 228105.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   228615.569 ±(99.9%) 1733.730 ops/s [Average]
[info]   (min, avg, max) = (228105.250, 228615.569, 229256.262), stdev = 450.244
[info]   CI (99.9%): [226881.839, 230349.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.028 ±(99.9%) 17.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.028, 10.140), stdev = 4.535
[info]   CI (99.9%): [≈ 0, 19.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13.981 ±(99.9%) 120.362 B/op [Average]
[info]   (min, avg, max) = (0.002, 13.981, 69.896), stdev = 31.258
[info]   CI (99.9%): [≈ 0, 134.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.85% complete, ETA 00:49:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6723.180 ops/s
[info] # Warmup Iteration   2: 16195.449 ops/s
[info] # Warmup Iteration   3: 17695.581 ops/s
[info] # Warmup Iteration   4: 17878.589 ops/s
[info] # Warmup Iteration   5: 17858.133 ops/s
[info] Iteration   1: 17616.587 ops/s
[info]                  ·gc.alloc.rate:               1124.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          100446.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59596.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 17324.009 ops/s
[info]                  ·gc.alloc.rate:               1134.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          103064.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121231.578 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 17505.333 ops/s
[info]                  ·gc.alloc.rate:               1140.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          102427.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119591.731 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 17648.934 ops/s
[info]                  ·gc.alloc.rate:               1137.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          101468.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59514.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17533.646 ops/s
[info]                  ·gc.alloc.rate:                   1154.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              103578.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119936.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 534.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17525.702 ±(99.9%) 489.367 ops/s [Average]
[info]   (min, avg, max) = (17324.009, 17525.702, 17648.934), stdev = 127.087
[info]   CI (99.9%): [17036.334, 18015.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1138.385 ±(99.9%) 41.358 MB/sec [Average]
[info]   (min, avg, max) = (1124.483, 1138.385, 1154.184), stdev = 10.740
[info]   CI (99.9%): [1097.028, 1179.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102197.078 ±(99.9%) 4836.992 B/op [Average]
[info]   (min, avg, max) = (100446.095, 102197.078, 103578.628), stdev = 1256.152
[info]   CI (99.9%): [97360.085, 107034.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1067.517 ±(99.9%) 1406.880 MB/sec [Average]
[info]   (min, avg, max) = (667.176, 1067.517, 1336.459), stdev = 365.362
[info]   CI (99.9%): [≈ 0, 2474.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   95974.164 ±(99.9%) 128038.120 B/op [Average]
[info]   (min, avg, max) = (59514.736, 95974.164, 121231.578), stdev = 33251.093
[info]   CI (99.9%): [≈ 0, 224012.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.191 ±(99.9%) 10.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.191, 5.954), stdev = 2.663
[info]   CI (99.9%): [≈ 0, 11.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   106.872 ±(99.9%) 920.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.872, 534.362), stdev = 238.974
[info]   CI (99.9%): [≈ 0, 1027.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:49:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2835.825 ops/s
[info] # Warmup Iteration   2: 6661.003 ops/s
[info] # Warmup Iteration   3: 7222.569 ops/s
[info] # Warmup Iteration   4: 7219.354 ops/s
[info] # Warmup Iteration   5: 7184.706 ops/s
[info] Iteration   1: 7201.386 ops/s
[info]                  ·gc.alloc.rate:               1388.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          303266.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 293187.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7170.458 ops/s
[info]                  ·gc.alloc.rate:               1368.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          300230.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 294455.112 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 7211.521 ops/s
[info]                  ·gc.alloc.rate:                   1374.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              300019.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292740.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 903.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7243.139 ops/s
[info]                  ·gc.alloc.rate:                   1392.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              302460.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290869.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7172.148 ops/s
[info]                  ·gc.alloc.rate:                   1391.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              305398.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292911.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   7199.730 ±(99.9%) 116.220 ops/s [Average]
[info]   (min, avg, max) = (7170.458, 7199.730, 7243.139), stdev = 30.182
[info]   CI (99.9%): [7083.510, 7315.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1383.096 ±(99.9%) 41.771 MB/sec [Average]
[info]   (min, avg, max) = (1368.318, 1383.096, 1392.172), stdev = 10.848
[info]   CI (99.9%): [1341.325, 1424.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   302275.206 ±(99.9%) 8618.588 B/op [Average]
[info]   (min, avg, max) = (300019.869, 302275.206, 305398.535), stdev = 2238.220
[info]   CI (99.9%): [293656.617, 310893.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1339.880 ±(99.9%) 11.692 MB/sec [Average]
[info]   (min, avg, max) = (1334.997, 1339.880, 1342.019), stdev = 3.036
[info]   CI (99.9%): [1328.188, 1351.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   292832.855 ±(99.9%) 4956.937 B/op [Average]
[info]   (min, avg, max) = (290869.136, 292832.855, 294455.112), stdev = 1287.301
[info]   CI (99.9%): [287875.918, 297789.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1.003 ±(99.9%) 6.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.003, 4.142), stdev = 1.782
[info]   CI (99.9%): [≈ 0, 7.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   218.824 ±(99.9%) 1497.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 218.824, 903.914), stdev = 388.875
[info]   CI (99.9%): [≈ 0, 1716.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.25% complete, ETA 00:49:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739535.903 ops/s
[info] # Warmup Iteration   2: 1534545.211 ops/s
[info] # Warmup Iteration   3: 1548535.529 ops/s
[info] # Warmup Iteration   4: 1550807.523 ops/s
[info] # Warmup Iteration   5: 1537458.432 ops/s
[info] Iteration   1: 1509210.615 ops/s
[info]                  ·gc.alloc.rate:               80.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          83.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 533.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1553242.072 ops/s
[info]                  ·gc.alloc.rate:      63.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1551220.902 ops/s
[info]                  ·gc.alloc.rate:      63.086 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1551211.026 ops/s
[info]                  ·gc.alloc.rate:      63.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1551337.820 ops/s
[info]                  ·gc.alloc.rate:      63.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1543244.487 ±(99.9%) 73335.489 ops/s [Average]
[info]   (min, avg, max) = (1509210.615, 1543244.487, 1553242.072), stdev = 19044.994
[info]   CI (99.9%): [1469908.998, 1616579.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   66.521 ±(99.9%) 29.406 MB/sec [Average]
[info]   (min, avg, max) = (63.084, 66.521, 80.182), stdev = 7.637
[info]   CI (99.9%): [37.115, 95.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   67.923 ±(99.9%) 33.775 B/op [Average]
[info]   (min, avg, max) = (64.000, 67.923, 83.613), stdev = 8.771
[info]   CI (99.9%): [34.148, 101.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.317 ±(99.9%) 880.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.317, 511.587), stdev = 228.789
[info]   CI (99.9%): [≈ 0, 983.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   106.696 ±(99.9%) 918.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.696, 533.478), stdev = 238.579
[info]   CI (99.9%): [≈ 0, 1025.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.45% complete, ETA 00:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2569.107 ops/s
[info] # Warmup Iteration   2: 62493.840 ops/s
[info] # Warmup Iteration   3: 79616.191 ops/s
[info] # Warmup Iteration   4: 81492.220 ops/s
[info] # Warmup Iteration   5: 81308.982 ops/s
[info] Iteration   1: 80418.154 ops/s
[info]                  ·gc.alloc.rate:               3391.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          66370.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3362.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65798.346 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 82628.815 ops/s
[info]                  ·gc.alloc.rate:                   3535.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              67340.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64294.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 82088.486 ops/s
[info]                  ·gc.alloc.rate:               3515.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          67397.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3385.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64908.624 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 80500.559 ops/s
[info]                  ·gc.alloc.rate:               3450.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          67463.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3392.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66321.472 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 82358.255 ops/s
[info]                  ·gc.alloc.rate:               3527.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          67416.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3398.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64934.519 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   81598.854 ±(99.9%) 4074.027 ops/s [Average]
[info]   (min, avg, max) = (80418.154, 81598.854, 82628.815), stdev = 1058.012
[info]   CI (99.9%): [77524.827, 85672.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3484.377 ±(99.9%) 237.680 MB/sec [Average]
[info]   (min, avg, max) = (3391.682, 3484.377, 3535.786), stdev = 61.725
[info]   CI (99.9%): [3246.697, 3722.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67197.609 ±(99.9%) 1788.644 B/op [Average]
[info]   (min, avg, max) = (66370.395, 67197.609, 67463.187), stdev = 464.505
[info]   CI (99.9%): [65408.965, 68986.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3382.919 ±(99.9%) 54.344 MB/sec [Average]
[info]   (min, avg, max) = (3362.449, 3382.919, 3398.050), stdev = 14.113
[info]   CI (99.9%): [3328.575, 3437.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65251.433 ±(99.9%) 3091.526 B/op [Average]
[info]   (min, avg, max) = (64294.205, 65251.433, 66321.472), stdev = 802.860
[info]   CI (99.9%): [62159.907, 68342.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.396), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 0.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.65% complete, ETA 00:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 589465.602 ops/s
[info] # Warmup Iteration   2: 1758410.373 ops/s
[info] # Warmup Iteration   3: 1846329.643 ops/s
[info] # Warmup Iteration   4: 1831245.500 ops/s
[info] # Warmup Iteration   5: 1803736.211 ops/s
[info] Iteration   1: 1837295.185 ops/s
[info]                  ·gc.alloc.rate:                   1005.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1144.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1803698.564 ops/s
[info]                  ·gc.alloc.rate:               972.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 583.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1800963.321 ops/s
[info]                  ·gc.alloc.rate:                   974.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              851.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1168.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1809171.274 ops/s
[info]                  ·gc.alloc.rate:               961.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          836.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 582.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1813370.985 ops/s
[info]                  ·gc.alloc.rate:                   963.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              835.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1812899.866 ±(99.9%) 55681.462 ops/s [Average]
[info]   (min, avg, max) = (1800963.321, 1812899.866, 1837295.185), stdev = 14460.299
[info]   CI (99.9%): [1757218.404, 1868581.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   975.494 ±(99.9%) 68.046 MB/sec [Average]
[info]   (min, avg, max) = (961.648, 975.494, 1005.514), stdev = 17.671
[info]   CI (99.9%): [907.448, 1043.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   846.656 ±(99.9%) 40.952 B/op [Average]
[info]   (min, avg, max) = (835.894, 846.656, 861.095), stdev = 10.635
[info]   CI (99.9%): [805.704, 887.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.300 ±(99.9%) 1407.905 MB/sec [Average]
[info]   (min, avg, max) = (668.662, 936.300, 1337.665), stdev = 365.628
[info]   CI (99.9%): [≈ 0, 2344.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   811.939 ±(99.9%) 1211.616 B/op [Average]
[info]   (min, avg, max) = (581.327, 811.939, 1168.877), stdev = 314.653
[info]   CI (99.9%): [≈ 0, 2023.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.055), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.86% complete, ETA 00:48:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1032790.660 ops/s
[info] # Warmup Iteration   2: 2133838.237 ops/s
[info] # Warmup Iteration   3: 2238326.476 ops/s
[info] # Warmup Iteration   4: 2179319.616 ops/s
[info] # Warmup Iteration   5: 2245095.958 ops/s
[info] Iteration   1: 2248079.876 ops/s
[info]                  ·gc.alloc.rate:               653.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.628 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2198788.738 ops/s
[info]                  ·gc.alloc.rate:               630.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 480.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2194637.700 ops/s
[info]                  ·gc.alloc.rate:                   633.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2196580.308 ops/s
[info]                  ·gc.alloc.rate:               634.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          454.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 481.102 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2199110.076 ops/s
[info]                  ·gc.alloc.rate:                   631.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2207439.340 ±(99.9%) 87758.855 ops/s [Average]
[info]   (min, avg, max) = (2194637.700, 2207439.340, 2248079.876), stdev = 22790.696
[info]   CI (99.9%): [2119680.485, 2295198.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636.825 ±(99.9%) 37.208 MB/sec [Average]
[info]   (min, avg, max) = (630.526, 636.825, 653.816), stdev = 9.663
[info]   CI (99.9%): [599.617, 674.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   453.994 ±(99.9%) 10.009 B/op [Average]
[info]   (min, avg, max) = (451.272, 453.994, 457.673), stdev = 2.599
[info]   CI (99.9%): [443.985, 464.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.310 ±(99.9%) 1.585 MB/sec [Average]
[info]   (min, avg, max) = (670.876, 671.310, 671.817), stdev = 0.412
[info]   CI (99.9%): [669.726, 672.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   478.637 ±(99.9%) 19.488 B/op [Average]
[info]   (min, avg, max) = (469.628, 478.637, 481.512), stdev = 5.061
[info]   CI (99.9%): [459.149, 498.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.015), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.06% complete, ETA 00:48:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1125862.467 ops/s
[info] # Warmup Iteration   2: 2284612.977 ops/s
[info] # Warmup Iteration   3: 2370848.748 ops/s
[info] # Warmup Iteration   4: 2374428.798 ops/s
[info] # Warmup Iteration   5: 2258689.038 ops/s
[info] Iteration   1: 2373492.774 ops/s
[info]                  ·gc.alloc.rate:      24.132 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2371419.890 ops/s
[info]                  ·gc.alloc.rate:      24.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2372102.010 ops/s
[info]                  ·gc.alloc.rate:      24.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2373764.148 ops/s
[info]                  ·gc.alloc.rate:      24.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2373041.353 ops/s
[info]                  ·gc.alloc.rate:      24.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2372764.035 ±(99.9%) 3779.322 ops/s [Average]
[info]   (min, avg, max) = (2371419.890, 2372764.035, 2373764.148), stdev = 981.478
[info]   CI (99.9%): [2368984.713, 2376543.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.124 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (24.110, 24.124, 24.135), stdev = 0.010
[info]   CI (99.9%): [24.085, 24.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.26% complete, ETA 00:47:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11200.753 ops/s
[info] # Warmup Iteration   2: 45252.004 ops/s
[info] # Warmup Iteration   3: 49486.828 ops/s
[info] # Warmup Iteration   4: 50143.850 ops/s
[info] # Warmup Iteration   5: 51059.587 ops/s
[info] Iteration   1: 51113.612 ops/s
[info]                  ·gc.alloc.rate:                   2207.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              67959.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82366.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 50096.060 ops/s
[info]                  ·gc.alloc.rate:                   2160.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              67859.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62865.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51101.176 ops/s
[info]                  ·gc.alloc.rate:                   2204.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              67881.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61569.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 51499.686 ops/s
[info]                  ·gc.alloc.rate:               2234.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          68272.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61173.210 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 51498.641 ops/s
[info]                  ·gc.alloc.rate:               2234.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          68293.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61328.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51061.835 ±(99.9%) 2211.576 ops/s [Average]
[info]   (min, avg, max) = (50096.060, 51061.835, 51499.686), stdev = 574.339
[info]   CI (99.9%): [48850.259, 53273.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2208.247 ±(99.9%) 117.223 MB/sec [Average]
[info]   (min, avg, max) = (2160.291, 2208.247, 2234.992), stdev = 30.442
[info]   CI (99.9%): [2091.024, 2325.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68053.402 ±(99.9%) 820.327 B/op [Average]
[info]   (min, avg, max) = (67859.263, 68053.402, 68293.639), stdev = 213.036
[info]   CI (99.9%): [67233.075, 68873.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2136.988 ±(99.9%) 1158.752 MB/sec [Average]
[info]   (min, avg, max) = (1999.395, 2136.988, 2675.274), stdev = 300.924
[info]   CI (99.9%): [978.235, 3295.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65860.658 ±(99.9%) 35623.578 B/op [Average]
[info]   (min, avg, max) = (61173.210, 65860.658, 82366.726), stdev = 9251.330
[info]   CI (99.9%): [30237.080, 101484.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.372), stdev = 1.948
[info]   CI (99.9%): [≈ 0, 8.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.306 ±(99.9%) 230.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.306, 134.595), stdev = 59.978
[info]   CI (99.9%): [≈ 0, 258.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.46% complete, ETA 00:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75097.193 ops/s
[info] # Warmup Iteration   2: 604399.997 ops/s
[info] # Warmup Iteration   3: 872328.141 ops/s
[info] # Warmup Iteration   4: 873697.141 ops/s
[info] # Warmup Iteration   5: 859547.965 ops/s
[info] Iteration   1: 879997.230 ops/s
[info]                  ·gc.alloc.rate:                   2843.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              5083.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4784.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 877672.123 ops/s
[info]                  ·gc.alloc.rate:                   2834.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              5083.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4793.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 880085.481 ops/s
[info]                  ·gc.alloc.rate:                   2857.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              5108.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4788.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 879080.765 ops/s
[info]                  ·gc.alloc.rate:               2855.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          5111.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4808.598 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 879733.222 ops/s
[info]                  ·gc.alloc.rate:               2858.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          5112.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4819.308 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   879313.764 ±(99.9%) 3844.812 ops/s [Average]
[info]   (min, avg, max) = (877672.123, 879313.764, 880085.481), stdev = 998.485
[info]   CI (99.9%): [875468.952, 883158.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2849.803 ±(99.9%) 39.780 MB/sec [Average]
[info]   (min, avg, max) = (2834.953, 2849.803, 2858.632), stdev = 10.331
[info]   CI (99.9%): [2810.023, 2889.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5099.828 ±(99.9%) 58.770 B/op [Average]
[info]   (min, avg, max) = (5083.091, 5099.828, 5112.286), stdev = 15.262
[info]   CI (99.9%): [5041.058, 5158.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2681.625 ±(99.9%) 33.684 MB/sec [Average]
[info]   (min, avg, max) = (2673.336, 2681.625, 2694.808), stdev = 8.748
[info]   CI (99.9%): [2647.942, 2715.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4798.872 ±(99.9%) 56.331 B/op [Average]
[info]   (min, avg, max) = (4784.439, 4798.872, 4819.308), stdev = 14.629
[info]   CI (99.9%): [4742.541, 4855.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.075), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.66% complete, ETA 00:47:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.697 ops/s
[info] # Warmup Iteration   2: 4601273.841 ops/s
[info] # Warmup Iteration   3: 5032947.603 ops/s
[info] # Warmup Iteration   4: 5029615.936 ops/s
[info] # Warmup Iteration   5: 5130696.418 ops/s
[info] Iteration   1: 5156347.119 ops/s
[info]                  ·gc.alloc.rate:      314.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5123785.872 ops/s
[info]                  ·gc.alloc.rate:               322.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          98.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5148625.921 ops/s
[info]                  ·gc.alloc.rate:      314.139 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5150978.871 ops/s
[info]                  ·gc.alloc.rate:                   338.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              103.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5176461.202 ops/s
[info]                  ·gc.alloc.rate:      315.783 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5151239.797 ±(99.9%) 72623.758 ops/s [Average]
[info]   (min, avg, max) = (5123785.872, 5151239.797, 5176461.202), stdev = 18860.159
[info]   CI (99.9%): [5078616.039, 5223863.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   320.939 ±(99.9%) 38.868 MB/sec [Average]
[info]   (min, avg, max) = (314.139, 320.939, 338.039), stdev = 10.094
[info]   CI (99.9%): [282.070, 359.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.041 ±(99.9%) 12.285 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.041, 103.279), stdev = 3.190
[info]   CI (99.9%): [85.756, 110.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.586 ±(99.9%) 1259.835 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.586, 666.164), stdev = 327.175
[info]   CI (99.9%): [≈ 0, 1495.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   72.134 ±(99.9%) 385.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.134, 203.528), stdev = 100.126
[info]   CI (99.9%): [≈ 0, 457.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.86% complete, ETA 00:47:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37325.893 ops/s
[info] # Warmup Iteration   2: 683312.435 ops/s
[info] # Warmup Iteration   3: 978965.240 ops/s
[info] # Warmup Iteration   4: 983940.848 ops/s
[info] # Warmup Iteration   5: 986856.467 ops/s
[info] Iteration   1: 990956.028 ops/s
[info]                  ·gc.alloc.rate:               1179.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          1873.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1059.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 989405.374 ops/s
[info]                  ·gc.alloc.rate:                   1193.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              1897.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2123.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 985955.799 ops/s
[info]                  ·gc.alloc.rate:               1192.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          1903.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2133.100 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 968089.479 ops/s
[info]                  ·gc.alloc.rate:                   1159.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1885.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2174.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 957350.434 ops/s
[info]                  ·gc.alloc.rate:                   1132.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1862.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   978351.423 ±(99.9%) 57284.119 ops/s [Average]
[info]   (min, avg, max) = (957350.434, 978351.423, 990956.028), stdev = 14876.504
[info]   CI (99.9%): [921067.304, 1035635.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1171.671 ±(99.9%) 98.561 MB/sec [Average]
[info]   (min, avg, max) = (1132.879, 1171.671, 1193.188), stdev = 25.596
[info]   CI (99.9%): [1073.110, 1270.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1884.500 ±(99.9%) 65.653 B/op [Average]
[info]   (min, avg, max) = (1862.273, 1884.500, 1903.756), stdev = 17.050
[info]   CI (99.9%): [1818.847, 1950.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.155 ±(99.9%) 1409.465 MB/sec [Average]
[info]   (min, avg, max) = (667.221, 1069.155, 1337.755), stdev = 366.034
[info]   CI (99.9%): [≈ 0, 2478.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1718.157 ±(99.9%) 2245.866 B/op [Average]
[info]   (min, avg, max) = (1059.582, 1718.157, 2174.563), stdev = 583.244
[info]   CI (99.9%): [≈ 0, 3964.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 7.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.143), stdev = 1.846
[info]   CI (99.9%): [≈ 0, 7.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.382 ±(99.9%) 11.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.382, 6.810), stdev = 3.034
[info]   CI (99.9%): [≈ 0, 13.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.06% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3060813.749 ops/s
[info] # Warmup Iteration   2: 8249236.474 ops/s
[info] # Warmup Iteration   3: 8701121.172 ops/s
[info] # Warmup Iteration   4: 8730351.824 ops/s
[info] # Warmup Iteration   5: 8760272.385 ops/s
[info] Iteration   1: 8715968.030 ops/s
[info]                  ·gc.alloc.rate:               417.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92.379 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 8545352.536 ops/s
[info]                  ·gc.alloc.rate:               412.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          76.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8419280.390 ops/s
[info]                  ·gc.alloc.rate:      385.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8408402.040 ops/s
[info]                  ·gc.alloc.rate:                   406.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8397864.022 ops/s
[info]                  ·gc.alloc.rate:                   400.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8497373.404 ±(99.9%) 523751.797 ops/s [Average]
[info]   (min, avg, max) = (8397864.022, 8497373.404, 8715968.030), stdev = 136016.678
[info]   CI (99.9%): [7973621.607, 9021125.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   404.257 ±(99.9%) 48.082 MB/sec [Average]
[info]   (min, avg, max) = (385.198, 404.257, 417.148), stdev = 12.487
[info]   CI (99.9%): [356.175, 452.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.862 ±(99.9%) 6.401 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.862, 76.031), stdev = 1.662
[info]   CI (99.9%): [68.461, 81.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.129 ±(99.9%) 1063.762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.129, 671.198), stdev = 276.255
[info]   CI (99.9%): [≈ 0, 1536.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   87.599 ±(99.9%) 198.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.599, 125.777), stdev = 51.583
[info]   CI (99.9%): [≈ 0, 286.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.26% complete, ETA 00:46:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6230.105 ops/s
[info] # Warmup Iteration   2: 133167.623 ops/s
[info] # Warmup Iteration   3: 461346.753 ops/s
[info] # Warmup Iteration   4: 510326.469 ops/s
[info] # Warmup Iteration   5: 508277.406 ops/s
[info] Iteration   1: 496706.232 ops/s
[info]                  ·gc.alloc.rate:               2193.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          6948.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6364.388 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 507750.492 ops/s
[info]                  ·gc.alloc.rate:                   2247.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              6967.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6240.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.226 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 504451.613 ops/s
[info]                  ·gc.alloc.rate:               2220.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          6927.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6289.681 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 504768.537 ops/s
[info]                  ·gc.alloc.rate:               2235.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          6969.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8395.271 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 506174.570 ops/s
[info]                  ·gc.alloc.rate:               2254.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          7009.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6291.294 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   503970.289 ±(99.9%) 16425.624 ops/s [Average]
[info]   (min, avg, max) = (496706.232, 503970.289, 507750.492), stdev = 4265.682
[info]   CI (99.9%): [487544.665, 520395.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2230.323 ±(99.9%) 94.195 MB/sec [Average]
[info]   (min, avg, max) = (2193.223, 2230.323, 2254.625), stdev = 24.462
[info]   CI (99.9%): [2136.128, 2324.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6964.502 ±(99.9%) 117.054 B/op [Average]
[info]   (min, avg, max) = (6927.449, 6964.502, 7009.685), stdev = 30.399
[info]   CI (99.9%): [6847.448, 7081.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2150.928 ±(99.9%) 1166.244 MB/sec [Average]
[info]   (min, avg, max) = (2008.793, 2150.928, 2692.634), stdev = 302.870
[info]   CI (99.9%): [984.684, 3317.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6716.297 ±(99.9%) 3618.106 B/op [Average]
[info]   (min, avg, max) = (6240.848, 6716.297, 8395.271), stdev = 939.611
[info]   CI (99.9%): [3098.190, 10334.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.208 ±(99.9%) 1.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 1.041), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.645 ±(99.9%) 5.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.226), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65.46% complete, ETA 00:46:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126233.077 ops/s
[info] # Warmup Iteration   2: 1077809.185 ops/s
[info] # Warmup Iteration   3: 1326256.430 ops/s
[info] # Warmup Iteration   4: 1312846.066 ops/s
[info] # Warmup Iteration   5: 1296862.003 ops/s
[info] Iteration   1: 1326660.555 ops/s
[info]                  ·gc.alloc.rate:               1873.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          2221.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2392.008 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1334388.902 ops/s
[info]                  ·gc.alloc.rate:                   1883.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2221.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1332369.420 ops/s
[info]                  ·gc.alloc.rate:               1895.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          2238.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2376.214 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1305774.725 ops/s
[info]                  ·gc.alloc.rate:               1845.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          2223.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2423.005 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1321639.933 ops/s
[info]                  ·gc.alloc.rate:               1866.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          2222.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1596.711 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   1324166.707 ±(99.9%) 44015.683 ops/s [Average]
[info]   (min, avg, max) = (1305774.725, 1324166.707, 1334388.902), stdev = 11430.733
[info]   CI (99.9%): [1280151.024, 1368182.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1872.636 ±(99.9%) 72.813 MB/sec [Average]
[info]   (min, avg, max) = (1845.074, 1872.636, 1895.209), stdev = 18.909
[info]   CI (99.9%): [1799.823, 1945.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2225.547 ±(99.9%) 28.174 B/op [Average]
[info]   (min, avg, max) = (2221.355, 2225.547, 2238.539), stdev = 7.317
[info]   CI (99.9%): [2197.374, 2253.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.054 ±(99.9%) 1412.266 MB/sec [Average]
[info]   (min, avg, max) = (1340.955, 1745.054, 2016.510), stdev = 366.761
[info]   CI (99.9%): [332.787, 3157.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2074.983 ±(99.9%) 1699.589 B/op [Average]
[info]   (min, avg, max) = (1586.978, 2074.983, 2423.005), stdev = 441.378
[info]   CI (99.9%): [375.394, 3774.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.268), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.771 ±(99.9%) 6.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.771, 3.855), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 7.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.66% complete, ETA 00:45:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1156.282 ops/s
[info] # Warmup Iteration   2: 3741.298 ops/s
[info] # Warmup Iteration   3: 3911.479 ops/s
[info] # Warmup Iteration   4: 4442.795 ops/s
[info] # Warmup Iteration   5: 4430.845 ops/s
[info] Iteration   1: 4436.479 ops/s
[info]                  ·gc.alloc.rate:                   2218.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              786877.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948869.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1536.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 4448.593 ops/s
[info]                  ·gc.alloc.rate:                   2246.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              794603.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707376.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4464.948 ops/s
[info]                  ·gc.alloc.rate:                   2228.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              785477.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704332.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4414.783 ops/s
[info]                  ·gc.alloc.rate:                   2218.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              790476.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     713178.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.942 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4402.603 ops/s
[info]                  ·gc.alloc.rate:                   2251.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              804912.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955718.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.524 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4433.481 ±(99.9%) 96.853 ops/s [Average]
[info]   (min, avg, max) = (4402.603, 4433.481, 4464.948), stdev = 25.152
[info]   CI (99.9%): [4336.628, 4530.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2232.700 ±(99.9%) 60.340 MB/sec [Average]
[info]   (min, avg, max) = (2218.167, 2232.700, 2251.948), stdev = 15.670
[info]   CI (99.9%): [2172.360, 2293.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   792469.456 ±(99.9%) 30043.694 B/op [Average]
[info]   (min, avg, max) = (785477.960, 792469.456, 804912.020), stdev = 7802.252
[info]   CI (99.9%): [762425.762, 822513.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2269.676 ±(99.9%) 1422.937 MB/sec [Average]
[info]   (min, avg, max) = (1998.584, 2269.676, 2675.087), stdev = 369.532
[info]   CI (99.9%): [846.739, 3692.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   805895.040 ±(99.9%) 514842.176 B/op [Average]
[info]   (min, avg, max) = (704332.278, 805895.040, 955718.452), stdev = 133702.878
[info]   CI (99.9%): [291052.864, 1320737.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.015 ±(99.9%) 7.142 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 1.015, 4.332), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 8.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   360.016 ±(99.9%) 2533.425 B/op [Average]
[info]   (min, avg, max) = (51.942, 360.016, 1536.539), stdev = 657.922
[info]   CI (99.9%): [≈ 0, 2893.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 2.864
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.86% complete, ETA 00:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 813.556 ops/s
[info] # Warmup Iteration   2: 5139.754 ops/s
[info] # Warmup Iteration   3: 6505.712 ops/s
[info] # Warmup Iteration   4: 6795.928 ops/s
[info] # Warmup Iteration   5: 6648.861 ops/s
[info] Iteration   1: 6768.516 ops/s
[info]                  ·gc.alloc.rate:                   2288.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              532121.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465663.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6681.162 ops/s
[info]                  ·gc.alloc.rate:                   2296.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              540930.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     630902.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.064 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6853.593 ops/s
[info]                  ·gc.alloc.rate:               2315.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          531588.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462269.685 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 6835.475 ops/s
[info]                  ·gc.alloc.rate:               2336.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          537873.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464627.906 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 6761.891 ops/s
[info]                  ·gc.alloc.rate:               2338.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          544205.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 627781.195 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6780.127 ±(99.9%) 263.439 ops/s [Average]
[info]   (min, avg, max) = (6681.162, 6780.127, 6853.593), stdev = 68.414
[info]   CI (99.9%): [6516.689, 7043.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2315.037 ±(99.9%) 86.765 MB/sec [Average]
[info]   (min, avg, max) = (2288.746, 2315.037, 2338.418), stdev = 22.533
[info]   CI (99.9%): [2228.272, 2401.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   537343.765 ±(99.9%) 21146.203 B/op [Average]
[info]   (min, avg, max) = (531588.310, 537343.765, 544205.892), stdev = 5491.602
[info]   CI (99.9%): [516197.562, 558489.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2282.082 ±(99.9%) 1427.445 MB/sec [Average]
[info]   (min, avg, max) = (2002.901, 2282.082, 2697.535), stdev = 370.703
[info]   CI (99.9%): [854.637, 3709.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   530249.092 ±(99.9%) 348383.825 B/op [Average]
[info]   (min, avg, max) = (462269.685, 530249.092, 630902.902), stdev = 90474.173
[info]   CI (99.9%): [181865.267, 878632.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 1.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.583), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.718 ±(99.9%) 251.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.718, 135.525), stdev = 65.328
[info]   CI (99.9%): [≈ 0, 298.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.06% complete, ETA 00:45:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25685.152 ops/s
[info] # Warmup Iteration   2: 46327.695 ops/s
[info] # Warmup Iteration   3: 47761.604 ops/s
[info] # Warmup Iteration   4: 48412.867 ops/s
[info] # Warmup Iteration   5: 48485.674 ops/s
[info] Iteration   1: 48260.057 ops/s
[info]                  ·gc.alloc.rate:                   807.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              26340.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43772.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 48300.281 ops/s
[info]                  ·gc.alloc.rate:               798.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          26020.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21878.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 48130.605 ops/s
[info]                  ·gc.alloc.rate:                   793.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              25947.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21966.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 48533.817 ops/s
[info]                  ·gc.alloc.rate:               798.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          25894.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21785.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 48482.378 ops/s
[info]                  ·gc.alloc.rate:                   797.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              25873.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21818.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   48341.427 ±(99.9%) 637.515 ops/s [Average]
[info]   (min, avg, max) = (48130.605, 48341.427, 48533.817), stdev = 165.561
[info]   CI (99.9%): [47703.913, 48978.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   799.120 ±(99.9%) 20.192 MB/sec [Average]
[info]   (min, avg, max) = (793.599, 799.120, 807.762), stdev = 5.244
[info]   CI (99.9%): [778.928, 819.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26015.355 ±(99.9%) 732.284 B/op [Average]
[info]   (min, avg, max) = (25873.996, 26015.355, 26340.022), stdev = 190.172
[info]   CI (99.9%): [25283.071, 26747.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.929 ±(99.9%) 1154.682 MB/sec [Average]
[info]   (min, avg, max) = (671.493, 805.929, 1342.348), stdev = 299.867
[info]   CI (99.9%): [≈ 0, 1960.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26244.240 ±(99.9%) 37731.035 B/op [Average]
[info]   (min, avg, max) = (21785.029, 26244.240, 43772.128), stdev = 9798.630
[info]   CI (99.9%): [≈ 0, 63975.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.543 ±(99.9%) 2.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.543, 1.358), stdev = 0.568
[info]   CI (99.9%): [≈ 0, 2.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.27% complete, ETA 00:45:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1509.261 ops/s
[info] # Warmup Iteration   2: 4071.736 ops/s
[info] # Warmup Iteration   3: 4664.514 ops/s
[info] # Warmup Iteration   4: 4842.807 ops/s
[info] # Warmup Iteration   5: 4837.171 ops/s
[info] Iteration   1: 4814.756 ops/s
[info]                  ·gc.alloc.rate:               1050.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          343528.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218598.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 4847.250 ops/s
[info]                  ·gc.alloc.rate:                   1073.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              348398.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434437.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4861.882 ops/s
[info]                  ·gc.alloc.rate:                   1052.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              340723.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216701.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4829.471 ops/s
[info]                  ·gc.alloc.rate:               1059.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          345173.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 436382.125 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 4853.720 ops/s
[info]                  ·gc.alloc.rate:                   1049.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              340117.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217166.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4841.416 ±(99.9%) 73.508 ops/s [Average]
[info]   (min, avg, max) = (4814.756, 4841.416, 4861.882), stdev = 19.090
[info]   CI (99.9%): [4767.908, 4914.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1057.054 ±(99.9%) 37.744 MB/sec [Average]
[info]   (min, avg, max) = (1049.134, 1057.054, 1073.174), stdev = 9.802
[info]   CI (99.9%): [1019.310, 1094.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   343588.144 ±(99.9%) 13045.772 B/op [Average]
[info]   (min, avg, max) = (340117.013, 343588.144, 348398.883), stdev = 3387.946
[info]   CI (99.9%): [330542.372, 356633.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   937.121 ±(99.9%) 1411.743 MB/sec [Average]
[info]   (min, avg, max) = (668.774, 937.121, 1339.277), stdev = 366.625
[info]   CI (99.9%): [≈ 0, 2348.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   304657.265 ±(99.9%) 459629.767 B/op [Average]
[info]   (min, avg, max) = (216701.394, 304657.265, 436382.125), stdev = 119364.391
[info]   CI (99.9%): [≈ 0, 764287.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.056), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.291 ±(99.9%) 30.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.291, 18.233), stdev = 7.806
[info]   CI (99.9%): [≈ 0, 37.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.47% complete, ETA 00:44:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1425.401 ops/s
[info] # Warmup Iteration   2: 4255.694 ops/s
[info] # Warmup Iteration   3: 4776.704 ops/s
[info] # Warmup Iteration   4: 4847.776 ops/s
[info] # Warmup Iteration   5: 4967.528 ops/s
[info] Iteration   1: 5006.130 ops/s
[info]                  ·gc.alloc.rate:               633.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          199256.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207181.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5004.170 ops/s
[info]                  ·gc.alloc.rate:                   628.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              197533.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207683.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5007.355 ops/s
[info]                  ·gc.alloc.rate:                   631.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              198531.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207559.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4964.209 ops/s
[info]                  ·gc.alloc.rate:      607.219 MB/sec
[info]                  ·gc.alloc.rate.norm: 192440.427 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4747.155 ops/s
[info]                  ·gc.alloc.rate:               600.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          199136.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 219410.332 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4945.804 ±(99.9%) 433.238 ops/s [Average]
[info]   (min, avg, max) = (4747.155, 4945.804, 5007.355), stdev = 112.510
[info]   CI (99.9%): [4512.566, 5379.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.367 ±(99.9%) 58.768 MB/sec [Average]
[info]   (min, avg, max) = (600.760, 620.367, 633.919), stdev = 15.262
[info]   CI (99.9%): [561.599, 679.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   197379.641 ±(99.9%) 10951.446 B/op [Average]
[info]   (min, avg, max) = (192440.427, 197379.641, 199256.625), stdev = 2844.056
[info]   CI (99.9%): [186428.195, 208331.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.399 ±(99.9%) 1137.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.399, 661.924), stdev = 295.386
[info]   CI (99.9%): [≈ 0, 1665.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   168366.889 ±(99.9%) 362969.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168366.889, 219410.332), stdev = 94261.926
[info]   CI (99.9%): [≈ 0, 531336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.618 ±(99.9%) 13.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.618, 6.546), stdev = 3.584
[info]   CI (99.9%): [≈ 0, 16.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:44:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3172.478 ops/s
[info] # Warmup Iteration   2: 6066.019 ops/s
[info] # Warmup Iteration   3: 6495.602 ops/s
[info] # Warmup Iteration   4: 6533.934 ops/s
[info] # Warmup Iteration   5: 6507.463 ops/s
[info] Iteration   1: 6528.005 ops/s
[info]                  ·gc.alloc.rate:      319.108 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.107 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6490.843 ops/s
[info]                  ·gc.alloc.rate:               329.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          79767.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124026.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6487.946 ops/s
[info]                  ·gc.alloc.rate:               329.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          79965.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124084.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6507.788 ops/s
[info]                  ·gc.alloc.rate:      318.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6376.238 ops/s
[info]                  ·gc.alloc.rate:                   347.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              85651.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165555.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6478.164 ±(99.9%) 227.865 ops/s [Average]
[info]   (min, avg, max) = (6376.238, 6478.164, 6528.005), stdev = 59.176
[info]   CI (99.9%): [6250.299, 6706.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   328.579 ±(99.9%) 44.871 MB/sec [Average]
[info]   (min, avg, max) = (318.034, 328.579, 347.041), stdev = 11.653
[info]   CI (99.9%): [283.708, 373.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79838.588 ±(99.9%) 13754.647 B/op [Average]
[info]   (min, avg, max) = (76904.066, 79838.588, 85651.849), stdev = 3572.038
[info]   CI (99.9%): [66083.941, 93593.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.792 ±(99.9%) 1216.916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.792, 670.793), stdev = 316.029
[info]   CI (99.9%): [≈ 0, 1555.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   82733.404 ±(99.9%) 298047.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82733.404, 165555.979), stdev = 77401.950
[info]   CI (99.9%): [≈ 0, 380780.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.028 ±(99.9%) 8.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.028, 5.138), stdev = 2.298
[info]   CI (99.9%): [≈ 0, 9.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.87% complete, ETA 00:44:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3371.407 ops/s
[info] # Warmup Iteration   2: 6241.377 ops/s
[info] # Warmup Iteration   3: 6639.893 ops/s
[info] # Warmup Iteration   4: 6381.145 ops/s
[info] # Warmup Iteration   5: 6651.560 ops/s
[info] Iteration   1: 6611.183 ops/s
[info]                  ·gc.alloc.rate:               286.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          68161.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121776.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6441.579 ops/s
[info]                  ·gc.alloc.rate:               308.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          75488.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124989.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6638.392 ops/s
[info]                  ·gc.alloc.rate:      275.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6614.855 ops/s
[info]                  ·gc.alloc.rate:               286.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          68155.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121702.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6645.791 ops/s
[info]                  ·gc.alloc.rate:      276.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6590.360 ±(99.9%) 325.311 ops/s [Average]
[info]   (min, avg, max) = (6441.579, 6590.360, 6645.791), stdev = 84.482
[info]   CI (99.9%): [6265.049, 6915.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   286.795 ±(99.9%) 51.785 MB/sec [Average]
[info]   (min, avg, max) = (275.903, 286.795, 308.998), stdev = 13.448
[info]   CI (99.9%): [235.010, 338.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68520.980 ±(99.9%) 15910.290 B/op [Average]
[info]   (min, avg, max) = (65400.065, 68520.980, 75488.426), stdev = 4131.852
[info]   CI (99.9%): [52610.690, 84431.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306.959 ±(99.9%) 1079.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.959, 511.620), stdev = 280.214
[info]   CI (99.9%): [≈ 0, 1385.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   73693.648 ±(99.9%) 259093.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73693.648, 124989.348), stdev = 67285.876
[info]   CI (99.9%): [≈ 0, 332787.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.07% complete, ETA 00:44:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1932.088 ops/s
[info] # Warmup Iteration   2: 5807.733 ops/s
[info] # Warmup Iteration   3: 7864.241 ops/s
[info] # Warmup Iteration   4: 7982.371 ops/s
[info] # Warmup Iteration   5: 7889.909 ops/s
[info] Iteration   1: 7828.742 ops/s
[info]                  ·gc.alloc.rate:                   1659.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              333649.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404246.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 7865.780 ops/s
[info]                  ·gc.alloc.rate:                   1662.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              332669.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268407.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7903.696 ops/s
[info]                  ·gc.alloc.rate:                   1669.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              332454.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266852.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7978.884 ops/s
[info]                  ·gc.alloc.rate:                   1716.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              338597.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395597.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7916.378 ops/s
[info]                  ·gc.alloc.rate:               1666.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          331235.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 265653.379 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7898.696 ±(99.9%) 217.356 ops/s [Average]
[info]   (min, avg, max) = (7828.742, 7898.696, 7978.884), stdev = 56.447
[info]   CI (99.9%): [7681.340, 8116.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1675.059 ±(99.9%) 91.139 MB/sec [Average]
[info]   (min, avg, max) = (1659.738, 1675.059, 1716.873), stdev = 23.668
[info]   CI (99.9%): [1583.921, 1766.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   333721.116 ±(99.9%) 11004.753 B/op [Average]
[info]   (min, avg, max) = (331235.074, 333721.116, 338597.076), stdev = 2857.900
[info]   CI (99.9%): [322716.362, 344725.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.987 ±(99.9%) 1411.090 MB/sec [Average]
[info]   (min, avg, max) = (1336.331, 1606.987, 2010.921), stdev = 366.456
[info]   CI (99.9%): [195.897, 3018.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   320151.379 ±(99.9%) 280676.212 B/op [Average]
[info]   (min, avg, max) = (265653.379, 320151.379, 404246.066), stdev = 72890.721
[info]   CI (99.9%): [39475.167, 600827.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.873 ±(99.9%) 5.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.873, 3.164), stdev = 1.305
[info]   CI (99.9%): [≈ 0, 5.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   174.299 ±(99.9%) 1006.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 174.299, 633.037), stdev = 261.276
[info]   CI (99.9%): [≈ 0, 1180.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.27% complete, ETA 00:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.854 ops/s
[info] # Warmup Iteration   2: 17082.471 ops/s
[info] # Warmup Iteration   3: 19325.502 ops/s
[info] # Warmup Iteration   4: 19285.746 ops/s
[info] # Warmup Iteration   5: 19274.163 ops/s
[info] Iteration   1: 19263.468 ops/s
[info]                  ·gc.alloc.rate:      475.343 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19012.310 ops/s
[info]                  ·gc.alloc.rate:                   497.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              41197.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55056.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19090.147 ops/s
[info]                  ·gc.alloc.rate:               488.600 MB/sec
[info]                  ·gc.alloc.rate.norm:          40277.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54834.144 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 19350.246 ops/s
[info]                  ·gc.alloc.rate:                   495.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              40315.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54121.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19325.835 ops/s
[info]                  ·gc.alloc.rate:      476.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   19208.401 ±(99.9%) 575.600 ops/s [Average]
[info]   (min, avg, max) = (19012.310, 19208.401, 19350.246), stdev = 149.481
[info]   CI (99.9%): [18632.801, 19784.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   486.883 ±(99.9%) 40.175 MB/sec [Average]
[info]   (min, avg, max) = (475.343, 486.883, 497.836), stdev = 10.433
[info]   CI (99.9%): [446.708, 527.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39890.940 ±(99.9%) 3983.296 B/op [Average]
[info]   (min, avg, max) = (38832.022, 39890.940, 41197.953), stdev = 1034.449
[info]   CI (99.9%): [35907.644, 43874.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.208 ±(99.9%) 1403.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.208, 665.551), stdev = 364.425
[info]   CI (99.9%): [≈ 0, 1802.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   32802.422 ±(99.9%) 115312.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32802.422, 55056.167), stdev = 29946.367
[info]   CI (99.9%): [≈ 0, 148115.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.351 ±(99.9%) 1.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 0.998), stdev = 0.488
[info]   CI (99.9%): [≈ 0, 2.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.47% complete, ETA 00:43:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1755.240 ops/s
[info] # Warmup Iteration   2: 13356.989 ops/s
[info] # Warmup Iteration   3: 14659.459 ops/s
[info] # Warmup Iteration   4: 14939.737 ops/s
[info] # Warmup Iteration   5: 15096.195 ops/s
[info] Iteration   1: 14985.874 ops/s
[info]                  ·gc.alloc.rate:               410.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          43113.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53726.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 15051.854 ops/s
[info]                  ·gc.alloc.rate:               420.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          43920.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69331.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14954.586 ops/s
[info]                  ·gc.alloc.rate:      400.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 42126.794 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14878.339 ops/s
[info]                  ·gc.alloc.rate:                   421.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              44586.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70142.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509.978 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14991.583 ops/s
[info]                  ·gc.alloc.rate:      398.524 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14972.447 ±(99.9%) 243.743 ops/s [Average]
[info]   (min, avg, max) = (14878.339, 14972.447, 15051.854), stdev = 63.299
[info]   CI (99.9%): [14728.705, 15216.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   410.217 ±(99.9%) 41.305 MB/sec [Average]
[info]   (min, avg, max) = (398.524, 410.217, 421.543), stdev = 10.727
[info]   CI (99.9%): [368.912, 451.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43115.872 ±(99.9%) 4489.047 B/op [Average]
[info]   (min, avg, max) = (41832.029, 43115.872, 44586.352), stdev = 1165.791
[info]   CI (99.9%): [38626.825, 47604.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   367.594 ±(99.9%) 1313.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.594, 663.162), stdev = 341.216
[info]   CI (99.9%): [≈ 0, 1681.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38640.085 ±(99.9%) 138141.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38640.085, 70142.280), stdev = 35875.036
[info]   CI (99.9%): [≈ 0, 176782.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.964 ±(99.9%) 8.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.964, 4.822), stdev = 2.156
[info]   CI (99.9%): [≈ 0, 9.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   101.996 ±(99.9%) 878.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.996, 509.978), stdev = 228.069
[info]   CI (99.9%): [≈ 0, 980.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67.67% complete, ETA 00:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14669.823 ops/s
[info] # Warmup Iteration   2: 21695.995 ops/s
[info] # Warmup Iteration   3: 22968.142 ops/s
[info] # Warmup Iteration   4: 22976.309 ops/s
[info] # Warmup Iteration   5: 22476.648 ops/s
[info] Iteration   1: 22301.417 ops/s
[info]                  ·gc.alloc.rate:      413.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 29180.918 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23007.338 ops/s
[info]                  ·gc.alloc.rate:               448.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          30651.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45839.886 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 23009.965 ops/s
[info]                  ·gc.alloc.rate:                   436.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              29868.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45835.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23101.211 ops/s
[info]                  ·gc.alloc.rate:      425.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 28955.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23031.050 ops/s
[info]                  ·gc.alloc.rate:                   449.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              30731.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45746.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22890.196 ±(99.9%) 1275.800 ops/s [Average]
[info]   (min, avg, max) = (22301.417, 22890.196, 23101.211), stdev = 331.321
[info]   CI (99.9%): [21614.396, 24165.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   434.657 ±(99.9%) 59.436 MB/sec [Average]
[info]   (min, avg, max) = (413.542, 434.657, 449.773), stdev = 15.435
[info]   CI (99.9%): [375.221, 494.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29877.618 ±(99.9%) 3143.311 B/op [Average]
[info]   (min, avg, max) = (28955.026, 29877.618, 30731.967), stdev = 816.308
[info]   CI (99.9%): [26734.307, 33020.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.994 ±(99.9%) 1413.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.994, 670.228), stdev = 366.969
[info]   CI (99.9%): [≈ 0, 1815.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27484.479 ±(99.9%) 96611.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27484.479, 45839.886), stdev = 25089.810
[info]   CI (99.9%): [≈ 0, 124096.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.375), stdev = 1.507
[info]   CI (99.9%): [≈ 0, 6.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.449 ±(99.9%) 396.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.449, 230.820), stdev = 103.069
[info]   CI (99.9%): [≈ 0, 443.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67.87% complete, ETA 00:42:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98.591 ops/s
[info] # Warmup Iteration   2: 2297.140 ops/s
[info] # Warmup Iteration   3: 4042.998 ops/s
[info] # Warmup Iteration   4: 4106.136 ops/s
[info] # Warmup Iteration   5: 4137.677 ops/s
[info] Iteration   1: 4132.016 ops/s
[info]                  ·gc.alloc.rate:                   2443.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              930794.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765057.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4002.126 ops/s
[info]                  ·gc.alloc.rate:                   2420.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              951799.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1055255.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 4037.631 ops/s
[info]                  ·gc.alloc.rate:                   2401.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              935812.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     785847.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4121.932 ops/s
[info]                  ·gc.alloc.rate:                   2504.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              956074.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1028235.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.946 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4120.283 ops/s
[info]                  ·gc.alloc.rate:               2476.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          945885.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 773076.774 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4082.798 ±(99.9%) 227.049 ops/s [Average]
[info]   (min, avg, max) = (4002.126, 4082.798, 4132.016), stdev = 58.964
[info]   CI (99.9%): [3855.748, 4309.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2449.365 ±(99.9%) 160.640 MB/sec [Average]
[info]   (min, avg, max) = (2401.154, 2449.365, 2504.478), stdev = 41.718
[info]   CI (99.9%): [2288.726, 2610.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   944073.160 ±(99.9%) 40914.073 B/op [Average]
[info]   (min, avg, max) = (930794.110, 944073.160, 956074.091), stdev = 10625.255
[info]   CI (99.9%): [903159.087, 984987.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.308 ±(99.9%) 1417.898 MB/sec [Average]
[info]   (min, avg, max) = (2008.775, 2285.308, 2693.507), stdev = 368.224
[info]   CI (99.9%): [867.410, 3703.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   881494.488 ±(99.9%) 565225.748 B/op [Average]
[info]   (min, avg, max) = (765057.084, 881494.488, 1055255.662), stdev = 146787.332
[info]   CI (99.9%): [316268.741, 1446720.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.277 ±(99.9%) 1.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 1.114), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   105.924 ±(99.9%) 696.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.924, 424.172), stdev = 180.787
[info]   CI (99.9%): [≈ 0, 802.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 11.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68.07% complete, ETA 00:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3589.924 ops/s
[info] # Warmup Iteration   2: 9414.229 ops/s
[info] # Warmup Iteration   3: 9626.776 ops/s
[info] # Warmup Iteration   4: 10014.992 ops/s
[info] # Warmup Iteration   5: 9998.813 ops/s
[info] Iteration   1: 10028.069 ops/s
[info]                  ·gc.alloc.rate:                   1266.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              198760.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210551.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10038.400 ops/s
[info]                  ·gc.alloc.rate:               1275.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          199890.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210446.279 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 10043.340 ops/s
[info]                  ·gc.alloc.rate:                   1272.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              199430.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210445.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10045.318 ops/s
[info]                  ·gc.alloc.rate:                   1247.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              195493.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105243.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 468.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10057.890 ops/s
[info]                  ·gc.alloc.rate:                   1273.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              199173.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209975.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   10042.603 ±(99.9%) 41.763 ops/s [Average]
[info]   (min, avg, max) = (10028.069, 10042.603, 10057.890), stdev = 10.846
[info]   CI (99.9%): [10000.841, 10084.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1267.112 ±(99.9%) 43.167 MB/sec [Average]
[info]   (min, avg, max) = (1247.882, 1267.112, 1275.121), stdev = 11.210
[info]   CI (99.9%): [1223.945, 1310.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   198549.674 ±(99.9%) 6765.345 B/op [Average]
[info]   (min, avg, max) = (195493.478, 198549.674, 199890.305), stdev = 1756.939
[info]   CI (99.9%): [191784.330, 205315.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208.261 ±(99.9%) 1154.782 MB/sec [Average]
[info]   (min, avg, max) = (671.796, 1208.261, 1343.095), stdev = 299.893
[info]   CI (99.9%): [53.479, 2363.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   189332.649 ±(99.9%) 181009.799 B/op [Average]
[info]   (min, avg, max) = (105243.720, 189332.649, 210551.552), stdev = 47007.670
[info]   CI (99.9%): [8322.851, 370342.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 4.963 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 2.989), stdev = 1.289
[info]   CI (99.9%): [≈ 0, 5.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   114.144 ±(99.9%) 777.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.144, 468.280), stdev = 201.930
[info]   CI (99.9%): [≈ 0, 891.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.27% complete, ETA 00:42:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2352.106 ops/s
[info] # Warmup Iteration   2: 8299.635 ops/s
[info] # Warmup Iteration   3: 10191.055 ops/s
[info] # Warmup Iteration   4: 10135.120 ops/s
[info] # Warmup Iteration   5: 10259.490 ops/s
[info] Iteration   1: 10305.552 ops/s
[info]                  ·gc.alloc.rate:                   2184.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              333428.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306902.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 586.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10264.581 ops/s
[info]                  ·gc.alloc.rate:                   2175.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              333564.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307413.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10167.674 ops/s
[info]                  ·gc.alloc.rate:                   2143.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              331742.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309933.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.332 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10322.951 ops/s
[info]                  ·gc.alloc.rate:                   2213.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              337487.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407407.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.173 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10419.233 ops/s
[info]                  ·gc.alloc.rate:                   2220.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              335429.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303495.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10295.998 ±(99.9%) 352.174 ops/s [Average]
[info]   (min, avg, max) = (10167.674, 10295.998, 10419.233), stdev = 91.459
[info]   CI (99.9%): [9943.824, 10648.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2187.524 ±(99.9%) 120.269 MB/sec [Average]
[info]   (min, avg, max) = (2143.281, 2187.524, 2220.846), stdev = 31.233
[info]   CI (99.9%): [2067.255, 2307.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   334330.563 ±(99.9%) 8451.567 B/op [Average]
[info]   (min, avg, max) = (331742.605, 334330.563, 337487.359), stdev = 2194.845
[info]   CI (99.9%): [325878.996, 342782.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2139.915 ±(99.9%) 1146.066 MB/sec [Average]
[info]   (min, avg, max) = (2002.377, 2139.915, 2672.301), stdev = 297.630
[info]   CI (99.9%): [993.849, 3285.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   327030.391 ±(99.9%) 173242.516 B/op [Average]
[info]   (min, avg, max) = (303495.443, 327030.391, 407407.216), stdev = 44990.531
[info]   CI (99.9%): [153787.875, 500272.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.847 ±(99.9%) 6.450 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.847, 3.841), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   129.405 ±(99.9%) 984.517 B/op [Average]
[info]   (min, avg, max) = (3.173, 129.405, 586.317), stdev = 255.676
[info]   CI (99.9%): [≈ 0, 1113.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.47% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.688 ops/s
[info] # Warmup Iteration   2: 37415.855 ops/s
[info] # Warmup Iteration   3: 56365.705 ops/s
[info] # Warmup Iteration   4: 56792.120 ops/s
[info] # Warmup Iteration   5: 56869.998 ops/s
[info] Iteration   1: 55778.022 ops/s
[info]                  ·gc.alloc.rate:               540.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          15240.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18748.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 55770.777 ops/s
[info]                  ·gc.alloc.rate:               538.295 MB/sec
[info]                  ·gc.alloc.rate.norm:          15189.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18750.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 55155.860 ops/s
[info]                  ·gc.alloc.rate:                   554.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              15809.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18978.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57894.596 ops/s
[info]                  ·gc.alloc.rate:      541.240 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57599.493 ops/s
[info]                  ·gc.alloc.rate:               557.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          15234.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18173.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   56439.750 ±(99.9%) 4714.233 ops/s [Average]
[info]   (min, avg, max) = (55155.860, 56439.750, 57894.596), stdev = 1224.271
[info]   CI (99.9%): [51725.517, 61153.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   546.282 ±(99.9%) 34.195 MB/sec [Average]
[info]   (min, avg, max) = (538.295, 546.282, 557.604), stdev = 8.880
[info]   CI (99.9%): [512.087, 580.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15237.096 ±(99.9%) 1497.728 B/op [Average]
[info]   (min, avg, max) = (14712.007, 15237.096, 15809.039), stdev = 388.955
[info]   CI (99.9%): [13739.367, 16734.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.867 ±(99.9%) 1144.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.867, 665.167), stdev = 297.323
[info]   CI (99.9%): [≈ 0, 1676.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14930.057 ±(99.9%) 32158.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14930.057, 18978.450), stdev = 8351.458
[info]   CI (99.9%): [≈ 0, 47088.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 1.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.594), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.67% complete, ETA 00:41:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16299.654 ops/s
[info] # Warmup Iteration   2: 41090.902 ops/s
[info] # Warmup Iteration   3: 44117.948 ops/s
[info] # Warmup Iteration   4: 44060.651 ops/s
[info] # Warmup Iteration   5: 43815.398 ops/s
[info] Iteration   1: 42968.424 ops/s
[info]                  ·gc.alloc.rate:                   641.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              23497.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24289.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42713.647 ops/s
[info]                  ·gc.alloc.rate:               631.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          23248.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24433.149 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42217.988 ops/s
[info]                  ·gc.alloc.rate:                   640.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              23884.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24769.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42807.902 ops/s
[info]                  ·gc.alloc.rate:               635.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          23374.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24427.917 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 44053.417 ops/s
[info]                  ·gc.alloc.rate:               651.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          23261.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23761.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   42952.276 ±(99.9%) 2604.342 ops/s [Average]
[info]   (min, avg, max) = (42217.988, 42952.276, 44053.417), stdev = 676.339
[info]   CI (99.9%): [40347.933, 45556.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   640.071 ±(99.9%) 28.910 MB/sec [Average]
[info]   (min, avg, max) = (631.020, 640.071, 651.161), stdev = 7.508
[info]   CI (99.9%): [611.160, 668.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23453.486 ±(99.9%) 1005.213 B/op [Average]
[info]   (min, avg, max) = (23248.840, 23453.486, 23884.378), stdev = 261.051
[info]   CI (99.9%): [22448.273, 24458.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.098 ±(99.9%) 3.417 MB/sec [Average]
[info]   (min, avg, max) = (663.165, 664.098, 665.160), stdev = 0.887
[info]   CI (99.9%): [660.680, 667.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24336.220 ±(99.9%) 1411.920 B/op [Average]
[info]   (min, avg, max) = (23761.504, 24336.220, 24769.219), stdev = 366.671
[info]   CI (99.9%): [22924.300, 25748.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.384 ±(99.9%) 2.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.144), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 2.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68.88% complete, ETA 00:41:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40112.643 ops/s
[info] # Warmup Iteration   2: 86938.384 ops/s
[info] # Warmup Iteration   3: 88929.001 ops/s
[info] # Warmup Iteration   4: 86121.001 ops/s
[info] # Warmup Iteration   5: 88876.882 ops/s
[info] Iteration   1: 87036.763 ops/s
[info]                  ·gc.alloc.rate:               671.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          12146.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12123.275 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 88205.870 ops/s
[info]                  ·gc.alloc.rate:               688.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          12282.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11968.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 89552.239 ops/s
[info]                  ·gc.alloc.rate:                   693.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              12188.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11788.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 87105.979 ops/s
[info]                  ·gc.alloc.rate:               673.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          12163.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12105.051 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 87375.324 ops/s
[info]                  ·gc.alloc.rate:      656.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   87855.235 ±(99.9%) 4068.020 ops/s [Average]
[info]   (min, avg, max) = (87036.763, 87855.235, 89552.239), stdev = 1056.452
[info]   CI (99.9%): [83787.215, 91923.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   676.913 ±(99.9%) 56.053 MB/sec [Average]
[info]   (min, avg, max) = (656.960, 676.913, 693.674), stdev = 14.557
[info]   CI (99.9%): [620.861, 732.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12122.625 ±(99.9%) 657.252 B/op [Average]
[info]   (min, avg, max) = (11832.005, 12122.625, 12282.084), stdev = 170.686
[info]   CI (99.9%): [11465.373, 12779.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.543 ±(99.9%) 1154.950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.543, 670.898), stdev = 299.937
[info]   CI (99.9%): [≈ 0, 1691.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9597.073 ±(99.9%) 20664.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9597.073, 12123.275), stdev = 5366.601
[info]   CI (99.9%): [≈ 0, 30261.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.366), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.08% complete, ETA 00:41:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40222.378 ops/s
[info] # Warmup Iteration   2: 98809.402 ops/s
[info] # Warmup Iteration   3: 102380.505 ops/s
[info] # Warmup Iteration   4: 105462.177 ops/s
[info] # Warmup Iteration   5: 105658.798 ops/s
[info] Iteration   1: 105677.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105487.113 ops/s
[info]                  ·gc.alloc.rate:      0.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.459 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 105737.578 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105158.275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105161.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   105444.432 ±(99.9%) 1061.944 ops/s [Average]
[info]   (min, avg, max) = (105158.275, 105444.432, 105737.578), stdev = 275.784
[info]   CI (99.9%): [104382.487, 106506.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.020 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.295 ±(99.9%) 2.505 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.295, 1.459), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 2.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.28% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 763.677 ops/s
[info] # Warmup Iteration   2: 5764.624 ops/s
[info] # Warmup Iteration   3: 7482.002 ops/s
[info] # Warmup Iteration   4: 7602.234 ops/s
[info] # Warmup Iteration   5: 7699.870 ops/s
[info] Iteration   1: 7586.367 ops/s
[info]                  ·gc.alloc.rate:                   2412.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              500486.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416569.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7702.241 ops/s
[info]                  ·gc.alloc.rate:                   2435.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              497553.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     548171.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.287 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7740.771 ops/s
[info]                  ·gc.alloc.rate:               2448.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          497637.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409856.033 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7732.233 ops/s
[info]                  ·gc.alloc.rate:               2485.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          505759.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 548147.001 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 7698.783 ops/s
[info]                  ·gc.alloc.rate:               2448.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          500519.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 413793.334 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7692.079 ±(99.9%) 238.199 ops/s [Average]
[info]   (min, avg, max) = (7586.367, 7692.079, 7740.771), stdev = 61.860
[info]   CI (99.9%): [7453.880, 7930.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2445.979 ±(99.9%) 101.336 MB/sec [Average]
[info]   (min, avg, max) = (2412.650, 2445.979, 2485.163), stdev = 26.317
[info]   CI (99.9%): [2344.643, 2547.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   500391.157 ±(99.9%) 12840.576 B/op [Average]
[info]   (min, avg, max) = (497553.612, 500391.157, 505759.376), stdev = 3334.657
[info]   CI (99.9%): [487550.581, 513231.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.060 ±(99.9%) 1417.645 MB/sec [Average]
[info]   (min, avg, max) = (2008.122, 2285.060, 2693.444), stdev = 368.158
[info]   CI (99.9%): [867.414, 3702.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   467307.623 ±(99.9%) 284353.892 B/op [Average]
[info]   (min, avg, max) = (409856.033, 467307.623, 548171.853), stdev = 73845.803
[info]   CI (99.9%): [182953.731, 751661.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.271 ±(99.9%) 1.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.083), stdev = 0.469
[info]   CI (99.9%): [≈ 0, 2.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55.970 ±(99.9%) 374.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.970, 224.561), stdev = 97.238
[info]   CI (99.9%): [≈ 0, 430.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69.48% complete, ETA 00:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1444.240 ops/s
[info] # Warmup Iteration   2: 3188.076 ops/s
[info] # Warmup Iteration   3: 3318.268 ops/s
[info] # Warmup Iteration   4: 3449.620 ops/s
[info] # Warmup Iteration   5: 3424.156 ops/s
[info] Iteration   1: 3413.439 ops/s
[info]                  ·gc.alloc.rate:                   1884.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              868857.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929594.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1173.653 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3425.448 ops/s
[info]                  ·gc.alloc.rate:                   1916.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              880267.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925727.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3439.314 ops/s
[info]                  ·gc.alloc.rate:                   1896.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              867527.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613116.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3434.613 ops/s
[info]                  ·gc.alloc.rate:                   1894.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              867953.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921012.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3439.533 ops/s
[info]                  ·gc.alloc.rate:               1923.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          880240.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 919979.931 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   3430.469 ±(99.9%) 42.741 ops/s [Average]
[info]   (min, avg, max) = (3413.439, 3430.469, 3439.533), stdev = 11.100
[info]   CI (99.9%): [3387.729, 3473.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1903.084 ±(99.9%) 63.054 MB/sec [Average]
[info]   (min, avg, max) = (1884.701, 1903.084, 1923.989), stdev = 16.375
[info]   CI (99.9%): [1840.030, 1966.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   872969.294 ±(99.9%) 25673.011 B/op [Average]
[info]   (min, avg, max) = (867527.916, 872969.294, 880267.712), stdev = 6667.200
[info]   CI (99.9%): [847296.283, 898642.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1878.549 ±(99.9%) 1159.190 MB/sec [Average]
[info]   (min, avg, max) = (1340.057, 1878.549, 2016.450), stdev = 301.038
[info]   CI (99.9%): [719.358, 3037.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   861886.090 ±(99.9%) 535699.990 B/op [Average]
[info]   (min, avg, max) = (613116.801, 861886.090, 929594.097), stdev = 139119.586
[info]   CI (99.9%): [326186.100, 1397586.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.746 ±(99.9%) 4.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 2.546), stdev = 1.085
[info]   CI (99.9%): [≈ 0, 4.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   343.678 ±(99.9%) 1926.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 343.678, 1173.653), stdev = 500.315
[info]   CI (99.9%): [≈ 0, 2270.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.68% complete, ETA 00:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 756037.158 ops/s
[info] # Warmup Iteration   2: 7431503.659 ops/s
[info] # Warmup Iteration   3: 8941215.160 ops/s
[info] # Warmup Iteration   4: 9155180.403 ops/s
[info] # Warmup Iteration   5: 9223229.647 ops/s
[info] Iteration   1: 9195029.755 ops/s
[info]                  ·gc.alloc.rate:                   4954.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4714.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     806.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9211813.945 ops/s
[info]                  ·gc.alloc.rate:                   4963.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4734.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9188661.463 ops/s
[info]                  ·gc.alloc.rate:                   4953.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4748.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     813.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9184947.689 ops/s
[info]                  ·gc.alloc.rate:                   4952.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9159477.987 ops/s
[info]                  ·gc.alloc.rate:                   4939.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   9187986.168 ±(99.9%) 73055.247 ops/s [Average]
[info]   (min, avg, max) = (9159477.987, 9187986.168, 9211813.945), stdev = 18972.216
[info]   CI (99.9%): [9114930.921, 9261041.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4952.575 ±(99.9%) 33.331 MB/sec [Average]
[info]   (min, avg, max) = (4939.333, 4952.575, 4963.571), stdev = 8.656
[info]   CI (99.9%): [4919.244, 4985.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   848.251 ±(99.9%) 1.237 B/op [Average]
[info]   (min, avg, max) = (847.895, 848.251, 848.646), stdev = 0.321
[info]   CI (99.9%): [847.014, 849.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4743.795 ±(99.9%) 76.245 MB/sec [Average]
[info]   (min, avg, max) = (4714.743, 4743.795, 4764.665), stdev = 19.801
[info]   CI (99.9%): [4667.549, 4820.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   812.498 ±(99.9%) 18.078 B/op [Average]
[info]   (min, avg, max) = (806.899, 812.498, 818.425), stdev = 4.695
[info]   CI (99.9%): [794.420, 830.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.008, 0.014), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69.88% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.582 ops/s
[info] # Warmup Iteration   2: 34788836.623 ops/s
[info] # Warmup Iteration   3: 36982109.751 ops/s
[info] # Warmup Iteration   4: 37760872.140 ops/s
[info] # Warmup Iteration   5: 37858231.884 ops/s
[info] Iteration   1: 37947928.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37980820.468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37967815.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38187195.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37967476.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38010247.343 ±(99.9%) 383569.130 ops/s [Average]
[info]   (min, avg, max) = (37947928.483, 38010247.343, 38187195.354), stdev = 99611.685
[info]   CI (99.9%): [37626678.213, 38393816.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.08% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 513515.826 ops/s
[info] # Warmup Iteration   2: 8406822.991 ops/s
[info] # Warmup Iteration   3: 10734397.100 ops/s
[info] # Warmup Iteration   4: 10743544.464 ops/s
[info] # Warmup Iteration   5: 10848320.311 ops/s
[info] Iteration   1: 10878956.207 ops/s
[info]                  ·gc.alloc.rate:               3725.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          538.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3340.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.177 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10697760.262 ops/s
[info]                  ·gc.alloc.rate:                   3667.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10865202.912 ops/s
[info]                  ·gc.alloc.rate:               3752.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          543.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4040.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 585.152 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 10762221.633 ops/s
[info]                  ·gc.alloc.rate:               3690.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 494.166 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 10925412.705 ops/s
[info]                  ·gc.alloc.rate:                   3743.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10825910.744 ±(99.9%) 358839.857 ops/s [Average]
[info]   (min, avg, max) = (10697760.262, 10825910.744, 10925412.705), stdev = 93189.571
[info]   CI (99.9%): [10467070.887, 11184750.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3715.849 ±(99.9%) 138.964 MB/sec [Average]
[info]   (min, avg, max) = (3667.264, 3715.849, 3752.026), stdev = 36.089
[info]   CI (99.9%): [3576.885, 3854.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   540.134 ±(99.9%) 6.904 B/op [Average]
[info]   (min, avg, max) = (538.956, 540.134, 543.312), stdev = 1.793
[info]   CI (99.9%): [533.230, 547.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3500.207 ±(99.9%) 1166.422 MB/sec [Average]
[info]   (min, avg, max) = (3340.063, 3500.207, 4040.961), stdev = 302.916
[info]   CI (99.9%): [2333.785, 4666.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   508.740 ±(99.9%) 165.351 B/op [Average]
[info]   (min, avg, max) = (483.177, 508.740, 585.152), stdev = 42.941
[info]   CI (99.9%): [343.390, 674.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.28% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13333198.686 ops/s
[info] # Warmup Iteration   2: 42571163.857 ops/s
[info] # Warmup Iteration   3: 48150890.410 ops/s
[info] # Warmup Iteration   4: 48082168.691 ops/s
[info] # Warmup Iteration   5: 48175988.308 ops/s
[info] Iteration   1: 48130845.826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48213322.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47931542.520 ops/s
[info]                  ·gc.alloc.rate:      1.184 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48110311.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48114279.590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48100060.429 ±(99.9%) 396829.322 ops/s [Average]
[info]   (min, avg, max) = (47931542.520, 48100060.429, 48213322.478), stdev = 103055.315
[info]   CI (99.9%): [47703231.106, 48496889.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.237 ±(99.9%) 2.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.237, 1.184), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.48% complete, ETA 00:39:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7108628.945 ops/s
[info] # Warmup Iteration   2: 29104836.431 ops/s
[info] # Warmup Iteration   3: 31502066.565 ops/s
[info] # Warmup Iteration   4: 31406109.003 ops/s
[info] # Warmup Iteration   5: 31661771.564 ops/s
[info] Iteration   1: 31656018.720 ops/s
[info]                  ·gc.alloc.rate:               829.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 31437720.562 ops/s
[info]                  ·gc.alloc.rate:               838.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67.294 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 31561659.456 ops/s
[info]                  ·gc.alloc.rate:               819.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.532 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 31590938.284 ops/s
[info]                  ·gc.alloc.rate:                   817.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30264568.827 ops/s
[info]                  ·gc.alloc.rate:               783.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31302181.170 ±(99.9%) 2254288.909 ops/s [Average]
[info]   (min, avg, max) = (30264568.827, 31302181.170, 31656018.720), stdev = 585431.671
[info]   CI (99.9%): [29047892.261, 33556470.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   817.506 ±(99.9%) 79.582 MB/sec [Average]
[info]   (min, avg, max) = (783.677, 817.506, 838.197), stdev = 20.667
[info]   CI (99.9%): [737.923, 897.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.097 ±(99.9%) 2.001 B/op [Average]
[info]   (min, avg, max) = (40.727, 41.097, 41.959), stdev = 0.520
[info]   CI (99.9%): [39.096, 43.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.677 ±(99.9%) 1157.307 MB/sec [Average]
[info]   (min, avg, max) = (671.246, 806.677, 1344.314), stdev = 300.549
[info]   CI (99.9%): [≈ 0, 1963.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.536 ±(99.9%) 57.655 B/op [Average]
[info]   (min, avg, max) = (33.366, 40.536, 67.294), stdev = 14.973
[info]   CI (99.9%): [≈ 0, 98.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70.68% complete, ETA 00:39:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978148.761 ops/s
[info] # Warmup Iteration   2: 7400529.395 ops/s
[info] # Warmup Iteration   3: 8983923.358 ops/s
[info] # Warmup Iteration   4: 8940747.779 ops/s
[info] # Warmup Iteration   5: 8859598.629 ops/s
[info] Iteration   1: 9042122.358 ops/s
[info]                  ·gc.alloc.rate:                   3805.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              662.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     582.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 9091486.162 ops/s
[info]                  ·gc.alloc.rate:                   3856.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              667.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4031.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9134547.597 ops/s
[info]                  ·gc.alloc.rate:                   3848.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     580.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9014127.185 ops/s
[info]                  ·gc.alloc.rate:                   3827.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              668.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9105238.874 ops/s
[info]                  ·gc.alloc.rate:                   3838.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9077504.435 ±(99.9%) 187530.483 ops/s [Average]
[info]   (min, avg, max) = (9014127.185, 9077504.435, 9134547.597), stdev = 48701.071
[info]   CI (99.9%): [8889973.952, 9265034.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3835.241 ±(99.9%) 76.252 MB/sec [Average]
[info]   (min, avg, max) = (3805.797, 3835.241, 3856.446), stdev = 19.802
[info]   CI (99.9%): [3758.989, 3911.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   664.872 ±(99.9%) 10.432 B/op [Average]
[info]   (min, avg, max) = (662.374, 664.872, 668.171), stdev = 2.709
[info]   CI (99.9%): [654.440, 675.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3639.996 ±(99.9%) 1426.580 MB/sec [Average]
[info]   (min, avg, max) = (3347.119, 3639.996, 4058.907), stdev = 370.478
[info]   CI (99.9%): [2213.416, 5066.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   631.158 ±(99.9%) 253.750 B/op [Average]
[info]   (min, avg, max) = (580.899, 631.158, 708.616), stdev = 65.898
[info]   CI (99.9%): [377.408, 884.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.025), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70.88% complete, ETA 00:38:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3495346.650 ops/s
[info] # Warmup Iteration   2: 9094503.025 ops/s
[info] # Warmup Iteration   3: 11504321.198 ops/s
[info] # Warmup Iteration   4: 11595732.923 ops/s
[info] # Warmup Iteration   5: 11648817.460 ops/s
[info] Iteration   1: 11525635.209 ops/s
[info]                  ·gc.alloc.rate:                   4932.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4721.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     644.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 11564148.849 ops/s
[info]                  ·gc.alloc.rate:                   4949.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4739.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     644.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 11645049.955 ops/s
[info]                  ·gc.alloc.rate:                   4984.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4751.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 11458131.884 ops/s
[info]                  ·gc.alloc.rate:                   4910.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              674.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 11460792.360 ops/s
[info]                  ·gc.alloc.rate:                   4908.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              674.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4763.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     654.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11530751.651 ±(99.9%) 300582.077 ops/s [Average]
[info]   (min, avg, max) = (11458131.884, 11530751.651, 11645049.955), stdev = 78060.211
[info]   CI (99.9%): [11230169.574, 11831333.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4937.195 ±(99.9%) 120.029 MB/sec [Average]
[info]   (min, avg, max) = (4908.928, 4937.195, 4984.242), stdev = 31.171
[info]   CI (99.9%): [4817.166, 5057.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   673.828 ±(99.9%) 1.726 B/op [Average]
[info]   (min, avg, max) = (673.406, 673.828, 674.487), stdev = 0.448
[info]   CI (99.9%): [672.102, 675.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4747.190 ±(99.9%) 65.337 MB/sec [Average]
[info]   (min, avg, max) = (4721.734, 4747.190, 4763.737), stdev = 16.968
[info]   CI (99.9%): [4681.853, 4812.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   647.922 ±(99.9%) 21.464 B/op [Average]
[info]   (min, avg, max) = (642.152, 647.922, 654.150), stdev = 5.574
[info]   CI (99.9%): [626.458, 669.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.016, 0.026), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.08% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3439275.977 ops/s
[info] # Warmup Iteration   2: 13127525.138 ops/s
[info] # Warmup Iteration   3: 13678952.207 ops/s
[info] # Warmup Iteration   4: 13556619.727 ops/s
[info] # Warmup Iteration   5: 13718816.369 ops/s
[info] Iteration   1: 13565838.014 ops/s
[info]                  ·gc.alloc.rate:                   1654.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              191.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13786656.105 ops/s
[info]                  ·gc.alloc.rate:                   1652.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13779585.593 ops/s
[info]                  ·gc.alloc.rate:                   1677.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              191.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13821708.851 ops/s
[info]                  ·gc.alloc.rate:                   1669.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13794033.194 ops/s
[info]                  ·gc.alloc.rate:               1666.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          190.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.914 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13749564.352 ±(99.9%) 400238.951 ops/s [Average]
[info]   (min, avg, max) = (13565838.014, 13749564.352, 13821708.851), stdev = 103940.785
[info]   CI (99.9%): [13349325.400, 14149803.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1663.653 ±(99.9%) 40.565 MB/sec [Average]
[info]   (min, avg, max) = (1652.022, 1663.653, 1677.100), stdev = 10.535
[info]   CI (99.9%): [1623.088, 1704.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   190.402 ±(99.9%) 5.129 B/op [Average]
[info]   (min, avg, max) = (188.528, 190.402, 191.874), stdev = 1.332
[info]   CI (99.9%): [185.273, 195.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.188 ±(99.9%) 1416.428 MB/sec [Average]
[info]   (min, avg, max) = (1340.321, 1610.188, 2013.854), stdev = 367.842
[info]   CI (99.9%): [193.760, 3026.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   184.460 ±(99.9%) 166.130 B/op [Average]
[info]   (min, avg, max) = (152.614, 184.460, 233.617), stdev = 43.143
[info]   CI (99.9%): [18.330, 350.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 4.535 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 2.728), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.311), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.449
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.29% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.642 ops/s
[info] # Warmup Iteration   2: 37780068.572 ops/s
[info] # Warmup Iteration   3: 42462494.215 ops/s
[info] # Warmup Iteration   4: 40633779.940 ops/s
[info] # Warmup Iteration   5: 42283335.653 ops/s
[info] Iteration   1: 42449526.056 ops/s
[info]                  ·gc.alloc.rate:                   886.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42213340.071 ops/s
[info]                  ·gc.alloc.rate:                   905.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42358742.441 ops/s
[info]                  ·gc.alloc.rate:               879.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 42412924.521 ops/s
[info]                  ·gc.alloc.rate:                   879.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42380805.915 ops/s
[info]                  ·gc.alloc.rate:               876.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42363067.801 ±(99.9%) 348225.043 ops/s [Average]
[info]   (min, avg, max) = (42213340.071, 42363067.801, 42449526.056), stdev = 90432.938
[info]   CI (99.9%): [42014842.758, 42711292.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   885.678 ±(99.9%) 45.626 MB/sec [Average]
[info]   (min, avg, max) = (876.796, 885.678, 905.795), stdev = 11.849
[info]   CI (99.9%): [840.051, 931.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.902 ±(99.9%) 1.912 B/op [Average]
[info]   (min, avg, max) = (32.559, 32.902, 33.764), stdev = 0.496
[info]   CI (99.9%): [30.990, 34.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.248 ±(99.9%) 1147.307 MB/sec [Average]
[info]   (min, avg, max) = (666.158, 800.248, 1333.239), stdev = 297.952
[info]   CI (99.9%): [≈ 0, 1947.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   29.745 ±(99.9%) 42.949 B/op [Average]
[info]   (min, avg, max) = (24.698, 29.745, 49.697), stdev = 11.154
[info]   CI (99.9%): [≈ 0, 72.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.49% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1319807.775 ops/s
[info] # Warmup Iteration   2: 10908155.977 ops/s
[info] # Warmup Iteration   3: 12964024.771 ops/s
[info] # Warmup Iteration   4: 12992387.141 ops/s
[info] # Warmup Iteration   5: 13227726.763 ops/s
[info] Iteration   1: 13122262.048 ops/s
[info]                  ·gc.alloc.rate:                   2643.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              317.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13317297.501 ops/s
[info]                  ·gc.alloc.rate:                   2696.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              318.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13294838.913 ops/s
[info]                  ·gc.alloc.rate:               2729.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.885 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 13330092.831 ops/s
[info]                  ·gc.alloc.rate:               2736.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.964 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13282407.035 ops/s
[info]                  ·gc.alloc.rate:               2740.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319.047 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13269379.666 ±(99.9%) 324710.481 ops/s [Average]
[info]   (min, avg, max) = (13122262.048, 13269379.666, 13330092.831), stdev = 84326.281
[info]   CI (99.9%): [12944669.185, 13594090.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2709.171 ±(99.9%) 156.707 MB/sec [Average]
[info]   (min, avg, max) = (2643.463, 2709.171, 2740.728), stdev = 40.696
[info]   CI (99.9%): [2552.465, 2865.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   321.416 ±(99.9%) 11.699 B/op [Average]
[info]   (min, avg, max) = (317.786, 321.416, 324.645), stdev = 3.038
[info]   CI (99.9%): [309.717, 333.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2679.757 ±(99.9%) 36.541 MB/sec [Average]
[info]   (min, avg, max) = (2669.950, 2679.757, 2693.468), stdev = 9.489
[info]   CI (99.9%): [2643.217, 2716.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   317.948 ±(99.9%) 7.879 B/op [Average]
[info]   (min, avg, max) = (315.872, 317.948, 320.970), stdev = 2.046
[info]   CI (99.9%): [310.068, 325.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.636 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.374), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71.69% complete, ETA 00:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18904399.399 ops/s
[info] # Warmup Iteration   2: 43278677.868 ops/s
[info] # Warmup Iteration   3: 46450795.352 ops/s
[info] # Warmup Iteration   4: 47633290.919 ops/s
[info] # Warmup Iteration   5: 48495244.271 ops/s
[info] Iteration   1: 48153374.208 ops/s
[info]                  ·gc.alloc.rate:               1018.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.891 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 48973169.311 ops/s
[info]                  ·gc.alloc.rate:               1011.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 48583264.800 ops/s
[info]                  ·gc.alloc.rate:                   1018.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 47291086.802 ops/s
[info]                  ·gc.alloc.rate:               988.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 48626955.394 ops/s
[info]                  ·gc.alloc.rate:                   1016.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   48325570.103 ±(99.9%) 2492850.724 ops/s [Average]
[info]   (min, avg, max) = (47291086.802, 48325570.103, 48973169.311), stdev = 647385.417
[info]   CI (99.9%): [45832719.379, 50818420.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1010.730 ±(99.9%) 48.875 MB/sec [Average]
[info]   (min, avg, max) = (988.568, 1010.730, 1018.501), stdev = 12.693
[info]   CI (99.9%): [961.855, 1059.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.913 ±(99.9%) 1.057 B/op [Average]
[info]   (min, avg, max) = (32.510, 32.913, 33.277), stdev = 0.274
[info]   CI (99.9%): [31.856, 33.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.752 ±(99.9%) 1417.824 MB/sec [Average]
[info]   (min, avg, max) = (672.236, 1075.752, 1345.801), stdev = 368.204
[info]   CI (99.9%): [≈ 0, 2493.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34.997 ±(99.9%) 45.734 B/op [Average]
[info]   (min, avg, max) = (21.601, 34.997, 43.891), stdev = 11.877
[info]   CI (99.9%): [≈ 0, 80.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.89% complete, ETA 00:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21985077.393 ops/s
[info] # Warmup Iteration   2: 57722274.211 ops/s
[info] # Warmup Iteration   3: 62538484.586 ops/s
[info] # Warmup Iteration   4: 62339951.497 ops/s
[info] # Warmup Iteration   5: 62322364.134 ops/s
[info] Iteration   1: 62359219.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62504489.600 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 61920435.637 ops/s
[info]                  ·gc.alloc.rate:      1.464 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.037 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62386437.557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62387996.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62311715.684 ±(99.9%) 869428.456 ops/s [Average]
[info]   (min, avg, max) = (61920435.637, 62311715.684, 62504489.600), stdev = 225787.809
[info]   CI (99.9%): [61442287.228, 63181144.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.293 ±(99.9%) 2.520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.293, 1.464), stdev = 0.654
[info]   CI (99.9%): [≈ 0, 2.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.09% complete, ETA 00:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5732877.091 ops/s
[info] # Warmup Iteration   2: 17699660.741 ops/s
[info] # Warmup Iteration   3: 17914111.201 ops/s
[info] # Warmup Iteration   4: 17734874.945 ops/s
[info] # Warmup Iteration   5: 17754753.244 ops/s
[info] Iteration   1: 17758027.010 ops/s
[info]                  ·gc.alloc.rate:               1663.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.638 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17828711.482 ops/s
[info]                  ·gc.alloc.rate:                   1683.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17915080.505 ops/s
[info]                  ·gc.alloc.rate:               1679.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.095 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 17804768.257 ops/s
[info]                  ·gc.alloc.rate:                   1693.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17916163.508 ops/s
[info]                  ·gc.alloc.rate:                   1693.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17844550.153 ±(99.9%) 268323.304 ops/s [Average]
[info]   (min, avg, max) = (17758027.010, 17844550.153, 17916163.508), stdev = 69682.710
[info]   CI (99.9%): [17576226.848, 18112873.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1682.742 ±(99.9%) 47.157 MB/sec [Average]
[info]   (min, avg, max) = (1663.820, 1682.742, 1693.745), stdev = 12.246
[info]   CI (99.9%): [1635.585, 1729.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.404 ±(99.9%) 3.636 B/op [Average]
[info]   (min, avg, max) = (147.450, 148.404, 149.711), stdev = 0.944
[info]   CI (99.9%): [144.768, 152.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1613.145 ±(99.9%) 1417.931 MB/sec [Average]
[info]   (min, avg, max) = (1338.710, 1613.145, 2020.812), stdev = 368.232
[info]   CI (99.9%): [195.215, 3031.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   142.304 ±(99.9%) 125.894 B/op [Average]
[info]   (min, avg, max) = (118.095, 142.304, 178.621), stdev = 32.694
[info]   CI (99.9%): [16.410, 268.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.29% complete, ETA 00:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375640.167 ops/s
[info] # Warmup Iteration   2: 2235419.604 ops/s
[info] # Warmup Iteration   3: 2711915.090 ops/s
[info] # Warmup Iteration   4: 2708080.077 ops/s
[info] # Warmup Iteration   5: 2650209.808 ops/s
[info] Iteration   1: 2660691.734 ops/s
[info]                  ·gc.alloc.rate:                   2131.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1260.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1191.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2719458.024 ops/s
[info]                  ·gc.alloc.rate:                   2182.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1163.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2676090.714 ops/s
[info]                  ·gc.alloc.rate:               2132.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1180.740 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2725137.515 ops/s
[info]                  ·gc.alloc.rate:                   2198.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              1269.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1160.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2721339.625 ops/s
[info]                  ·gc.alloc.rate:               2196.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1163.498 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2700543.523 ±(99.9%) 115217.378 ops/s [Average]
[info]   (min, avg, max) = (2660691.734, 2700543.523, 2725137.515), stdev = 29921.587
[info]   CI (99.9%): [2585326.144, 2815760.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2168.215 ±(99.9%) 129.102 MB/sec [Average]
[info]   (min, avg, max) = (2131.723, 2168.215, 2198.442), stdev = 33.527
[info]   CI (99.9%): [2039.113, 2297.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1263.445 ±(99.9%) 25.518 B/op [Average]
[info]   (min, avg, max) = (1254.092, 1263.445, 1270.055), stdev = 6.627
[info]   CI (99.9%): [1237.927, 1288.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2010.576 ±(99.9%) 9.229 MB/sec [Average]
[info]   (min, avg, max) = (2007.836, 2010.576, 2013.899), stdev = 2.397
[info]   CI (99.9%): [2001.347, 2019.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1171.748 ±(99.9%) 52.084 B/op [Average]
[info]   (min, avg, max) = (1160.299, 1171.748, 1191.146), stdev = 13.526
[info]   CI (99.9%): [1119.664, 1223.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.414), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.421 ±(99.9%) 3.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 2.019), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72.49% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474571.832 ops/s
[info] # Warmup Iteration   2: 1235447.784 ops/s
[info] # Warmup Iteration   3: 1436101.081 ops/s
[info] # Warmup Iteration   4: 1460591.977 ops/s
[info] # Warmup Iteration   5: 1459333.753 ops/s
[info] Iteration   1: 1454520.924 ops/s
[info]                  ·gc.alloc.rate:                   8334.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              9014.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          8162.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8829.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 1424447.875 ops/s
[info]                  ·gc.alloc.rate:                   8087.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              8935.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7489.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8274.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 1463333.744 ops/s
[info]                  ·gc.alloc.rate:                   8355.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              8985.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          8177.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8793.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 1467803.208 ops/s
[info]                  ·gc.alloc.rate:                   8409.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              9013.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          8180.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8768.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 1428900.006 ops/s
[info]                  ·gc.alloc.rate:                   8179.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              9008.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7496.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8256.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   1447801.151 ±(99.9%) 76750.777 ops/s [Average]
[info]   (min, avg, max) = (1424447.875, 1447801.151, 1467803.208), stdev = 19931.933
[info]   CI (99.9%): [1371050.374, 1524551.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   8273.370 ±(99.9%) 517.496 MB/sec [Average]
[info]   (min, avg, max) = (8087.890, 8273.370, 8409.890), stdev = 134.392
[info]   CI (99.9%): [7755.874, 8790.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8991.577 ±(99.9%) 128.968 B/op [Average]
[info]   (min, avg, max) = (8935.588, 8991.577, 9014.643), stdev = 33.493
[info]   CI (99.9%): [8862.609, 9120.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   7901.418 ±(99.9%) 1435.881 MB/sec [Average]
[info]   (min, avg, max) = (7489.370, 7901.418, 8180.918), stdev = 372.894
[info]   CI (99.9%): [6465.537, 9337.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8584.468 ±(99.9%) 1125.203 B/op [Average]
[info]   (min, avg, max) = (8256.302, 8584.468, 8829.328), stdev = 292.212
[info]   CI (99.9%): [7459.264, 9709.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.140 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.140, 0.223), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   80.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (15.000, 16.000, 17.000), stdev = 0.707
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.69% complete, ETA 00:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69998.996 ops/s
[info] # Warmup Iteration   2: 162208.454 ops/s
[info] # Warmup Iteration   3: 167527.071 ops/s
[info] # Warmup Iteration   4: 169940.121 ops/s
[info] # Warmup Iteration   5: 171056.438 ops/s
[info] Iteration   1: 170813.280 ops/s
[info]                  ·gc.alloc.rate:               3253.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          29973.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30909.068 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 170711.837 ops/s
[info]                  ·gc.alloc.rate:                   3265.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              30100.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30988.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 168230.658 ops/s
[info]                  ·gc.alloc.rate:               3192.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          29864.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25226.647 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 168785.082 ops/s
[info]                  ·gc.alloc.rate:               3230.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          30124.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31510.761 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 170642.096 ops/s
[info]                  ·gc.alloc.rate:               3268.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          30123.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31187.358 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   169836.591 ±(99.9%) 4737.038 ops/s [Average]
[info]   (min, avg, max) = (168230.658, 169836.591, 170813.280), stdev = 1230.194
[info]   CI (99.9%): [165099.553, 174573.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3242.146 ±(99.9%) 121.019 MB/sec [Average]
[info]   (min, avg, max) = (3192.542, 3242.146, 3268.155), stdev = 31.428
[info]   CI (99.9%): [3121.127, 3363.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30037.419 ±(99.9%) 442.357 B/op [Average]
[info]   (min, avg, max) = (29864.852, 30037.419, 30124.239), stdev = 114.879
[info]   CI (99.9%): [29595.062, 30479.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3235.383 ±(99.9%) 1160.421 MB/sec [Average]
[info]   (min, avg, max) = (2696.719, 3235.383, 3383.598), stdev = 301.358
[info]   CI (99.9%): [2074.963, 4395.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29964.556 ±(99.9%) 10237.799 B/op [Average]
[info]   (min, avg, max) = (25226.647, 29964.556, 31510.761), stdev = 2658.724
[info]   CI (99.9%): [19726.757, 40202.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.192), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1989.060 ops/s
[info] # Warmup Iteration   2: 21979.419 ops/s
[info] # Warmup Iteration   3: 33313.319 ops/s
[info] # Warmup Iteration   4: 33270.585 ops/s
[info] # Warmup Iteration   5: 32863.568 ops/s
[info] Iteration   1: 33735.213 ops/s
[info]                  ·gc.alloc.rate:                   2512.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              117225.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93676.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33308.664 ops/s
[info]                  ·gc.alloc.rate:                   2508.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              118526.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126587.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.967 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33265.944 ops/s
[info]                  ·gc.alloc.rate:                   2506.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              118561.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126943.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33239.800 ops/s
[info]                  ·gc.alloc.rate:               2505.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          118604.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95518.631 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 33780.118 ops/s
[info]                  ·gc.alloc.rate:               2570.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          119734.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125578.986 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   33465.948 ±(99.9%) 1031.601 ops/s [Average]
[info]   (min, avg, max) = (33239.800, 33465.948, 33780.118), stdev = 267.904
[info]   CI (99.9%): [32434.346, 34497.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2520.773 ±(99.9%) 108.143 MB/sec [Average]
[info]   (min, avg, max) = (2505.225, 2520.773, 2570.733), stdev = 28.084
[info]   CI (99.9%): [2412.630, 2628.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118530.546 ±(99.9%) 3421.605 B/op [Average]
[info]   (min, avg, max) = (117225.930, 118530.546, 119734.634), stdev = 888.580
[info]   CI (99.9%): [115108.941, 121952.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2416.940 ±(99.9%) 1420.692 MB/sec [Average]
[info]   (min, avg, max) = (2008.108, 2416.940, 2696.213), stdev = 368.949
[info]   CI (99.9%): [996.248, 3837.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113660.961 ±(99.9%) 67084.783 B/op [Average]
[info]   (min, avg, max) = (93676.684, 113660.961, 126943.500), stdev = 17421.705
[info]   CI (99.9%): [46576.178, 180745.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.387 ±(99.9%) 3.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.874), stdev = 0.831
[info]   CI (99.9%): [≈ 0, 3.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.070 ±(99.9%) 149.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.070, 87.399), stdev = 38.765
[info]   CI (99.9%): [≈ 0, 167.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.09% complete, ETA 00:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38305.941 ops/s
[info] # Warmup Iteration   2: 130821.043 ops/s
[info] # Warmup Iteration   3: 137240.058 ops/s
[info] # Warmup Iteration   4: 143908.044 ops/s
[info] # Warmup Iteration   5: 140553.041 ops/s
[info] Iteration   1: 141959.437 ops/s
[info]                  ·gc.alloc.rate:                   1230.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              13645.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14806.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 141409.748 ops/s
[info]                  ·gc.alloc.rate:               1216.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          13536.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7435.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 143916.154 ops/s
[info]                  ·gc.alloc.rate:                   1252.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              13694.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14619.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 139565.505 ops/s
[info]                  ·gc.alloc.rate:                   1216.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              13717.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15091.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 141255.203 ops/s
[info]                  ·gc.alloc.rate:                   1229.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              13695.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14895.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   141621.209 ±(99.9%) 6022.832 ops/s [Average]
[info]   (min, avg, max) = (139565.505, 141621.209, 143916.154), stdev = 1564.110
[info]   CI (99.9%): [135598.377, 147644.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1229.118 ±(99.9%) 56.950 MB/sec [Average]
[info]   (min, avg, max) = (1216.314, 1229.118, 1252.542), stdev = 14.790
[info]   CI (99.9%): [1172.169, 1286.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13657.715 ±(99.9%) 280.513 B/op [Average]
[info]   (min, avg, max) = (13536.164, 13657.715, 13717.259), stdev = 72.848
[info]   CI (99.9%): [13377.202, 13938.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.283 ±(99.9%) 1151.904 MB/sec [Average]
[info]   (min, avg, max) = (668.157, 1203.283, 1338.356), stdev = 299.146
[info]   CI (99.9%): [51.379, 2355.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13369.819 ±(99.9%) 12790.059 B/op [Average]
[info]   (min, avg, max) = (7435.815, 13369.819, 15091.153), stdev = 3321.538
[info]   CI (99.9%): [579.760, 26159.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.643), stdev = 1.582
[info]   CI (99.9%): [≈ 0, 6.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.327 ±(99.9%) 68.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.327, 41.080), stdev = 17.850
[info]   CI (99.9%): [≈ 0, 78.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.29% complete, ETA 00:35:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228163.340 ops/s
[info] # Warmup Iteration   2: 412414.441 ops/s
[info] # Warmup Iteration   3: 437385.028 ops/s
[info] # Warmup Iteration   4: 441363.883 ops/s
[info] # Warmup Iteration   5: 431161.363 ops/s
[info] Iteration   1: 423252.001 ops/s
[info]                  ·gc.alloc.rate:                   1697.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              6312.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7502.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 431407.897 ops/s
[info]                  ·gc.alloc.rate:                   1726.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              6299.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4909.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 438219.319 ops/s
[info]                  ·gc.alloc.rate:                   1756.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              6306.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7236.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.897 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 442207.185 ops/s
[info]                  ·gc.alloc.rate:                   1756.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              6251.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4774.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 436977.331 ops/s
[info]                  ·gc.alloc.rate:               1788.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          6442.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7250.521 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   434412.746 ±(99.9%) 28257.779 ops/s [Average]
[info]   (min, avg, max) = (423252.001, 434412.746, 442207.185), stdev = 7338.456
[info]   CI (99.9%): [406154.967, 462670.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1745.251 ±(99.9%) 132.209 MB/sec [Average]
[info]   (min, avg, max) = (1697.852, 1745.251, 1788.686), stdev = 34.334
[info]   CI (99.9%): [1613.042, 1877.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6322.425 ±(99.9%) 274.314 B/op [Average]
[info]   (min, avg, max) = (6251.175, 6322.425, 6442.215), stdev = 71.239
[info]   CI (99.9%): [6048.111, 6596.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.754 ±(99.9%) 1416.697 MB/sec [Average]
[info]   (min, avg, max) = (1341.664, 1746.754, 2017.964), stdev = 367.912
[info]   CI (99.9%): [330.058, 3163.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6334.797 ±(99.9%) 5266.890 B/op [Average]
[info]   (min, avg, max) = (4774.660, 6334.797, 7502.815), stdev = 1367.795
[info]   CI (99.9%): [1067.907, 11601.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 2.811), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.276 ±(99.9%) 17.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.276, 10.253), stdev = 4.474
[info]   CI (99.9%): [≈ 0, 19.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.49% complete, ETA 00:35:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206203.527 ops/s
[info] # Warmup Iteration   2: 467931.342 ops/s
[info] # Warmup Iteration   3: 476643.259 ops/s
[info] # Warmup Iteration   4: 471393.529 ops/s
[info] # Warmup Iteration   5: 482368.020 ops/s
[info] Iteration   1: 478225.661 ops/s
[info]                  ·gc.alloc.rate:               1370.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          4508.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4422.914 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 473326.442 ops/s
[info]                  ·gc.alloc.rate:                   1355.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              4506.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4472.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 473010.894 ops/s
[info]                  ·gc.alloc.rate:                   1360.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              4526.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4478.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 479961.525 ops/s
[info]                  ·gc.alloc.rate:                   1379.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              4523.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4411.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 477374.874 ops/s
[info]                  ·gc.alloc.rate:               1373.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          4527.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4429.839 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   476379.879 ±(99.9%) 11852.645 ops/s [Average]
[info]   (min, avg, max) = (473010.894, 476379.879, 479961.525), stdev = 3078.094
[info]   CI (99.9%): [464527.235, 488232.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1367.912 ±(99.9%) 37.106 MB/sec [Average]
[info]   (min, avg, max) = (1355.830, 1367.912, 1379.576), stdev = 9.636
[info]   CI (99.9%): [1330.805, 1405.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4518.365 ±(99.9%) 39.227 B/op [Average]
[info]   (min, avg, max) = (4506.519, 4518.365, 4527.367), stdev = 10.187
[info]   CI (99.9%): [4479.138, 4557.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1345.033 ±(99.9%) 3.658 MB/sec [Average]
[info]   (min, avg, max) = (1343.796, 1345.033, 1346.098), stdev = 0.950
[info]   CI (99.9%): [1341.375, 1348.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4442.954 ±(99.9%) 116.861 B/op [Average]
[info]   (min, avg, max) = (4411.389, 4442.954, 4478.461), stdev = 30.348
[info]   CI (99.9%): [4326.094, 4559.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.665), stdev = 1.162
[info]   CI (99.9%): [≈ 0, 5.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.978 ±(99.9%) 14.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.978, 8.866), stdev = 3.868
[info]   CI (99.9%): [≈ 0, 16.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.69% complete, ETA 00:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5511.826 ops/s
[info] # Warmup Iteration   2: 57885.181 ops/s
[info] # Warmup Iteration   3: 65157.366 ops/s
[info] # Warmup Iteration   4: 64706.788 ops/s
[info] # Warmup Iteration   5: 63491.257 ops/s
[info] Iteration   1: 63740.850 ops/s
[info]                  ·gc.alloc.rate:               1500.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          37034.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32844.066 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 63628.148 ops/s
[info]                  ·gc.alloc.rate:                   1495.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              36978.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32969.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 63683.434 ops/s
[info]                  ·gc.alloc.rate:               1536.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          37957.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49542.199 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 63424.270 ops/s
[info]                  ·gc.alloc.rate:               1513.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          37544.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33239.066 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 64519.607 ops/s
[info]                  ·gc.alloc.rate:               1527.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          37257.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32742.103 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   63799.262 ±(99.9%) 1617.298 ops/s [Average]
[info]   (min, avg, max) = (63424.270, 63799.262, 64519.607), stdev = 420.007
[info]   CI (99.9%): [62181.964, 65416.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1514.549 ±(99.9%) 67.211 MB/sec [Average]
[info]   (min, avg, max) = (1495.469, 1514.549, 1536.092), stdev = 17.455
[info]   CI (99.9%): [1447.338, 1581.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37354.356 ±(99.9%) 1555.446 B/op [Average]
[info]   (min, avg, max) = (36978.071, 37354.356, 37957.048), stdev = 403.944
[info]   CI (99.9%): [35798.910, 38909.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.205 ±(99.9%) 1151.201 MB/sec [Average]
[info]   (min, avg, max) = (1330.337, 1470.205, 2004.934), stdev = 298.963
[info]   CI (99.9%): [319.004, 2621.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36267.351 ±(99.9%) 28584.085 B/op [Average]
[info]   (min, avg, max) = (32742.103, 36267.351, 49542.199), stdev = 7423.196
[info]   CI (99.9%): [7683.266, 64851.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.103 ±(99.9%) 0.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.515), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 0.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96611.068 ops/s
[info] # Warmup Iteration   2: 288792.556 ops/s
[info] # Warmup Iteration   3: 314279.522 ops/s
[info] # Warmup Iteration   4: 318762.726 ops/s
[info] # Warmup Iteration   5: 317683.923 ops/s
[info] Iteration   1: 320638.044 ops/s
[info]                  ·gc.alloc.rate:                   2365.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              11611.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9877.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 319968.593 ops/s
[info]                  ·gc.alloc.rate:                   2395.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              11783.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13171.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 320180.832 ops/s
[info]                  ·gc.alloc.rate:               2388.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          11740.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9873.569 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 320257.602 ops/s
[info]                  ·gc.alloc.rate:               2389.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          11742.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9884.567 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 320231.693 ops/s
[info]                  ·gc.alloc.rate:               2417.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          11878.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13212.530 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   320255.353 ±(99.9%) 932.941 ops/s [Average]
[info]   (min, avg, max) = (319968.593, 320255.353, 320638.044), stdev = 242.282
[info]   CI (99.9%): [319322.412, 321188.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2391.446 ±(99.9%) 70.717 MB/sec [Average]
[info]   (min, avg, max) = (2365.885, 2391.446, 2417.235), stdev = 18.365
[info]   CI (99.9%): [2320.729, 2462.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11751.372 ±(99.9%) 369.685 B/op [Average]
[info]   (min, avg, max) = (11611.806, 11751.372, 11878.489), stdev = 96.006
[info]   CI (99.9%): [11381.688, 12121.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2279.900 ±(99.9%) 1418.253 MB/sec [Average]
[info]   (min, avg, max) = (2008.846, 2279.900, 2688.709), stdev = 368.316
[info]   CI (99.9%): [861.647, 3698.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11203.819 ±(99.9%) 6988.384 B/op [Average]
[info]   (min, avg, max) = (9873.569, 11203.819, 13212.530), stdev = 1814.861
[info]   CI (99.9%): [4215.435, 18192.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.162 ±(99.9%) 1.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.791), stdev = 0.352
[info]   CI (99.9%): [≈ 0, 1.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.797 ±(99.9%) 6.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.883), stdev = 1.725
[info]   CI (99.9%): [≈ 0, 7.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.10% complete, ETA 00:34:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103148.310 ops/s
[info] # Warmup Iteration   2: 488263.549 ops/s
[info] # Warmup Iteration   3: 556652.339 ops/s
[info] # Warmup Iteration   4: 569392.656 ops/s
[info] # Warmup Iteration   5: 568871.354 ops/s
[info] Iteration   1: 554339.470 ops/s
[info]                  ·gc.alloc.rate:                   1465.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              4161.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3791.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 567956.197 ops/s
[info]                  ·gc.alloc.rate:               1507.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          4176.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3703.640 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 565516.171 ops/s
[info]                  ·gc.alloc.rate:                   1527.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              4249.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5584.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 572409.513 ops/s
[info]                  ·gc.alloc.rate:               1518.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          4174.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3670.198 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 571877.581 ops/s
[info]                  ·gc.alloc.rate:               1529.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          4208.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3666.439 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   566419.786 ±(99.9%) 28216.016 ops/s [Average]
[info]   (min, avg, max) = (554339.470, 566419.786, 572409.513), stdev = 7327.610
[info]   CI (99.9%): [538203.770, 594635.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1509.673 ±(99.9%) 99.856 MB/sec [Average]
[info]   (min, avg, max) = (1465.893, 1509.673, 1529.149), stdev = 25.932
[info]   CI (99.9%): [1409.818, 1609.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4193.993 ±(99.9%) 137.405 B/op [Average]
[info]   (min, avg, max) = (4161.529, 4193.993, 4249.963), stdev = 35.684
[info]   CI (99.9%): [4056.589, 4331.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.396 ±(99.9%) 1156.850 MB/sec [Average]
[info]   (min, avg, max) = (1332.326, 1469.396, 2006.814), stdev = 300.430
[info]   CI (99.9%): [312.546, 2626.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4083.346 ±(99.9%) 3237.475 B/op [Average]
[info]   (min, avg, max) = (3666.439, 4083.346, 5584.632), stdev = 840.762
[info]   CI (99.9%): [845.871, 7320.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.372), stdev = 1.948
[info]   CI (99.9%): [≈ 0, 8.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.469 ±(99.9%) 20.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.469, 12.166), stdev = 5.421
[info]   CI (99.9%): [≈ 0, 23.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.30% complete, ETA 00:34:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 672494.099 ops/s
[info] # Warmup Iteration   2: 1252913.262 ops/s
[info] # Warmup Iteration   3: 1342340.411 ops/s
[info] # Warmup Iteration   4: 1338017.066 ops/s
[info] # Warmup Iteration   5: 1334499.305 ops/s
[info] Iteration   1: 1340728.386 ops/s
[info]                  ·gc.alloc.rate:                   2708.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              3179.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3153.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1343362.444 ops/s
[info]                  ·gc.alloc.rate:                   2728.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              3195.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3146.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1327523.179 ops/s
[info]                  ·gc.alloc.rate:               2702.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          3204.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3188.945 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1316397.494 ops/s
[info]                  ·gc.alloc.rate:                   2671.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              3193.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3223.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1336353.661 ops/s
[info]                  ·gc.alloc.rate:                   2719.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              3202.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3183.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1332873.033 ±(99.9%) 42353.293 ops/s [Average]
[info]   (min, avg, max) = (1316397.494, 1332873.033, 1343362.444), stdev = 10999.016
[info]   CI (99.9%): [1290519.740, 1375226.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2706.220 ±(99.9%) 83.682 MB/sec [Average]
[info]   (min, avg, max) = (2671.402, 2706.220, 2728.121), stdev = 21.732
[info]   CI (99.9%): [2622.538, 2789.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3195.193 ±(99.9%) 37.444 B/op [Average]
[info]   (min, avg, max) = (3179.773, 3195.193, 3204.155), stdev = 9.724
[info]   CI (99.9%): [3157.750, 3232.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2692.503 ±(99.9%) 27.039 MB/sec [Average]
[info]   (min, avg, max) = (2686.473, 2692.503, 2702.901), stdev = 7.022
[info]   CI (99.9%): [2665.464, 2719.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3179.177 ±(99.9%) 117.778 B/op [Average]
[info]   (min, avg, max) = (3146.949, 3179.177, 3223.245), stdev = 30.587
[info]   CI (99.9%): [3061.399, 3296.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.50% complete, ETA 00:34:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14242.318 ops/s
[info] # Warmup Iteration   2: 95825.933 ops/s
[info] # Warmup Iteration   3: 107949.765 ops/s
[info] # Warmup Iteration   4: 108203.175 ops/s
[info] # Warmup Iteration   5: 109061.085 ops/s
[info] Iteration   1: 109266.641 ops/s
[info]                  ·gc.alloc.rate:                   3672.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              52895.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4009.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57744.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.499 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 109331.208 ops/s
[info]                  ·gc.alloc.rate:                   3661.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              52707.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48245.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 108953.584 ops/s
[info]                  ·gc.alloc.rate:               3651.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          52739.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48617.353 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 106263.403 ops/s
[info]                  ·gc.alloc.rate:                   3563.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              52780.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50012.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 109516.079 ops/s
[info]                  ·gc.alloc.rate:                   3670.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              52740.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48666.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   108666.183 ±(99.9%) 5230.743 ops/s [Average]
[info]   (min, avg, max) = (106263.403, 108666.183, 109516.079), stdev = 1358.407
[info]   CI (99.9%): [103435.440, 113896.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3643.906 ±(99.9%) 175.291 MB/sec [Average]
[info]   (min, avg, max) = (3563.885, 3643.906, 3672.663), stdev = 45.523
[info]   CI (99.9%): [3468.615, 3819.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52772.708 ±(99.9%) 282.613 B/op [Average]
[info]   (min, avg, max) = (52707.608, 52772.708, 52895.673), stdev = 73.394
[info]   CI (99.9%): [52490.096, 53055.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3498.087 ±(99.9%) 1101.564 MB/sec [Average]
[info]   (min, avg, max) = (3351.802, 3498.087, 4009.301), stdev = 286.073
[info]   CI (99.9%): [2396.522, 4599.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50657.258 ±(99.9%) 15472.143 B/op [Average]
[info]   (min, avg, max) = (48245.715, 50657.258, 57744.118), stdev = 4018.067
[info]   CI (99.9%): [35185.115, 66129.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.481 ±(99.9%) 2.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.481, 1.499), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 2.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74.70% complete, ETA 00:33:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191560.678 ops/s
[info] # Warmup Iteration   2: 556687.790 ops/s
[info] # Warmup Iteration   3: 592882.653 ops/s
[info] # Warmup Iteration   4: 597723.239 ops/s
[info] # Warmup Iteration   5: 597652.801 ops/s
[info] Iteration   1: 589091.432 ops/s
[info]                  ·gc.alloc.rate:                   2641.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              7057.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5379.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 600934.741 ops/s
[info]                  ·gc.alloc.rate:                   2710.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              7098.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7027.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 601922.964 ops/s
[info]                  ·gc.alloc.rate:               2728.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          7134.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7026.177 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 601401.084 ops/s
[info]                  ·gc.alloc.rate:               2726.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          7133.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7049.555 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 600790.747 ops/s
[info]                  ·gc.alloc.rate:                   2725.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              7138.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7072.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   598828.194 ±(99.9%) 21028.451 ops/s [Average]
[info]   (min, avg, max) = (589091.432, 598828.194, 601922.964), stdev = 5461.022
[info]   CI (99.9%): [577799.742, 619856.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2706.564 ±(99.9%) 142.039 MB/sec [Average]
[info]   (min, avg, max) = (2641.823, 2706.564, 2728.667), stdev = 36.887
[info]   CI (99.9%): [2564.525, 2848.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7112.436 ±(99.9%) 133.727 B/op [Average]
[info]   (min, avg, max) = (7057.384, 7112.436, 7138.014), stdev = 34.729
[info]   CI (99.9%): [6978.709, 7246.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2555.791 ±(99.9%) 1166.883 MB/sec [Average]
[info]   (min, avg, max) = (2013.833, 2555.791, 2700.653), stdev = 303.036
[info]   CI (99.9%): [1388.909, 3722.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6711.033 ±(99.9%) 2866.583 B/op [Average]
[info]   (min, avg, max) = (5379.768, 6711.033, 7072.510), stdev = 744.443
[info]   CI (99.9%): [3844.450, 9577.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.111), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.90% complete, ETA 00:33:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137696.893 ops/s
[info] # Warmup Iteration   2: 333272.040 ops/s
[info] # Warmup Iteration   3: 342698.957 ops/s
[info] # Warmup Iteration   4: 334598.422 ops/s
[info] # Warmup Iteration   5: 336770.554 ops/s
[info] Iteration   1: 347595.298 ops/s
[info]                  ·gc.alloc.rate:                   1203.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6070.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 345190.370 ops/s
[info]                  ·gc.alloc.rate:                   1209.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              5516.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6116.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 344521.563 ops/s
[info]                  ·gc.alloc.rate:                   1195.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              5462.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6134.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 347805.147 ops/s
[info]                  ·gc.alloc.rate:               1193.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          5401.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3038.320 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 346916.688 ops/s
[info]                  ·gc.alloc.rate:                   1203.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              5458.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6089.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   346405.813 ±(99.9%) 5666.371 ops/s [Average]
[info]   (min, avg, max) = (344521.563, 346405.813, 347805.147), stdev = 1471.539
[info]   CI (99.9%): [340739.442, 352072.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1201.272 ±(99.9%) 24.941 MB/sec [Average]
[info]   (min, avg, max) = (1193.826, 1201.272, 1209.917), stdev = 6.477
[info]   CI (99.9%): [1176.330, 1226.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5457.453 ±(99.9%) 157.230 B/op [Average]
[info]   (min, avg, max) = (5401.584, 5457.453, 5516.130), stdev = 40.832
[info]   CI (99.9%): [5300.224, 5614.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.882 ±(99.9%) 1154.581 MB/sec [Average]
[info]   (min, avg, max) = (671.511, 1207.882, 1342.996), stdev = 299.841
[info]   CI (99.9%): [53.300, 2362.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5489.943 ±(99.9%) 5278.148 B/op [Average]
[info]   (min, avg, max) = (3038.320, 5489.943, 6134.621), stdev = 1370.718
[info]   CI (99.9%): [211.795, 10768.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.943 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.477), stdev = 1.543
[info]   CI (99.9%): [≈ 0, 6.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.249 ±(99.9%) 26.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.249, 15.771), stdev = 7.001
[info]   CI (99.9%): [≈ 0, 30.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 6.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.10% complete, ETA 00:33:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293764.223 ops/s
[info] # Warmup Iteration   2: 786515.965 ops/s
[info] # Warmup Iteration   3: 841032.726 ops/s
[info] # Warmup Iteration   4: 841526.817 ops/s
[info] # Warmup Iteration   5: 825546.748 ops/s
[info] Iteration   1: 838216.774 ops/s
[info]                  ·gc.alloc.rate:               621.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          1167.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1251.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 839935.634 ops/s
[info]                  ·gc.alloc.rate:               623.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          1167.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1248.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 841329.691 ops/s
[info]                  ·gc.alloc.rate:                   632.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              1182.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1247.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 839948.757 ops/s
[info]                  ·gc.alloc.rate:               626.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          1173.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1250.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 837119.578 ops/s
[info]                  ·gc.alloc.rate:               622.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          1170.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1255.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   839310.087 ±(99.9%) 6348.213 ops/s [Average]
[info]   (min, avg, max) = (837119.578, 839310.087, 841329.691), stdev = 1648.611
[info]   CI (99.9%): [832961.874, 845658.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   625.306 ±(99.9%) 16.448 MB/sec [Average]
[info]   (min, avg, max) = (621.880, 625.306, 632.282), stdev = 4.271
[info]   CI (99.9%): [608.858, 641.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1172.443 ±(99.9%) 23.972 B/op [Average]
[info]   (min, avg, max) = (1167.523, 1172.443, 1182.683), stdev = 6.225
[info]   CI (99.9%): [1148.471, 1196.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.041 ±(99.9%) 2.131 MB/sec [Average]
[info]   (min, avg, max) = (666.505, 667.041, 667.833), stdev = 0.553
[info]   CI (99.9%): [664.909, 669.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1250.707 ±(99.9%) 11.391 B/op [Average]
[info]   (min, avg, max) = (1247.943, 1250.707, 1255.476), stdev = 2.958
[info]   CI (99.9%): [1239.316, 1262.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.30% complete, ETA 00:33:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1251547.995 ops/s
[info] # Warmup Iteration   2: 2068848.002 ops/s
[info] # Warmup Iteration   3: 2111083.776 ops/s
[info] # Warmup Iteration   4: 2121557.988 ops/s
[info] # Warmup Iteration   5: 2109097.374 ops/s
[info] Iteration   1: 2069123.208 ops/s
[info]                  ·gc.alloc.rate:                   974.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              741.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     510.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2101294.746 ops/s
[info]                  ·gc.alloc.rate:               1015.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          760.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1006.848 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 2129606.270 ops/s
[info]                  ·gc.alloc.rate:               999.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2110006.200 ops/s
[info]                  ·gc.alloc.rate:               1017.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          758.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1003.395 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2123801.398 ops/s
[info]                  ·gc.alloc.rate:               996.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 498.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2106766.365 ±(99.9%) 91716.810 ops/s [Average]
[info]   (min, avg, max) = (2069123.208, 2106766.365, 2129606.270), stdev = 23818.564
[info]   CI (99.9%): [2015049.554, 2198483.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1000.492 ±(99.9%) 66.596 MB/sec [Average]
[info]   (min, avg, max) = (974.420, 1000.492, 1017.287), stdev = 17.295
[info]   CI (99.9%): [933.895, 1067.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.369 ±(99.9%) 42.937 B/op [Average]
[info]   (min, avg, max) = (738.067, 747.369, 760.268), stdev = 11.151
[info]   CI (99.9%): [704.432, 790.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.308 ±(99.9%) 1418.445 MB/sec [Average]
[info]   (min, avg, max) = (671.524, 941.308, 1345.302), stdev = 368.366
[info]   CI (99.9%): [≈ 0, 2359.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   703.303 ±(99.9%) 1061.142 B/op [Average]
[info]   (min, avg, max) = (496.957, 703.303, 1006.848), stdev = 275.575
[info]   CI (99.9%): [≈ 0, 1764.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75.50% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1462662.149 ops/s
[info] # Warmup Iteration   2: 2156391.957 ops/s
[info] # Warmup Iteration   3: 2331267.194 ops/s
[info] # Warmup Iteration   4: 2339522.265 ops/s
[info] # Warmup Iteration   5: 2335892.634 ops/s
[info] Iteration   1: 2346515.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2344897.216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2345803.460 ops/s
[info]                  ·gc.alloc.rate:      1.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.723 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2353181.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2344695.933 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2347018.631 ±(99.9%) 13559.740 ops/s [Average]
[info]   (min, avg, max) = (2344695.933, 2347018.631, 2353181.134), stdev = 3521.421
[info]   CI (99.9%): [2333458.891, 2360578.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.216 ±(99.9%) 1.855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.216, 1.078), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.145 ±(99.9%) 1.244 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.145, 0.723), stdev = 0.323
[info]   CI (99.9%): [≈ 0, 1.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.70% complete, ETA 00:32:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168150.977 ops/s
[info] # Warmup Iteration   2: 451917.632 ops/s
[info] # Warmup Iteration   3: 474587.781 ops/s
[info] # Warmup Iteration   4: 473930.227 ops/s
[info] # Warmup Iteration   5: 483162.765 ops/s
[info] Iteration   1: 476229.180 ops/s
[info]                  ·gc.alloc.rate:               704.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          2329.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2209.181 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 475906.334 ops/s
[info]                  ·gc.alloc.rate:               700.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          2315.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2212.920 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 470748.717 ops/s
[info]                  ·gc.alloc.rate:                   699.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              2338.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2237.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 463768.556 ops/s
[info]                  ·gc.alloc.rate:                   688.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              2335.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2271.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 466916.343 ops/s
[info]                  ·gc.alloc.rate:               702.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          2367.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2256.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   470713.826 ±(99.9%) 21094.373 ops/s [Average]
[info]   (min, avg, max) = (463768.556, 470713.826, 476229.180), stdev = 5478.142
[info]   CI (99.9%): [449619.453, 491808.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   699.073 ±(99.9%) 24.397 MB/sec [Average]
[info]   (min, avg, max) = (688.388, 699.073, 704.915), stdev = 6.336
[info]   CI (99.9%): [674.675, 723.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2337.357 ±(99.9%) 72.932 B/op [Average]
[info]   (min, avg, max) = (2315.532, 2337.357, 2367.252), stdev = 18.940
[info]   CI (99.9%): [2264.425, 2410.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   669.160 ±(99.9%) 1.585 MB/sec [Average]
[info]   (min, avg, max) = (668.498, 669.160, 669.503), stdev = 0.412
[info]   CI (99.9%): [667.575, 670.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2237.491 ±(99.9%) 104.497 B/op [Average]
[info]   (min, avg, max) = (2209.181, 2237.491, 2271.817), stdev = 27.137
[info]   CI (99.9%): [2132.995, 2341.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.212), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75.90% complete, ETA 00:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52823.168 ops/s
[info] # Warmup Iteration   2: 132065.850 ops/s
[info] # Warmup Iteration   3: 138457.193 ops/s
[info] # Warmup Iteration   4: 142130.547 ops/s
[info] # Warmup Iteration   5: 142290.454 ops/s
[info] Iteration   1: 142224.047 ops/s
[info]                  ·gc.alloc.rate:               1537.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          17012.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14882.253 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 142528.357 ops/s
[info]                  ·gc.alloc.rate:                   1550.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              17123.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14857.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 142288.611 ops/s
[info]                  ·gc.alloc.rate:                   1575.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              17430.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22309.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 142927.156 ops/s
[info]                  ·gc.alloc.rate:                   1555.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              17124.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14772.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 142958.028 ops/s
[info]                  ·gc.alloc.rate:                   1556.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              17133.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14755.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   142585.240 ±(99.9%) 1330.510 ops/s [Average]
[info]   (min, avg, max) = (142224.047, 142585.240, 142958.028), stdev = 345.529
[info]   CI (99.9%): [141254.730, 143915.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1555.249 ±(99.9%) 52.659 MB/sec [Average]
[info]   (min, avg, max) = (1537.955, 1555.249, 1575.944), stdev = 13.675
[info]   CI (99.9%): [1502.591, 1607.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17164.728 ±(99.9%) 602.282 B/op [Average]
[info]   (min, avg, max) = (17012.921, 17164.728, 17430.150), stdev = 156.411
[info]   CI (99.9%): [16562.446, 17767.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1478.013 ±(99.9%) 1160.572 MB/sec [Average]
[info]   (min, avg, max) = (1340.306, 1478.013, 2017.152), stdev = 301.397
[info]   CI (99.9%): [317.442, 2638.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16315.507 ±(99.9%) 12905.226 B/op [Average]
[info]   (min, avg, max) = (14755.248, 16315.507, 22309.971), stdev = 3351.446
[info]   CI (99.9%): [3410.281, 29220.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 6.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.518), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 6.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.012 ±(99.9%) 66.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.012, 38.912), stdev = 17.275
[info]   CI (99.9%): [≈ 0, 74.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.10% complete, ETA 00:31:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13469.433 ops/s
[info] # Warmup Iteration   2: 55910.199 ops/s
[info] # Warmup Iteration   3: 55070.034 ops/s
[info] # Warmup Iteration   4: 57822.241 ops/s
[info] # Warmup Iteration   5: 58793.983 ops/s
[info] Iteration   1: 59375.128 ops/s
[info]                  ·gc.alloc.rate:                   2067.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              54769.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53403.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 59939.388 ops/s
[info]                  ·gc.alloc.rate:                   2097.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              55065.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52824.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 59981.166 ops/s
[info]                  ·gc.alloc.rate:                   2086.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              54722.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52717.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 59435.742 ops/s
[info]                  ·gc.alloc.rate:               2080.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          55087.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53201.420 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 59285.888 ops/s
[info]                  ·gc.alloc.rate:               2089.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          55451.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53401.341 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59603.462 ±(99.9%) 1272.208 ops/s [Average]
[info]   (min, avg, max) = (59285.888, 59603.462, 59981.166), stdev = 330.388
[info]   CI (99.9%): [58331.254, 60875.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2084.062 ±(99.9%) 43.376 MB/sec [Average]
[info]   (min, avg, max) = (2067.114, 2084.062, 2097.432), stdev = 11.264
[info]   CI (99.9%): [2040.686, 2127.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55019.547 ±(99.9%) 1129.096 B/op [Average]
[info]   (min, avg, max) = (54722.898, 55019.547, 55451.782), stdev = 293.223
[info]   CI (99.9%): [53890.450, 56148.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.684 ±(99.9%) 9.553 MB/sec [Average]
[info]   (min, avg, max) = (2009.325, 2011.684, 2015.547), stdev = 2.481
[info]   CI (99.9%): [2002.130, 2021.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53109.523 ±(99.9%) 1240.937 B/op [Average]
[info]   (min, avg, max) = (52717.206, 53109.523, 53403.543), stdev = 322.267
[info]   CI (99.9%): [51868.586, 54350.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.757 ±(99.9%) 5.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 3.433), stdev = 1.502
[info]   CI (99.9%): [≈ 0, 6.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.051 ±(99.9%) 153.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.051, 90.969), stdev = 39.791
[info]   CI (99.9%): [≈ 0, 173.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.31% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19126.689 ops/s
[info] # Warmup Iteration   2: 81412.198 ops/s
[info] # Warmup Iteration   3: 88177.798 ops/s
[info] # Warmup Iteration   4: 93631.336 ops/s
[info] # Warmup Iteration   5: 94073.425 ops/s
[info] Iteration   1: 93456.096 ops/s
[info]                  ·gc.alloc.rate:                   1728.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              29110.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33793.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 93715.309 ops/s
[info]                  ·gc.alloc.rate:                   1715.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              28795.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22479.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 93457.447 ops/s
[info]                  ·gc.alloc.rate:                   1737.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              29260.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33753.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.671 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 94020.259 ops/s
[info]                  ·gc.alloc.rate:                   1732.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              29003.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22300.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 93466.473 ops/s
[info]                  ·gc.alloc.rate:               1749.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          29464.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33654.436 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   93623.117 ±(99.9%) 955.125 ops/s [Average]
[info]   (min, avg, max) = (93456.096, 93623.117, 94020.259), stdev = 248.043
[info]   CI (99.9%): [92667.992, 94578.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1732.914 ±(99.9%) 48.825 MB/sec [Average]
[info]   (min, avg, max) = (1715.244, 1732.914, 1749.883), stdev = 12.680
[info]   CI (99.9%): [1684.089, 1781.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29126.729 ±(99.9%) 976.207 B/op [Average]
[info]   (min, avg, max) = (28795.517, 29126.729, 29464.272), stdev = 253.518
[info]   CI (99.9%): [28150.521, 30102.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.337 ±(99.9%) 1408.421 MB/sec [Average]
[info]   (min, avg, max) = (1332.351, 1736.337, 2006.809), stdev = 365.762
[info]   CI (99.9%): [327.916, 3144.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29196.116 ±(99.9%) 23926.287 B/op [Average]
[info]   (min, avg, max) = (22300.638, 29196.116, 33793.008), stdev = 6213.581
[info]   CI (99.9%): [5269.829, 53122.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 6.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 3.707), stdev = 1.600
[info]   CI (99.9%): [≈ 0, 7.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.319 ±(99.9%) 103.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.319, 62.225), stdev = 26.860
[info]   CI (99.9%): [≈ 0, 118.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.51% complete, ETA 00:31:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59595.736 ops/s
[info] # Warmup Iteration   2: 153308.681 ops/s
[info] # Warmup Iteration   3: 160309.449 ops/s
[info] # Warmup Iteration   4: 159180.998 ops/s
[info] # Warmup Iteration   5: 162783.108 ops/s
[info] Iteration   1: 163688.043 ops/s
[info]                  ·gc.alloc.rate:                   2587.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              24878.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25810.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.803 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 163908.684 ops/s
[info]                  ·gc.alloc.rate:                   2605.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              25013.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25751.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 164318.067 ops/s
[info]                  ·gc.alloc.rate:                   2598.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              24885.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19290.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 158699.406 ops/s
[info]                  ·gc.alloc.rate:               2539.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          25181.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26679.819 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 159290.543 ops/s
[info]                  ·gc.alloc.rate:               2548.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          25178.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26646.831 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   161980.949 ±(99.9%) 10562.854 ops/s [Average]
[info]   (min, avg, max) = (158699.406, 161980.949, 164318.067), stdev = 2743.140
[info]   CI (99.9%): [151418.094, 172543.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2575.833 ±(99.9%) 114.904 MB/sec [Average]
[info]   (min, avg, max) = (2539.523, 2575.833, 2605.167), stdev = 29.840
[info]   CI (99.9%): [2460.929, 2690.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25027.385 ±(99.9%) 574.319 B/op [Average]
[info]   (min, avg, max) = (24878.272, 25027.385, 25181.470), stdev = 149.149
[info]   CI (99.9%): [24453.066, 25601.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2553.713 ±(99.9%) 1162.027 MB/sec [Average]
[info]   (min, avg, max) = (2013.984, 2553.713, 2697.254), stdev = 301.775
[info]   CI (99.9%): [1391.686, 3715.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24835.734 ±(99.9%) 12057.988 B/op [Average]
[info]   (min, avg, max) = (19290.118, 24835.734, 26679.819), stdev = 3131.421
[info]   CI (99.9%): [12777.745, 36893.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.396), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.840 ±(99.9%) 6.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.840, 3.803), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 7.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:31:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2743.848 ops/s
[info] # Warmup Iteration   2: 23882.536 ops/s
[info] # Warmup Iteration   3: 32724.102 ops/s
[info] # Warmup Iteration   4: 33267.878 ops/s
[info] # Warmup Iteration   5: 33328.185 ops/s
[info] Iteration   1: 33809.279 ops/s
[info]                  ·gc.alloc.rate:                   2248.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              104677.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93282.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.907 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 33355.959 ops/s
[info]                  ·gc.alloc.rate:                   2255.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              106393.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126499.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.989 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 33768.326 ops/s
[info]                  ·gc.alloc.rate:               2243.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          104566.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93957.700 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 33328.904 ops/s
[info]                  ·gc.alloc.rate:                   2241.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              105860.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95386.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33579.198 ops/s
[info]                  ·gc.alloc.rate:                   2258.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              105856.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94876.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.976 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33568.333 ±(99.9%) 862.319 ops/s [Average]
[info]   (min, avg, max) = (33328.904, 33568.333, 33809.279), stdev = 223.941
[info]   CI (99.9%): [32706.015, 34430.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2249.696 ±(99.9%) 27.589 MB/sec [Average]
[info]   (min, avg, max) = (2241.994, 2249.696, 2258.689), stdev = 7.165
[info]   CI (99.9%): [2222.107, 2277.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105470.794 ±(99.9%) 3103.750 B/op [Average]
[info]   (min, avg, max) = (104566.118, 105470.794, 106393.127), stdev = 806.034
[info]   CI (99.9%): [102367.044, 108574.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.219 ±(99.9%) 1145.627 MB/sec [Average]
[info]   (min, avg, max) = (2004.147, 2149.219, 2681.259), stdev = 297.516
[info]   CI (99.9%): [1003.592, 3294.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100800.600 ±(99.9%) 55406.558 B/op [Average]
[info]   (min, avg, max) = (93282.894, 100800.600, 126499.173), stdev = 14388.907
[info]   CI (99.9%): [45394.042, 156207.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.148 ±(99.9%) 1.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.614), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.967 ±(99.9%) 47.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.967, 28.989), stdev = 12.358
[info]   CI (99.9%): [≈ 0, 54.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52923.738 ops/s
[info] # Warmup Iteration   2: 152386.314 ops/s
[info] # Warmup Iteration   3: 154785.690 ops/s
[info] # Warmup Iteration   4: 156968.797 ops/s
[info] # Warmup Iteration   5: 156643.508 ops/s
[info] Iteration   1: 159825.321 ops/s
[info]                  ·gc.alloc.rate:               1060.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          10444.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6565.981 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 161114.290 ops/s
[info]                  ·gc.alloc.rate:                   1084.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              10590.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13040.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 159740.681 ops/s
[info]                  ·gc.alloc.rate:               1082.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          10665.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13165.200 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 162124.694 ops/s
[info]                  ·gc.alloc.rate:                   1071.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              10396.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6492.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 159487.045 ops/s
[info]                  ·gc.alloc.rate:                   1067.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              10537.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13201.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160458.406 ±(99.9%) 4333.543 ops/s [Average]
[info]   (min, avg, max) = (159487.045, 160458.406, 162124.694), stdev = 1125.407
[info]   CI (99.9%): [156124.863, 164791.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1073.300 ±(99.9%) 38.399 MB/sec [Average]
[info]   (min, avg, max) = (1060.705, 1073.300, 1084.239), stdev = 9.972
[info]   CI (99.9%): [1034.901, 1111.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10526.683 ±(99.9%) 417.723 B/op [Average]
[info]   (min, avg, max) = (10396.651, 10526.683, 10665.174), stdev = 108.481
[info]   CI (99.9%): [10108.960, 10944.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.018 ±(99.9%) 1410.229 MB/sec [Average]
[info]   (min, avg, max) = (666.843, 1069.018, 1338.012), stdev = 366.232
[info]   CI (99.9%): [≈ 0, 2479.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10493.173 ±(99.9%) 13936.627 B/op [Average]
[info]   (min, avg, max) = (6492.170, 10493.173, 13201.934), stdev = 3619.298
[info]   CI (99.9%): [≈ 0, 24429.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.768), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.557 ±(99.9%) 63.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.557, 37.179), stdev = 16.560
[info]   CI (99.9%): [≈ 0, 71.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.11% complete, ETA 00:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191039.335 ops/s
[info] # Warmup Iteration   2: 430633.242 ops/s
[info] # Warmup Iteration   3: 431072.098 ops/s
[info] # Warmup Iteration   4: 431547.188 ops/s
[info] # Warmup Iteration   5: 432775.039 ops/s
[info] Iteration   1: 424634.496 ops/s
[info]                  ·gc.alloc.rate:               485.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          1799.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1896.208 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 433459.759 ops/s
[info]                  ·gc.alloc.rate:               503.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          1829.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2434.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 435573.488 ops/s
[info]                  ·gc.alloc.rate:      480.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 436291.952 ops/s
[info]                  ·gc.alloc.rate:               505.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          1825.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2418.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 442993.385 ops/s
[info]                  ·gc.alloc.rate:               512.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          1821.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2384.149 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   434590.616 ±(99.9%) 25460.174 ops/s [Average]
[info]   (min, avg, max) = (424634.496, 434590.616, 442993.385), stdev = 6611.926
[info]   CI (99.9%): [409130.442, 460050.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.730 ±(99.9%) 53.591 MB/sec [Average]
[info]   (min, avg, max) = (480.499, 497.730, 512.755), stdev = 13.917
[info]   CI (99.9%): [444.139, 551.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1802.186 ±(99.9%) 149.094 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1802.186, 1829.117), stdev = 38.719
[info]   CI (99.9%): [1653.092, 1951.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.795 ±(99.9%) 1118.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.795, 671.250), stdev = 290.476
[info]   CI (99.9%): [≈ 0, 1623.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1826.651 ±(99.9%) 4025.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1826.651, 2434.403), stdev = 1045.459
[info]   CI (99.9%): [≈ 0, 5852.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.31% complete, ETA 00:30:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259923.449 ops/s
[info] # Warmup Iteration   2: 464473.729 ops/s
[info] # Warmup Iteration   3: 478565.266 ops/s
[info] # Warmup Iteration   4: 475148.702 ops/s
[info] # Warmup Iteration   5: 479737.439 ops/s
[info] Iteration   1: 479111.223 ops/s
[info]                  ·gc.alloc.rate:      4.871 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 479127.381 ops/s
[info]                  ·gc.alloc.rate:      4.872 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 476262.128 ops/s
[info]                  ·gc.alloc.rate:      10.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 36.043 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 480720.201 ops/s
[info]                  ·gc.alloc.rate:      4.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 479690.826 ops/s
[info]                  ·gc.alloc.rate:      4.877 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   478982.352 ±(99.9%) 6373.750 ops/s [Average]
[info]   (min, avg, max) = (476262.128, 478982.352, 480720.201), stdev = 1655.243
[info]   CI (99.9%): [472608.602, 485356.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.083 ±(99.9%) 10.386 MB/sec [Average]
[info]   (min, avg, max) = (4.871, 6.083, 10.908), stdev = 2.697
[info]   CI (99.9%): [≈ 0, 16.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   20.009 ±(99.9%) 34.514 B/op [Average]
[info]   (min, avg, max) = (16.001, 20.009, 36.043), stdev = 8.963
[info]   CI (99.9%): [≈ 0, 54.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.51% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9441.672 ops/s
[info] # Warmup Iteration   2: 46286.313 ops/s
[info] # Warmup Iteration   3: 64033.713 ops/s
[info] # Warmup Iteration   4: 63884.112 ops/s
[info] # Warmup Iteration   5: 64834.880 ops/s
[info] Iteration   1: 64389.397 ops/s
[info]                  ·gc.alloc.rate:                   1354.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              33112.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32579.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 65060.519 ops/s
[info]                  ·gc.alloc.rate:                   1353.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              32734.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32307.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 65044.858 ops/s
[info]                  ·gc.alloc.rate:                   1347.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              32600.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32382.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 64871.244 ops/s
[info]                  ·gc.alloc.rate:                   1356.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              32908.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32530.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 63567.397 ops/s
[info]                  ·gc.alloc.rate:                   1342.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              33240.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33249.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   64586.683 ±(99.9%) 2430.245 ops/s [Average]
[info]   (min, avg, max) = (63567.397, 64586.683, 65060.519), stdev = 631.127
[info]   CI (99.9%): [62156.438, 67016.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1350.999 ±(99.9%) 22.246 MB/sec [Average]
[info]   (min, avg, max) = (1342.660, 1350.999, 1356.608), stdev = 5.777
[info]   CI (99.9%): [1328.754, 1373.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32919.264 ±(99.9%) 1011.957 B/op [Average]
[info]   (min, avg, max) = (32600.345, 32919.264, 33240.571), stdev = 262.802
[info]   CI (99.9%): [31907.307, 33931.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.260 ±(99.9%) 15.425 MB/sec [Average]
[info]   (min, avg, max) = (1333.021, 1338.260, 1343.016), stdev = 4.006
[info]   CI (99.9%): [1322.834, 1353.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32609.836 ±(99.9%) 1439.897 B/op [Average]
[info]   (min, avg, max) = (32307.755, 32609.836, 33249.382), stdev = 373.937
[info]   CI (99.9%): [31169.939, 34049.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.187 ±(99.9%) 1.101 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.187, 0.687), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.562 ±(99.9%) 26.693 B/op [Average]
[info]   (min, avg, max) = (0.504, 4.562, 16.665), stdev = 6.932
[info]   CI (99.9%): [≈ 0, 31.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.71% complete, ETA 00:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243504.671 ops/s
[info] # Warmup Iteration   2: 2372540.105 ops/s
[info] # Warmup Iteration   3: 2867099.945 ops/s
[info] # Warmup Iteration   4: 2887154.951 ops/s
[info] # Warmup Iteration   5: 2922490.020 ops/s
[info] Iteration   1: 2910537.837 ops/s
[info]                  ·gc.alloc.rate:                   3750.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              2027.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4017.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2171.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2921245.292 ops/s
[info]                  ·gc.alloc.rate:                   3756.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              2023.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1808.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2915662.179 ops/s
[info]                  ·gc.alloc.rate:               3776.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4044.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2183.178 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 2914933.014 ops/s
[info]                  ·gc.alloc.rate:               3753.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          2026.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1825.821 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 2886163.468 ops/s
[info]                  ·gc.alloc.rate:                   3709.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              2022.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1848.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2909708.358 ±(99.9%) 52758.591 ops/s [Average]
[info]   (min, avg, max) = (2886163.468, 2909708.358, 2921245.292), stdev = 13701.239
[info]   CI (99.9%): [2856949.767, 2962466.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3749.406 ±(99.9%) 93.771 MB/sec [Average]
[info]   (min, avg, max) = (3709.811, 3749.406, 3776.536), stdev = 24.352
[info]   CI (99.9%): [3655.636, 3843.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2027.812 ±(99.9%) 24.163 B/op [Average]
[info]   (min, avg, max) = (2022.866, 2027.812, 2038.474), stdev = 6.275
[info]   CI (99.9%): [2003.649, 2051.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3638.215 ±(99.9%) 1381.788 MB/sec [Average]
[info]   (min, avg, max) = (3357.857, 3638.215, 4044.619), stdev = 358.846
[info]   CI (99.9%): [2256.426, 5020.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1967.557 ±(99.9%) 739.632 B/op [Average]
[info]   (min, avg, max) = (1808.919, 1967.557, 2183.178), stdev = 192.080
[info]   CI (99.9%): [1227.925, 2707.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.011), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.91% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.610 ops/s
[info] # Warmup Iteration   2: 736239.627 ops/s
[info] # Warmup Iteration   3: 844618.277 ops/s
[info] # Warmup Iteration   4: 894046.766 ops/s
[info] # Warmup Iteration   5: 892913.116 ops/s
[info] Iteration   1: 896776.160 ops/s
[info]                  ·gc.alloc.rate:               534.978 MB/sec
[info]                  ·gc.alloc.rate.norm:          938.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1169.037 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 900275.310 ops/s
[info]                  ·gc.alloc.rate:      534.303 MB/sec
[info]                  ·gc.alloc.rate.norm: 933.987 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 890131.745 ops/s
[info]                  ·gc.alloc.rate:               515.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1177.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 890273.445 ops/s
[info]                  ·gc.alloc.rate:               529.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1177.534 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 893788.558 ops/s
[info]                  ·gc.alloc.rate:                   530.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              934.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1172.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   894249.043 ±(99.9%) 16748.285 ops/s [Average]
[info]   (min, avg, max) = (890131.745, 894249.043, 900275.310), stdev = 4349.476
[info]   CI (99.9%): [877500.759, 910997.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   529.158 ±(99.9%) 29.886 MB/sec [Average]
[info]   (min, avg, max) = (515.853, 529.158, 534.978), stdev = 7.761
[info]   CI (99.9%): [499.272, 559.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   931.205 ±(99.9%) 41.933 B/op [Average]
[info]   (min, avg, max) = (912.001, 931.205, 938.821), stdev = 10.890
[info]   CI (99.9%): [889.273, 973.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.929 ±(99.9%) 1147.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.929, 666.173), stdev = 297.917
[info]   CI (99.9%): [≈ 0, 1680.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   939.455 ±(99.9%) 2022.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 939.455, 1177.758), stdev = 525.184
[info]   CI (99.9%): [≈ 0, 2961.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.11% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16209.902 ops/s
[info] # Warmup Iteration   2: 238028.364 ops/s
[info] # Warmup Iteration   3: 341958.126 ops/s
[info] # Warmup Iteration   4: 343783.995 ops/s
[info] # Warmup Iteration   5: 343587.095 ops/s
[info] Iteration   1: 338479.105 ops/s
[info]                  ·gc.alloc.rate:               795.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          3697.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3097.283 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 335274.274 ops/s
[info]                  ·gc.alloc.rate:                   801.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              3759.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3130.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 336280.639 ops/s
[info]                  ·gc.alloc.rate:               781.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          3657.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3120.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 335866.860 ops/s
[info]                  ·gc.alloc.rate:                   820.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              3842.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6252.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 342521.315 ops/s
[info]                  ·gc.alloc.rate:               810.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          3723.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3068.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   337684.439 ±(99.9%) 11408.245 ops/s [Average]
[info]   (min, avg, max) = (335274.274, 337684.439, 342521.315), stdev = 2962.685
[info]   CI (99.9%): [326276.194, 349092.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   801.663 ±(99.9%) 56.762 MB/sec [Average]
[info]   (min, avg, max) = (781.449, 801.663, 820.118), stdev = 14.741
[info]   CI (99.9%): [744.901, 858.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3736.159 ±(99.9%) 271.214 B/op [Average]
[info]   (min, avg, max) = (3657.015, 3736.159, 3842.675), stdev = 70.433
[info]   CI (99.9%): [3464.945, 4007.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.427 ±(99.9%) 1149.488 MB/sec [Average]
[info]   (min, avg, max) = (666.168, 800.427, 1334.432), stdev = 298.518
[info]   CI (99.9%): [≈ 0, 1949.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3733.804 ±(99.9%) 5422.463 B/op [Average]
[info]   (min, avg, max) = (3068.580, 3733.804, 6252.505), stdev = 1408.196
[info]   CI (99.9%): [≈ 0, 9156.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78.31% complete, ETA 00:29:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 365307.822 ops/s
[info] # Warmup Iteration   2: 668958.159 ops/s
[info] # Warmup Iteration   3: 748669.136 ops/s
[info] # Warmup Iteration   4: 748566.111 ops/s
[info] # Warmup Iteration   5: 766180.451 ops/s
[info] Iteration   1: 767723.226 ops/s
[info]                  ·gc.alloc.rate:               713.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          1461.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1376.571 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 740760.942 ops/s
[info]                  ·gc.alloc.rate:               676.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          1437.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1426.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 769975.548 ops/s
[info]                  ·gc.alloc.rate:               711.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          1454.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1373.790 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 769543.186 ops/s
[info]                  ·gc.alloc.rate:               694.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          1419.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1374.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 766122.470 ops/s
[info]                  ·gc.alloc.rate:                   704.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              1446.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1382.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   762825.074 ±(99.9%) 47860.923 ops/s [Average]
[info]   (min, avg, max) = (740760.942, 762825.074, 769975.548), stdev = 12429.330
[info]   CI (99.9%): [714964.152, 810685.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   699.991 ±(99.9%) 57.711 MB/sec [Average]
[info]   (min, avg, max) = (676.845, 699.991, 713.070), stdev = 14.987
[info]   CI (99.9%): [642.280, 757.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1444.052 ±(99.9%) 63.227 B/op [Average]
[info]   (min, avg, max) = (1419.302, 1444.052, 1461.622), stdev = 16.420
[info]   CI (99.9%): [1380.825, 1507.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.055 ±(99.9%) 2.044 MB/sec [Average]
[info]   (min, avg, max) = (671.540, 672.055, 672.836), stdev = 0.531
[info]   CI (99.9%): [670.011, 674.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1386.750 ±(99.9%) 86.772 B/op [Average]
[info]   (min, avg, max) = (1373.790, 1386.750, 1426.638), stdev = 22.534
[info]   CI (99.9%): [1299.978, 1473.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.51% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 931353.248 ops/s
[info] # Warmup Iteration   2: 2302836.766 ops/s
[info] # Warmup Iteration   3: 3234369.014 ops/s
[info] # Warmup Iteration   4: 3202006.592 ops/s
[info] # Warmup Iteration   5: 3226197.622 ops/s
[info] Iteration   1: 3246612.249 ops/s
[info]                  ·gc.alloc.rate:                   1962.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3260184.045 ops/s
[info]                  ·gc.alloc.rate:                   1971.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     975.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3192497.130 ops/s
[info]                  ·gc.alloc.rate:               1932.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          952.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 995.349 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3283196.526 ops/s
[info]                  ·gc.alloc.rate:               1972.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 645.029 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3268502.961 ops/s
[info]                  ·gc.alloc.rate:                   1990.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              958.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     972.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3250198.582 ±(99.9%) 134303.365 ops/s [Average]
[info]   (min, avg, max) = (3192497.130, 3250198.582, 3283196.526), stdev = 34878.158
[info]   CI (99.9%): [3115895.217, 3384501.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1966.063 ±(99.9%) 81.963 MB/sec [Average]
[info]   (min, avg, max) = (1932.738, 1966.063, 1990.972), stdev = 21.286
[info]   CI (99.9%): [1884.099, 2048.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   951.926 ±(99.9%) 18.349 B/op [Average]
[info]   (min, avg, max) = (945.222, 951.926, 958.648), stdev = 4.765
[info]   CI (99.9%): [933.577, 970.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1885.613 ±(99.9%) 1162.179 MB/sec [Average]
[info]   (min, avg, max) = (1345.716, 1885.613, 2021.825), stdev = 301.814
[info]   CI (99.9%): [723.434, 3047.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   913.710 ±(99.9%) 579.348 B/op [Average]
[info]   (min, avg, max) = (645.029, 913.710, 995.349), stdev = 150.455
[info]   CI (99.9%): [334.362, 1493.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.561), stdev = 1.122
[info]   CI (99.9%): [≈ 0, 4.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 2.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.236), stdev = 0.541
[info]   CI (99.9%): [≈ 0, 2.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.71% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1894890.556 ops/s
[info] # Warmup Iteration   2: 4596675.845 ops/s
[info] # Warmup Iteration   3: 8071977.239 ops/s
[info] # Warmup Iteration   4: 7814615.311 ops/s
[info] # Warmup Iteration   5: 7859724.221 ops/s
[info] Iteration   1: 7858405.037 ops/s
[info]                  ·gc.alloc.rate:                   864.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              173.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8133720.894 ops/s
[info]                  ·gc.alloc.rate:               891.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8180706.136 ops/s
[info]                  ·gc.alloc.rate:               909.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          174.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 258.673 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 7885783.834 ops/s
[info]                  ·gc.alloc.rate:                   857.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              171.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8193043.634 ops/s
[info]                  ·gc.alloc.rate:               889.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          170.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8050331.907 ±(99.9%) 633398.130 ops/s [Average]
[info]   (min, avg, max) = (7858405.037, 8050331.907, 8193043.634), stdev = 164491.483
[info]   CI (99.9%): [7416933.777, 8683730.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   882.512 ±(99.9%) 81.279 MB/sec [Average]
[info]   (min, avg, max) = (857.668, 882.512, 909.479), stdev = 21.108
[info]   CI (99.9%): [801.233, 963.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   172.515 ±(99.9%) 6.365 B/op [Average]
[info]   (min, avg, max) = (170.881, 172.515, 174.957), stdev = 1.653
[info]   CI (99.9%): [166.150, 178.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   806.729 ±(99.9%) 1157.941 MB/sec [Average]
[info]   (min, avg, max) = (671.493, 806.729, 1344.661), stdev = 300.714
[info]   CI (99.9%): [≈ 0, 1964.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   157.329 ±(99.9%) 218.342 B/op [Average]
[info]   (min, avg, max) = (129.241, 157.329, 258.673), stdev = 56.703
[info]   CI (99.9%): [≈ 0, 375.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.92% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379.842 ops/s
[info] # Warmup Iteration   2: 32396.477 ops/s
[info] # Warmup Iteration   3: 168431.155 ops/s
[info] # Warmup Iteration   4: 217659.371 ops/s
[info] # Warmup Iteration   5: 234254.172 ops/s
[info] Iteration   1: 231612.156 ops/s
[info]                  ·gc.alloc.rate:                   2063.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              14019.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13633.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 230483.158 ops/s
[info]                  ·gc.alloc.rate:                   2040.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              13930.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13728.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 229455.312 ops/s
[info]                  ·gc.alloc.rate:                   2050.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              14064.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13811.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 230394.063 ops/s
[info]                  ·gc.alloc.rate:               2047.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          13982.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13760.291 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 226268.809 ops/s
[info]                  ·gc.alloc.rate:               2038.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          14171.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14022.930 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   229642.700 ±(99.9%) 7836.777 ops/s [Average]
[info]   (min, avg, max) = (226268.809, 229642.700, 231612.156), stdev = 2035.186
[info]   CI (99.9%): [221805.923, 237479.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2047.912 ±(99.9%) 38.416 MB/sec [Average]
[info]   (min, avg, max) = (2038.229, 2047.912, 2063.322), stdev = 9.976
[info]   CI (99.9%): [2009.496, 2086.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   14033.812 ±(99.9%) 352.554 B/op [Average]
[info]   (min, avg, max) = (13930.462, 14033.812, 14171.967), stdev = 91.557
[info]   CI (99.9%): [13681.258, 14386.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2012.456 ±(99.9%) 15.242 MB/sec [Average]
[info]   (min, avg, max) = (2006.571, 2012.456, 2016.795), stdev = 3.958
[info]   CI (99.9%): [1997.214, 2027.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13791.322 ±(99.9%) 557.556 B/op [Average]
[info]   (min, avg, max) = (13633.683, 13791.322, 14022.930), stdev = 144.796
[info]   CI (99.9%): [13233.765, 14348.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 1.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.062), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.421 ±(99.9%) 12.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.421, 7.250), stdev = 3.372
[info]   CI (99.9%): [≈ 0, 15.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79.12% complete, ETA 00:27:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82314.858 ops/s
[info] # Warmup Iteration   2: 274152.642 ops/s
[info] # Warmup Iteration   3: 295170.079 ops/s
[info] # Warmup Iteration   4: 322477.643 ops/s
[info] # Warmup Iteration   5: 323792.203 ops/s
[info] Iteration   1: 323810.990 ops/s
[info]                  ·gc.alloc.rate:                   636.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              3093.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3260.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 323703.699 ops/s
[info]                  ·gc.alloc.rate:               620.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          3017.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3261.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 324142.125 ops/s
[info]                  ·gc.alloc.rate:               636.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          3090.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3258.607 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 324826.408 ops/s
[info]                  ·gc.alloc.rate:               645.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          3125.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3251.616 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 325222.480 ops/s
[info]                  ·gc.alloc.rate:               643.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          3113.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3249.439 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   324341.140 ±(99.9%) 2539.121 ops/s [Average]
[info]   (min, avg, max) = (323703.699, 324341.140, 325222.480), stdev = 659.402
[info]   CI (99.9%): [321802.020, 326880.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   636.535 ±(99.9%) 37.060 MB/sec [Average]
[info]   (min, avg, max) = (620.751, 636.535, 645.127), stdev = 9.624
[info]   CI (99.9%): [599.475, 673.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3088.232 ±(99.9%) 161.773 B/op [Average]
[info]   (min, avg, max) = (3017.533, 3088.232, 3125.404), stdev = 42.012
[info]   CI (99.9%): [2926.460, 3250.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   671.154 ±(99.9%) 0.873 MB/sec [Average]
[info]   (min, avg, max) = (670.894, 671.154, 671.503), stdev = 0.227
[info]   CI (99.9%): [670.281, 672.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3256.249 ±(99.9%) 20.660 B/op [Average]
[info]   (min, avg, max) = (3249.439, 3256.249, 3261.285), stdev = 5.365
[info]   CI (99.9%): [3235.589, 3276.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.32% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 875690.760 ops/s
[info] # Warmup Iteration   2: 1534245.850 ops/s
[info] # Warmup Iteration   3: 1593092.080 ops/s
[info] # Warmup Iteration   4: 1593294.146 ops/s
[info] # Warmup Iteration   5: 1592670.447 ops/s
[info] Iteration   1: 1594195.596 ops/s
[info]                  ·gc.alloc.rate:      48.625 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1581766.986 ops/s
[info]                  ·gc.alloc.rate:               73.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          73.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 509.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1593800.414 ops/s
[info]                  ·gc.alloc.rate:      48.622 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1589074.054 ops/s
[info]                  ·gc.alloc.rate:      48.468 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1582652.532 ops/s
[info]                  ·gc.alloc.rate:      48.272 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1588297.917 ±(99.9%) 22795.837 ops/s [Average]
[info]   (min, avg, max) = (1581766.986, 1588297.917, 1594195.596), stdev = 5920.007
[info]   CI (99.9%): [1565502.079, 1611093.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   53.484 ±(99.9%) 42.945 MB/sec [Average]
[info]   (min, avg, max) = (48.272, 53.484, 73.433), stdev = 11.153
[info]   CI (99.9%): [10.539, 96.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   53.011 ±(99.9%) 43.139 B/op [Average]
[info]   (min, avg, max) = (48.000, 53.011, 73.051), stdev = 11.203
[info]   CI (99.9%): [9.871, 96.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.338 ±(99.9%) 881.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.338, 511.692), stdev = 228.836
[info]   CI (99.9%): [≈ 0, 983.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   101.807 ±(99.9%) 876.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.807, 509.033), stdev = 227.646
[info]   CI (99.9%): [≈ 0, 978.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.52% complete, ETA 00:27:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1939.994 ops/s
[info] # Warmup Iteration   2: 60874.292 ops/s
[info] # Warmup Iteration   3: 72333.756 ops/s
[info] # Warmup Iteration   4: 74584.006 ops/s
[info] # Warmup Iteration   5: 73589.578 ops/s
[info] Iteration   1: 74461.281 ops/s
[info]                  ·gc.alloc.rate:               3233.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          68336.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56857.291 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 73915.690 ops/s
[info]                  ·gc.alloc.rate:                   3279.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              69797.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71813.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 74204.861 ops/s
[info]                  ·gc.alloc.rate:               3291.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          69800.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71723.407 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 73727.916 ops/s
[info]                  ·gc.alloc.rate:               3244.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          69250.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57860.068 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 72290.186 ops/s
[info]                  ·gc.alloc.rate:               3210.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          69890.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3394.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73892.404 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   73719.987 ±(99.9%) 3260.175 ops/s [Average]
[info]   (min, avg, max) = (72290.186, 73719.987, 74461.281), stdev = 846.657
[info]   CI (99.9%): [70459.812, 76980.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3251.798 ±(99.9%) 127.641 MB/sec [Average]
[info]   (min, avg, max) = (3210.650, 3251.798, 3291.391), stdev = 33.148
[info]   CI (99.9%): [3124.157, 3379.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69415.178 ±(99.9%) 2518.682 B/op [Average]
[info]   (min, avg, max) = (68336.657, 69415.178, 69890.717), stdev = 654.094
[info]   CI (99.9%): [66896.497, 71933.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3110.276 ±(99.9%) 1440.829 MB/sec [Average]
[info]   (min, avg, max) = (2690.285, 3110.276, 3394.481), stdev = 374.179
[info]   CI (99.9%): [1669.446, 4551.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66429.290 ±(99.9%) 32088.124 B/op [Average]
[info]   (min, avg, max) = (56857.291, 66429.290, 73892.404), stdev = 8333.184
[info]   CI (99.9%): [34341.166, 98517.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.089 ±(99.9%) 0.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.443), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.72% complete, ETA 00:27:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353795.387 ops/s
[info] # Warmup Iteration   2: 1494439.061 ops/s
[info] # Warmup Iteration   3: 1575858.493 ops/s
[info] # Warmup Iteration   4: 1553249.006 ops/s
[info] # Warmup Iteration   5: 1590098.955 ops/s
[info] Iteration   1: 1583935.157 ops/s
[info]                  ·gc.alloc.rate:               877.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          871.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1326.060 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1558415.249 ops/s
[info]                  ·gc.alloc.rate:               844.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          852.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 674.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1584968.566 ops/s
[info]                  ·gc.alloc.rate:                   847.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              841.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1545683.223 ops/s
[info]                  ·gc.alloc.rate:               825.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          840.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 680.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1577857.203 ops/s
[info]                  ·gc.alloc.rate:                   855.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1334.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1570171.880 ±(99.9%) 66843.524 ops/s [Average]
[info]   (min, avg, max) = (1545683.223, 1570171.880, 1584968.566), stdev = 17359.051
[info]   CI (99.9%): [1503328.356, 1637015.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   849.971 ±(99.9%) 73.082 MB/sec [Average]
[info]   (min, avg, max) = (825.239, 849.971, 877.441), stdev = 18.979
[info]   CI (99.9%): [776.888, 923.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   851.829 ±(99.9%) 49.156 B/op [Average]
[info]   (min, avg, max) = (840.175, 851.829, 871.779), stdev = 12.766
[info]   CI (99.9%): [802.673, 900.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.302 ±(99.9%) 1408.994 MB/sec [Average]
[info]   (min, avg, max) = (667.894, 935.302, 1337.599), stdev = 365.911
[info]   CI (99.9%): [≈ 0, 2344.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   935.661 ±(99.9%) 1386.732 B/op [Average]
[info]   (min, avg, max) = (663.423, 935.661, 1334.131), stdev = 360.130
[info]   CI (99.9%): [≈ 0, 2322.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.92% complete, ETA 00:26:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 986703.588 ops/s
[info] # Warmup Iteration   2: 1607265.872 ops/s
[info] # Warmup Iteration   3: 1712773.624 ops/s
[info] # Warmup Iteration   4: 1711794.345 ops/s
[info] # Warmup Iteration   5: 1656753.260 ops/s
[info] Iteration   1: 1648120.132 ops/s
[info]                  ·gc.alloc.rate:                   480.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              458.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1672678.983 ops/s
[info]                  ·gc.alloc.rate:               486.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1723459.320 ops/s
[info]                  ·gc.alloc.rate:      481.904 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1719523.365 ops/s
[info]                  ·gc.alloc.rate:               497.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          455.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 613.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1692501.981 ops/s
[info]                  ·gc.alloc.rate:                   493.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              458.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1691256.756 ±(99.9%) 122427.753 ops/s [Average]
[info]   (min, avg, max) = (1648120.132, 1691256.756, 1723459.320), stdev = 31794.099
[info]   CI (99.9%): [1568829.003, 1813684.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   487.729 ±(99.9%) 27.928 MB/sec [Average]
[info]   (min, avg, max) = (480.308, 487.729, 497.209), stdev = 7.253
[info]   CI (99.9%): [459.801, 515.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   453.889 ±(99.9%) 30.385 B/op [Average]
[info]   (min, avg, max) = (440.000, 453.889, 458.648), stdev = 7.891
[info]   CI (99.9%): [423.505, 484.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.920 ±(99.9%) 1118.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.920, 671.309), stdev = 290.574
[info]   CI (99.9%): [≈ 0, 1623.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   471.539 ±(99.9%) 1039.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 471.539, 631.154), stdev = 270.026
[info]   CI (99.9%): [≈ 0, 1511.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.12% complete, ETA 00:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 862777.172 ops/s
[info] # Warmup Iteration   2: 1717435.576 ops/s
[info] # Warmup Iteration   3: 1796435.767 ops/s
[info] # Warmup Iteration   4: 1787854.463 ops/s
[info] # Warmup Iteration   5: 1795285.697 ops/s
[info] Iteration   1: 1795176.490 ops/s
[info]                  ·gc.alloc.rate:      18.252 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1797356.388 ops/s
[info]                  ·gc.alloc.rate:      18.274 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1796341.562 ops/s
[info]                  ·gc.alloc.rate:      18.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1796080.192 ops/s
[info]                  ·gc.alloc.rate:      18.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1760245.242 ops/s
[info]                  ·gc.alloc.rate:      17.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1789039.975 ±(99.9%) 62054.952 ops/s [Average]
[info]   (min, avg, max) = (1760245.242, 1789039.975, 1797356.388), stdev = 16115.474
[info]   CI (99.9%): [1726985.022, 1851094.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.190 ±(99.9%) 0.632 MB/sec [Average]
[info]   (min, avg, max) = (17.896, 18.190, 18.274), stdev = 0.164
[info]   CI (99.9%): [17.557, 18.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.32% complete, ETA 00:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6185.795 ops/s
[info] # Warmup Iteration   2: 46383.574 ops/s
[info] # Warmup Iteration   3: 49731.534 ops/s
[info] # Warmup Iteration   4: 50957.410 ops/s
[info] # Warmup Iteration   5: 50969.456 ops/s
[info] Iteration   1: 51047.173 ops/s
[info]                  ·gc.alloc.rate:                   2203.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              67922.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61834.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 50974.678 ops/s
[info]                  ·gc.alloc.rate:                   2211.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              68235.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82164.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 49792.893 ops/s
[info]                  ·gc.alloc.rate:                   2136.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              67518.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63183.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 49746.350 ops/s
[info]                  ·gc.alloc.rate:               2161.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          68364.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63328.460 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 49700.004 ops/s
[info]                  ·gc.alloc.rate:               2159.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          68375.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63543.988 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   50252.220 ±(99.9%) 2671.779 ops/s [Average]
[info]   (min, avg, max) = (49700.004, 50252.220, 51047.173), stdev = 693.852
[info]   CI (99.9%): [47580.441, 52923.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2174.476 ±(99.9%) 123.374 MB/sec [Average]
[info]   (min, avg, max) = (2136.336, 2174.476, 2211.936), stdev = 32.040
[info]   CI (99.9%): [2051.102, 2297.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68083.217 ±(99.9%) 1404.363 B/op [Average]
[info]   (min, avg, max) = (67518.755, 68083.217, 68375.188), stdev = 364.709
[info]   CI (99.9%): [66678.854, 69487.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2135.492 ±(99.9%) 1136.603 MB/sec [Average]
[info]   (min, avg, max) = (1999.156, 2135.492, 2663.482), stdev = 295.172
[info]   CI (99.9%): [998.888, 3272.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66810.957 ±(99.9%) 33150.636 B/op [Average]
[info]   (min, avg, max) = (61834.358, 66810.957, 82164.767), stdev = 8609.115
[info]   CI (99.9%): [33660.321, 99961.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.289), stdev = 1.904
[info]   CI (99.9%): [≈ 0, 8.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.223 ±(99.9%) 226.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.223, 132.201), stdev = 58.695
[info]   CI (99.9%): [≈ 0, 253.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.52% complete, ETA 00:26:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142193.896 ops/s
[info] # Warmup Iteration   2: 253116.631 ops/s
[info] # Warmup Iteration   3: 261372.015 ops/s
[info] # Warmup Iteration   4: 271588.430 ops/s
[info] # Warmup Iteration   5: 272550.955 ops/s
[info] Iteration   1: 271988.302 ops/s
[info]                  ·gc.alloc.rate:                   1101.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              6373.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7772.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 272244.975 ops/s
[info]                  ·gc.alloc.rate:               1080.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          6248.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3883.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 267181.337 ops/s
[info]                  ·gc.alloc.rate:                   1099.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              6475.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7918.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 269218.678 ops/s
[info]                  ·gc.alloc.rate:               1091.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          6382.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3931.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 271519.398 ops/s
[info]                  ·gc.alloc.rate:                   1090.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              6322.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7797.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   270430.538 ±(99.9%) 8376.885 ops/s [Average]
[info]   (min, avg, max) = (267181.337, 270430.538, 272244.975), stdev = 2175.450
[info]   CI (99.9%): [262053.653, 278807.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1092.918 ±(99.9%) 31.588 MB/sec [Average]
[info]   (min, avg, max) = (1080.866, 1092.918, 1101.677), stdev = 8.203
[info]   CI (99.9%): [1061.330, 1124.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6360.446 ±(99.9%) 321.648 B/op [Average]
[info]   (min, avg, max) = (6248.079, 6360.446, 6475.221), stdev = 83.531
[info]   CI (99.9%): [6038.799, 6682.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.466 ±(99.9%) 1417.714 MB/sec [Average]
[info]   (min, avg, max) = (671.816, 1075.466, 1345.278), stdev = 368.176
[info]   CI (99.9%): [≈ 0, 2493.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6260.488 ±(99.9%) 8274.719 B/op [Average]
[info]   (min, avg, max) = (3883.515, 6260.488, 7918.045), stdev = 2148.918
[info]   CI (99.9%): [≈ 0, 14535.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.550 ±(99.9%) 4.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.550, 2.685), stdev = 1.194
[info]   CI (99.9%): [≈ 0, 5.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.186 ±(99.9%) 26.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.186, 15.565), stdev = 6.921
[info]   CI (99.9%): [≈ 0, 29.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.72% complete, ETA 00:25:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2326.117 ops/s
[info] # Warmup Iteration   2: 28981.357 ops/s
[info] # Warmup Iteration   3: 38578.559 ops/s
[info] # Warmup Iteration   4: 38472.169 ops/s
[info] # Warmup Iteration   5: 38331.390 ops/s
[info] Iteration   1: 38088.713 ops/s
[info]                  ·gc.alloc.rate:               1937.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          80064.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82585.303 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 38386.659 ops/s
[info]                  ·gc.alloc.rate:                   1986.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              81435.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82167.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38808.958 ops/s
[info]                  ·gc.alloc.rate:               1983.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          80439.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81620.743 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 37804.660 ops/s
[info]                  ·gc.alloc.rate:               1934.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          80515.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83954.297 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 37778.903 ops/s
[info]                  ·gc.alloc.rate:               1933.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          80529.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56136.055 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   38173.578 ±(99.9%) 1665.356 ops/s [Average]
[info]   (min, avg, max) = (37778.903, 38173.578, 38808.958), stdev = 432.488
[info]   CI (99.9%): [36508.223, 39838.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1955.095 ±(99.9%) 105.801 MB/sec [Average]
[info]   (min, avg, max) = (1933.149, 1955.095, 1986.461), stdev = 27.476
[info]   CI (99.9%): [1849.294, 2060.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80597.042 ±(99.9%) 1947.338 B/op [Average]
[info]   (min, avg, max) = (80064.535, 80597.042, 81435.809), stdev = 505.718
[info]   CI (99.9%): [78649.704, 82544.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1876.096 ±(99.9%) 1138.005 MB/sec [Average]
[info]   (min, avg, max) = (1347.574, 1876.096, 2016.801), stdev = 295.536
[info]   CI (99.9%): [738.091, 3014.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77292.697 ±(99.9%) 45662.360 B/op [Average]
[info]   (min, avg, max) = (56136.055, 77292.697, 83954.297), stdev = 11858.370
[info]   CI (99.9%): [31630.337, 122955.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 1.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.853), stdev = 0.382
[info]   CI (99.9%): [≈ 0, 1.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.92% complete, ETA 00:25:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36391.759 ops/s
[info] # Warmup Iteration   2: 107066.129 ops/s
[info] # Warmup Iteration   3: 112716.426 ops/s
[info] # Warmup Iteration   4: 110634.459 ops/s
[info] # Warmup Iteration   5: 113815.757 ops/s
[info] Iteration   1: 113365.915 ops/s
[info]                  ·gc.alloc.rate:                   1144.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              15890.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18527.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 113338.711 ops/s
[info]                  ·gc.alloc.rate:               1140.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          15827.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18550.641 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 115489.779 ops/s
[info]                  ·gc.alloc.rate:                   1153.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              15722.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9104.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 113118.313 ops/s
[info]                  ·gc.alloc.rate:               1157.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          16097.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18609.388 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 114757.516 ops/s
[info]                  ·gc.alloc.rate:                   1161.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              15926.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18362.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   114014.047 ±(99.9%) 4042.729 ops/s [Average]
[info]   (min, avg, max) = (113118.313, 114014.047, 115489.779), stdev = 1049.884
[info]   CI (99.9%): [109971.318, 118056.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1151.423 ±(99.9%) 33.822 MB/sec [Average]
[info]   (min, avg, max) = (1140.165, 1151.423, 1161.365), stdev = 8.784
[info]   CI (99.9%): [1117.601, 1185.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15892.790 ±(99.9%) 532.152 B/op [Average]
[info]   (min, avg, max) = (15722.177, 15892.790, 16097.263), stdev = 138.198
[info]   CI (99.9%): [15360.637, 16424.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.162 ±(99.9%) 1151.602 MB/sec [Average]
[info]   (min, avg, max) = (668.181, 1203.162, 1338.951), stdev = 299.067
[info]   CI (99.9%): [51.560, 2354.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16630.943 ±(99.9%) 16204.289 B/op [Average]
[info]   (min, avg, max) = (9104.870, 16630.943, 18609.388), stdev = 4208.202
[info]   CI (99.9%): [426.654, 32835.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.997), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 7.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.191 ±(99.9%) 93.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.191, 54.813), stdev = 24.388
[info]   CI (99.9%): [≈ 0, 105.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.12% complete, ETA 00:25:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128436.839 ops/s
[info] # Warmup Iteration   2: 290609.388 ops/s
[info] # Warmup Iteration   3: 303977.252 ops/s
[info] # Warmup Iteration   4: 303391.169 ops/s
[info] # Warmup Iteration   5: 311472.408 ops/s
[info] Iteration   1: 313768.277 ops/s
[info]                  ·gc.alloc.rate:      422.709 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 312044.391 ops/s
[info]                  ·gc.alloc.rate:               437.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          2204.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2580.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 312424.008 ops/s
[info]                  ·gc.alloc.rate:               442.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          2229.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3377.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 313501.185 ops/s
[info]                  ·gc.alloc.rate:      422.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 312353.630 ops/s
[info]                  ·gc.alloc.rate:               434.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          2190.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3378.378 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   312818.298 ±(99.9%) 2944.614 ops/s [Average]
[info]   (min, avg, max) = (312044.391, 312818.298, 313768.277), stdev = 764.707
[info]   CI (99.9%): [309873.684, 315762.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   431.937 ±(99.9%) 34.847 MB/sec [Average]
[info]   (min, avg, max) = (422.350, 431.937, 442.652), stdev = 9.050
[info]   CI (99.9%): [397.090, 466.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2172.965 ±(99.9%) 193.816 B/op [Average]
[info]   (min, avg, max) = (2120.002, 2172.965, 2229.590), stdev = 50.333
[info]   CI (99.9%): [1979.148, 2366.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.565 ±(99.9%) 1326.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.565, 670.584), stdev = 344.441
[info]   CI (99.9%): [≈ 0, 1696.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1867.286 ±(99.9%) 6682.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1867.286, 3378.378), stdev = 1735.414
[info]   CI (99.9%): [≈ 0, 8549.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.33% complete, ETA 00:24:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211722.096 ops/s
[info] # Warmup Iteration   2: 342919.737 ops/s
[info] # Warmup Iteration   3: 364696.973 ops/s
[info] # Warmup Iteration   4: 365796.452 ops/s
[info] # Warmup Iteration   5: 365030.875 ops/s
[info] Iteration   1: 364801.827 ops/s
[info]                  ·gc.alloc.rate:      4.651 MB/sec
[info]                  ·gc.alloc.rate.norm: 20.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 365323.109 ops/s
[info]                  ·gc.alloc.rate:      5.485 MB/sec
[info]                  ·gc.alloc.rate.norm: 23.624 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 366228.836 ops/s
[info]                  ·gc.alloc.rate:      3.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 365380.563 ops/s
[info]                  ·gc.alloc.rate:      3.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365497.638 ops/s
[info]                  ·gc.alloc.rate:      3.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   365446.395 ±(99.9%) 1972.719 ops/s [Average]
[info]   (min, avg, max) = (364801.827, 365446.395, 366228.836), stdev = 512.309
[info]   CI (99.9%): [363473.675, 367419.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.258 ±(99.9%) 3.063 MB/sec [Average]
[info]   (min, avg, max) = (3.716, 4.258, 5.485), stdev = 0.796
[info]   CI (99.9%): [1.195, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   18.338 ±(99.9%) 13.241 B/op [Average]
[info]   (min, avg, max) = (16.001, 18.338, 23.624), stdev = 3.439
[info]   CI (99.9%): [5.097, 31.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.53% complete, ETA 00:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8227.219 ops/s
[info] # Warmup Iteration   2: 42830.596 ops/s
[info] # Warmup Iteration   3: 49956.643 ops/s
[info] # Warmup Iteration   4: 52610.858 ops/s
[info] # Warmup Iteration   5: 51338.214 ops/s
[info] Iteration   1: 52386.759 ops/s
[info]                  ·gc.alloc.rate:                   1393.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              41850.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39893.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52517.560 ops/s
[info]                  ·gc.alloc.rate:                   1390.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              41671.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39843.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52681.038 ops/s
[info]                  ·gc.alloc.rate:               1392.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          41602.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39780.297 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 52666.966 ops/s
[info]                  ·gc.alloc.rate:               1406.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          42012.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39867.464 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 52596.793 ops/s
[info]                  ·gc.alloc.rate:                   1415.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              42341.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40004.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   52569.824 ±(99.9%) 466.774 ops/s [Average]
[info]   (min, avg, max) = (52386.759, 52569.824, 52681.038), stdev = 121.220
[info]   CI (99.9%): [52103.049, 53036.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1399.596 ±(99.9%) 41.235 MB/sec [Average]
[info]   (min, avg, max) = (1390.660, 1399.596, 1415.165), stdev = 10.709
[info]   CI (99.9%): [1358.361, 1440.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41895.428 ±(99.9%) 1140.245 B/op [Average]
[info]   (min, avg, max) = (41602.390, 41895.428, 42341.443), stdev = 296.118
[info]   CI (99.9%): [40755.183, 43035.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1332.191 ±(99.9%) 14.126 MB/sec [Average]
[info]   (min, avg, max) = (1327.958, 1332.191, 1337.043), stdev = 3.669
[info]   CI (99.9%): [1318.065, 1346.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39877.816 ±(99.9%) 316.039 B/op [Average]
[info]   (min, avg, max) = (39780.297, 39877.816, 40004.030), stdev = 82.074
[info]   CI (99.9%): [39561.777, 40193.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.106 ±(99.9%) 0.826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.490), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.179 ±(99.9%) 24.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.179, 14.648), stdev = 6.419
[info]   CI (99.9%): [≈ 0, 27.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.73% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11776.546 ops/s
[info] # Warmup Iteration   2: 61410.259 ops/s
[info] # Warmup Iteration   3: 69214.382 ops/s
[info] # Warmup Iteration   4: 74210.107 ops/s
[info] # Warmup Iteration   5: 74202.856 ops/s
[info] Iteration   1: 71499.980 ops/s
[info]                  ·gc.alloc.rate:                   1553.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              34206.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44331.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 72697.126 ops/s
[info]                  ·gc.alloc.rate:                   1557.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              33725.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29101.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 74665.876 ops/s
[info]                  ·gc.alloc.rate:                   1599.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              33704.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28332.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 74008.977 ops/s
[info]                  ·gc.alloc.rate:                   1612.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              34295.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42780.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 74727.467 ops/s
[info]                  ·gc.alloc.rate:                   1612.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              33948.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28213.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73519.885 ±(99.9%) 5365.989 ops/s [Average]
[info]   (min, avg, max) = (71499.980, 73519.885, 74727.467), stdev = 1393.530
[info]   CI (99.9%): [68153.896, 78885.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1587.178 ±(99.9%) 111.911 MB/sec [Average]
[info]   (min, avg, max) = (1553.969, 1587.178, 1612.794), stdev = 29.063
[info]   CI (99.9%): [1475.267, 1699.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33976.090 ±(99.9%) 1040.010 B/op [Average]
[info]   (min, avg, max) = (33704.828, 33976.090, 34295.167), stdev = 270.087
[info]   CI (99.9%): [32936.080, 35016.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.813 ±(99.9%) 1413.417 MB/sec [Average]
[info]   (min, avg, max) = (1339.700, 1610.813, 2013.969), stdev = 367.060
[info]   CI (99.9%): [197.396, 3024.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34551.811 ±(99.9%) 31748.557 B/op [Average]
[info]   (min, avg, max) = (28213.248, 34551.811, 44331.532), stdev = 8244.999
[info]   CI (99.9%): [2803.254, 66300.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 5.701 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.770, 3.414), stdev = 1.481
[info]   CI (99.9%): [≈ 0, 6.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.246 ±(99.9%) 120.133 B/op [Average]
[info]   (min, avg, max) = (0.451, 16.246, 71.955), stdev = 31.198
[info]   CI (99.9%): [≈ 0, 136.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.93% complete, ETA 00:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29316.623 ops/s
[info] # Warmup Iteration   2: 123782.847 ops/s
[info] # Warmup Iteration   3: 131198.773 ops/s
[info] # Warmup Iteration   4: 132567.635 ops/s
[info] # Warmup Iteration   5: 135505.217 ops/s
[info] Iteration   1: 136072.642 ops/s
[info]                  ·gc.alloc.rate:               686.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          7934.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7700.544 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 135975.469 ops/s
[info]                  ·gc.alloc.rate:               683.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          7906.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7706.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 135984.065 ops/s
[info]                  ·gc.alloc.rate:                   677.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              7843.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7713.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 135873.625 ops/s
[info]                  ·gc.alloc.rate:               686.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          7951.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7719.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 136497.652 ops/s
[info]                  ·gc.alloc.rate:               684.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          7891.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7692.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   136080.690 ±(99.9%) 937.704 ops/s [Average]
[info]   (min, avg, max) = (135873.625, 136080.690, 136497.652), stdev = 243.519
[info]   CI (99.9%): [135142.986, 137018.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   683.575 ±(99.9%) 13.552 MB/sec [Average]
[info]   (min, avg, max) = (677.760, 683.575, 686.511), stdev = 3.519
[info]   CI (99.9%): [670.023, 697.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7905.476 ±(99.9%) 161.637 B/op [Average]
[info]   (min, avg, max) = (7843.399, 7905.476, 7951.714), stdev = 41.977
[info]   CI (99.9%): [7743.838, 8067.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.361 ±(99.9%) 2.135 MB/sec [Average]
[info]   (min, avg, max) = (665.826, 666.361, 667.152), stdev = 0.554
[info]   CI (99.9%): [664.226, 668.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7706.392 ±(99.9%) 41.262 B/op [Average]
[info]   (min, avg, max) = (7692.215, 7706.392, 7719.706), stdev = 10.716
[info]   CI (99.9%): [7665.130, 7747.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.241), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.13% complete, ETA 00:23:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110871.512 ops/s
[info] # Warmup Iteration   2: 270654.544 ops/s
[info] # Warmup Iteration   3: 286713.618 ops/s
[info] # Warmup Iteration   4: 287529.511 ops/s
[info] # Warmup Iteration   5: 283803.484 ops/s
[info] Iteration   1: 292714.340 ops/s
[info]                  ·gc.alloc.rate:                   1240.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              6670.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7224.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 286767.701 ops/s
[info]                  ·gc.alloc.rate:               1208.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          6628.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3688.681 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 292807.286 ops/s
[info]                  ·gc.alloc.rate:                   1236.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              6646.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7228.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 291861.108 ops/s
[info]                  ·gc.alloc.rate:                   1241.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              6693.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7256.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 293744.967 ops/s
[info]                  ·gc.alloc.rate:                   1249.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              6696.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7202.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   291579.080 ±(99.9%) 10670.744 ops/s [Average]
[info]   (min, avg, max) = (286767.701, 291579.080, 293744.967), stdev = 2771.158
[info]   CI (99.9%): [280908.336, 302249.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1235.334 ±(99.9%) 61.506 MB/sec [Average]
[info]   (min, avg, max) = (1208.118, 1235.334, 1249.936), stdev = 15.973
[info]   CI (99.9%): [1173.827, 1296.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6666.913 ±(99.9%) 114.620 B/op [Average]
[info]   (min, avg, max) = (6628.068, 6666.913, 6696.928), stdev = 29.766
[info]   CI (99.9%): [6552.294, 6781.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.232 ±(99.9%) 1157.842 MB/sec [Average]
[info]   (min, avg, max) = (672.347, 1210.232, 1345.793), stdev = 300.688
[info]   CI (99.9%): [52.390, 2368.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6520.113 ±(99.9%) 6095.314 B/op [Average]
[info]   (min, avg, max) = (3688.681, 6520.113, 7256.233), stdev = 1582.934
[info]   CI (99.9%): [424.799, 12615.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 4.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 2.769), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.522 ±(99.9%) 24.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.522, 14.930), stdev = 6.451
[info]   CI (99.9%): [≈ 0, 28.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.33% complete, ETA 00:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500.620 ops/s
[info] # Warmup Iteration   2: 18330.213 ops/s
[info] # Warmup Iteration   3: 26716.150 ops/s
[info] # Warmup Iteration   4: 27138.351 ops/s
[info] # Warmup Iteration   5: 27316.646 ops/s
[info] Iteration   1: 27012.347 ops/s
[info]                  ·gc.alloc.rate:                   1463.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              85222.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77617.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27384.536 ops/s
[info]                  ·gc.alloc.rate:               1464.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          84160.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76757.754 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 27537.523 ops/s
[info]                  ·gc.alloc.rate:                   1471.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              84099.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76448.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27451.894 ops/s
[info]                  ·gc.alloc.rate:                   1479.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              84798.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76774.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27537.705 ops/s
[info]                  ·gc.alloc.rate:               1493.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          85355.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76638.715 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   27384.801 ±(99.9%) 839.068 ops/s [Average]
[info]   (min, avg, max) = (27012.347, 27384.801, 27537.705), stdev = 217.903
[info]   CI (99.9%): [26545.733, 28223.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1474.467 ±(99.9%) 47.997 MB/sec [Average]
[info]   (min, avg, max) = (1463.353, 1474.467, 1493.648), stdev = 12.465
[info]   CI (99.9%): [1426.470, 1522.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84727.370 ±(99.9%) 2245.342 B/op [Average]
[info]   (min, avg, max) = (84099.501, 84727.370, 85355.516), stdev = 583.108
[info]   CI (99.9%): [82482.028, 86972.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1337.309 ±(99.9%) 12.443 MB/sec [Average]
[info]   (min, avg, max) = (1332.766, 1337.309, 1341.112), stdev = 3.231
[info]   CI (99.9%): [1324.866, 1349.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76847.481 ±(99.9%) 1732.152 B/op [Average]
[info]   (min, avg, max) = (76448.356, 76847.481, 77617.676), stdev = 449.834
[info]   CI (99.9%): [75115.329, 78579.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.270 ±(99.9%) 2.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 1.267), stdev = 0.558
[info]   CI (99.9%): [≈ 0, 2.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.482 ±(99.9%) 123.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.482, 72.627), stdev = 31.978
[info]   CI (99.9%): [≈ 0, 138.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.53% complete, ETA 00:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28552.986 ops/s
[info] # Warmup Iteration   2: 167427.324 ops/s
[info] # Warmup Iteration   3: 174942.362 ops/s
[info] # Warmup Iteration   4: 178583.308 ops/s
[info] # Warmup Iteration   5: 179946.919 ops/s
[info] Iteration   1: 178938.340 ops/s
[info]                  ·gc.alloc.rate:               1031.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          9069.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11723.428 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 180314.852 ops/s
[info]                  ·gc.alloc.rate:               1014.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          8855.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5822.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 178598.134 ops/s
[info]                  ·gc.alloc.rate:                   1020.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              8989.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11763.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 175509.334 ops/s
[info]                  ·gc.alloc.rate:               996.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          8932.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5988.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 175032.284 ops/s
[info]                  ·gc.alloc.rate:                   995.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              8950.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12021.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   177678.589 ±(99.9%) 8842.032 ops/s [Average]
[info]   (min, avg, max) = (175032.284, 177678.589, 180314.852), stdev = 2296.248
[info]   CI (99.9%): [168836.557, 186520.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1011.555 ±(99.9%) 59.786 MB/sec [Average]
[info]   (min, avg, max) = (995.455, 1011.555, 1031.200), stdev = 15.526
[info]   CI (99.9%): [951.769, 1071.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8959.518 ±(99.9%) 302.378 B/op [Average]
[info]   (min, avg, max) = (8855.561, 8959.518, 9069.894), stdev = 78.527
[info]   CI (99.9%): [8657.140, 9261.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.003 ±(99.9%) 1407.754 MB/sec [Average]
[info]   (min, avg, max) = (667.214, 1068.003, 1336.958), stdev = 365.589
[info]   CI (99.9%): [≈ 0, 2475.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9463.893 ±(99.9%) 12518.068 B/op [Average]
[info]   (min, avg, max) = (5822.935, 9463.893, 12021.135), stdev = 3250.903
[info]   CI (99.9%): [≈ 0, 21981.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.374), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.73% complete, ETA 00:23:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227878.005 ops/s
[info] # Warmup Iteration   2: 454356.087 ops/s
[info] # Warmup Iteration   3: 462917.470 ops/s
[info] # Warmup Iteration   4: 472671.903 ops/s
[info] # Warmup Iteration   5: 473447.826 ops/s
[info] Iteration   1: 470640.684 ops/s
[info]                  ·gc.alloc.rate:                   1409.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              4714.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4494.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 471590.894 ops/s
[info]                  ·gc.alloc.rate:                   1418.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              4732.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4488.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 473340.650 ops/s
[info]                  ·gc.alloc.rate:                   1414.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              4701.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4474.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 460901.718 ops/s
[info]                  ·gc.alloc.rate:                   1387.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4589.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 455765.608 ops/s
[info]                  ·gc.alloc.rate:                   1387.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              4789.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4637.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   466447.911 ±(99.9%) 29603.121 ops/s [Average]
[info]   (min, avg, max) = (455765.608, 466447.911, 473340.650), stdev = 7687.837
[info]   CI (99.9%): [436844.790, 496051.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1403.393 ±(99.9%) 57.761 MB/sec [Average]
[info]   (min, avg, max) = (1387.136, 1403.393, 1418.199), stdev = 15.000
[info]   CI (99.9%): [1345.632, 1461.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4734.987 ±(99.9%) 129.495 B/op [Average]
[info]   (min, avg, max) = (4701.828, 4734.987, 4789.732), stdev = 33.629
[info]   CI (99.9%): [4605.493, 4864.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.469 ±(99.9%) 3.760 MB/sec [Average]
[info]   (min, avg, max) = (1343.249, 1344.469, 1345.816), stdev = 0.976
[info]   CI (99.9%): [1340.709, 1348.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4536.756 ±(99.9%) 279.104 B/op [Average]
[info]   (min, avg, max) = (4474.222, 4536.756, 4637.254), stdev = 72.482
[info]   CI (99.9%): [4257.652, 4815.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.549 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.600, 2.707), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 5.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.998 ±(99.9%) 15.115 B/op [Average]
[info]   (min, avg, max) = (0.069, 1.998, 8.998), stdev = 3.925
[info]   CI (99.9%): [≈ 0, 17.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.93% complete, ETA 00:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274457.423 ops/s
[info] # Warmup Iteration   2: 501558.589 ops/s
[info] # Warmup Iteration   3: 522389.664 ops/s
[info] # Warmup Iteration   4: 527229.883 ops/s
[info] # Warmup Iteration   5: 527145.152 ops/s
[info] Iteration   1: 525689.073 ops/s
[info]                  ·gc.alloc.rate:               980.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          2935.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2010.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 527707.853 ops/s
[info]                  ·gc.alloc.rate:               983.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          2932.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2003.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 519018.411 ops/s
[info]                  ·gc.alloc.rate:                   984.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              2986.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4075.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 527875.833 ops/s
[info]                  ·gc.alloc.rate:               991.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          2956.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2003.828 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 525060.055 ops/s
[info]                  ·gc.alloc.rate:               991.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          2970.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4033.315 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   525070.245 ±(99.9%) 13861.789 ops/s [Average]
[info]   (min, avg, max) = (519018.411, 525070.245, 527875.833), stdev = 3599.863
[info]   CI (99.9%): [511208.456, 538932.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   986.396 ±(99.9%) 19.013 MB/sec [Average]
[info]   (min, avg, max) = (980.680, 986.396, 991.879), stdev = 4.937
[info]   CI (99.9%): [967.384, 1005.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2956.495 ±(99.9%) 88.524 B/op [Average]
[info]   (min, avg, max) = (2932.326, 2956.495, 2986.454), stdev = 22.989
[info]   CI (99.9%): [2867.971, 3045.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   941.023 ±(99.9%) 1419.427 MB/sec [Average]
[info]   (min, avg, max) = (671.479, 941.023, 1345.671), stdev = 368.621
[info]   CI (99.9%): [≈ 0, 2360.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2825.185 ±(99.9%) 4320.517 B/op [Average]
[info]   (min, avg, max) = (2003.514, 2825.185, 4075.068), stdev = 1122.025
[info]   CI (99.9%): [≈ 0, 7145.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.817
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.13% complete, ETA 00:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8386.869 ops/s
[info] # Warmup Iteration   2: 56867.990 ops/s
[info] # Warmup Iteration   3: 66520.095 ops/s
[info] # Warmup Iteration   4: 68192.567 ops/s
[info] # Warmup Iteration   5: 67168.042 ops/s
[info] Iteration   1: 69015.256 ops/s
[info]                  ·gc.alloc.rate:               1526.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          34806.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30273.090 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 67534.022 ops/s
[info]                  ·gc.alloc.rate:               1506.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          35108.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31001.188 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 67365.918 ops/s
[info]                  ·gc.alloc.rate:                   1515.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              35399.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46786.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 66603.224 ops/s
[info]                  ·gc.alloc.rate:               1509.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          35666.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31622.871 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 68209.234 ops/s
[info]                  ·gc.alloc.rate:                   1519.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              35059.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30939.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   67745.531 ±(99.9%) 3508.595 ops/s [Average]
[info]   (min, avg, max) = (66603.224, 67745.531, 69015.256), stdev = 911.171
[info]   CI (99.9%): [64236.936, 71254.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1515.520 ±(99.9%) 30.415 MB/sec [Average]
[info]   (min, avg, max) = (1506.792, 1515.520, 1526.468), stdev = 7.899
[info]   CI (99.9%): [1485.105, 1545.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35208.005 ±(99.9%) 1277.137 B/op [Average]
[info]   (min, avg, max) = (34806.461, 35208.005, 35666.404), stdev = 331.668
[info]   CI (99.9%): [33930.868, 36485.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1468.055 ±(99.9%) 1151.248 MB/sec [Average]
[info]   (min, avg, max) = (1327.653, 1468.055, 2002.790), stdev = 298.976
[info]   CI (99.9%): [316.807, 2619.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34124.691 ±(99.9%) 27318.258 B/op [Average]
[info]   (min, avg, max) = (30273.090, 34124.691, 46786.835), stdev = 7094.465
[info]   CI (99.9%): [6806.433, 61442.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.772 ±(99.9%) 4.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.772, 2.402), stdev = 1.109
[info]   CI (99.9%): [≈ 0, 5.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26234.578 ops/s
[info] # Warmup Iteration   2: 88452.343 ops/s
[info] # Warmup Iteration   3: 91900.821 ops/s
[info] # Warmup Iteration   4: 97280.031 ops/s
[info] # Warmup Iteration   5: 98033.237 ops/s
[info] Iteration   1: 98243.974 ops/s
[info]                  ·gc.alloc.rate:               1595.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          25558.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21513.848 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 98396.295 ops/s
[info]                  ·gc.alloc.rate:                   1624.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              25980.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32252.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 98185.778 ops/s
[info]                  ·gc.alloc.rate:                   1605.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              25734.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21514.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 97080.660 ops/s
[info]                  ·gc.alloc.rate:                   1601.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              25958.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21717.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 97552.943 ops/s
[info]                  ·gc.alloc.rate:                   1608.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              25954.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32402.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   97891.930 ±(99.9%) 2141.991 ops/s [Average]
[info]   (min, avg, max) = (97080.660, 97891.930, 98396.295), stdev = 556.268
[info]   CI (99.9%): [95749.939, 100033.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1607.148 ±(99.9%) 41.839 MB/sec [Average]
[info]   (min, avg, max) = (1595.519, 1607.148, 1624.400), stdev = 10.865
[info]   CI (99.9%): [1565.310, 1648.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25837.253 ±(99.9%) 713.255 B/op [Average]
[info]   (min, avg, max) = (25558.123, 25837.253, 25980.108), stdev = 185.230
[info]   CI (99.9%): [25123.998, 26550.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.042 ±(99.9%) 1415.099 MB/sec [Average]
[info]   (min, avg, max) = (1339.662, 1610.042, 2016.583), stdev = 367.497
[info]   CI (99.9%): [194.944, 3025.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25880.111 ±(99.9%) 22666.343 B/op [Average]
[info]   (min, avg, max) = (21513.848, 25880.111, 32402.265), stdev = 5886.377
[info]   CI (99.9%): [3213.768, 48546.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.811), stdev = 1.207
[info]   CI (99.9%): [≈ 0, 5.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.063 ±(99.9%) 74.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.063, 44.951), stdev = 19.304
[info]   CI (99.9%): [≈ 0, 86.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16017.959 ops/s
[info] # Warmup Iteration   2: 153915.433 ops/s
[info] # Warmup Iteration   3: 169416.437 ops/s
[info] # Warmup Iteration   4: 177344.136 ops/s
[info] # Warmup Iteration   5: 175553.181 ops/s
[info] Iteration   1: 177176.031 ops/s
[info]                  ·gc.alloc.rate:               752.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          6685.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5911.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 177082.870 ops/s
[info]                  ·gc.alloc.rate:               748.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          6651.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5923.138 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 177305.981 ops/s
[info]                  ·gc.alloc.rate:                   755.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              6705.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5915.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 174220.604 ops/s
[info]                  ·gc.alloc.rate:               738.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          6672.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6026.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 176625.641 ops/s
[info]                  ·gc.alloc.rate:                   747.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              6662.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5944.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   176482.225 ±(99.9%) 4967.261 ops/s [Average]
[info]   (min, avg, max) = (174220.604, 176482.225, 177305.981), stdev = 1289.982
[info]   CI (99.9%): [171514.965, 181449.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   748.698 ±(99.9%) 24.681 MB/sec [Average]
[info]   (min, avg, max) = (738.749, 748.698, 755.699), stdev = 6.410
[info]   CI (99.9%): [724.017, 773.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6675.668 ±(99.9%) 80.001 B/op [Average]
[info]   (min, avg, max) = (6651.900, 6675.668, 6705.642), stdev = 20.776
[info]   CI (99.9%): [6595.667, 6755.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.627 ±(99.9%) 2.645 MB/sec [Average]
[info]   (min, avg, max) = (665.498, 666.627, 667.198), stdev = 0.687
[info]   CI (99.9%): [663.982, 669.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5944.198 ±(99.9%) 184.162 B/op [Average]
[info]   (min, avg, max) = (5911.154, 5944.198, 6026.645), stdev = 47.826
[info]   CI (99.9%): [5760.036, 6128.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.185), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.73% complete, ETA 00:21:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96102.397 ops/s
[info] # Warmup Iteration   2: 265472.690 ops/s
[info] # Warmup Iteration   3: 278235.161 ops/s
[info] # Warmup Iteration   4: 276308.121 ops/s
[info] # Warmup Iteration   5: 279607.696 ops/s
[info] Iteration   1: 280180.093 ops/s
[info]                  ·gc.alloc.rate:               1020.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          5731.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3771.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 279042.793 ops/s
[info]                  ·gc.alloc.rate:                   1030.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              5810.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7581.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 278612.362 ops/s
[info]                  ·gc.alloc.rate:               1009.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          5700.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3798.452 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 280092.396 ops/s
[info]                  ·gc.alloc.rate:                   1024.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              5754.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3778.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 269564.078 ops/s
[info]                  ·gc.alloc.rate:               988.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          5770.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7856.337 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   277498.344 ±(99.9%) 17274.315 ops/s [Average]
[info]   (min, avg, max) = (269564.078, 277498.344, 280180.093), stdev = 4486.085
[info]   CI (99.9%): [260224.030, 294772.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1014.486 ±(99.9%) 63.622 MB/sec [Average]
[info]   (min, avg, max) = (988.284, 1014.486, 1030.263), stdev = 16.522
[info]   CI (99.9%): [950.864, 1078.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5753.442 ±(99.9%) 158.469 B/op [Average]
[info]   (min, avg, max) = (5700.822, 5753.442, 5810.319), stdev = 41.154
[info]   CI (99.9%): [5594.973, 5911.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.286 ±(99.9%) 1419.036 MB/sec [Average]
[info]   (min, avg, max) = (671.502, 941.286, 1345.625), stdev = 368.519
[info]   CI (99.9%): [≈ 0, 2360.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5357.306 ±(99.9%) 8310.004 B/op [Average]
[info]   (min, avg, max) = (3771.789, 5357.306, 7856.337), stdev = 2158.082
[info]   CI (99.9%): [≈ 0, 13667.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.117), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.94% complete, ETA 00:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9993.970 ops/s
[info] # Warmup Iteration   2: 57839.919 ops/s
[info] # Warmup Iteration   3: 64589.014 ops/s
[info] # Warmup Iteration   4: 67593.301 ops/s
[info] # Warmup Iteration   5: 67515.681 ops/s
[info] Iteration   1: 67442.414 ops/s
[info]                  ·gc.alloc.rate:                   2610.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              60908.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46790.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.972 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 68750.948 ops/s
[info]                  ·gc.alloc.rate:                   2665.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              61012.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61118.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.289 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68625.980 ops/s
[info]                  ·gc.alloc.rate:               2701.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          61959.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61295.890 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 68588.081 ops/s
[info]                  ·gc.alloc.rate:               2700.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          61951.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61490.332 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 68435.312 ops/s
[info]                  ·gc.alloc.rate:               2695.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          61987.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61826.921 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   68368.547 ±(99.9%) 2040.184 ops/s [Average]
[info]   (min, avg, max) = (67442.414, 68368.547, 68750.948), stdev = 529.829
[info]   CI (99.9%): [66328.363, 70408.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2674.791 ±(99.9%) 149.828 MB/sec [Average]
[info]   (min, avg, max) = (2610.304, 2674.791, 2701.991), stdev = 38.910
[info]   CI (99.9%): [2524.964, 2824.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61564.082 ±(99.9%) 2127.424 B/op [Average]
[info]   (min, avg, max) = (60908.361, 61564.082, 61987.947), stdev = 552.485
[info]   CI (99.9%): [59436.658, 63691.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.498 ±(99.9%) 1158.892 MB/sec [Average]
[info]   (min, avg, max) = (2005.270, 2543.498, 2688.669), stdev = 300.961
[info]   CI (99.9%): [1384.605, 3702.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58504.454 ±(99.9%) 25235.225 B/op [Average]
[info]   (min, avg, max) = (46790.609, 58504.454, 61826.921), stdev = 6553.508
[info]   CI (99.9%): [33269.229, 83739.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.187), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.052 ±(99.9%) 7.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.052, 4.289), stdev = 1.858
[info]   CI (99.9%): [≈ 0, 8.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84.14% complete, ETA 00:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38910.820 ops/s
[info] # Warmup Iteration   2: 155191.103 ops/s
[info] # Warmup Iteration   3: 154037.761 ops/s
[info] # Warmup Iteration   4: 156289.836 ops/s
[info] # Warmup Iteration   5: 156290.704 ops/s
[info] Iteration   1: 153047.439 ops/s
[info]                  ·gc.alloc.rate:                   1313.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              13502.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13816.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 155734.830 ops/s
[info]                  ·gc.alloc.rate:               1306.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          13204.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13584.649 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 155746.298 ops/s
[info]                  ·gc.alloc.rate:                   1304.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              13181.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13596.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 156795.737 ops/s
[info]                  ·gc.alloc.rate:                   1337.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              13428.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13506.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 157136.212 ops/s
[info]                  ·gc.alloc.rate:               1328.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          13307.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13449.954 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   155692.103 ±(99.9%) 6179.795 ops/s [Average]
[info]   (min, avg, max) = (153047.439, 155692.103, 157136.212), stdev = 1604.873
[info]   CI (99.9%): [149512.309, 161871.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1318.215 ±(99.9%) 56.012 MB/sec [Average]
[info]   (min, avg, max) = (1304.539, 1318.215, 1337.951), stdev = 14.546
[info]   CI (99.9%): [1262.203, 1374.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   13325.033 ±(99.9%) 535.379 B/op [Average]
[info]   (min, avg, max) = (13181.782, 13325.033, 13502.060), stdev = 139.036
[info]   CI (99.9%): [12789.655, 13860.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.457 ±(99.9%) 4.626 MB/sec [Average]
[info]   (min, avg, max) = (1342.967, 1344.457, 1345.716), stdev = 1.201
[info]   CI (99.9%): [1339.830, 1349.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13590.930 ±(99.9%) 537.857 B/op [Average]
[info]   (min, avg, max) = (13449.954, 13590.930, 13816.702), stdev = 139.680
[info]   CI (99.9%): [13053.073, 14128.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.373), stdev = 1.501
[info]   CI (99.9%): [≈ 0, 6.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.897 ±(99.9%) 58.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.897, 33.850), stdev = 15.068
[info]   CI (99.9%): [≈ 0, 64.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.34% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63127.936 ops/s
[info] # Warmup Iteration   2: 183074.204 ops/s
[info] # Warmup Iteration   3: 197610.109 ops/s
[info] # Warmup Iteration   4: 204686.255 ops/s
[info] # Warmup Iteration   5: 203358.766 ops/s
[info] Iteration   1: 203771.946 ops/s
[info]                  ·gc.alloc.rate:                   1414.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              10922.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10362.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 201743.042 ops/s
[info]                  ·gc.alloc.rate:               1397.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          10901.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10471.313 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 202026.814 ops/s
[info]                  ·gc.alloc.rate:                   1412.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              11002.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10464.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 205128.967 ops/s
[info]                  ·gc.alloc.rate:                   1433.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              10994.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10295.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 204029.185 ops/s
[info]                  ·gc.alloc.rate:                   1424.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              10989.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10333.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   203339.991 ±(99.9%) 5491.958 ops/s [Average]
[info]   (min, avg, max) = (201743.042, 203339.991, 205128.967), stdev = 1426.244
[info]   CI (99.9%): [197848.032, 208831.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1416.561 ±(99.9%) 51.339 MB/sec [Average]
[info]   (min, avg, max) = (1397.885, 1416.561, 1433.121), stdev = 13.332
[info]   CI (99.9%): [1365.223, 1467.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10962.162 ±(99.9%) 179.907 B/op [Average]
[info]   (min, avg, max) = (10901.656, 10962.162, 11002.921), stdev = 46.721
[info]   CI (99.9%): [10782.255, 11142.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.938 ±(99.9%) 5.347 MB/sec [Average]
[info]   (min, avg, max) = (1339.647, 1341.938, 1343.304), stdev = 1.389
[info]   CI (99.9%): [1336.590, 1347.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10385.209 ±(99.9%) 304.007 B/op [Average]
[info]   (min, avg, max) = (10295.539, 10385.209, 10471.313), stdev = 78.950
[info]   CI (99.9%): [10081.202, 10689.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.081), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.504 ±(99.9%) 40.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.504, 24.000), stdev = 10.397
[info]   CI (99.9%): [≈ 0, 45.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.54% complete, ETA 00:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178706.852 ops/s
[info] # Warmup Iteration   2: 490827.143 ops/s
[info] # Warmup Iteration   3: 512617.820 ops/s
[info] # Warmup Iteration   4: 509422.999 ops/s
[info] # Warmup Iteration   5: 511764.899 ops/s
[info] Iteration   1: 491585.304 ops/s
[info]                  ·gc.alloc.rate:               412.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1637.850 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 507288.146 ops/s
[info]                  ·gc.alloc.rate:               415.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1587.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 510109.961 ops/s
[info]                  ·gc.alloc.rate:                   421.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1300.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2056.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 506982.554 ops/s
[info]                  ·gc.alloc.rate:      400.731 MB/sec
[info]                  ·gc.alloc.rate.norm: 1243.929 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 507884.605 ops/s
[info]                  ·gc.alloc.rate:               427.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          1324.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2065.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   504770.114 ±(99.9%) 28769.788 ops/s [Average]
[info]   (min, avg, max) = (491585.304, 504770.114, 510109.961), stdev = 7471.423
[info]   CI (99.9%): [476000.326, 533539.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   415.509 ±(99.9%) 38.955 MB/sec [Average]
[info]   (min, avg, max) = (400.731, 415.509, 427.552), stdev = 10.117
[info]   CI (99.9%): [376.554, 454.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1295.540 ±(99.9%) 125.095 B/op [Average]
[info]   (min, avg, max) = (1243.929, 1295.540, 1324.890), stdev = 32.487
[info]   CI (99.9%): [1170.444, 1420.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.266 ±(99.9%) 1057.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.266, 666.504), stdev = 274.586
[info]   CI (99.9%): [≈ 0, 1528.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1469.305 ±(99.9%) 3279.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1469.305, 2065.329), stdev = 851.594
[info]   CI (99.9%): [≈ 0, 4748.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.74% complete, ETA 00:20:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327778.137 ops/s
[info] # Warmup Iteration   2: 632825.674 ops/s
[info] # Warmup Iteration   3: 629256.609 ops/s
[info] # Warmup Iteration   4: 643638.290 ops/s
[info] # Warmup Iteration   5: 613232.617 ops/s
[info] Iteration   1: 636467.474 ops/s
[info]                  ·gc.alloc.rate:                   354.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              877.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1265.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 614277.831 ops/s
[info]                  ·gc.alloc.rate:      336.760 MB/sec
[info]                  ·gc.alloc.rate.norm: 862.485 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 628762.787 ops/s
[info]                  ·gc.alloc.rate:               357.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1280.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 641195.403 ops/s
[info]                  ·gc.alloc.rate:      345.511 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 621291.716 ops/s
[info]                  ·gc.alloc.rate:               361.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          916.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1698.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   628399.042 ±(99.9%) 42133.392 ops/s [Average]
[info]   (min, avg, max) = (614277.831, 628399.042, 641195.403), stdev = 10941.908
[info]   CI (99.9%): [586265.650, 670532.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   351.344 ±(99.9%) 39.026 MB/sec [Average]
[info]   (min, avg, max) = (336.760, 351.344, 361.798), stdev = 10.135
[info]   CI (99.9%): [312.318, 390.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   879.925 ±(99.9%) 103.732 B/op [Average]
[info]   (min, avg, max) = (848.001, 879.925, 916.211), stdev = 26.939
[info]   CI (99.9%): [776.192, 983.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.784 ±(99.9%) 1216.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.784, 670.676), stdev = 316.009
[info]   CI (99.9%): [≈ 0, 1555.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   848.791 ±(99.9%) 3057.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 848.791, 1698.410), stdev = 794.101
[info]   CI (99.9%): [≈ 0, 3906.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285432.806 ops/s
[info] # Warmup Iteration   2: 656257.117 ops/s
[info] # Warmup Iteration   3: 690161.586 ops/s
[info] # Warmup Iteration   4: 689970.188 ops/s
[info] # Warmup Iteration   5: 687398.379 ops/s
[info] Iteration   1: 690274.211 ops/s
[info]                  ·gc.alloc.rate:      7.018 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 687688.898 ops/s
[info]                  ·gc.alloc.rate:      7.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.699 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 690623.175 ops/s
[info]                  ·gc.alloc.rate:      7.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 690364.344 ops/s
[info]                  ·gc.alloc.rate:      7.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 688330.160 ops/s
[info]                  ·gc.alloc.rate:      6.998 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   689456.158 ±(99.9%) 5183.023 ops/s [Average]
[info]   (min, avg, max) = (687688.898, 689456.158, 690623.175), stdev = 1346.015
[info]   CI (99.9%): [684273.135, 694639.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.071 ±(99.9%) 0.488 MB/sec [Average]
[info]   (min, avg, max) = (6.998, 7.071, 7.297), stdev = 0.127
[info]   CI (99.9%): [6.582, 7.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.140 ±(99.9%) 1.202 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.140, 16.699), stdev = 0.312
[info]   CI (99.9%): [14.938, 17.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.14% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10029.203 ops/s
[info] # Warmup Iteration   2: 31412.035 ops/s
[info] # Warmup Iteration   3: 34886.254 ops/s
[info] # Warmup Iteration   4: 35142.824 ops/s
[info] # Warmup Iteration   5: 35361.702 ops/s
[info] Iteration   1: 35411.975 ops/s
[info]                  ·gc.alloc.rate:                   1922.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              85419.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89451.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35637.005 ops/s
[info]                  ·gc.alloc.rate:                   1919.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              84745.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59202.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34988.823 ops/s
[info]                  ·gc.alloc.rate:                   1925.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              86581.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90215.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35685.381 ops/s
[info]                  ·gc.alloc.rate:               1935.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          85343.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88414.476 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 35278.355 ops/s
[info]                  ·gc.alloc.rate:               1940.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          86578.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89518.384 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35400.308 ±(99.9%) 1091.881 ops/s [Average]
[info]   (min, avg, max) = (34988.823, 35400.308, 35685.381), stdev = 283.558
[info]   CI (99.9%): [34308.427, 36492.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1928.711 ±(99.9%) 34.878 MB/sec [Average]
[info]   (min, avg, max) = (1919.516, 1928.711, 1940.738), stdev = 9.058
[info]   CI (99.9%): [1893.833, 1963.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85733.412 ±(99.9%) 3139.742 B/op [Average]
[info]   (min, avg, max) = (84745.342, 85733.412, 86581.018), stdev = 815.381
[info]   CI (99.9%): [82593.670, 88873.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.422 ±(99.9%) 1148.402 MB/sec [Average]
[info]   (min, avg, max) = (1340.952, 1874.422, 2013.363), stdev = 298.236
[info]   CI (99.9%): [726.019, 3022.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83360.281 ±(99.9%) 52061.150 B/op [Average]
[info]   (min, avg, max) = (59202.110, 83360.281, 90215.228), stdev = 13520.115
[info]   CI (99.9%): [31299.132, 135421.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 5.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.165), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 6.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.673 ±(99.9%) 232.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.673, 140.623), stdev = 60.499
[info]   CI (99.9%): [≈ 0, 268.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85.34% complete, ETA 00:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31868.955 ops/s
[info] # Warmup Iteration   2: 97641.532 ops/s
[info] # Warmup Iteration   3: 101815.918 ops/s
[info] # Warmup Iteration   4: 104920.621 ops/s
[info] # Warmup Iteration   5: 105302.196 ops/s
[info] Iteration   1: 104799.573 ops/s
[info]                  ·gc.alloc.rate:                   1786.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              26822.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30301.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 105314.211 ops/s
[info]                  ·gc.alloc.rate:                   1792.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              26789.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20108.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 105239.320 ops/s
[info]                  ·gc.alloc.rate:                   1817.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              27183.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30103.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 105329.943 ops/s
[info]                  ·gc.alloc.rate:                   1818.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              27171.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30040.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 105631.384 ops/s
[info]                  ·gc.alloc.rate:               1810.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          26979.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19967.772 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   105262.886 ±(99.9%) 1152.199 ops/s [Average]
[info]   (min, avg, max) = (104799.573, 105262.886, 105631.384), stdev = 299.222
[info]   CI (99.9%): [104110.687, 106415.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1805.256 ±(99.9%) 57.357 MB/sec [Average]
[info]   (min, avg, max) = (1786.187, 1805.256, 1818.576), stdev = 14.895
[info]   CI (99.9%): [1747.899, 1862.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   26989.331 ±(99.9%) 716.739 B/op [Average]
[info]   (min, avg, max) = (26789.450, 26989.331, 27183.333), stdev = 186.135
[info]   CI (99.9%): [26272.592, 27706.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.497 ±(99.9%) 1415.042 MB/sec [Average]
[info]   (min, avg, max) = (1340.271, 1745.497, 2017.854), stdev = 367.482
[info]   CI (99.9%): [330.455, 3160.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26104.311 ±(99.9%) 21328.308 B/op [Average]
[info]   (min, avg, max) = (19967.772, 26104.311, 30301.733), stdev = 5538.894
[info]   CI (99.9%): [4776.002, 47432.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.372), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10.639 ±(99.9%) 85.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.639, 50.395), stdev = 22.232
[info]   CI (99.9%): [≈ 0, 96.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.54% complete, ETA 00:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20989.963 ops/s
[info] # Warmup Iteration   2: 66778.953 ops/s
[info] # Warmup Iteration   3: 76318.903 ops/s
[info] # Warmup Iteration   4: 80780.064 ops/s
[info] # Warmup Iteration   5: 80739.466 ops/s
[info] Iteration   1: 80501.563 ops/s
[info]                  ·gc.alloc.rate:                   3000.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              58659.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52325.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.442 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 81398.313 ops/s
[info]                  ·gc.alloc.rate:                   3071.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              59385.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64727.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.805 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 81098.218 ops/s
[info]                  ·gc.alloc.rate:                   3049.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              59175.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52103.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 81799.946 ops/s
[info]                  ·gc.alloc.rate:                   3103.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              59686.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64775.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.801 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 81367.526 ops/s
[info]                  ·gc.alloc.rate:               3061.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          59186.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52249.053 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   81233.113 ±(99.9%) 1846.724 ops/s [Average]
[info]   (min, avg, max) = (80501.563, 81233.113, 81799.946), stdev = 479.588
[info]   CI (99.9%): [79386.389, 83079.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3057.153 ±(99.9%) 143.993 MB/sec [Average]
[info]   (min, avg, max) = (3000.667, 3057.153, 3103.179), stdev = 37.395
[info]   CI (99.9%): [2913.160, 3201.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59218.631 ±(99.9%) 1442.991 B/op [Average]
[info]   (min, avg, max) = (58659.510, 59218.631, 59686.029), stdev = 374.740
[info]   CI (99.9%): [57775.640, 60661.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2955.880 ±(99.9%) 1413.572 MB/sec [Average]
[info]   (min, avg, max) = (2676.645, 2955.880, 3367.764), stdev = 367.100
[info]   CI (99.9%): [1542.308, 4369.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   57236.032 ±(99.9%) 26419.451 B/op [Average]
[info]   (min, avg, max) = (52103.035, 57236.032, 64775.015), stdev = 6861.047
[info]   CI (99.9%): [30816.581, 83655.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.890 ±(99.9%) 3.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.890, 2.442), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 4.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.74% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38104.335 ops/s
[info] # Warmup Iteration   2: 126551.796 ops/s
[info] # Warmup Iteration   3: 128919.894 ops/s
[info] # Warmup Iteration   4: 131737.452 ops/s
[info] # Warmup Iteration   5: 132673.344 ops/s
[info] Iteration   1: 131695.866 ops/s
[info]                  ·gc.alloc.rate:                   1732.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              20698.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23956.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 131319.159 ops/s
[info]                  ·gc.alloc.rate:                   1739.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              20840.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16030.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 132683.742 ops/s
[info]                  ·gc.alloc.rate:                   1767.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              20963.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23719.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 132873.278 ops/s
[info]                  ·gc.alloc.rate:               1745.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          20670.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15779.331 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 134157.517 ops/s
[info]                  ·gc.alloc.rate:               1786.293 MB/sec
[info]                  ·gc.alloc.rate.norm:          20953.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23452.254 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   132545.912 ±(99.9%) 4283.976 ops/s [Average]
[info]   (min, avg, max) = (131319.159, 132545.912, 134157.517), stdev = 1112.535
[info]   CI (99.9%): [128261.936, 136829.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1754.081 ±(99.9%) 86.063 MB/sec [Average]
[info]   (min, avg, max) = (1732.237, 1754.081, 1786.293), stdev = 22.350
[info]   CI (99.9%): [1668.017, 1840.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20825.420 ±(99.9%) 530.659 B/op [Average]
[info]   (min, avg, max) = (20670.191, 20825.420, 20963.809), stdev = 137.810
[info]   CI (99.9%): [20294.761, 21356.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1734.807 ±(99.9%) 1405.418 MB/sec [Average]
[info]   (min, avg, max) = (1332.346, 1734.807, 2004.858), stdev = 364.982
[info]   CI (99.9%): [329.389, 3140.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20587.646 ±(99.9%) 16478.772 B/op [Average]
[info]   (min, avg, max) = (15779.331, 20587.646, 23956.466), stdev = 4279.485
[info]   CI (99.9%): [4108.874, 37066.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.330), stdev = 1.927
[info]   CI (99.9%): [≈ 0, 8.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.576 ±(99.9%) 88.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.576, 51.891), stdev = 23.097
[info]   CI (99.9%): [≈ 0, 99.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.94% complete, ETA 00:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416943.415 ops/s
[info] # Warmup Iteration   2: 637669.207 ops/s
[info] # Warmup Iteration   3: 637384.570 ops/s
[info] # Warmup Iteration   4: 649656.046 ops/s
[info] # Warmup Iteration   5: 648481.751 ops/s
[info] Iteration   1: 653941.280 ops/s
[info]                  ·gc.alloc.rate:                   1748.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              4208.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3238.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 644772.325 ops/s
[info]                  ·gc.alloc.rate:                   1751.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              4275.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4928.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 660891.746 ops/s
[info]                  ·gc.alloc.rate:               1765.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          4204.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3199.601 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 658239.728 ops/s
[info]                  ·gc.alloc.rate:               1773.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          4239.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4816.192 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 658252.199 ops/s
[info]                  ·gc.alloc.rate:               1787.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          4271.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4809.960 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   655219.456 ±(99.9%) 24450.129 ops/s [Average]
[info]   (min, avg, max) = (644772.325, 655219.456, 660891.746), stdev = 6349.621
[info]   CI (99.9%): [630769.327, 679669.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1765.436 ±(99.9%) 61.485 MB/sec [Average]
[info]   (min, avg, max) = (1748.760, 1765.436, 1787.669), stdev = 15.968
[info]   CI (99.9%): [1703.950, 1826.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4239.940 ±(99.9%) 129.608 B/op [Average]
[info]   (min, avg, max) = (4204.425, 4239.940, 4275.533), stdev = 33.659
[info]   CI (99.9%): [4110.332, 4369.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.184 ±(99.9%) 1414.857 MB/sec [Average]
[info]   (min, avg, max) = (1343.742, 1747.184, 2019.205), stdev = 367.434
[info]   CI (99.9%): [332.326, 3162.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4198.466 ±(99.9%) 3448.244 B/op [Average]
[info]   (min, avg, max) = (3199.601, 4198.466, 4928.243), stdev = 895.498
[info]   CI (99.9%): [750.222, 7646.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.873), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.422 ±(99.9%) 12.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.422, 7.012), stdev = 3.125
[info]   CI (99.9%): [≈ 0, 13.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 996.321 ops/s
[info] # Warmup Iteration   2: 5810.173 ops/s
[info] # Warmup Iteration   3: 11886.753 ops/s
[info] # Warmup Iteration   4: 17554.814 ops/s
[info] # Warmup Iteration   5: 20505.939 ops/s
[info] Iteration   1: 20537.806 ops/s
[info]                  ·gc.alloc.rate:                   2648.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              202924.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152899.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 20388.159 ops/s
[info]                  ·gc.alloc.rate:                   2632.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              203231.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205879.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 19619.622 ops/s
[info]                  ·gc.alloc.rate:                   2580.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              207015.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214401.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.490 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19707.684 ops/s
[info]                  ·gc.alloc.rate:                   2612.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              208589.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213779.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 20384.654 ops/s
[info]                  ·gc.alloc.rate:                   2642.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              204000.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207231.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.607 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   20127.585 ±(99.9%) 1652.425 ops/s [Average]
[info]   (min, avg, max) = (19619.622, 20127.585, 20537.806), stdev = 429.130
[info]   CI (99.9%): [18475.160, 21780.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2623.392 ±(99.9%) 105.661 MB/sec [Average]
[info]   (min, avg, max) = (2580.911, 2623.392, 2648.407), stdev = 27.440
[info]   CI (99.9%): [2517.731, 2729.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   205152.181 ±(99.9%) 9677.475 B/op [Average]
[info]   (min, avg, max) = (202924.205, 205152.181, 208589.124), stdev = 2513.209
[info]   CI (99.9%): [195474.706, 214829.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2539.460 ±(99.9%) 1171.118 MB/sec [Average]
[info]   (min, avg, max) = (1995.521, 2539.460, 2684.355), stdev = 304.136
[info]   CI (99.9%): [1368.342, 3710.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   198838.045 ±(99.9%) 99965.702 B/op [Average]
[info]   (min, avg, max) = (152899.256, 198838.045, 214401.305), stdev = 25960.775
[info]   CI (99.9%): [98872.343, 298803.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.531 ±(99.9%) 2.181 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.531, 1.218), stdev = 0.566
[info]   CI (99.9%): [≈ 0, 2.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   41.790 ±(99.9%) 170.890 B/op [Average]
[info]   (min, avg, max) = (1.595, 41.790, 94.000), stdev = 44.379
[info]   CI (99.9%): [≈ 0, 212.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 9.000), stdev = 1.342
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11659.556 ops/s
[info] # Warmup Iteration   2: 69465.941 ops/s
[info] # Warmup Iteration   3: 78838.701 ops/s
[info] # Warmup Iteration   4: 81709.278 ops/s
[info] # Warmup Iteration   5: 83213.652 ops/s
[info] Iteration   1: 82068.294 ops/s
[info]                  ·gc.alloc.rate:                   3288.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              63043.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51302.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 82590.693 ops/s
[info]                  ·gc.alloc.rate:                   3371.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              64245.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63857.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 83416.792 ops/s
[info]                  ·gc.alloc.rate:                   3407.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              64276.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63437.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 83422.148 ops/s
[info]                  ·gc.alloc.rate:                   3408.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              64295.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63659.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 82529.463 ops/s
[info]                  ·gc.alloc.rate:                   3373.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              64330.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64512.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   82805.478 ±(99.9%) 2294.079 ops/s [Average]
[info]   (min, avg, max) = (82068.294, 82805.478, 83422.148), stdev = 595.765
[info]   CI (99.9%): [80511.399, 85099.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3369.926 ±(99.9%) 188.582 MB/sec [Average]
[info]   (min, avg, max) = (3288.222, 3369.926, 3408.830), stdev = 48.974
[info]   CI (99.9%): [3181.344, 3558.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   64038.476 ±(99.9%) 2144.028 B/op [Average]
[info]   (min, avg, max) = (63043.984, 64038.476, 64330.588), stdev = 556.797
[info]   CI (99.9%): [61894.448, 66182.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3229.643 ±(99.9%) 1193.045 MB/sec [Average]
[info]   (min, avg, max) = (2675.826, 3229.643, 3383.230), stdev = 309.830
[info]   CI (99.9%): [2036.598, 4422.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61353.999 ±(99.9%) 21691.237 B/op [Average]
[info]   (min, avg, max) = (51302.721, 61353.999, 64512.608), stdev = 5633.145
[info]   CI (99.9%): [39662.762, 83045.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.873 ±(99.9%) 3.340 B/op [Average]
[info]   (min, avg, max) = (0.393, 0.873, 2.395), stdev = 0.867
[info]   CI (99.9%): [≈ 0, 4.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.55% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76679.522 ops/s
[info] # Warmup Iteration   2: 270359.039 ops/s
[info] # Warmup Iteration   3: 270272.959 ops/s
[info] # Warmup Iteration   4: 288068.254 ops/s
[info] # Warmup Iteration   5: 286695.074 ops/s
[info] Iteration   1: 285939.821 ops/s
[info]                  ·gc.alloc.rate:                   1364.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              7502.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7327.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 286038.922 ops/s
[info]                  ·gc.alloc.rate:               1354.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          7451.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3676.038 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 284265.290 ops/s
[info]                  ·gc.alloc.rate:               1349.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          7471.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7405.427 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 285152.998 ops/s
[info]                  ·gc.alloc.rate:                   1366.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              7543.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7389.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 285848.915 ops/s
[info]                  ·gc.alloc.rate:               1369.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          7538.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7356.961 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   285449.189 ±(99.9%) 2880.034 ops/s [Average]
[info]   (min, avg, max) = (284265.290, 285449.189, 286038.922), stdev = 747.936
[info]   CI (99.9%): [282569.155, 288329.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1360.972 ±(99.9%) 32.950 MB/sec [Average]
[info]   (min, avg, max) = (1349.598, 1360.972, 1369.488), stdev = 8.557
[info]   CI (99.9%): [1328.022, 1393.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7501.343 ±(99.9%) 155.372 B/op [Average]
[info]   (min, avg, max) = (7451.234, 7501.343, 7543.202), stdev = 40.350
[info]   CI (99.9%): [7345.971, 7656.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.837 ±(99.9%) 1150.947 MB/sec [Average]
[info]   (min, avg, max) = (668.169, 1202.837, 1338.958), stdev = 298.897
[info]   CI (99.9%): [51.890, 2353.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6631.167 ±(99.9%) 6362.180 B/op [Average]
[info]   (min, avg, max) = (3676.038, 6631.167, 7405.427), stdev = 1652.238
[info]   CI (99.9%): [268.987, 12993.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.705), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.136 ±(99.9%) 35.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.136, 20.450), stdev = 9.120
[info]   CI (99.9%): [≈ 0, 39.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.280
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.75% complete, ETA 00:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484182.040 ops/s
[info] # Warmup Iteration   2: 1116520.388 ops/s
[info] # Warmup Iteration   3: 1204158.677 ops/s
[info] # Warmup Iteration   4: 1231051.838 ops/s
[info] # Warmup Iteration   5: 1238287.536 ops/s
[info] Iteration   1: 1204457.279 ops/s
[info]                  ·gc.alloc.rate:               621.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          812.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 876.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1245340.239 ops/s
[info]                  ·gc.alloc.rate:               650.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          822.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 847.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1247249.927 ops/s
[info]                  ·gc.alloc.rate:                   649.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              819.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1205029.064 ops/s
[info]                  ·gc.alloc.rate:               626.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          818.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 876.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1202503.181 ops/s
[info]                  ·gc.alloc.rate:                   621.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              813.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     878.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1220915.938 ±(99.9%) 89321.978 ops/s [Average]
[info]   (min, avg, max) = (1202503.181, 1220915.938, 1247249.927), stdev = 23196.634
[info]   CI (99.9%): [1131593.960, 1310237.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   634.164 ±(99.9%) 57.284 MB/sec [Average]
[info]   (min, avg, max) = (621.655, 634.164, 650.819), stdev = 14.876
[info]   CI (99.9%): [576.880, 691.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   817.323 ±(99.9%) 16.263 B/op [Average]
[info]   (min, avg, max) = (812.428, 817.323, 822.407), stdev = 4.223
[info]   CI (99.9%): [801.060, 833.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.011 ±(99.9%) 1.533 MB/sec [Average]
[info]   (min, avg, max) = (670.514, 671.011, 671.504), stdev = 0.398
[info]   CI (99.9%): [669.478, 672.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   865.119 ±(99.9%) 63.595 B/op [Average]
[info]   (min, avg, max) = (846.833, 865.119, 878.826), stdev = 16.515
[info]   CI (99.9%): [801.525, 928.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.054), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.95% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 628060.793 ops/s
[info] # Warmup Iteration   2: 1290839.645 ops/s
[info] # Warmup Iteration   3: 1299604.208 ops/s
[info] # Warmup Iteration   4: 1310596.224 ops/s
[info] # Warmup Iteration   5: 1310505.899 ops/s
[info] Iteration   1: 1318219.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1317278.106 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1320547.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1322338.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1323998.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1320476.398 ±(99.9%) 10754.295 ops/s [Average]
[info]   (min, avg, max) = (1317278.106, 1320476.398, 1323998.215), stdev = 2792.856
[info]   CI (99.9%): [1309722.103, 1331230.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87.15% complete, ETA 00:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3207.319 ops/s
[info] # Warmup Iteration   2: 25611.530 ops/s
[info] # Warmup Iteration   3: 47220.678 ops/s
[info] # Warmup Iteration   4: 45485.842 ops/s
[info] # Warmup Iteration   5: 45007.232 ops/s
[info] Iteration   1: 48674.384 ops/s
[info]                  ·gc.alloc.rate:                   2647.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              85558.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86148.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.521 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 48885.237 ops/s
[info]                  ·gc.alloc.rate:                   2642.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              85032.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64337.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 49069.131 ops/s
[info]                  ·gc.alloc.rate:                   2662.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              85373.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85502.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 49340.885 ops/s
[info]                  ·gc.alloc.rate:                   2703.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              86227.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85286.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 49349.420 ops/s
[info]                  ·gc.alloc.rate:                   2718.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              86681.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85531.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.328 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   49063.812 ±(99.9%) 1125.801 ops/s [Average]
[info]   (min, avg, max) = (48674.384, 49063.812, 49349.420), stdev = 292.367
[info]   CI (99.9%): [47938.011, 50189.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2674.772 ±(99.9%) 132.127 MB/sec [Average]
[info]   (min, avg, max) = (2642.091, 2674.772, 2718.385), stdev = 34.313
[info]   CI (99.9%): [2542.645, 2806.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85774.766 ±(99.9%) 2573.803 B/op [Average]
[info]   (min, avg, max) = (85032.782, 85774.766, 86681.959), stdev = 668.408
[info]   CI (99.9%): [83200.963, 88348.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2537.511 ±(99.9%) 1159.338 MB/sec [Average]
[info]   (min, avg, max) = (1999.066, 2537.511, 2682.299), stdev = 301.076
[info]   CI (99.9%): [1378.173, 3696.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81361.412 ±(99.9%) 36665.626 B/op [Average]
[info]   (min, avg, max) = (64337.710, 81361.412, 86148.389), stdev = 9521.947
[info]   CI (99.9%): [44695.787, 118027.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.187 ±(99.9%) 1.167 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.187, 0.728), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.036 ±(99.9%) 37.747 B/op [Average]
[info]   (min, avg, max) = (0.670, 6.036, 23.521), stdev = 9.803
[info]   CI (99.9%): [≈ 0, 43.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.35% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61562.477 ops/s
[info] # Warmup Iteration   2: 569141.651 ops/s
[info] # Warmup Iteration   3: 844663.049 ops/s
[info] # Warmup Iteration   4: 847074.378 ops/s
[info] # Warmup Iteration   5: 863059.086 ops/s
[info] Iteration   1: 854510.091 ops/s
[info]                  ·gc.alloc.rate:                   2269.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              4179.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3708.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 845926.856 ops/s
[info]                  ·gc.alloc.rate:                   2243.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4173.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3733.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 870781.381 ops/s
[info]                  ·gc.alloc.rate:                   2335.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              4221.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4830.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 871181.152 ops/s
[info]                  ·gc.alloc.rate:               2338.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          4224.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3623.531 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 864826.026 ops/s
[info]                  ·gc.alloc.rate:                   2348.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              4272.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4878.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   861445.101 ±(99.9%) 42282.532 ops/s [Average]
[info]   (min, avg, max) = (845926.856, 861445.101, 871181.152), stdev = 10980.639
[info]   CI (99.9%): [819162.569, 903727.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2307.343 ±(99.9%) 182.350 MB/sec [Average]
[info]   (min, avg, max) = (2243.684, 2307.343, 2348.869), stdev = 47.356
[info]   CI (99.9%): [2124.993, 2489.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4214.306 ±(99.9%) 154.548 B/op [Average]
[info]   (min, avg, max) = (4173.899, 4214.306, 4272.992), stdev = 40.136
[info]   CI (99.9%): [4059.758, 4368.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2276.365 ±(99.9%) 1408.688 MB/sec [Average]
[info]   (min, avg, max) = (2006.170, 2276.365, 2681.501), stdev = 365.832
[info]   CI (99.9%): [867.677, 3685.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4154.938 ±(99.9%) 2463.819 B/op [Average]
[info]   (min, avg, max) = (3623.531, 4154.938, 4878.107), stdev = 639.846
[info]   CI (99.9%): [1691.119, 6618.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.850 ±(99.9%) 6.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.850, 3.977), stdev = 1.750
[info]   CI (99.9%): [≈ 0, 7.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.565 ±(99.9%) 12.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.565, 7.323), stdev = 3.222
[info]   CI (99.9%): [≈ 0, 13.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.55% complete, ETA 00:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22897.906 ops/s
[info] # Warmup Iteration   2: 1306626.648 ops/s
[info] # Warmup Iteration   3: 1714986.218 ops/s
[info] # Warmup Iteration   4: 1749629.010 ops/s
[info] # Warmup Iteration   5: 1704124.600 ops/s
[info] Iteration   1: 1701129.236 ops/s
[info]                  ·gc.alloc.rate:                   1102.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1019.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1710469.620 ops/s
[info]                  ·gc.alloc.rate:               1078.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          991.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 614.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1701850.235 ops/s
[info]                  ·gc.alloc.rate:                   1087.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              1006.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1761346.057 ops/s
[info]                  ·gc.alloc.rate:                   1121.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1193.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1713546.988 ops/s
[info]                  ·gc.alloc.rate:                   1088.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              999.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1717668.427 ±(99.9%) 96271.960 ops/s [Average]
[info]   (min, avg, max) = (1701129.236, 1717668.427, 1761346.057), stdev = 25001.522
[info]   CI (99.9%): [1621396.467, 1813940.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1095.538 ±(99.9%) 63.991 MB/sec [Average]
[info]   (min, avg, max) = (1078.175, 1095.538, 1121.050), stdev = 16.618
[info]   CI (99.9%): [1031.547, 1159.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1003.683 ±(99.9%) 39.255 B/op [Average]
[info]   (min, avg, max) = (991.721, 1003.683, 1019.376), stdev = 10.194
[info]   CI (99.9%): [964.428, 1042.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.331 ±(99.9%) 1406.916 MB/sec [Average]
[info]   (min, avg, max) = (667.659, 1068.331, 1336.289), stdev = 365.372
[info]   CI (99.9%): [≈ 0, 2475.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   978.124 ±(99.9%) 1281.355 B/op [Average]
[info]   (min, avg, max) = (613.968, 978.124, 1234.780), stdev = 332.764
[info]   CI (99.9%): [≈ 0, 2259.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.75% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1457667.549 ops/s
[info] # Warmup Iteration   2: 7929758.531 ops/s
[info] # Warmup Iteration   3: 8150486.248 ops/s
[info] # Warmup Iteration   4: 8383885.710 ops/s
[info] # Warmup Iteration   5: 8464982.784 ops/s
[info] Iteration   1: 8438561.835 ops/s
[info]                  ·gc.alloc.rate:               266.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8449189.247 ops/s
[info]                  ·gc.alloc.rate:      258.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.091 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8410852.852 ops/s
[info]                  ·gc.alloc.rate:               269.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.727 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8662934.318 ops/s
[info]                  ·gc.alloc.rate:      264.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8474678.025 ops/s
[info]                  ·gc.alloc.rate:               270.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.009 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8487243.255 ±(99.9%) 388317.520 ops/s [Average]
[info]   (min, avg, max) = (8410852.852, 8487243.255, 8662934.318), stdev = 100844.827
[info]   CI (99.9%): [8098925.735, 8875560.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   265.730 ±(99.9%) 18.577 MB/sec [Average]
[info]   (min, avg, max) = (258.195, 265.730, 270.259), stdev = 4.824
[info]   CI (99.9%): [247.153, 284.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.276 ±(99.9%) 4.419 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.276, 50.380), stdev = 1.148
[info]   CI (99.9%): [44.856, 53.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.007 ±(99.9%) 1079.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.007, 511.745), stdev = 280.258
[info]   CI (99.9%): [≈ 0, 1386.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   57.229 ±(99.9%) 201.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.229, 95.727), stdev = 52.244
[info]   CI (99.9%): [≈ 0, 258.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.95% complete, ETA 00:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638.662 ops/s
[info] # Warmup Iteration   2: 55904.331 ops/s
[info] # Warmup Iteration   3: 117037.731 ops/s
[info] # Warmup Iteration   4: 257766.135 ops/s
[info] # Warmup Iteration   5: 279916.997 ops/s
[info] Iteration   1: 280285.167 ops/s
[info]                  ·gc.alloc.rate:               1901.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          10675.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11262.221 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 282584.876 ops/s
[info]                  ·gc.alloc.rate:                   1928.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              10737.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11194.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 286927.379 ops/s
[info]                  ·gc.alloc.rate:                   1933.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              10606.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11043.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 280300.134 ops/s
[info]                  ·gc.alloc.rate:                   1912.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              10738.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11310.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 286868.283 ops/s
[info]                  ·gc.alloc.rate:               1928.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          10580.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7371.495 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   283393.168 ±(99.9%) 12835.840 ops/s [Average]
[info]   (min, avg, max) = (280285.167, 283393.168, 286927.379), stdev = 3333.427
[info]   CI (99.9%): [270557.327, 296229.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1920.932 ±(99.9%) 51.979 MB/sec [Average]
[info]   (min, avg, max) = (1901.314, 1920.932, 1933.729), stdev = 13.499
[info]   CI (99.9%): [1868.953, 1972.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10667.681 ±(99.9%) 280.828 B/op [Average]
[info]   (min, avg, max) = (10580.842, 10667.681, 10738.349), stdev = 72.930
[info]   CI (99.9%): [10386.853, 10948.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1877.556 ±(99.9%) 1149.143 MB/sec [Average]
[info]   (min, avg, max) = (1343.745, 1877.556, 2014.628), stdev = 298.429
[info]   CI (99.9%): [728.413, 3026.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10436.393 ±(99.9%) 6608.819 B/op [Average]
[info]   (min, avg, max) = (7371.495, 10436.393, 11310.402), stdev = 1716.289
[info]   CI (99.9%): [3827.574, 17045.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.371 ±(99.9%) 2.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.249), stdev = 0.541
[info]   CI (99.9%): [≈ 0, 2.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.047 ±(99.9%) 11.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.047, 6.851), stdev = 2.972
[info]   CI (99.9%): [≈ 0, 13.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88.15% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91274.401 ops/s
[info] # Warmup Iteration   2: 902090.059 ops/s
[info] # Warmup Iteration   3: 1105751.416 ops/s
[info] # Warmup Iteration   4: 1094240.928 ops/s
[info] # Warmup Iteration   5: 1087001.115 ops/s
[info] Iteration   1: 1079922.976 ops/s
[info]                  ·gc.alloc.rate:                   1768.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              2577.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2930.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1080921.067 ops/s
[info]                  ·gc.alloc.rate:                   1777.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              2588.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2929.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.759 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1088754.365 ops/s
[info]                  ·gc.alloc.rate:                   1778.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              2570.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1933.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1119825.251 ops/s
[info]                  ·gc.alloc.rate:               1842.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          2588.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2816.865 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1120867.043 ops/s
[info]                  ·gc.alloc.rate:                   1829.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              2567.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2809.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1098058.140 ±(99.9%) 79457.196 ops/s [Average]
[info]   (min, avg, max) = (1079922.976, 1098058.140, 1120867.043), stdev = 20634.781
[info]   CI (99.9%): [1018600.944, 1177515.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1799.298 ±(99.9%) 130.543 MB/sec [Average]
[info]   (min, avg, max) = (1768.761, 1799.298, 1842.159), stdev = 33.902
[info]   CI (99.9%): [1668.755, 1929.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2578.473 ±(99.9%) 37.980 B/op [Average]
[info]   (min, avg, max) = (2567.469, 2578.473, 2588.891), stdev = 9.863
[info]   CI (99.9%): [2540.494, 2616.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1873.446 ±(99.9%) 1153.445 MB/sec [Average]
[info]   (min, avg, max) = (1337.655, 1873.446, 2012.170), stdev = 299.546
[info]   CI (99.9%): [720.001, 3026.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2683.955 ±(99.9%) 1630.943 B/op [Average]
[info]   (min, avg, max) = (1933.512, 2683.955, 2930.241), stdev = 423.551
[info]   CI (99.9%): [1053.012, 4314.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.955), stdev = 1.762
[info]   CI (99.9%): [≈ 0, 7.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.170 ±(99.9%) 9.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.170, 5.759), stdev = 2.565
[info]   CI (99.9%): [≈ 0, 11.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.240
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.35% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225713.721 ops/s
[info] # Warmup Iteration   2: 2289951.438 ops/s
[info] # Warmup Iteration   3: 2710120.797 ops/s
[info] # Warmup Iteration   4: 2694517.484 ops/s
[info] # Warmup Iteration   5: 2769272.150 ops/s
[info] Iteration   1: 2668003.980 ops/s
[info]                  ·gc.alloc.rate:               1170.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          690.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 787.872 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2758301.590 ops/s
[info]                  ·gc.alloc.rate:                   1218.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2721984.844 ops/s
[info]                  ·gc.alloc.rate:               1176.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          680.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 386.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2764209.303 ops/s
[info]                  ·gc.alloc.rate:                   1232.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              701.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2753800.020 ops/s
[info]                  ·gc.alloc.rate:                   1213.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2733259.947 ±(99.9%) 153933.197 ops/s [Average]
[info]   (min, avg, max) = (2668003.980, 2733259.947, 2764209.303), stdev = 39975.962
[info]   CI (99.9%): [2579326.751, 2887193.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1202.331 ±(99.9%) 105.331 MB/sec [Average]
[info]   (min, avg, max) = (1170.566, 1202.331, 1232.653), stdev = 27.354
[info]   CI (99.9%): [1097.000, 1307.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   692.229 ±(99.9%) 30.648 B/op [Average]
[info]   (min, avg, max) = (680.114, 692.229, 701.832), stdev = 7.959
[info]   CI (99.9%): [661.581, 722.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.059 ±(99.9%) 1152.011 MB/sec [Average]
[info]   (min, avg, max) = (668.888, 1204.059, 1339.665), stdev = 299.174
[info]   CI (99.9%): [52.048, 2356.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   693.081 ±(99.9%) 660.744 B/op [Average]
[info]   (min, avg, max) = (386.710, 693.081, 787.872), stdev = 171.593
[info]   CI (99.9%): [32.337, 1353.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.903), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.456 ±(99.9%) 3.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.456, 2.231), stdev = 0.992
[info]   CI (99.9%): [≈ 0, 4.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.55% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753500.684 ops/s
[info] # Warmup Iteration   2: 5972776.907 ops/s
[info] # Warmup Iteration   3: 6395939.278 ops/s
[info] # Warmup Iteration   4: 6434044.281 ops/s
[info] # Warmup Iteration   5: 6379610.818 ops/s
[info] Iteration   1: 6432920.957 ops/s
[info]                  ·gc.alloc.rate:                   760.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              185.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6433659.645 ops/s
[info]                  ·gc.alloc.rate:               743.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6454963.549 ops/s
[info]                  ·gc.alloc.rate:                   741.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              180.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6369307.765 ops/s
[info]                  ·gc.alloc.rate:               730.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.992 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6284618.366 ops/s
[info]                  ·gc.alloc.rate:               718.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          179.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6395094.056 ±(99.9%) 267975.121 ops/s [Average]
[info]   (min, avg, max) = (6284618.366, 6395094.056, 6454963.549), stdev = 69592.288
[info]   CI (99.9%): [6127118.936, 6663069.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   738.760 ±(99.9%) 60.019 MB/sec [Average]
[info]   (min, avg, max) = (718.395, 738.760, 760.107), stdev = 15.587
[info]   CI (99.9%): [678.741, 798.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181.785 ±(99.9%) 9.404 B/op [Average]
[info]   (min, avg, max) = (179.894, 181.785, 185.947), stdev = 2.442
[info]   CI (99.9%): [172.381, 191.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.542 ±(99.9%) 1152.802 MB/sec [Average]
[info]   (min, avg, max) = (671.499, 805.542, 1341.088), stdev = 299.379
[info]   CI (99.9%): [≈ 0, 1958.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   198.052 ±(99.9%) 279.963 B/op [Average]
[info]   (min, avg, max) = (163.711, 198.052, 328.073), stdev = 72.706
[info]   CI (99.9%): [≈ 0, 478.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.76% complete, ETA 00:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1371005.104 ops/s
[info] # Warmup Iteration   2: 6437460.100 ops/s
[info] # Warmup Iteration   3: 6698735.564 ops/s
[info] # Warmup Iteration   4: 6713686.694 ops/s
[info] # Warmup Iteration   5: 6626525.902 ops/s
[info] Iteration   1: 6704345.332 ops/s
[info]                  ·gc.alloc.rate:               424.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6638295.169 ops/s
[info]                  ·gc.alloc.rate:               434.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          103.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121.288 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6475400.004 ops/s
[info]                  ·gc.alloc.rate:      395.595 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.141 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6709645.505 ops/s
[info]                  ·gc.alloc.rate:                   427.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6627514.626 ops/s
[info]                  ·gc.alloc.rate:                   429.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6631040.127 ±(99.9%) 364498.440 ops/s [Average]
[info]   (min, avg, max) = (6475400.004, 6631040.127, 6709645.505), stdev = 94659.087
[info]   CI (99.9%): [6266541.687, 6995538.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   422.373 ±(99.9%) 59.415 MB/sec [Average]
[info]   (min, avg, max) = (395.595, 422.373, 434.895), stdev = 15.430
[info]   CI (99.9%): [362.957, 481.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   100.223 ±(99.9%) 10.243 B/op [Average]
[info]   (min, avg, max) = (96.141, 100.223, 103.101), stdev = 2.660
[info]   CI (99.9%): [89.980, 110.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.841 ±(99.9%) 1062.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.841, 670.496), stdev = 276.004
[info]   CI (99.9%): [≈ 0, 1535.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   111.571 ±(99.9%) 250.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.571, 159.214), stdev = 65.139
[info]   CI (99.9%): [≈ 0, 362.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.96% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11859.598 ops/s
[info] # Warmup Iteration   2: 254795.570 ops/s
[info] # Warmup Iteration   3: 407451.677 ops/s
[info] # Warmup Iteration   4: 405421.378 ops/s
[info] # Warmup Iteration   5: 405328.825 ops/s
[info] Iteration   1: 398138.209 ops/s
[info]                  ·gc.alloc.rate:                   2496.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              9868.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10555.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.596 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 407593.941 ops/s
[info]                  ·gc.alloc.rate:                   2550.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              9848.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10278.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 412484.074 ops/s
[info]                  ·gc.alloc.rate:                   2569.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              9803.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7621.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 410293.247 ops/s
[info]                  ·gc.alloc.rate:               2596.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          9958.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10241.527 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 409900.278 ops/s
[info]                  ·gc.alloc.rate:                   2594.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              9961.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10287.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   407681.950 ±(99.9%) 21602.334 ops/s [Average]
[info]   (min, avg, max) = (398138.209, 407681.950, 412484.074), stdev = 5610.057
[info]   CI (99.9%): [386079.616, 429284.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2561.619 ±(99.9%) 157.520 MB/sec [Average]
[info]   (min, avg, max) = (2496.635, 2561.619, 2596.354), stdev = 40.907
[info]   CI (99.9%): [2404.099, 2719.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9887.947 ±(99.9%) 268.765 B/op [Average]
[info]   (min, avg, max) = (9803.209, 9887.947, 9961.200), stdev = 69.797
[info]   CI (99.9%): [9619.182, 10156.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2536.049 ±(99.9%) 1158.931 MB/sec [Average]
[info]   (min, avg, max) = (1997.765, 2536.049, 2679.442), stdev = 300.971
[info]   CI (99.9%): [1377.118, 3694.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9796.924 ±(99.9%) 4707.618 B/op [Average]
[info]   (min, avg, max) = (7621.474, 9796.924, 10555.798), stdev = 1222.554
[info]   CI (99.9%): [5089.306, 14504.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 8.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.962, 4.705), stdev = 2.092
[info]   CI (99.9%): [≈ 0, 9.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.799 ±(99.9%) 31.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.799, 18.596), stdev = 8.272
[info]   CI (99.9%): [≈ 0, 35.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.16% complete, ETA 00:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14761.807 ops/s
[info] # Warmup Iteration   2: 75945.073 ops/s
[info] # Warmup Iteration   3: 77514.167 ops/s
[info] # Warmup Iteration   4: 81908.697 ops/s
[info] # Warmup Iteration   5: 79831.321 ops/s
[info] Iteration   1: 81888.936 ops/s
[info]                  ·gc.alloc.rate:                   2282.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              43856.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38701.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 80620.268 ops/s
[info]                  ·gc.alloc.rate:               2259.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          44110.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39218.547 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 80784.224 ops/s
[info]                  ·gc.alloc.rate:               2239.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          43617.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39100.500 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 81366.213 ops/s
[info]                  ·gc.alloc.rate:                   2307.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              44631.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51836.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.805 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 81793.481 ops/s
[info]                  ·gc.alloc.rate:               2293.884 MB/sec
[info]                  ·gc.alloc.rate.norm:          44125.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38759.719 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   81290.624 ±(99.9%) 2214.016 ops/s [Average]
[info]   (min, avg, max) = (80620.268, 81290.624, 81888.936), stdev = 574.973
[info]   CI (99.9%): [79076.608, 83504.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2276.478 ±(99.9%) 105.230 MB/sec [Average]
[info]   (min, avg, max) = (2239.048, 2276.478, 2307.635), stdev = 27.328
[info]   CI (99.9%): [2171.248, 2381.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44068.252 ±(99.9%) 1454.265 B/op [Average]
[info]   (min, avg, max) = (43617.504, 44068.252, 44631.572), stdev = 377.668
[info]   CI (99.9%): [42613.987, 45522.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145.042 ±(99.9%) 1151.902 MB/sec [Average]
[info]   (min, avg, max) = (2007.173, 2145.042, 2680.139), stdev = 299.145
[info]   CI (99.9%): [993.140, 3296.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41523.175 ±(99.9%) 22215.431 B/op [Average]
[info]   (min, avg, max) = (38701.014, 41523.175, 51836.093), stdev = 5769.277
[info]   CI (99.9%): [19307.743, 63738.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.685), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.323 ±(99.9%) 121.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.323, 70.812), stdev = 31.580
[info]   CI (99.9%): [≈ 0, 135.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.36% complete, ETA 00:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27639.863 ops/s
[info] # Warmup Iteration   2: 115303.970 ops/s
[info] # Warmup Iteration   3: 123179.839 ops/s
[info] # Warmup Iteration   4: 127303.644 ops/s
[info] # Warmup Iteration   5: 127573.782 ops/s
[info] Iteration   1: 123854.896 ops/s
[info]                  ·gc.alloc.rate:                   1932.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              24557.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25502.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 124814.813 ops/s
[info]                  ·gc.alloc.rate:                   1972.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              24865.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25274.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.862 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 125172.988 ops/s
[info]                  ·gc.alloc.rate:                   1973.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              24816.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25125.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 124179.272 ops/s
[info]                  ·gc.alloc.rate:               1960.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          24842.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25327.719 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 128372.541 ops/s
[info]                  ·gc.alloc.rate:               2038.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          24994.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24534.851 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   125278.902 ±(99.9%) 6950.965 ops/s [Average]
[info]   (min, avg, max) = (123854.896, 125278.902, 128372.541), stdev = 1805.144
[info]   CI (99.9%): [118327.937, 132229.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1975.612 ±(99.9%) 150.237 MB/sec [Average]
[info]   (min, avg, max) = (1932.814, 1975.612, 2038.916), stdev = 39.016
[info]   CI (99.9%): [1825.375, 2125.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24815.409 ±(99.9%) 613.710 B/op [Average]
[info]   (min, avg, max) = (24557.999, 24815.409, 24994.504), stdev = 159.378
[info]   CI (99.9%): [24201.700, 25429.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2002.040 ±(99.9%) 14.592 MB/sec [Average]
[info]   (min, avg, max) = (1998.542, 2002.040, 2007.187), stdev = 3.790
[info]   CI (99.9%): [1987.448, 2016.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25153.009 ±(99.9%) 1428.632 B/op [Average]
[info]   (min, avg, max) = (24534.851, 25153.009, 25502.975), stdev = 371.011
[info]   CI (99.9%): [23724.377, 26581.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 6.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.941, 3.622), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.934 ±(99.9%) 76.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.934, 46.025), stdev = 19.825
[info]   CI (99.9%): [≈ 0, 88.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.56% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45453.192 ops/s
[info] # Warmup Iteration   2: 164877.799 ops/s
[info] # Warmup Iteration   3: 180571.558 ops/s
[info] # Warmup Iteration   4: 174847.177 ops/s
[info] # Warmup Iteration   5: 182047.382 ops/s
[info] Iteration   1: 182190.144 ops/s
[info]                  ·gc.alloc.rate:                   2768.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              23912.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23184.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 182328.342 ops/s
[info]                  ·gc.alloc.rate:                   2784.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              24037.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23166.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 182796.677 ops/s
[info]                  ·gc.alloc.rate:               2792.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          24038.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23146.841 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 182944.233 ops/s
[info]                  ·gc.alloc.rate:                   2794.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              24040.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23182.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 180941.597 ops/s
[info]                  ·gc.alloc.rate:               2738.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          23818.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17611.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   182240.199 ±(99.9%) 3045.402 ops/s [Average]
[info]   (min, avg, max) = (180941.597, 182240.199, 182944.233), stdev = 790.881
[info]   CI (99.9%): [179194.797, 185285.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2775.754 ±(99.9%) 89.330 MB/sec [Average]
[info]   (min, avg, max) = (2738.598, 2775.754, 2794.764), stdev = 23.199
[info]   CI (99.9%): [2686.423, 2865.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23969.709 ±(99.9%) 386.548 B/op [Average]
[info]   (min, avg, max) = (23818.951, 23969.709, 24040.981), stdev = 100.385
[info]   CI (99.9%): [23583.161, 24356.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2555.278 ±(99.9%) 1141.882 MB/sec [Average]
[info]   (min, avg, max) = (2024.866, 2555.278, 2694.957), stdev = 296.543
[info]   CI (99.9%): [1413.395, 3697.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22058.193 ±(99.9%) 9572.511 B/op [Average]
[info]   (min, avg, max) = (17611.270, 22058.193, 23184.046), stdev = 2485.951
[info]   CI (99.9%): [12485.682, 31630.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.216 ±(99.9%) 0.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 0.539), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.76% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3899.330 ops/s
[info] # Warmup Iteration   2: 53160.887 ops/s
[info] # Warmup Iteration   3: 60501.260 ops/s
[info] # Warmup Iteration   4: 58439.676 ops/s
[info] # Warmup Iteration   5: 59760.574 ops/s
[info] Iteration   1: 61881.882 ops/s
[info]                  ·gc.alloc.rate:                   3120.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              79362.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67831.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 60148.798 ops/s
[info]                  ·gc.alloc.rate:                   3022.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              79082.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87314.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.634 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 62495.257 ops/s
[info]                  ·gc.alloc.rate:                   3165.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              79701.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67464.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 62194.887 ops/s
[info]                  ·gc.alloc.rate:               3177.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          80411.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85036.987 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 62348.906 ops/s
[info]                  ·gc.alloc.rate:               3158.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          79737.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68100.269 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   61813.946 ±(99.9%) 3689.800 ops/s [Average]
[info]   (min, avg, max) = (60148.798, 61813.946, 62495.257), stdev = 958.229
[info]   CI (99.9%): [58124.146, 65503.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3129.106 ±(99.9%) 243.237 MB/sec [Average]
[info]   (min, avg, max) = (3022.745, 3129.106, 3177.970), stdev = 63.168
[info]   CI (99.9%): [2885.869, 3372.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79659.025 ±(99.9%) 1918.997 B/op [Average]
[info]   (min, avg, max) = (79082.838, 79659.025, 80411.197), stdev = 498.358
[info]   CI (99.9%): [77740.028, 81578.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.513 ±(99.9%) 1409.054 MB/sec [Average]
[info]   (min, avg, max) = (2667.282, 2948.513, 3360.789), stdev = 365.927
[info]   CI (99.9%): [1539.458, 4357.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75149.490 ±(99.9%) 38892.414 B/op [Average]
[info]   (min, avg, max) = (67464.177, 75149.490, 87314.519), stdev = 10100.236
[info]   CI (99.9%): [36257.076, 114041.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.538 ±(99.9%) 2.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 1.634), stdev = 0.667
[info]   CI (99.9%): [≈ 0, 3.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89.96% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37111.171 ops/s
[info] # Warmup Iteration   2: 108732.938 ops/s
[info] # Warmup Iteration   3: 113490.882 ops/s
[info] # Warmup Iteration   4: 112761.188 ops/s
[info] # Warmup Iteration   5: 116740.764 ops/s
[info] Iteration   1: 116649.776 ops/s
[info]                  ·gc.alloc.rate:                   2321.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              31326.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36273.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 117338.818 ops/s
[info]                  ·gc.alloc.rate:                   2333.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              31296.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26981.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 117357.240 ops/s
[info]                  ·gc.alloc.rate:                   2320.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              31121.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26979.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 117271.379 ops/s
[info]                  ·gc.alloc.rate:               2372.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          31841.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36027.702 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 117393.360 ops/s
[info]                  ·gc.alloc.rate:               2348.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          31480.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27045.824 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   117202.114 ±(99.9%) 1201.132 ops/s [Average]
[info]   (min, avg, max) = (116649.776, 117202.114, 117393.360), stdev = 311.930
[info]   CI (99.9%): [116000.982, 118403.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2339.465 ±(99.9%) 83.256 MB/sec [Average]
[info]   (min, avg, max) = (2320.824, 2339.465, 2372.677), stdev = 21.621
[info]   CI (99.9%): [2256.209, 2422.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   31413.206 ±(99.9%) 1043.217 B/op [Average]
[info]   (min, avg, max) = (31121.645, 31413.206, 31841.007), stdev = 270.920
[info]   CI (99.9%): [30369.988, 32456.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2282.910 ±(99.9%) 1419.164 MB/sec [Average]
[info]   (min, avg, max) = (2011.875, 2282.910, 2688.602), stdev = 368.552
[info]   CI (99.9%): [863.746, 3702.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30661.623 ±(99.9%) 19297.510 B/op [Average]
[info]   (min, avg, max) = (26979.336, 30661.623, 36273.390), stdev = 5011.502
[info]   CI (99.9%): [11364.113, 49959.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.268), stdev = 1.419
[info]   CI (99.9%): [≈ 0, 6.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9.992 ±(99.9%) 73.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.992, 44.095), stdev = 19.151
[info]   CI (99.9%): [≈ 0, 83.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.16% complete, ETA 00:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75846.641 ops/s
[info] # Warmup Iteration   2: 178444.962 ops/s
[info] # Warmup Iteration   3: 190272.809 ops/s
[info] # Warmup Iteration   4: 187722.212 ops/s
[info] # Warmup Iteration   5: 186112.761 ops/s
[info] Iteration   1: 187186.434 ops/s
[info]                  ·gc.alloc.rate:                   1316.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              11054.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11240.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 189791.058 ops/s
[info]                  ·gc.alloc.rate:               1327.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          11009.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5562.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 190107.253 ops/s
[info]                  ·gc.alloc.rate:                   1334.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              11043.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11111.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 189868.673 ops/s
[info]                  ·gc.alloc.rate:                   1355.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              11236.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11131.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 190161.678 ops/s
[info]                  ·gc.alloc.rate:                   1359.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11091.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   189423.019 ±(99.9%) 4851.722 ops/s [Average]
[info]   (min, avg, max) = (187186.434, 189423.019, 190161.678), stdev = 1259.977
[info]   CI (99.9%): [184571.298, 194274.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1338.595 ±(99.9%) 70.726 MB/sec [Average]
[info]   (min, avg, max) = (1316.297, 1338.595, 1359.164), stdev = 18.367
[info]   CI (99.9%): [1267.869, 1409.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11118.452 ±(99.9%) 440.372 B/op [Average]
[info]   (min, avg, max) = (11009.752, 11118.452, 11248.119), stdev = 114.363
[info]   CI (99.9%): [10678.080, 11558.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1206.967 ±(99.9%) 1154.097 MB/sec [Average]
[info]   (min, avg, max) = (670.830, 1206.967, 1342.975), stdev = 299.715
[info]   CI (99.9%): [52.871, 2361.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10027.537 ±(99.9%) 9614.083 B/op [Average]
[info]   (min, avg, max) = (5562.400, 10027.537, 11240.226), stdev = 2496.747
[info]   CI (99.9%): [413.455, 19641.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.372), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.246 ±(99.9%) 46.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.246, 27.953), stdev = 12.179
[info]   CI (99.9%): [≈ 0, 53.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.36% complete, ETA 00:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182930.860 ops/s
[info] # Warmup Iteration   2: 435222.956 ops/s
[info] # Warmup Iteration   3: 461841.833 ops/s
[info] # Warmup Iteration   4: 464621.165 ops/s
[info] # Warmup Iteration   5: 462128.138 ops/s
[info] Iteration   1: 465905.003 ops/s
[info]                  ·gc.alloc.rate:      402.626 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 461511.118 ops/s
[info]                  ·gc.alloc.rate:               415.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          1415.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1744.568 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 459990.368 ops/s
[info]                  ·gc.alloc.rate:               414.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          1416.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2278.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 463067.666 ops/s
[info]                  ·gc.alloc.rate:      400.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.374 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 460125.763 ops/s
[info]                  ·gc.alloc.rate:               423.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          1448.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2277.279 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   462119.983 ±(99.9%) 9453.187 ops/s [Average]
[info]   (min, avg, max) = (459990.368, 462119.983, 465905.003), stdev = 2454.963
[info]   CI (99.9%): [452666.797, 471573.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.091 ±(99.9%) 36.715 MB/sec [Average]
[info]   (min, avg, max) = (400.289, 411.091, 423.351), stdev = 9.535
[info]   CI (99.9%): [374.377, 447.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1400.115 ±(99.9%) 149.072 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1400.115, 1448.025), stdev = 38.714
[info]   CI (99.9%): [1251.042, 1549.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.652 ±(99.9%) 1318.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.652, 665.855), stdev = 342.370
[info]   CI (99.9%): [≈ 0, 1686.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1259.979 ±(99.9%) 4507.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1259.979, 2278.046), stdev = 1170.607
[info]   CI (99.9%): [≈ 0, 5767.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.56% complete, ETA 00:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371698.111 ops/s
[info] # Warmup Iteration   2: 620500.502 ops/s
[info] # Warmup Iteration   3: 636395.603 ops/s
[info] # Warmup Iteration   4: 631735.380 ops/s
[info] # Warmup Iteration   5: 648262.705 ops/s
[info] Iteration   1: 648318.183 ops/s
[info]                  ·gc.alloc.rate:               380.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          922.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1241.982 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 651490.635 ops/s
[info]                  ·gc.alloc.rate:                   367.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              888.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1235.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 651266.554 ops/s
[info]                  ·gc.alloc.rate:      352.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 850.805 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 650831.995 ops/s
[info]                  ·gc.alloc.rate:               369.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          892.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1622.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 633783.437 ops/s
[info]                  ·gc.alloc.rate:      341.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.382 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   647138.161 ±(99.9%) 29159.138 ops/s [Average]
[info]   (min, avg, max) = (633783.437, 647138.161, 651490.635), stdev = 7572.536
[info]   CI (99.9%): [617979.023, 676297.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   362.194 ±(99.9%) 58.645 MB/sec [Average]
[info]   (min, avg, max) = (341.670, 362.194, 380.205), stdev = 15.230
[info]   CI (99.9%): [303.549, 420.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   880.621 ±(99.9%) 120.557 B/op [Average]
[info]   (min, avg, max) = (848.382, 880.621, 922.859), stdev = 31.308
[info]   CI (99.9%): [760.064, 1001.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.846 ±(99.9%) 1217.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.846, 670.869), stdev = 316.076
[info]   CI (99.9%): [≈ 0, 1555.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   820.013 ±(99.9%) 2944.742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 820.013, 1622.145), stdev = 764.740
[info]   CI (99.9%): [≈ 0, 3764.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290233.319 ops/s
[info] # Warmup Iteration   2: 671688.225 ops/s
[info] # Warmup Iteration   3: 704965.543 ops/s
[info] # Warmup Iteration   4: 711900.125 ops/s
[info] # Warmup Iteration   5: 713890.438 ops/s
[info] Iteration   1: 715614.119 ops/s
[info]                  ·gc.alloc.rate:      7.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 714039.751 ops/s
[info]                  ·gc.alloc.rate:      7.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.082 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 714271.344 ops/s
[info]                  ·gc.alloc.rate:      7.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 713557.936 ops/s
[info]                  ·gc.alloc.rate:      7.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 714121.211 ops/s
[info]                  ·gc.alloc.rate:      7.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   714320.872 ±(99.9%) 2967.687 ops/s [Average]
[info]   (min, avg, max) = (713557.936, 714320.872, 715614.119), stdev = 770.699
[info]   CI (99.9%): [711353.185, 717288.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.270 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (7.255, 7.270, 7.297), stdev = 0.017
[info]   CI (99.9%): [7.205, 7.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.017 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.017, 16.082), stdev = 0.036
[info]   CI (99.9%): [15.877, 16.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.96% complete, ETA 00:12:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10868.193 ops/s
[info] # Warmup Iteration   2: 29091.303 ops/s
[info] # Warmup Iteration   3: 35277.428 ops/s
[info] # Warmup Iteration   4: 35183.684 ops/s
[info] # Warmup Iteration   5: 35742.349 ops/s
[info] Iteration   1: 35650.214 ops/s
[info]                  ·gc.alloc.rate:                   1934.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              85395.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88871.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35928.882 ops/s
[info]                  ·gc.alloc.rate:                   1934.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              84717.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58735.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35768.066 ops/s
[info]                  ·gc.alloc.rate:                   1940.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              85338.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88309.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35854.646 ops/s
[info]                  ·gc.alloc.rate:                   1944.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              85325.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87978.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35807.570 ops/s
[info]                  ·gc.alloc.rate:               1968.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          86495.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88157.210 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35801.875 ±(99.9%) 399.670 ops/s [Average]
[info]   (min, avg, max) = (35650.214, 35801.875, 35928.882), stdev = 103.793
[info]   CI (99.9%): [35402.205, 36201.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1944.294 ±(99.9%) 54.527 MB/sec [Average]
[info]   (min, avg, max) = (1934.187, 1944.294, 1968.529), stdev = 14.160
[info]   CI (99.9%): [1889.767, 1998.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85454.293 ±(99.9%) 2480.635 B/op [Average]
[info]   (min, avg, max) = (84717.263, 85454.293, 86495.116), stdev = 644.213
[info]   CI (99.9%): [82973.659, 87934.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.569 ±(99.9%) 1148.618 MB/sec [Average]
[info]   (min, avg, max) = (1340.999, 1874.569, 2013.290), stdev = 298.293
[info]   CI (99.9%): [725.950, 3023.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82410.394 ±(99.9%) 50977.900 B/op [Average]
[info]   (min, avg, max) = (58735.662, 82410.394, 88871.345), stdev = 13238.799
[info]   CI (99.9%): [31432.493, 133388.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 4.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 2.935), stdev = 1.272
[info]   CI (99.9%): [≈ 0, 5.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.130 ±(99.9%) 216.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.130, 129.580), stdev = 56.133
[info]   CI (99.9%): [≈ 0, 252.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91.16% complete, ETA 00:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39172.322 ops/s
[info] # Warmup Iteration   2: 88084.013 ops/s
[info] # Warmup Iteration   3: 92987.684 ops/s
[info] # Warmup Iteration   4: 95219.162 ops/s
[info] # Warmup Iteration   5: 97308.647 ops/s
[info] Iteration   1: 96589.893 ops/s
[info]                  ·gc.alloc.rate:                   1830.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              29827.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21924.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 97085.252 ops/s
[info]                  ·gc.alloc.rate:                   1866.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              30262.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32696.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.653 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 96728.460 ops/s
[info]                  ·gc.alloc.rate:                   1857.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              30225.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32753.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 97202.319 ops/s
[info]                  ·gc.alloc.rate:                   1854.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              30017.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21701.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 98432.774 ops/s
[info]                  ·gc.alloc.rate:               1904.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          30442.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32154.911 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   97207.739 ±(99.9%) 2808.058 ops/s [Average]
[info]   (min, avg, max) = (96589.893, 97207.739, 98432.774), stdev = 729.244
[info]   CI (99.9%): [94399.682, 100015.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1862.753 ±(99.9%) 102.837 MB/sec [Average]
[info]   (min, avg, max) = (1830.759, 1862.753, 1904.132), stdev = 26.706
[info]   CI (99.9%): [1759.916, 1965.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   30155.150 ±(99.9%) 913.234 B/op [Average]
[info]   (min, avg, max) = (29827.736, 30155.150, 30442.441), stdev = 237.164
[info]   CI (99.9%): [29241.917, 31068.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.528 ±(99.9%) 1414.894 MB/sec [Average]
[info]   (min, avg, max) = (1340.391, 1745.528, 2017.160), stdev = 367.443
[info]   CI (99.9%): [330.634, 3160.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28246.026 ±(99.9%) 22634.102 B/op [Average]
[info]   (min, avg, max) = (21701.073, 28246.026, 32753.097), stdev = 5878.004
[info]   CI (99.9%): [5611.924, 50880.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.310), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11.475 ±(99.9%) 90.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.475, 53.653), stdev = 23.602
[info]   CI (99.9%): [≈ 0, 102.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.37% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1163764.372 ops/s
[info] # Warmup Iteration   2: 3119685.570 ops/s
[info] # Warmup Iteration   3: 3357231.815 ops/s
[info] # Warmup Iteration   4: 3415997.008 ops/s
[info] # Warmup Iteration   5: 3425183.559 ops/s
[info] Iteration   1: 3439061.960 ops/s
[info]                  ·gc.alloc.rate:                   2883.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1319.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3468781.108 ops/s
[info]                  ·gc.alloc.rate:               2920.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          1324.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1217.726 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 3471951.187 ops/s
[info]                  ·gc.alloc.rate:                   2930.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3433686.965 ops/s
[info]                  ·gc.alloc.rate:                   2925.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1340.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1544.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3458812.221 ops/s
[info]                  ·gc.alloc.rate:                   2920.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              1329.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3454458.688 ±(99.9%) 66656.087 ops/s [Average]
[info]   (min, avg, max) = (3433686.965, 3454458.688, 3471951.187), stdev = 17310.374
[info]   CI (99.9%): [3387802.601, 3521114.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2916.257 ±(99.9%) 72.104 MB/sec [Average]
[info]   (min, avg, max) = (2883.608, 2916.257, 2930.639), stdev = 18.725
[info]   CI (99.9%): [2844.153, 2988.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1328.394 ±(99.9%) 31.017 B/op [Average]
[info]   (min, avg, max) = (1319.186, 1328.394, 1340.991), stdev = 8.055
[info]   CI (99.9%): [1297.377, 1359.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2826.079 ±(99.9%) 1172.348 MB/sec [Average]
[info]   (min, avg, max) = (2682.680, 2826.079, 3370.514), stdev = 304.455
[info]   CI (99.9%): [1653.731, 3998.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1287.712 ±(99.9%) 553.782 B/op [Average]
[info]   (min, avg, max) = (1217.726, 1287.712, 1544.802), stdev = 143.815
[info]   CI (99.9%): [733.930, 1841.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.038), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.57% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.639 ops/s
[info] # Warmup Iteration   2: 5516688.170 ops/s
[info] # Warmup Iteration   3: 5929695.376 ops/s
[info] # Warmup Iteration   4: 6003626.634 ops/s
[info] # Warmup Iteration   5: 5955074.688 ops/s
[info] Iteration   1: 6044439.173 ops/s
[info]                  ·gc.alloc.rate:               1157.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          301.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173.528 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6003139.616 ops/s
[info]                  ·gc.alloc.rate:                   1160.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5837568.987 ops/s
[info]                  ·gc.alloc.rate:                   1140.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6033406.807 ops/s
[info]                  ·gc.alloc.rate:               1157.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          301.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.106 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6008001.689 ops/s
[info]                  ·gc.alloc.rate:                   1170.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   5985311.254 ±(99.9%) 324859.369 ops/s [Average]
[info]   (min, avg, max) = (5837568.987, 5985311.254, 6044439.173), stdev = 84364.946
[info]   CI (99.9%): [5660451.885, 6310170.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1157.157 ±(99.9%) 41.532 MB/sec [Average]
[info]   (min, avg, max) = (1140.240, 1157.157, 1170.146), stdev = 10.786
[info]   CI (99.9%): [1115.624, 1198.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.266 ±(99.9%) 10.278 B/op [Average]
[info]   (min, avg, max) = (301.300, 304.266, 307.355), stdev = 2.669
[info]   CI (99.9%): [293.988, 314.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1067.771 ±(99.9%) 1408.776 MB/sec [Average]
[info]   (min, avg, max) = (666.510, 1067.771, 1336.348), stdev = 365.855
[info]   CI (99.9%): [≈ 0, 2476.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   281.419 ±(99.9%) 378.563 B/op [Average]
[info]   (min, avg, max) = (173.528, 281.419, 359.804), stdev = 98.311
[info]   CI (99.9%): [≈ 0, 659.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.923 ±(99.9%) 7.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.923, 4.533), stdev = 2.018
[info]   CI (99.9%): [≈ 0, 8.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.242 ±(99.9%) 2.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.242, 1.187), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.77% complete, ETA 00:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 928648.654 ops/s
[info] # Warmup Iteration   2: 3796044.873 ops/s
[info] # Warmup Iteration   3: 4122651.319 ops/s
[info] # Warmup Iteration   4: 4022509.201 ops/s
[info] # Warmup Iteration   5: 4133214.150 ops/s
[info] Iteration   1: 4112095.110 ops/s
[info]                  ·gc.alloc.rate:                   2259.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     769.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4064194.156 ops/s
[info]                  ·gc.alloc.rate:                   2246.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              869.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4109124.692 ops/s
[info]                  ·gc.alloc.rate:               2286.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1023.063 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4110531.222 ops/s
[info]                  ·gc.alloc.rate:               2273.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 768.568 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 4089125.943 ops/s
[info]                  ·gc.alloc.rate:               2262.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 773.877 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4097014.225 ±(99.9%) 79293.997 ops/s [Average]
[info]   (min, avg, max) = (4064194.156, 4097014.225, 4112095.110), stdev = 20592.399
[info]   CI (99.9%): [4017720.228, 4176308.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2265.854 ±(99.9%) 58.070 MB/sec [Average]
[info]   (min, avg, max) = (2246.694, 2265.854, 2286.681), stdev = 15.081
[info]   CI (99.9%): [2207.784, 2323.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   870.304 ±(99.9%) 14.660 B/op [Average]
[info]   (min, avg, max) = (864.788, 870.304, 875.518), stdev = 3.807
[info]   CI (99.9%): [855.644, 884.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2141.067 ±(99.9%) 1142.993 MB/sec [Average]
[info]   (min, avg, max) = (2005.193, 2141.067, 2672.041), stdev = 296.832
[info]   CI (99.9%): [998.074, 3284.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   822.226 ±(99.9%) 432.502 B/op [Average]
[info]   (min, avg, max) = (768.568, 822.226, 1023.063), stdev = 112.319
[info]   CI (99.9%): [389.723, 1254.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.914), stdev = 1.748
[info]   CI (99.9%): [≈ 0, 7.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.301 ±(99.9%) 2.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.301, 1.498), stdev = 0.669
[info]   CI (99.9%): [≈ 0, 2.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.97% complete, ETA 00:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4296085.417 ops/s
[info] # Warmup Iteration   2: 6458788.949 ops/s
[info] # Warmup Iteration   3: 6879386.862 ops/s
[info] # Warmup Iteration   4: 6912389.519 ops/s
[info] # Warmup Iteration   5: 6567679.852 ops/s
[info] Iteration   1: 6853113.560 ops/s
[info]                  ·gc.alloc.rate:               1329.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 308.860 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6933752.897 ops/s
[info]                  ·gc.alloc.rate:                   1344.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6941175.336 ops/s
[info]                  ·gc.alloc.rate:                   1345.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6884931.379 ops/s
[info]                  ·gc.alloc.rate:                   1334.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6922374.198 ops/s
[info]                  ·gc.alloc.rate:               1328.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6907069.474 ±(99.9%) 142925.629 ops/s [Average]
[info]   (min, avg, max) = (6853113.560, 6907069.474, 6941175.336), stdev = 37117.332
[info]   CI (99.9%): [6764143.845, 7049995.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1336.758 ±(99.9%) 31.066 MB/sec [Average]
[info]   (min, avg, max) = (1328.928, 1336.758, 1345.968), stdev = 8.068
[info]   CI (99.9%): [1305.692, 1367.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.558 ±(99.9%) 5.409 B/op [Average]
[info]   (min, avg, max) = (302.053, 304.558, 305.361), stdev = 1.405
[info]   CI (99.9%): [299.149, 309.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.996 ±(99.9%) 1159.552 MB/sec [Average]
[info]   (min, avg, max) = (672.316, 1210.996, 1346.298), stdev = 301.132
[info]   CI (99.9%): [51.444, 2370.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   275.983 ±(99.9%) 265.202 B/op [Average]
[info]   (min, avg, max) = (152.811, 275.983, 308.860), stdev = 68.872
[info]   CI (99.9%): [10.782, 541.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 3.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.394), stdev = 1.036
[info]   CI (99.9%): [≈ 0, 4.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 0.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.543), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.17% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 984924.682 ops/s
[info] # Warmup Iteration   2: 3833490.263 ops/s
[info] # Warmup Iteration   3: 4108567.115 ops/s
[info] # Warmup Iteration   4: 4243450.965 ops/s
[info] # Warmup Iteration   5: 4281716.777 ops/s
[info] Iteration   1: 4201193.443 ops/s
[info]                  ·gc.alloc.rate:                   2380.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              891.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4190183.821 ops/s
[info]                  ·gc.alloc.rate:                   2399.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4317717.731 ops/s
[info]                  ·gc.alloc.rate:               2470.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          900.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 731.203 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4312924.788 ops/s
[info]                  ·gc.alloc.rate:                   2497.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              911.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     978.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4321003.079 ops/s
[info]                  ·gc.alloc.rate:               2472.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          900.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 734.043 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4268604.572 ±(99.9%) 256985.857 ops/s [Average]
[info]   (min, avg, max) = (4190183.821, 4268604.572, 4321003.079), stdev = 66738.411
[info]   CI (99.9%): [4011618.716, 4525590.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2444.037 ±(99.9%) 195.747 MB/sec [Average]
[info]   (min, avg, max) = (2380.263, 2444.037, 2497.183), stdev = 50.835
[info]   CI (99.9%): [2248.290, 2639.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   900.962 ±(99.9%) 26.709 B/op [Average]
[info]   (min, avg, max) = (891.620, 900.962, 911.182), stdev = 6.936
[info]   CI (99.9%): [874.253, 927.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2277.076 ±(99.9%) 1405.627 MB/sec [Average]
[info]   (min, avg, max) = (2006.268, 2277.076, 2680.637), stdev = 365.037
[info]   CI (99.9%): [871.450, 3682.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   840.003 ±(99.9%) 532.738 B/op [Average]
[info]   (min, avg, max) = (731.203, 840.003, 1003.792), stdev = 138.350
[info]   CI (99.9%): [307.265, 1372.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.396), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.148), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92.37% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1369401.256 ops/s
[info] # Warmup Iteration   2: 3521845.863 ops/s
[info] # Warmup Iteration   3: 3953756.152 ops/s
[info] # Warmup Iteration   4: 3970548.757 ops/s
[info] # Warmup Iteration   5: 3983474.635 ops/s
[info] Iteration   1: 3952410.380 ops/s
[info]                  ·gc.alloc.rate:                   2236.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     803.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3977734.683 ops/s
[info]                  ·gc.alloc.rate:                   2263.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3986154.076 ops/s
[info]                  ·gc.alloc.rate:               2267.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 794.550 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3989108.862 ops/s
[info]                  ·gc.alloc.rate:               2269.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 794.984 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3991525.896 ops/s
[info]                  ·gc.alloc.rate:               2271.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 795.600 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   3979386.779 ±(99.9%) 61433.427 ops/s [Average]
[info]   (min, avg, max) = (3952410.380, 3979386.779, 3991525.896), stdev = 15954.066
[info]   CI (99.9%): [3917953.352, 4040820.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2261.884 ±(99.9%) 55.566 MB/sec [Average]
[info]   (min, avg, max) = (2236.623, 2261.884, 2271.686), stdev = 14.430
[info]   CI (99.9%): [2206.318, 2317.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   894.310 ±(99.9%) 8.832 B/op [Average]
[info]   (min, avg, max) = (890.221, 894.310, 895.642), stdev = 2.294
[info]   CI (99.9%): [885.478, 903.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2149.624 ±(99.9%) 1146.337 MB/sec [Average]
[info]   (min, avg, max) = (2012.539, 2149.624, 2682.143), stdev = 297.700
[info]   CI (99.9%): [1003.287, 3295.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   849.950 ±(99.9%) 453.762 B/op [Average]
[info]   (min, avg, max) = (794.550, 849.950, 1060.635), stdev = 117.840
[info]   CI (99.9%): [396.188, 1303.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.249), stdev = 1.451
[info]   CI (99.9%): [≈ 0, 6.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 2.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.293), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 2.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.57% complete, ETA 00:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 671094.441 ops/s
[info] # Warmup Iteration   2: 2113467.003 ops/s
[info] # Warmup Iteration   3: 2092209.215 ops/s
[info] # Warmup Iteration   4: 2072947.302 ops/s
[info] # Warmup Iteration   5: 2094361.918 ops/s
[info] Iteration   1: 2058486.268 ops/s
[info]                  ·gc.alloc.rate:               1208.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          923.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 510.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 2051095.461 ops/s
[info]                  ·gc.alloc.rate:               1244.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          954.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1024.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2095293.057 ops/s
[info]                  ·gc.alloc.rate:                   1249.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              938.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2078615.763 ops/s
[info]                  ·gc.alloc.rate:               1257.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1012.235 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2074103.726 ops/s
[info]                  ·gc.alloc.rate:                   1243.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              943.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2071518.855 ±(99.9%) 66950.942 ops/s [Average]
[info]   (min, avg, max) = (2051095.461, 2071518.855, 2095293.057), stdev = 17386.947
[info]   CI (99.9%): [2004567.913, 2138469.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1240.545 ±(99.9%) 72.964 MB/sec [Average]
[info]   (min, avg, max) = (1208.196, 1240.545, 1257.347), stdev = 18.949
[info]   CI (99.9%): [1167.581, 1313.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   942.409 ±(99.9%) 47.151 B/op [Average]
[info]   (min, avg, max) = (923.667, 942.409, 954.596), stdev = 12.245
[info]   CI (99.9%): [895.258, 989.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1202.998 ±(99.9%) 1152.712 MB/sec [Average]
[info]   (min, avg, max) = (667.504, 1202.998, 1339.645), stdev = 299.356
[info]   CI (99.9%): [50.286, 2355.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   913.293 ±(99.9%) 867.951 B/op [Average]
[info]   (min, avg, max) = (510.308, 913.293, 1024.289), stdev = 225.404
[info]   CI (99.9%): [45.342, 1781.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.77% complete, ETA 00:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.661 ops/s
[info] # Warmup Iteration   2: 5508901.821 ops/s
[info] # Warmup Iteration   3: 5722551.680 ops/s
[info] # Warmup Iteration   4: 5902230.728 ops/s
[info] # Warmup Iteration   5: 5898976.502 ops/s
[info] Iteration   1: 5900392.999 ops/s
[info]                  ·gc.alloc.rate:               590.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.328 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5888315.513 ops/s
[info]                  ·gc.alloc.rate:               585.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.687 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5675849.653 ops/s
[info]                  ·gc.alloc.rate:                   566.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5832688.294 ops/s
[info]                  ·gc.alloc.rate:               583.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179.562 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5812045.054 ops/s
[info]                  ·gc.alloc.rate:               578.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5821858.303 ±(99.9%) 345037.753 ops/s [Average]
[info]   (min, avg, max) = (5675849.653, 5821858.303, 5900392.999), stdev = 89605.209
[info]   CI (99.9%): [5476820.549, 6166896.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   580.920 ±(99.9%) 35.252 MB/sec [Average]
[info]   (min, avg, max) = (566.540, 580.920, 590.744), stdev = 9.155
[info]   CI (99.9%): [545.668, 616.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.016 ±(99.9%) 2.018 B/op [Average]
[info]   (min, avg, max) = (156.373, 157.016, 157.550), stdev = 0.524
[info]   CI (99.9%): [154.999, 159.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.431 ±(99.9%) 2.158 MB/sec [Average]
[info]   (min, avg, max) = (664.850, 665.431, 666.188), stdev = 0.560
[info]   CI (99.9%): [663.273, 667.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   179.894 ±(99.9%) 11.082 B/op [Average]
[info]   (min, avg, max) = (177.328, 179.894, 184.513), stdev = 2.878
[info]   CI (99.9%): [168.812, 190.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.97% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1767668.160 ops/s
[info] # Warmup Iteration   2: 4378738.865 ops/s
[info] # Warmup Iteration   3: 4668396.919 ops/s
[info] # Warmup Iteration   4: 4570644.337 ops/s
[info] # Warmup Iteration   5: 4495011.756 ops/s
[info] Iteration   1: 4517788.772 ops/s
[info]                  ·gc.alloc.rate:                   1238.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              431.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4516190.874 ops/s
[info]                  ·gc.alloc.rate:                   1222.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4600400.668 ops/s
[info]                  ·gc.alloc.rate:               1242.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          425.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 4611050.751 ops/s
[info]                  ·gc.alloc.rate:                   1246.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4694785.811 ops/s
[info]                  ·gc.alloc.rate:                   1280.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4588043.375 ±(99.9%) 286701.587 ops/s [Average]
[info]   (min, avg, max) = (4516190.874, 4588043.375, 4694785.811), stdev = 74455.492
[info]   CI (99.9%): [4301341.788, 4874744.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1245.998 ±(99.9%) 82.328 MB/sec [Average]
[info]   (min, avg, max) = (1222.517, 1245.998, 1280.674), stdev = 21.380
[info]   CI (99.9%): [1163.670, 1328.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   427.402 ±(99.9%) 10.570 B/op [Average]
[info]   (min, avg, max) = (425.105, 427.402, 431.275), stdev = 2.745
[info]   CI (99.9%): [416.831, 437.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1206.155 ±(99.9%) 1153.108 MB/sec [Average]
[info]   (min, avg, max) = (670.469, 1206.155, 1341.330), stdev = 299.459
[info]   CI (99.9%): [53.046, 2359.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   413.948 ±(99.9%) 398.274 B/op [Average]
[info]   (min, avg, max) = (229.374, 413.948, 466.806), stdev = 103.431
[info]   CI (99.9%): [15.674, 812.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.143), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 5.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.238 ±(99.9%) 1.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 1.073), stdev = 0.468
[info]   CI (99.9%): [≈ 0, 2.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.17% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3755885.076 ops/s
[info] # Warmup Iteration   2: 5881113.426 ops/s
[info] # Warmup Iteration   3: 6019578.989 ops/s
[info] # Warmup Iteration   4: 5953843.958 ops/s
[info] # Warmup Iteration   5: 6006700.467 ops/s
[info] Iteration   1: 6019169.996 ops/s
[info]                  ·gc.alloc.rate:               601.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6003122.874 ops/s
[info]                  ·gc.alloc.rate:                   603.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6003018.842 ops/s
[info]                  ·gc.alloc.rate:               602.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5990518.055 ops/s
[info]                  ·gc.alloc.rate:               598.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.495 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 6027535.242 ops/s
[info]                  ·gc.alloc.rate:      582.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6008673.002 ±(99.9%) 56407.220 ops/s [Average]
[info]   (min, avg, max) = (5990518.055, 6008673.002, 6027535.242), stdev = 14648.776
[info]   CI (99.9%): [5952265.782, 6065080.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   597.628 ±(99.9%) 34.290 MB/sec [Average]
[info]   (min, avg, max) = (582.172, 597.628, 603.954), stdev = 8.905
[info]   CI (99.9%): [563.338, 631.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.531 ±(99.9%) 9.917 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.531, 158.331), stdev = 2.575
[info]   CI (99.9%): [146.614, 166.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.190 ±(99.9%) 1156.342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.190, 671.817), stdev = 300.298
[info]   CI (99.9%): [≈ 0, 1693.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   140.809 ±(99.9%) 303.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.809, 176.495), stdev = 78.716
[info]   CI (99.9%): [≈ 0, 443.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.37% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3866559.395 ops/s
[info] # Warmup Iteration   2: 6014448.337 ops/s
[info] # Warmup Iteration   3: 6448149.684 ops/s
[info] # Warmup Iteration   4: 6448051.694 ops/s
[info] # Warmup Iteration   5: 6442464.322 ops/s
[info] Iteration   1: 6451728.686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6445033.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6441903.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6446212.621 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6449002.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6446776.221 ±(99.9%) 14481.704 ops/s [Average]
[info]   (min, avg, max) = (6441903.690, 6446776.221, 6451728.686), stdev = 3760.852
[info]   CI (99.9%): [6432294.517, 6461257.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.57% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1705710.418 ops/s
[info] # Warmup Iteration   2: 4282158.606 ops/s
[info] # Warmup Iteration   3: 4625205.217 ops/s
[info] # Warmup Iteration   4: 4674373.564 ops/s
[info] # Warmup Iteration   5: 4671858.667 ops/s
[info] Iteration   1: 4552315.783 ops/s
[info]                  ·gc.alloc.rate:               1282.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.575 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 4589740.753 ops/s
[info]                  ·gc.alloc.rate:                   1300.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4555368.322 ops/s
[info]                  ·gc.alloc.rate:                   1277.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4563014.667 ops/s
[info]                  ·gc.alloc.rate:                   1302.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4589343.102 ops/s
[info]                  ·gc.alloc.rate:               1300.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 459.606 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4569956.525 ±(99.9%) 70464.045 ops/s [Average]
[info]   (min, avg, max) = (4552315.783, 4569956.525, 4589740.753), stdev = 18299.289
[info]   CI (99.9%): [4499492.481, 4640420.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1292.765 ±(99.9%) 45.232 MB/sec [Average]
[info]   (min, avg, max) = (1277.856, 1292.765, 1302.814), stdev = 11.747
[info]   CI (99.9%): [1247.532, 1337.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   445.181 ±(99.9%) 11.533 B/op [Average]
[info]   (min, avg, max) = (441.463, 445.181, 449.324), stdev = 2.995
[info]   CI (99.9%): [433.649, 456.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.639 ±(99.9%) 4.177 MB/sec [Average]
[info]   (min, avg, max) = (1340.181, 1341.639, 1342.984), stdev = 1.085
[info]   CI (99.9%): [1337.462, 1345.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   462.022 ±(99.9%) 7.813 B/op [Average]
[info]   (min, avg, max) = (459.606, 462.022, 463.725), stdev = 2.029
[info]   CI (99.9%): [454.209, 469.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 6.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.518), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.246 ±(99.9%) 2.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.213), stdev = 0.541
[info]   CI (99.9%): [≈ 0, 2.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93.78% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125200.815 ops/s
[info] # Warmup Iteration   2: 302801.123 ops/s
[info] # Warmup Iteration   3: 319697.266 ops/s
[info] # Warmup Iteration   4: 320307.332 ops/s
[info] # Warmup Iteration   5: 320374.714 ops/s
[info] Iteration   1: 320974.766 ops/s
[info]                  ·gc.alloc.rate:                   2534.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              12425.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13169.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 322218.245 ops/s
[info]                  ·gc.alloc.rate:                   2504.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              12232.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9828.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 322712.509 ops/s
[info]                  ·gc.alloc.rate:               2548.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          12429.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13098.510 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 323504.359 ops/s
[info]                  ·gc.alloc.rate:               2528.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          12301.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9815.827 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 320736.342 ops/s
[info]                  ·gc.alloc.rate:               2534.988 MB/sec
[info]                  ·gc.alloc.rate.norm:          12438.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13231.862 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   322029.244 ±(99.9%) 4499.679 ops/s [Average]
[info]   (min, avg, max) = (320736.342, 322029.244, 323504.359), stdev = 1168.552
[info]   CI (99.9%): [317529.566, 326528.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2530.305 ±(99.9%) 62.118 MB/sec [Average]
[info]   (min, avg, max) = (2504.682, 2530.305, 2548.859), stdev = 16.132
[info]   CI (99.9%): [2468.187, 2592.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12365.489 ±(99.9%) 358.894 B/op [Average]
[info]   (min, avg, max) = (12232.715, 12365.489, 12438.373), stdev = 93.204
[info]   CI (99.9%): [12006.596, 12724.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2419.810 ±(99.9%) 1422.556 MB/sec [Average]
[info]   (min, avg, max) = (2012.514, 2419.810, 2696.704), stdev = 369.433
[info]   CI (99.9%): [997.254, 3842.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11828.915 ±(99.9%) 7055.503 B/op [Average]
[info]   (min, avg, max) = (9815.827, 11828.915, 13231.862), stdev = 1832.292
[info]   CI (99.9%): [4773.412, 18884.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.500), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.510 ±(99.9%) 4.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.450), stdev = 1.085
[info]   CI (99.9%): [≈ 0, 4.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.98% complete, ETA 00:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49467.184 ops/s
[info] # Warmup Iteration   2: 793056.888 ops/s
[info] # Warmup Iteration   3: 815793.406 ops/s
[info] # Warmup Iteration   4: 843397.552 ops/s
[info] # Warmup Iteration   5: 824534.316 ops/s
[info] Iteration   1: 824930.813 ops/s
[info]                  ·gc.alloc.rate:                   1179.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              2250.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2558.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 828013.325 ops/s
[info]                  ·gc.alloc.rate:               1159.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          2203.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1274.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 844197.230 ops/s
[info]                  ·gc.alloc.rate:                   1197.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              2231.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2503.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 840890.750 ops/s
[info]                  ·gc.alloc.rate:               1214.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          2272.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2514.732 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 844202.303 ops/s
[info]                  ·gc.alloc.rate:                   1209.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              2255.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2506.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   836446.884 ±(99.9%) 35694.200 ops/s [Average]
[info]   (min, avg, max) = (824930.813, 836446.884, 844202.303), stdev = 9269.670
[info]   CI (99.9%): [800752.684, 872141.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1191.924 ±(99.9%) 87.576 MB/sec [Average]
[info]   (min, avg, max) = (1159.160, 1191.924, 1214.168), stdev = 22.743
[info]   CI (99.9%): [1104.348, 1279.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2242.413 ±(99.9%) 101.723 B/op [Average]
[info]   (min, avg, max) = (2203.070, 2242.413, 2272.360), stdev = 26.417
[info]   CI (99.9%): [2140.689, 2344.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.649 ±(99.9%) 1157.711 MB/sec [Average]
[info]   (min, avg, max) = (670.826, 1208.649, 1344.325), stdev = 300.654
[info]   CI (99.9%): [50.938, 2366.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2271.630 ±(99.9%) 2147.144 B/op [Average]
[info]   (min, avg, max) = (1274.956, 2271.630, 2558.860), stdev = 557.606
[info]   CI (99.9%): [124.486, 4418.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 5.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.310), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.258 ±(99.9%) 10.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.258, 6.170), stdev = 2.747
[info]   CI (99.9%): [≈ 0, 11.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.18% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.657 ops/s
[info] # Warmup Iteration   2: 2595928.038 ops/s
[info] # Warmup Iteration   3: 2726389.352 ops/s
[info] # Warmup Iteration   4: 2822622.672 ops/s
[info] # Warmup Iteration   5: 2779633.979 ops/s
[info] Iteration   1: 2778321.743 ops/s
[info]                  ·gc.alloc.rate:                   546.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              309.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2767774.120 ops/s
[info]                  ·gc.alloc.rate:               542.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 378.427 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2791723.754 ops/s
[info]                  ·gc.alloc.rate:      525.234 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2858465.108 ops/s
[info]                  ·gc.alloc.rate:                   552.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2868937.665 ops/s
[info]                  ·gc.alloc.rate:               563.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2813044.478 ±(99.9%) 181601.129 ops/s [Average]
[info]   (min, avg, max) = (2767774.120, 2813044.478, 2868937.665), stdev = 47161.237
[info]   CI (99.9%): [2631443.349, 2994645.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   546.079 ±(99.9%) 53.887 MB/sec [Average]
[info]   (min, avg, max) = (525.234, 546.079, 563.414), stdev = 13.994
[info]   CI (99.9%): [492.192, 599.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.454 ±(99.9%) 22.015 B/op [Average]
[info]   (min, avg, max) = (296.000, 305.454, 309.437), stdev = 5.717
[info]   CI (99.9%): [283.439, 327.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.617 ±(99.9%) 1146.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.617, 665.868), stdev = 297.742
[info]   CI (99.9%): [≈ 0, 1679.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   297.451 ±(99.9%) 640.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 297.451, 378.427), stdev = 166.386
[info]   CI (99.9%): [≈ 0, 938.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.38% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112171.762 ops/s
[info] # Warmup Iteration   2: 1420958.237 ops/s
[info] # Warmup Iteration   3: 1720230.246 ops/s
[info] # Warmup Iteration   4: 1707055.370 ops/s
[info] # Warmup Iteration   5: 1714414.219 ops/s
[info] Iteration   1: 1695925.829 ops/s
[info]                  ·gc.alloc.rate:                   927.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1680845.229 ops/s
[info]                  ·gc.alloc.rate:               915.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 625.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1713643.281 ops/s
[info]                  ·gc.alloc.rate:                   948.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1718740.207 ops/s
[info]                  ·gc.alloc.rate:               931.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          852.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1718034.384 ops/s
[info]                  ·gc.alloc.rate:               931.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1705437.786 ±(99.9%) 63804.310 ops/s [Average]
[info]   (min, avg, max) = (1680845.229, 1705437.786, 1718740.207), stdev = 16569.777
[info]   CI (99.9%): [1641633.476, 1769242.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   930.877 ±(99.9%) 46.165 MB/sec [Average]
[info]   (min, avg, max) = (915.448, 930.877, 948.889), stdev = 11.989
[info]   CI (99.9%): [884.712, 977.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   858.932 ±(99.9%) 29.532 B/op [Average]
[info]   (min, avg, max) = (852.628, 858.932, 871.421), stdev = 7.669
[info]   CI (99.9%): [829.400, 888.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.106 ±(99.9%) 1151.361 MB/sec [Average]
[info]   (min, avg, max) = (667.869, 802.106, 1336.981), stdev = 299.005
[info]   CI (99.9%): [≈ 0, 1953.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   739.572 ±(99.9%) 1051.214 B/op [Average]
[info]   (min, avg, max) = (612.399, 739.572, 1227.830), stdev = 272.997
[info]   CI (99.9%): [≈ 0, 1790.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.58% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1058098.405 ops/s
[info] # Warmup Iteration   2: 2223393.617 ops/s
[info] # Warmup Iteration   3: 2423901.302 ops/s
[info] # Warmup Iteration   4: 2406283.994 ops/s
[info] # Warmup Iteration   5: 2401495.083 ops/s
[info] Iteration   1: 2416530.272 ops/s
[info]                  ·gc.alloc.rate:               466.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 333.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2437050.131 ops/s
[info]                  ·gc.alloc.rate:      458.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2421394.337 ops/s
[info]                  ·gc.alloc.rate:               476.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 436.634 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2416975.257 ops/s
[info]                  ·gc.alloc.rate:                   480.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              313.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2395108.408 ops/s
[info]                  ·gc.alloc.rate:      450.582 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2417411.681 ±(99.9%) 57757.528 ops/s [Average]
[info]   (min, avg, max) = (2395108.408, 2417411.681, 2437050.131), stdev = 14999.447
[info]   CI (99.9%): [2359654.153, 2475169.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   466.463 ±(99.9%) 48.031 MB/sec [Average]
[info]   (min, avg, max) = (450.582, 466.463, 480.804), stdev = 12.474
[info]   CI (99.9%): [418.432, 514.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.654 ±(99.9%) 29.928 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.654, 313.071), stdev = 7.772
[info]   CI (99.9%): [273.726, 333.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.057 ±(99.9%) 1328.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.057, 671.838), stdev = 344.984
[info]   CI (99.9%): [≈ 0, 1699.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   241.458 ±(99.9%) 864.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 241.458, 437.461), stdev = 224.461
[info]   CI (99.9%): [≈ 0, 1105.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.78% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175719.842 ops/s
[info] # Warmup Iteration   2: 1420277.579 ops/s
[info] # Warmup Iteration   3: 1714534.941 ops/s
[info] # Warmup Iteration   4: 1721053.552 ops/s
[info] # Warmup Iteration   5: 1719841.975 ops/s
[info] Iteration   1: 1724324.249 ops/s
[info]                  ·gc.alloc.rate:               979.403 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 610.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1713818.867 ops/s
[info]                  ·gc.alloc.rate:                   986.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              905.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1721310.829 ops/s
[info]                  ·gc.alloc.rate:               967.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1691858.731 ops/s
[info]                  ·gc.alloc.rate:                   953.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              886.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1713278.422 ops/s
[info]                  ·gc.alloc.rate:                   989.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              908.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1712918.220 ±(99.9%) 48896.218 ops/s [Average]
[info]   (min, avg, max) = (1691858.731, 1712918.220, 1724324.249), stdev = 12698.193
[info]   CI (99.9%): [1664022.002, 1761814.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   975.227 ±(99.9%) 56.677 MB/sec [Average]
[info]   (min, avg, max) = (953.493, 975.227, 989.418), stdev = 14.719
[info]   CI (99.9%): [918.550, 1031.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   895.915 ±(99.9%) 41.669 B/op [Average]
[info]   (min, avg, max) = (884.773, 895.915, 908.831), stdev = 10.821
[info]   CI (99.9%): [854.246, 937.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   936.966 ±(99.9%) 1412.398 MB/sec [Average]
[info]   (min, avg, max) = (668.560, 936.966, 1339.641), stdev = 366.795
[info]   CI (99.9%): [≈ 0, 2349.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   860.713 ±(99.9%) 1296.296 B/op [Average]
[info]   (min, avg, max) = (610.110, 860.713, 1230.528), stdev = 336.644
[info]   CI (99.9%): [≈ 0, 2157.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.019), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94.98% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 454251.353 ops/s
[info] # Warmup Iteration   2: 1341520.582 ops/s
[info] # Warmup Iteration   3: 1398917.220 ops/s
[info] # Warmup Iteration   4: 1416311.307 ops/s
[info] # Warmup Iteration   5: 1399596.712 ops/s
[info] Iteration   1: 1417118.355 ops/s
[info]                  ·gc.alloc.rate:               1523.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          1691.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1494.367 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1412580.252 ops/s
[info]                  ·gc.alloc.rate:                   1519.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1692.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1500.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1418117.341 ops/s
[info]                  ·gc.alloc.rate:                   1535.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1703.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1415989.741 ops/s
[info]                  ·gc.alloc.rate:               1522.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          1692.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1494.080 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1395257.334 ops/s
[info]                  ·gc.alloc.rate:               1526.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          1721.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2272.205 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1411812.605 ±(99.9%) 36531.199 ops/s [Average]
[info]   (min, avg, max) = (1395257.334, 1411812.605, 1418117.341), stdev = 9487.036
[info]   CI (99.9%): [1375281.406, 1448343.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1525.313 ±(99.9%) 23.741 MB/sec [Average]
[info]   (min, avg, max) = (1519.058, 1525.313, 1535.322), stdev = 6.166
[info]   CI (99.9%): [1501.571, 1549.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   1700.322 ±(99.9%) 49.981 B/op [Average]
[info]   (min, avg, max) = (1691.553, 1700.322, 1721.672), stdev = 12.980
[info]   CI (99.9%): [1650.341, 1750.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479.690 ±(99.9%) 1151.066 MB/sec [Average]
[info]   (min, avg, max) = (1344.324, 1479.690, 2014.425), stdev = 298.928
[info]   CI (99.9%): [328.625, 2630.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1651.237 ±(99.9%) 1336.722 B/op [Average]
[info]   (min, avg, max) = (1494.080, 1651.237, 2272.205), stdev = 347.142
[info]   CI (99.9%): [314.515, 2987.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 5.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.977), stdev = 1.327
[info]   CI (99.9%): [≈ 0, 5.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.670 ±(99.9%) 5.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.304), stdev = 1.472
[info]   CI (99.9%): [≈ 0, 6.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95.18% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148446.074 ops/s
[info] # Warmup Iteration   2: 1654112.935 ops/s
[info] # Warmup Iteration   3: 1791190.013 ops/s
[info] # Warmup Iteration   4: 1815000.869 ops/s
[info] # Warmup Iteration   5: 1824811.846 ops/s
[info] Iteration   1: 1808032.070 ops/s
[info]                  ·gc.alloc.rate:                   1382.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              1203.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1167.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1834834.073 ops/s
[info]                  ·gc.alloc.rate:                   1393.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1195.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1834718.155 ops/s
[info]                  ·gc.alloc.rate:               1415.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          1214.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1151.954 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1831488.715 ops/s
[info]                  ·gc.alloc.rate:                   1399.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1823965.842 ops/s
[info]                  ·gc.alloc.rate:                   1407.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1214.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1157.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1826607.771 ±(99.9%) 43450.488 ops/s [Average]
[info]   (min, avg, max) = (1808032.070, 1826607.771, 1834834.073), stdev = 11283.954
[info]   CI (99.9%): [1783157.283, 1870058.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1399.696 ±(99.9%) 48.989 MB/sec [Average]
[info]   (min, avg, max) = (1382.334, 1399.696, 1415.334), stdev = 12.722
[info]   CI (99.9%): [1350.707, 1448.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1205.928 ±(99.9%) 31.756 B/op [Average]
[info]   (min, avg, max) = (1195.270, 1205.928, 1214.563), stdev = 8.247
[info]   CI (99.9%): [1174.172, 1237.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.590 ±(99.9%) 4.284 MB/sec [Average]
[info]   (min, avg, max) = (1341.630, 1342.590, 1344.323), stdev = 1.113
[info]   CI (99.9%): [1338.306, 1346.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1156.759 ±(99.9%) 25.759 B/op [Average]
[info]   (min, avg, max) = (1151.310, 1156.759, 1167.844), stdev = 6.690
[info]   CI (99.9%): [1131.000, 1182.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.081), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 5.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.583 ±(99.9%) 4.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.647), stdev = 1.156
[info]   CI (99.9%): [≈ 0, 5.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.619 ops/s
[info] # Warmup Iteration   2: 2627858.277 ops/s
[info] # Warmup Iteration   3: 2787493.828 ops/s
[info] # Warmup Iteration   4: 2793444.893 ops/s
[info] # Warmup Iteration   5: 2804884.606 ops/s
[info] Iteration   1: 2797094.079 ops/s
[info]                  ·gc.alloc.rate:                   744.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     374.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2803198.515 ops/s
[info]                  ·gc.alloc.rate:               743.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2790858.524 ops/s
[info]                  ·gc.alloc.rate:                   758.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2792573.254 ops/s
[info]                  ·gc.alloc.rate:               738.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2792803.211 ops/s
[info]                  ·gc.alloc.rate:                   740.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     375.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2795305.517 ±(99.9%) 19156.801 ops/s [Average]
[info]   (min, avg, max) = (2790858.524, 2795305.517, 2803198.515), stdev = 4974.960
[info]   CI (99.9%): [2776148.716, 2814462.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   745.049 ±(99.9%) 31.051 MB/sec [Average]
[info]   (min, avg, max) = (738.241, 745.049, 758.876), stdev = 8.064
[info]   CI (99.9%): [713.998, 776.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   419.441 ±(99.9%) 18.635 B/op [Average]
[info]   (min, avg, max) = (416.018, 419.441, 427.920), stdev = 4.839
[info]   CI (99.9%): [400.806, 438.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.625 ±(99.9%) 1147.378 MB/sec [Average]
[info]   (min, avg, max) = (665.499, 799.625, 1332.650), stdev = 297.971
[info]   CI (99.9%): [≈ 0, 1947.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   450.286 ±(99.9%) 648.316 B/op [Average]
[info]   (min, avg, max) = (373.987, 450.286, 751.464), stdev = 168.366
[info]   CI (99.9%): [≈ 0, 1098.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.020 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.58% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624772.638 ops/s
[info] # Warmup Iteration   2: 2479978.659 ops/s
[info] # Warmup Iteration   3: 2812459.151 ops/s
[info] # Warmup Iteration   4: 2918420.828 ops/s
[info] # Warmup Iteration   5: 2914561.213 ops/s
[info] Iteration   1: 2933795.342 ops/s
[info]                  ·gc.alloc.rate:               1295.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          694.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 717.544 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2956233.728 ops/s
[info]                  ·gc.alloc.rate:               1289.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          686.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2956406.943 ops/s
[info]                  ·gc.alloc.rate:                   1290.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              686.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2973827.890 ops/s
[info]                  ·gc.alloc.rate:                   1297.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              686.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3005581.603 ops/s
[info]                  ·gc.alloc.rate:                   1323.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              692.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     701.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2965169.101 ±(99.9%) 102767.368 ops/s [Average]
[info]   (min, avg, max) = (2933795.342, 2965169.101, 3005581.603), stdev = 26688.359
[info]   CI (99.9%): [2862401.733, 3067936.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1299.164 ±(99.9%) 53.222 MB/sec [Average]
[info]   (min, avg, max) = (1289.889, 1299.164, 1323.186), stdev = 13.821
[info]   CI (99.9%): [1245.943, 1352.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   689.504 ±(99.9%) 15.524 B/op [Average]
[info]   (min, avg, max) = (686.487, 689.504, 694.894), stdev = 4.032
[info]   CI (99.9%): [673.980, 705.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.264 ±(99.9%) 1153.292 MB/sec [Average]
[info]   (min, avg, max) = (669.494, 1205.264, 1340.331), stdev = 299.506
[info]   CI (99.9%): [51.973, 2358.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   639.495 ±(99.9%) 609.816 B/op [Average]
[info]   (min, avg, max) = (356.398, 639.495, 717.544), stdev = 158.367
[info]   CI (99.9%): [29.679, 1249.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.702 ±(99.9%) 5.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.362), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 3.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.779), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.78% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1351730.204 ops/s
[info] # Warmup Iteration   2: 3079618.898 ops/s
[info] # Warmup Iteration   3: 3324261.351 ops/s
[info] # Warmup Iteration   4: 3355782.866 ops/s
[info] # Warmup Iteration   5: 3364071.656 ops/s
[info] Iteration   1: 3253786.072 ops/s
[info]                  ·gc.alloc.rate:               877.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 324.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3340988.421 ops/s
[info]                  ·gc.alloc.rate:               882.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.143 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 3357387.215 ops/s
[info]                  ·gc.alloc.rate:                   900.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              421.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3368370.291 ops/s
[info]                  ·gc.alloc.rate:               888.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 314.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3363801.304 ops/s
[info]                  ·gc.alloc.rate:               885.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 314.623 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3336866.660 ±(99.9%) 183243.928 ops/s [Average]
[info]   (min, avg, max) = (3253786.072, 3336866.660, 3368370.291), stdev = 47587.866
[info]   CI (99.9%): [3153622.732, 3520110.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   886.933 ±(99.9%) 33.149 MB/sec [Average]
[info]   (min, avg, max) = (877.139, 886.933, 900.236), stdev = 8.609
[info]   CI (99.9%): [853.784, 920.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   418.334 ±(99.9%) 17.201 B/op [Average]
[info]   (min, avg, max) = (414.311, 418.334, 424.246), stdev = 4.467
[info]   CI (99.9%): [401.133, 435.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.184 ±(99.9%) 1156.903 MB/sec [Average]
[info]   (min, avg, max) = (671.145, 806.184, 1343.633), stdev = 300.444
[info]   CI (99.9%): [≈ 0, 1963.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   379.876 ±(99.9%) 538.259 B/op [Average]
[info]   (min, avg, max) = (314.186, 379.876, 629.814), stdev = 139.784
[info]   CI (99.9%): [≈ 0, 918.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.98% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1348023.168 ops/s
[info] # Warmup Iteration   2: 3530041.714 ops/s
[info] # Warmup Iteration   3: 3631427.449 ops/s
[info] # Warmup Iteration   4: 3631887.925 ops/s
[info] # Warmup Iteration   5: 3633059.402 ops/s
[info] Iteration   1: 3629963.433 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3636260.721 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3632399.713 ops/s
[info]                  ·gc.alloc.rate:      0.079 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.034 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3632119.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3628045.985 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3631757.811 ±(99.9%) 11839.758 ops/s [Average]
[info]   (min, avg, max) = (3628045.985, 3631757.811, 3636260.721), stdev = 3074.748
[info]   CI (99.9%): [3619918.053, 3643597.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.007 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.18% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 397934.966 ops/s
[info] # Warmup Iteration   2: 2413752.244 ops/s
[info] # Warmup Iteration   3: 2831038.801 ops/s
[info] # Warmup Iteration   4: 2852500.263 ops/s
[info] # Warmup Iteration   5: 2845132.989 ops/s
[info] Iteration   1: 2829543.631 ops/s
[info]                  ·gc.alloc.rate:                   1397.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              777.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2824865.538 ops/s
[info]                  ·gc.alloc.rate:                   1411.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              786.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2812334.585 ops/s
[info]                  ·gc.alloc.rate:               1398.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          782.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 751.515 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2845233.704 ops/s
[info]                  ·gc.alloc.rate:                   1439.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              796.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2859899.780 ops/s
[info]                  ·gc.alloc.rate:               1432.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          788.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 737.188 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2834375.448 ±(99.9%) 71236.333 ops/s [Average]
[info]   (min, avg, max) = (2812334.585, 2834375.448, 2859899.780), stdev = 18499.850
[info]   CI (99.9%): [2763139.115, 2905611.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1415.904 ±(99.9%) 75.101 MB/sec [Average]
[info]   (min, avg, max) = (1397.454, 1415.904, 1439.920), stdev = 19.504
[info]   CI (99.9%): [1340.803, 1491.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   786.149 ±(99.9%) 27.510 B/op [Average]
[info]   (min, avg, max) = (777.252, 786.149, 796.440), stdev = 7.144
[info]   CI (99.9%): [758.639, 813.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1475.659 ±(99.9%) 1158.379 MB/sec [Average]
[info]   (min, avg, max) = (1339.478, 1475.659, 2013.790), stdev = 300.827
[info]   CI (99.9%): [317.280, 2634.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   819.090 ±(99.9%) 634.824 B/op [Average]
[info]   (min, avg, max) = (737.188, 819.090, 1113.856), stdev = 164.862
[info]   CI (99.9%): [184.266, 1453.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 6.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.508), stdev = 1.563
[info]   CI (99.9%): [≈ 0, 6.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.394 ±(99.9%) 3.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.940), stdev = 0.864
[info]   CI (99.9%): [≈ 0, 3.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.39% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2544.927 ops/s
[info] # Warmup Iteration   2: 8024.336 ops/s
[info] # Warmup Iteration   3: 11465.206 ops/s
[info] # Warmup Iteration   4: 11608.037 ops/s
[info] # Warmup Iteration   5: 11547.240 ops/s
[info] Iteration   1: 11649.707 ops/s
[info]                  ·gc.alloc.rate:               1369.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          184957.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180416.621 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 11463.924 ops/s
[info]                  ·gc.alloc.rate:                   1343.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              184485.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183450.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11592.327 ops/s
[info]                  ·gc.alloc.rate:                   1364.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              185286.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181574.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11807.233 ops/s
[info]                  ·gc.alloc.rate:                   1377.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              183525.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178373.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11801.151 ops/s
[info]                  ·gc.alloc.rate:                   1382.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              184295.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178034.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11662.868 ±(99.9%) 560.303 ops/s [Average]
[info]   (min, avg, max) = (11463.924, 11662.868, 11807.233), stdev = 145.509
[info]   CI (99.9%): [11102.566, 12223.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1367.398 ±(99.9%) 56.925 MB/sec [Average]
[info]   (min, avg, max) = (1343.796, 1367.398, 1382.061), stdev = 14.783
[info]   CI (99.9%): [1310.474, 1424.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   184510.127 ±(99.9%) 2596.838 B/op [Average]
[info]   (min, avg, max) = (183525.536, 184510.127, 185286.917), stdev = 674.391
[info]   CI (99.9%): [181913.289, 187106.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.578 ±(99.9%) 5.210 MB/sec [Average]
[info]   (min, avg, max) = (1335.112, 1336.578, 1338.360), stdev = 1.353
[info]   CI (99.9%): [1331.368, 1341.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   180370.026 ±(99.9%) 8692.190 B/op [Average]
[info]   (min, avg, max) = (178034.932, 180370.026, 183450.502), stdev = 2257.334
[info]   CI (99.9%): [171677.837, 189062.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.872 ±(99.9%) 6.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 3.927), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   116.322 ±(99.9%) 878.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.322, 523.329), stdev = 228.204
[info]   CI (99.9%): [≈ 0, 995.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.59% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388.795 ops/s
[info] # Warmup Iteration   2: 16300.359 ops/s
[info] # Warmup Iteration   3: 22377.946 ops/s
[info] # Warmup Iteration   4: 22499.148 ops/s
[info] # Warmup Iteration   5: 22569.640 ops/s
[info] Iteration   1: 21922.250 ops/s
[info]                  ·gc.alloc.rate:                   371.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              26680.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36726.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22347.535 ops/s
[info]                  ·gc.alloc.rate:               349.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          24638.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36028.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 22591.847 ops/s
[info]                  ·gc.alloc.rate:      335.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22477.734 ops/s
[info]                  ·gc.alloc.rate:               347.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          24330.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46197.604 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 22628.622 ops/s
[info]                  ·gc.alloc.rate:      336.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22393.597 ±(99.9%) 1099.135 ops/s [Average]
[info]   (min, avg, max) = (21922.250, 22393.597, 22628.622), stdev = 285.442
[info]   CI (99.9%): [21294.463, 23492.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   348.130 ±(99.9%) 56.622 MB/sec [Average]
[info]   (min, avg, max) = (335.474, 348.130, 371.671), stdev = 14.705
[info]   CI (99.9%): [291.508, 404.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24477.008 ±(99.9%) 5224.038 B/op [Average]
[info]   (min, avg, max) = (23368.019, 24477.008, 26680.359), stdev = 1356.666
[info]   CI (99.9%): [19252.970, 29701.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.648 ±(99.9%) 1206.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.648, 659.859), stdev = 313.213
[info]   CI (99.9%): [≈ 0, 1542.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23790.537 ±(99.9%) 85045.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23790.537, 46197.604), stdev = 22085.997
[info]   CI (99.9%): [≈ 0, 108835.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.299 ±(99.9%) 2.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.299, 1.494), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 2.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.79% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11717.604 ops/s
[info] # Warmup Iteration   2: 21603.110 ops/s
[info] # Warmup Iteration   3: 22474.123 ops/s
[info] # Warmup Iteration   4: 22272.278 ops/s
[info] # Warmup Iteration   5: 22504.976 ops/s
[info] Iteration   1: 22185.917 ops/s
[info]                  ·gc.alloc.rate:               255.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          18097.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36289.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22599.395 ops/s
[info]                  ·gc.alloc.rate:      245.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22402.802 ops/s
[info]                  ·gc.alloc.rate:                   256.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              17997.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35939.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22347.214 ops/s
[info]                  ·gc.alloc.rate:      242.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22272.350 ops/s
[info]                  ·gc.alloc.rate:                   258.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              18265.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36149.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22361.536 ±(99.9%) 600.506 ops/s [Average]
[info]   (min, avg, max) = (22185.917, 22361.536, 22599.395), stdev = 155.949
[info]   CI (99.9%): [21761.030, 22962.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   251.679 ±(99.9%) 26.754 MB/sec [Average]
[info]   (min, avg, max) = (242.896, 251.679, 258.522), stdev = 6.948
[info]   CI (99.9%): [224.925, 278.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17713.599 ±(99.9%) 2174.322 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17713.599, 18265.500), stdev = 564.665
[info]   CI (99.9%): [15539.277, 19887.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.983 ±(99.9%) 1079.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.983, 511.648), stdev = 280.236
[info]   CI (99.9%): [≈ 0, 1386.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21675.879 ±(99.9%) 76195.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21675.879, 36289.774), stdev = 19787.672
[info]   CI (99.9%): [≈ 0, 97871.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.294 ±(99.9%) 1.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.294, 0.904), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.99% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260.810 ops/s
[info] # Warmup Iteration   2: 2423.192 ops/s
[info] # Warmup Iteration   3: 6198.540 ops/s
[info] # Warmup Iteration   4: 7533.096 ops/s
[info] # Warmup Iteration   5: 7426.992 ops/s
[info] Iteration   1: 7475.160 ops/s
[info]                  ·gc.alloc.rate:               2108.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          443971.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 421772.411 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7549.703 ops/s
[info]                  ·gc.alloc.rate:                   2134.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              444870.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418139.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 440.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7550.386 ops/s
[info]                  ·gc.alloc.rate:                   2145.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              447105.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418277.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7574.536 ops/s
[info]                  ·gc.alloc.rate:               2139.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          444430.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 417368.127 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7558.068 ops/s
[info]                  ·gc.alloc.rate:               2148.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          447319.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 418944.948 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7541.570 ±(99.9%) 148.051 ops/s [Average]
[info]   (min, avg, max) = (7475.160, 7541.570, 7574.536), stdev = 38.448
[info]   CI (99.9%): [7393.519, 7689.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2135.252 ±(99.9%) 60.606 MB/sec [Average]
[info]   (min, avg, max) = (2108.934, 2135.252, 2148.864), stdev = 15.739
[info]   CI (99.9%): [2074.646, 2195.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   445539.589 ±(99.9%) 6015.262 B/op [Average]
[info]   (min, avg, max) = (443971.211, 445539.589, 447319.941), stdev = 1562.144
[info]   CI (99.9%): [439524.327, 451554.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.539 ±(99.9%) 13.095 MB/sec [Average]
[info]   (min, avg, max) = (2003.486, 2007.539, 2012.554), stdev = 3.401
[info]   CI (99.9%): [1994.444, 2020.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   418900.514 ±(99.9%) 6547.586 B/op [Average]
[info]   (min, avg, max) = (417368.127, 418900.514, 421772.411), stdev = 1700.387
[info]   CI (99.9%): [412352.928, 425448.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.460 ±(99.9%) 3.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.113), stdev = 0.927
[info]   CI (99.9%): [≈ 0, 4.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   95.892 ±(99.9%) 744.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.892, 440.409), stdev = 193.332
[info]   CI (99.9%): [≈ 0, 840.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.19% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15648.480 ops/s
[info] # Warmup Iteration   2: 51717.412 ops/s
[info] # Warmup Iteration   3: 61627.396 ops/s
[info] # Warmup Iteration   4: 62792.220 ops/s
[info] # Warmup Iteration   5: 62478.233 ops/s
[info] Iteration   1: 62796.354 ops/s
[info]                  ·gc.alloc.rate:                   802.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              20107.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16619.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 62628.605 ops/s
[info]                  ·gc.alloc.rate:                   827.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              20794.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33361.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 62661.550 ops/s
[info]                  ·gc.alloc.rate:               809.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          20323.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16695.578 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 62688.596 ops/s
[info]                  ·gc.alloc.rate:                   803.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              20162.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16689.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 60172.089 ops/s
[info]                  ·gc.alloc.rate:               783.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          20500.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17413.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   62189.439 ±(99.9%) 4349.252 ops/s [Average]
[info]   (min, avg, max) = (60172.089, 62189.439, 62796.354), stdev = 1129.487
[info]   CI (99.9%): [57840.187, 66538.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   805.233 ±(99.9%) 60.415 MB/sec [Average]
[info]   (min, avg, max) = (783.837, 805.233, 827.554), stdev = 15.690
[info]   CI (99.9%): [744.818, 865.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20377.686 ±(99.9%) 1073.743 B/op [Average]
[info]   (min, avg, max) = (20107.764, 20377.686, 20794.683), stdev = 278.848
[info]   CI (99.9%): [19303.943, 21451.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.252 ±(99.9%) 1141.742 MB/sec [Average]
[info]   (min, avg, max) = (663.144, 797.252, 1327.657), stdev = 296.507
[info]   CI (99.9%): [≈ 0, 1938.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20155.870 ±(99.9%) 28452.875 B/op [Average]
[info]   (min, avg, max) = (16619.022, 20155.870, 33361.195), stdev = 7389.121
[info]   CI (99.9%): [≈ 0, 48608.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.425 ±(99.9%) 2.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 1.046), stdev = 0.566
[info]   CI (99.9%): [≈ 0, 2.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.39% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29986.290 ops/s
[info] # Warmup Iteration   2: 63179.542 ops/s
[info] # Warmup Iteration   3: 70251.967 ops/s
[info] # Warmup Iteration   4: 71862.728 ops/s
[info] # Warmup Iteration   5: 69759.652 ops/s
[info] Iteration   1: 71580.495 ops/s
[info]                  ·gc.alloc.rate:                   493.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              10844.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11247.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 71584.490 ops/s
[info]                  ·gc.alloc.rate:               502.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          11047.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14652.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 71514.346 ops/s
[info]                  ·gc.alloc.rate:                   497.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              10948.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14666.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 71772.543 ops/s
[info]                  ·gc.alloc.rate:      487.771 MB/sec
[info]                  ·gc.alloc.rate.norm: 10695.132 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 71604.285 ops/s
[info]                  ·gc.alloc.rate:               500.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          11004.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14662.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   71611.232 ±(99.9%) 370.925 ops/s [Average]
[info]   (min, avg, max) = (71514.346, 71611.232, 71772.543), stdev = 96.328
[info]   CI (99.9%): [71240.306, 71982.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   496.370 ±(99.9%) 22.886 MB/sec [Average]
[info]   (min, avg, max) = (487.771, 496.370, 502.500), stdev = 5.944
[info]   CI (99.9%): [473.484, 519.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10907.914 ±(99.9%) 543.236 B/op [Average]
[info]   (min, avg, max) = (10695.132, 10907.914, 11047.184), stdev = 141.077
[info]   CI (99.9%): [10364.679, 11451.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   502.375 ±(99.9%) 1111.907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.375, 667.139), stdev = 288.759
[info]   CI (99.9%): [≈ 0, 1614.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11045.947 ±(99.9%) 24448.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11045.947, 14666.783), stdev = 6349.234
[info]   CI (99.9%): [≈ 0, 35494.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 1.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 0.915), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.59% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21037.583 ops/s
[info] # Warmup Iteration   2: 66093.839 ops/s
[info] # Warmup Iteration   3: 76111.646 ops/s
[info] # Warmup Iteration   4: 76875.104 ops/s
[info] # Warmup Iteration   5: 75835.848 ops/s
[info] Iteration   1: 77308.695 ops/s
[info]                  ·gc.alloc.rate:      20.964 MB/sec
[info]                  ·gc.alloc.rate.norm: 426.708 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77020.783 ops/s
[info]                  ·gc.alloc.rate:      20.753 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 77198.279 ops/s
[info]                  ·gc.alloc.rate:      20.858 MB/sec
[info]                  ·gc.alloc.rate.norm: 425.138 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77170.278 ops/s
[info]                  ·gc.alloc.rate:      20.794 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77189.683 ops/s
[info]                  ·gc.alloc.rate:      20.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   77177.544 ±(99.9%) 396.469 ops/s [Average]
[info]   (min, avg, max) = (77020.783, 77177.544, 77308.695), stdev = 102.962
[info]   CI (99.9%): [76781.074, 77574.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   20.833 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (20.753, 20.833, 20.964), stdev = 0.082
[info]   CI (99.9%): [20.517, 21.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   424.772 ±(99.9%) 4.574 B/op [Average]
[info]   (min, avg, max) = (424.006, 424.772, 426.708), stdev = 1.188
[info]   CI (99.9%): [420.199, 429.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.79% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65906.162 ops/s
[info] # Warmup Iteration   2: 291291.389 ops/s
[info] # Warmup Iteration   3: 303751.177 ops/s
[info] # Warmup Iteration   4: 310823.051 ops/s
[info] # Warmup Iteration   5: 312097.593 ops/s
[info] Iteration   1: 311067.671 ops/s
[info]                  ·gc.alloc.rate:                   1844.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              9331.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10194.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 312220.085 ops/s
[info]                  ·gc.alloc.rate:                   1863.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10153.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 312269.932 ops/s
[info]                  ·gc.alloc.rate:               1858.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          9368.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6751.339 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 311697.079 ops/s
[info]                  ·gc.alloc.rate:                   1870.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              9443.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10141.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 313238.623 ops/s
[info]                  ·gc.alloc.rate:               1894.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          9520.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10093.982 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   312098.678 ±(99.9%) 3085.204 ops/s [Average]
[info]   (min, avg, max) = (311067.671, 312098.678, 313238.623), stdev = 801.218
[info]   CI (99.9%): [309013.473, 315183.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1866.434 ±(99.9%) 71.463 MB/sec [Average]
[info]   (min, avg, max) = (1844.452, 1866.434, 1894.931), stdev = 18.559
[info]   CI (99.9%): [1794.971, 1937.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9411.295 ±(99.9%) 282.607 B/op [Average]
[info]   (min, avg, max) = (9331.301, 9411.295, 9520.298), stdev = 73.392
[info]   CI (99.9%): [9128.688, 9693.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.350 ±(99.9%) 1157.608 MB/sec [Average]
[info]   (min, avg, max) = (1339.598, 1877.350, 2015.039), stdev = 300.627
[info]   CI (99.9%): [719.742, 3034.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9466.878 ±(99.9%) 5847.027 B/op [Average]
[info]   (min, avg, max) = (6751.339, 9466.878, 10194.320), stdev = 1518.454
[info]   CI (99.9%): [3619.851, 15313.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.601), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 6.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.736 ±(99.9%) 31.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.736, 18.153), stdev = 8.060
[info]   CI (99.9%): [≈ 0, 34.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97.99% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108554.672 ops/s
[info] # Warmup Iteration   2: 435127.336 ops/s
[info] # Warmup Iteration   3: 473424.759 ops/s
[info] # Warmup Iteration   4: 469667.325 ops/s
[info] # Warmup Iteration   5: 474737.214 ops/s
[info] Iteration   1: 477888.974 ops/s
[info]                  ·gc.alloc.rate:      541.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 1784.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 474045.732 ops/s
[info]                  ·gc.alloc.rate:               552.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          1834.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2208.197 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 466720.141 ops/s
[info]                  ·gc.alloc.rate:               542.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          1830.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2242.908 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 464433.875 ops/s
[info]                  ·gc.alloc.rate:               550.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          1863.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2257.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 465294.396 ops/s
[info]                  ·gc.alloc.rate:               544.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2253.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   469676.624 ±(99.9%) 22939.864 ops/s [Average]
[info]   (min, avg, max) = (464433.875, 469676.624, 477888.974), stdev = 5957.410
[info]   CI (99.9%): [446736.760, 492616.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   546.305 ±(99.9%) 18.341 MB/sec [Average]
[info]   (min, avg, max) = (541.751, 546.305, 552.657), stdev = 4.763
[info]   CI (99.9%): [527.964, 564.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1830.516 ±(99.9%) 111.360 B/op [Average]
[info]   (min, avg, max) = (1784.001, 1830.516, 1863.167), stdev = 28.920
[info]   CI (99.9%): [1719.156, 1941.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.621 ±(99.9%) 1146.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.621, 666.374), stdev = 297.745
[info]   CI (99.9%): [≈ 0, 1679.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1792.337 ±(99.9%) 3858.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1792.337, 2257.357), stdev = 1002.133
[info]   CI (99.9%): [≈ 0, 5651.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.19% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707800.854 ops/s
[info] # Warmup Iteration   2: 1203932.387 ops/s
[info] # Warmup Iteration   3: 1270264.728 ops/s
[info] # Warmup Iteration   4: 1254490.432 ops/s
[info] # Warmup Iteration   5: 1267812.003 ops/s
[info] Iteration   1: 1263541.027 ops/s
[info]                  ·gc.alloc.rate:                   681.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1266272.735 ops/s
[info]                  ·gc.alloc.rate:               684.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          851.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 834.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1264916.848 ops/s
[info]                  ·gc.alloc.rate:                   681.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1268445.245 ops/s
[info]                  ·gc.alloc.rate:               681.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833.953 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1260104.514 ops/s
[info]                  ·gc.alloc.rate:               676.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 839.470 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1264656.074 ±(99.9%) 12023.545 ops/s [Average]
[info]   (min, avg, max) = (1260104.514, 1264656.074, 1268445.245), stdev = 3122.477
[info]   CI (99.9%): [1252632.528, 1276679.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   681.112 ±(99.9%) 11.267 MB/sec [Average]
[info]   (min, avg, max) = (676.649, 681.112, 684.843), stdev = 2.926
[info]   CI (99.9%): [669.845, 692.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   847.502 ±(99.9%) 9.958 B/op [Average]
[info]   (min, avg, max) = (845.034, 847.502, 851.015), stdev = 2.586
[info]   CI (99.9%): [837.544, 857.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.768 ±(99.9%) 1.736 MB/sec [Average]
[info]   (min, avg, max) = (671.265, 671.768, 672.290), stdev = 0.451
[info]   CI (99.9%): [670.031, 673.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   835.880 ±(99.9%) 8.285 B/op [Average]
[info]   (min, avg, max) = (833.953, 835.880, 839.470), stdev = 2.152
[info]   CI (99.9%): [827.595, 844.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.052), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13495.094 ops/s
[info] # Warmup Iteration   2: 89430.582 ops/s
[info] # Warmup Iteration   3: 103010.426 ops/s
[info] # Warmup Iteration   4: 102954.992 ops/s
[info] # Warmup Iteration   5: 104095.684 ops/s
[info] Iteration   1: 104048.550 ops/s
[info]                  ·gc.alloc.rate:               3328.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          50344.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3338.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50488.746 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 104933.198 ops/s
[info]                  ·gc.alloc.rate:                   3371.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              50561.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50180.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104298.920 ops/s
[info]                  ·gc.alloc.rate:                   3365.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              50778.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50674.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 104507.371 ops/s
[info]                  ·gc.alloc.rate:                   3360.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              50599.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50777.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.881 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 103475.817 ops/s
[info]                  ·gc.alloc.rate:                   3301.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              50204.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41134.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   104252.771 ±(99.9%) 2087.262 ops/s [Average]
[info]   (min, avg, max) = (103475.817, 104252.771, 104933.198), stdev = 542.055
[info]   CI (99.9%): [102165.509, 106340.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3345.598 ±(99.9%) 113.612 MB/sec [Average]
[info]   (min, avg, max) = (3301.920, 3345.598, 3371.534), stdev = 29.505
[info]   CI (99.9%): [3231.986, 3459.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50497.887 ±(99.9%) 866.460 B/op [Average]
[info]   (min, avg, max) = (50204.950, 50497.887, 50778.802), stdev = 225.017
[info]   CI (99.9%): [49631.427, 51364.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3224.090 ±(99.9%) 1117.687 MB/sec [Average]
[info]   (min, avg, max) = (2705.370, 3224.090, 3372.184), stdev = 290.260
[info]   CI (99.9%): [2106.403, 4341.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48651.116 ±(99.9%) 16203.608 B/op [Average]
[info]   (min, avg, max) = (41134.534, 48651.116, 50777.673), stdev = 4208.025
[info]   CI (99.9%): [32447.508, 64854.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.565 ±(99.9%) 2.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.565, 1.881), stdev = 0.748
[info]   CI (99.9%): [≈ 0, 3.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201818.671 ops/s
[info] # Warmup Iteration   2: 570241.667 ops/s
[info] # Warmup Iteration   3: 616771.898 ops/s
[info] # Warmup Iteration   4: 619209.268 ops/s
[info] # Warmup Iteration   5: 620424.162 ops/s
[info] Iteration   1: 615076.939 ops/s
[info]                  ·gc.alloc.rate:               1834.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          4693.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3442.950 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 620967.320 ops/s
[info]                  ·gc.alloc.rate:                   1861.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              4718.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5112.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 621501.636 ops/s
[info]                  ·gc.alloc.rate:               1886.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          4777.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5097.495 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 624570.514 ops/s
[info]                  ·gc.alloc.rate:               1856.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          4676.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3380.473 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 623358.099 ops/s
[info]                  ·gc.alloc.rate:                   1892.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5082.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   621094.902 ±(99.9%) 14095.609 ops/s [Average]
[info]   (min, avg, max) = (615076.939, 621094.902, 624570.514), stdev = 3660.585
[info]   CI (99.9%): [606999.293, 635190.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1866.205 ±(99.9%) 90.543 MB/sec [Average]
[info]   (min, avg, max) = (1834.442, 1866.205, 1892.047), stdev = 23.514
[info]   CI (99.9%): [1775.662, 1956.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4728.575 ±(99.9%) 179.587 B/op [Average]
[info]   (min, avg, max) = (4676.623, 4728.575, 4777.034), stdev = 46.638
[info]   CI (99.9%): [4548.988, 4908.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1746.112 ±(99.9%) 1414.764 MB/sec [Average]
[info]   (min, avg, max) = (1341.646, 1746.112, 2017.129), stdev = 367.410
[info]   CI (99.9%): [331.348, 3160.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4423.072 ±(99.9%) 3556.323 B/op [Average]
[info]   (min, avg, max) = (3380.473, 4423.072, 5112.073), stdev = 923.566
[info]   CI (99.9%): [866.749, 7979.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 5.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 3.227), stdev = 1.441
[info]   CI (99.9%): [≈ 0, 6.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.646 ±(99.9%) 14.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.646, 8.178), stdev = 3.651
[info]   CI (99.9%): [≈ 0, 15.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.80% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129189.210 ops/s
[info] # Warmup Iteration   2: 289845.327 ops/s
[info] # Warmup Iteration   3: 336675.699 ops/s
[info] # Warmup Iteration   4: 339605.464 ops/s
[info] # Warmup Iteration   5: 339117.396 ops/s
[info] Iteration   1: 333640.321 ops/s
[info]                  ·gc.alloc.rate:               1170.460 MB/sec
[info]                  ·gc.alloc.rate.norm:          5520.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6323.632 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 339643.950 ops/s
[info]                  ·gc.alloc.rate:               1193.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          5528.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6214.993 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 337978.612 ops/s
[info]                  ·gc.alloc.rate:                   1176.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              5476.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6250.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 330506.130 ops/s
[info]                  ·gc.alloc.rate:               1136.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          5409.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3197.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 335535.545 ops/s
[info]                  ·gc.alloc.rate:                   1192.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              5591.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6302.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   335460.912 ±(99.9%) 13844.471 ops/s [Average]
[info]   (min, avg, max) = (330506.130, 335460.912, 339643.950), stdev = 3595.365
[info]   CI (99.9%): [321616.441, 349305.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1173.565 ±(99.9%) 89.246 MB/sec [Average]
[info]   (min, avg, max) = (1136.048, 1173.565, 1193.065), stdev = 23.177
[info]   CI (99.9%): [1084.319, 1262.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5505.068 ±(99.9%) 260.084 B/op [Average]
[info]   (min, avg, max) = (5409.144, 5505.068, 5591.305), stdev = 67.543
[info]   CI (99.9%): [5244.985, 5765.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.942 ±(99.9%) 1154.598 MB/sec [Average]
[info]   (min, avg, max) = (671.566, 1207.942, 1343.729), stdev = 299.845
[info]   CI (99.9%): [53.344, 2362.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5657.774 ±(99.9%) 5298.321 B/op [Average]
[info]   (min, avg, max) = (3197.574, 5657.774, 6323.632), stdev = 1375.957
[info]   CI (99.9%): [359.454, 10956.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.373), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.183 ±(99.9%) 27.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.183, 15.818), stdev = 7.063
[info]   CI (99.9%): [≈ 0, 30.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229820.275 ops/s
[info] # Warmup Iteration   2: 717962.100 ops/s
[info] # Warmup Iteration   3: 719334.801 ops/s
[info] # Warmup Iteration   4: 748827.632 ops/s
[info] # Warmup Iteration   5: 726188.363 ops/s
[info] Iteration   1: 746568.651 ops/s
[info]                  ·gc.alloc.rate:               587.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          1237.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1404.243 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 754491.175 ops/s
[info]                  ·gc.alloc.rate:      577.070 MB/sec
[info]                  ·gc.alloc.rate.norm: 1203.653 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 758230.233 ops/s
[info]                  ·gc.alloc.rate:               599.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1382.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 758517.219 ops/s
[info]                  ·gc.alloc.rate:                   601.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1247.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1383.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 734847.539 ops/s
[info]                  ·gc.alloc.rate:               579.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          1241.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1428.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   750530.963 ±(99.9%) 38526.266 ops/s [Average]
[info]   (min, avg, max) = (734847.539, 750530.963, 758517.219), stdev = 10005.149
[info]   CI (99.9%): [712004.698, 789057.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   588.915 ±(99.9%) 42.514 MB/sec [Average]
[info]   (min, avg, max) = (577.070, 588.915, 601.154), stdev = 11.041
[info]   CI (99.9%): [546.401, 631.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1234.857 ±(99.9%) 68.553 B/op [Average]
[info]   (min, avg, max) = (1203.653, 1234.857, 1247.236), stdev = 17.803
[info]   CI (99.9%): [1166.305, 1303.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.206 ±(99.9%) 1147.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.206, 666.885), stdev = 298.072
[info]   CI (99.9%): [≈ 0, 1680.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1119.699 ±(99.9%) 2411.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1119.699, 1428.164), stdev = 626.208
[info]   CI (99.9%): [≈ 0, 3531.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729116.899 ops/s
[info] # Warmup Iteration   2: 1413547.387 ops/s
[info] # Warmup Iteration   3: 1602800.607 ops/s
[info] # Warmup Iteration   4: 1595974.617 ops/s
[info] # Warmup Iteration   5: 1598687.609 ops/s
[info] Iteration   1: 1582742.995 ops/s
[info]                  ·gc.alloc.rate:                   757.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1585689.281 ops/s
[info]                  ·gc.alloc.rate:               756.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 666.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1571794.149 ops/s
[info]                  ·gc.alloc.rate:               746.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 671.973 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1555475.140 ops/s
[info]                  ·gc.alloc.rate:               737.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 679.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1601316.608 ops/s
[info]                  ·gc.alloc.rate:                   757.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1579403.634 ±(99.9%) 65611.295 ops/s [Average]
[info]   (min, avg, max) = (1555475.140, 1579403.634, 1601316.608), stdev = 17039.045
[info]   CI (99.9%): [1513792.340, 1645014.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   750.987 ±(99.9%) 33.503 MB/sec [Average]
[info]   (min, avg, max) = (737.496, 750.987, 757.105), stdev = 8.701
[info]   CI (99.9%): [717.483, 784.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.252 ±(99.9%) 13.411 B/op [Average]
[info]   (min, avg, max) = (744.076, 748.252, 752.742), stdev = 3.483
[info]   CI (99.9%): [734.842, 761.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.196 ±(99.9%) 1.589 MB/sec [Average]
[info]   (min, avg, max) = (670.504, 671.196, 671.509), stdev = 0.413
[info]   CI (99.9%): [669.608, 672.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   668.815 ±(99.9%) 28.021 B/op [Average]
[info]   (min, avg, max) = (659.953, 668.815, 679.368), stdev = 7.277
[info]   CI (99.9%): [640.794, 696.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1075092.031 ops/s
[info] # Warmup Iteration   2: 1551083.796 ops/s
[info] # Warmup Iteration   3: 1737621.245 ops/s
[info] # Warmup Iteration   4: 1734546.199 ops/s
[info] # Warmup Iteration   5: 1737859.623 ops/s
[info] Iteration   1: 1739761.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1742508.227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1739289.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1740008.591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1739065.397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1740126.673 ±(99.9%) 5323.743 ops/s [Average]
[info]   (min, avg, max) = (1739065.397, 1740126.673, 1742508.227), stdev = 1382.559
[info]   CI (99.9%): [1734802.930, 1745450.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129146.836 ops/s
[info] # Warmup Iteration   2: 424524.008 ops/s
[info] # Warmup Iteration   3: 450034.983 ops/s
[info] # Warmup Iteration   4: 460797.915 ops/s
[info] # Warmup Iteration   5: 460459.507 ops/s
[info] Iteration   1: 454362.078 ops/s
[info]                  ·gc.alloc.rate:                   708.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              2451.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4612.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 460974.129 ops/s
[info]                  ·gc.alloc.rate:               710.046 MB/sec
[info]                  ·gc.alloc.rate.norm:          2423.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2283.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 460775.066 ops/s
[info]                  ·gc.alloc.rate:               701.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          2397.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2284.430 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 457004.549 ops/s
[info]                  ·gc.alloc.rate:               694.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          2392.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2305.420 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 459734.870 ops/s
[info]                  ·gc.alloc.rate:               698.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          2390.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2291.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   458570.138 ±(99.9%) 10917.836 ops/s [Average]
[info]   (min, avg, max) = (454362.078, 458570.138, 460974.129), stdev = 2835.327
[info]   CI (99.9%): [447652.302, 469487.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   702.750 ±(99.9%) 24.993 MB/sec [Average]
[info]   (min, avg, max) = (694.899, 702.750, 710.046), stdev = 6.491
[info]   CI (99.9%): [677.757, 727.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2411.209 ±(99.9%) 100.132 B/op [Average]
[info]   (min, avg, max) = (2390.774, 2411.209, 2451.188), stdev = 26.004
[info]   CI (99.9%): [2311.077, 2511.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   801.998 ±(99.9%) 1143.613 MB/sec [Average]
[info]   (min, avg, max) = (668.823, 801.998, 1333.274), stdev = 296.993
[info]   CI (99.9%): [≈ 0, 1945.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2755.498 ±(99.9%) 3997.069 B/op [Average]
[info]   (min, avg, max) = (2283.493, 2755.498, 4612.309), stdev = 1038.026
[info]   CI (99.9%): [≈ 0, 6752.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99.80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60715.814 ops/s
[info] # Warmup Iteration   2: 132240.221 ops/s
[info] # Warmup Iteration   3: 142243.895 ops/s
[info] # Warmup Iteration   4: 140355.660 ops/s
[info] # Warmup Iteration   5: 143482.678 ops/s
[info] Iteration   1: 143680.761 ops/s
[info]                  ·gc.alloc.rate:               1560.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          17089.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14724.895 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 143307.510 ops/s
[info]                  ·gc.alloc.rate:                   1567.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              17214.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22165.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 143896.094 ops/s
[info]                  ·gc.alloc.rate:                   1572.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              17195.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14702.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 143962.497 ops/s
[info]                  ·gc.alloc.rate:                   1584.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              17326.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14666.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 143767.431 ops/s
[info]                  ·gc.alloc.rate:                   1597.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              17482.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22006.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   143722.859 ±(99.9%) 988.705 ops/s [Average]
[info]   (min, avg, max) = (143307.510, 143722.859, 143962.497), stdev = 256.764
[info]   CI (99.9%): [142734.153, 144711.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1576.366 ±(99.9%) 56.295 MB/sec [Average]
[info]   (min, avg, max) = (1560.165, 1576.366, 1597.060), stdev = 14.620
[info]   CI (99.9%): [1520.070, 1632.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17261.542 ±(99.9%) 574.876 B/op [Average]
[info]   (min, avg, max) = (17089.225, 17261.542, 17482.250), stdev = 149.294
[info]   CI (99.9%): [16686.666, 17836.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1611.778 ±(99.9%) 1415.249 MB/sec [Average]
[info]   (min, avg, max) = (1341.522, 1611.778, 2018.406), stdev = 367.536
[info]   CI (99.9%): [196.529, 3027.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17653.159 ±(99.9%) 15583.580 B/op [Average]
[info]   (min, avg, max) = (14666.926, 17653.159, 22165.533), stdev = 4047.006
[info]   CI (99.9%): [2069.579, 33236.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 4.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 2.685), stdev = 1.145
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7.810 ±(99.9%) 48.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.810, 29.490), stdev = 12.578
[info]   CI (99.9%): [≈ 0, 56.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # Run complete. Total time: 02:13:45
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    831377.397 ±   31295.153   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2405.718 ±     157.537  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4553.284 ±     172.848    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2275.983 ±    1405.416  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4304.748 ±    2551.733    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.779 ±       6.524  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.497 ±      12.548    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1881704.897 ±  133903.268   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1247.660 ±      86.899  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1043.480 ±      22.039    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.686 ±    1150.574  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1004.917 ±     949.745    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.862 ±       7.241  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.711 ±       5.969    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        31.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   6034349.764 ±  436626.784   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       415.303 ±      33.900  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       108.337 ±      11.191    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       473.252 ±    1064.199  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       124.047 ±     280.855    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    311467.654 ±   16012.729   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2749.064 ±     156.616  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13889.809 ±     264.563    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2559.217 ±    1150.021  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     12926.593 ±    5643.395    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.029 ±       0.209  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.145 ±       1.033    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        19.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    915452.840 ±   27818.792   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2460.541 ±     106.773  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4229.291 ±      81.518    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2411.427 ±    1420.394  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4144.325 ±    2420.015    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.783 ±       6.563  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.353 ±      11.341    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2814187.028 ±  242174.115   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1205.075 ±     100.959  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       673.916 ±      22.767    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1204.406 ±    1152.896  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       673.649 ±     646.592    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.770 ±       6.565  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.438 ±       3.735    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        33.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14383701.516 ± 2543951.627   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       760.783 ±      69.299  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        83.309 ±       7.766    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       805.571 ±    1154.018  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        88.368 ±     128.699    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.008    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17179147.374 ±  176128.898   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.229 ±       1.969  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.021 ±       0.180    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    477341.530 ±   29027.656   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1466.701 ±      88.857  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4835.230 ±     110.175    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      1472.012 ±    1148.123  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4848.824 ±    3647.340    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.319 ±       2.565  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         1.063 ±       8.572    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        11.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        20.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2038829.814 ±   71691.852   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2946.726 ±      79.907  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2274.114 ±      30.737    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2819.995 ±    1143.392  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2177.858 ±     958.388    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.054 ±       0.122  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.042 ±       0.093    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5   9818987.952 ±  416061.974   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1234.243 ±      64.386  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       197.799 ±       4.340    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1202.208 ±    1150.982  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       192.565 ±     183.109    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.886 ±       7.404  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.141 ±       1.179    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3265664.184 ±   17128.998   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2043.847 ±      43.840  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       984.937 ±      21.201    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2003.616 ±      10.535  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       965.549 ±       2.799    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.831 ±       7.062  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.399 ±       3.396    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13271852.262 ± 1175696.410   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1739.058 ±     179.373  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.193 ±       7.730    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1614.500 ±    1418.744  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       191.734 ±     173.971    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.616 ±       5.216  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.074 ±       0.630    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        21.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1177916.833 ±   88239.460   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2632.976 ±     129.375  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3518.041 ±     124.725    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2556.038 ±    1166.901  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3419.742 ±    1704.827    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.233 ±       1.049  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.313 ±       1.430    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2487979.757 ±   44788.552   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2200.386 ±      46.189  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1391.744 ±      13.630    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2147.517 ±    1127.753  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1358.875 ±     736.216    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.005 ±       0.028    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  19424467.120 ± 1786548.480   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       606.516 ±      34.063  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.148 ±       2.815    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       532.444 ±    1146.127  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        43.363 ±      93.453    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.012 ±       0.059  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        12.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6148588.303 ±  287702.535   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1742.019 ±      50.802  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445.883 ±      12.818    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1737.560 ±    1409.131  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       445.314 ±     372.476    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.764 ±       6.114  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.192 ±       1.532    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  27370559.519 ± 2840451.533   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       861.843 ±     124.086  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.540 ±       3.407    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       940.180 ±    1416.816  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        53.898 ±      78.995    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.021 ±       0.080  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        19.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34410177.882 ± 1197590.857   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1786307.742 ±  102358.977   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2805.473 ±     170.269  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2471.658 ±      41.500    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2674.904 ±      40.689  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2357.091 ±     152.174    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.011 ±       0.039    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    311506.360 ±    4138.502   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1914.641 ±      59.146  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9672.159 ±     291.830    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1877.471 ±    1148.691  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9485.608 ±    5832.329    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.712 ±       6.041  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.612 ±      30.650    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    509345.852 ±   11467.056   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       662.916 ±      11.142  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2048.100 ±      35.472    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.087 ±       3.271  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2054.842 ±      52.582    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.891 ±       7.672  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.770 ±      23.849    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        10.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1286852.393 ±   88225.350   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       882.897 ±      47.454  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1079.700 ±      33.783    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       806.439 ±    1157.175  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       984.586 ±    1381.729    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    113768.955 ±    2507.849   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3611.383 ±     125.837  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     49951.066 ±    1307.212    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3364.358 ±      69.864  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     46534.883 ±     866.937    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.231 ±       1.447    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        25.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                          128  thrpt    5    541613.694 ±   30128.650   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1706.070 ±      88.311  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4957.153 ±     167.512    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612.482 ±    1418.002  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4692.565 ±    4283.409    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.625 ±       5.333  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.859 ±      15.877    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    350340.516 ±   11790.291   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1205.418 ±      41.817  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5414.924 ±     173.592    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1074.120 ±    1415.969  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4833.805 ±    6467.203    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.674 ±       5.116  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.023 ±      22.938    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    888326.919 ±   84087.634   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       659.174 ±      61.539  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1167.792 ±      29.655    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666.434 ±       2.573  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1181.173 ±     107.426    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.015 ±       0.077    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2544021.066 ±  151995.315   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1206.974 ±      79.289  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       746.597 ±      13.206    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1210.476 ±    1157.327  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       748.830 ±     716.728    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.583 ±       4.212  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.369 ±       2.677    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2860822.827 ±   15490.116   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.310 ±       2.266  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.171 ±       1.249    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    460610.355 ±    2538.820   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       682.539 ±      20.386  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2331.929 ±      64.953    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.716 ±       2.031  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2284.710 ±       7.610    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.028 ±       0.150    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                         128  thrpt    5    143557.853 ±    1967.635   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5      1571.110 ±      46.971  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5     17221.387 ±     615.495    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1477.560 ±    1162.978  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16204.670 ±   13011.452    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.724 ±       4.828  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         7.975 ±      53.243    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17174.947 ±    1715.019   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1379.888 ±      88.220  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126462.237 ±    5630.369    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.710 ±       5.294  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    123097.246 ±   12735.770    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.741 ±       4.814  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        68.005 ±     444.881    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     36034.227 ±    1584.085   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       993.425 ±      70.402  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43381.011 ±    1850.733    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       936.501 ±    1408.649  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     40905.201 ±   61616.735    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.732 ±       2.960    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     40584.520 ±    2151.162   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       624.873 ±      41.772  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     24226.235 ±     546.339    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671.246 ±       2.262  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     26028.641 ±    1297.977    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.804 ±       4.387    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        14.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30023.236 ±    1690.491   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1519.520 ±      91.580  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79644.046 ±     947.116    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1469.915 ±    1158.123  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     77211.869 ±   65358.551    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.924 ±       7.600  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        49.464 ±     407.209    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24742.957 ±    1040.431   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1797.233 ±      76.432  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    114285.060 ±    3023.595    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1742.068 ±    1410.023  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    110799.367 ±   90085.200    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       6.222  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        48.366 ±     399.369    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24702.656 ±    1360.140   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1576.646 ±     124.414  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    100428.177 ±    3535.153    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1470.224 ±    1156.140  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     93666.038 ±   73684.934    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.833 ±       6.903  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        53.053 ±     439.485    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27836.995 ±     351.434   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1652.296 ±      53.494  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93406.660 ±    2310.539    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1612.596 ±    1414.556  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     91142.209 ±   79475.923    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.695 ±       3.573  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        39.272 ±     201.933    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27460.124 ±    1027.789   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1572.545 ±      74.038  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     90119.988 ±    3245.718    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478.399 ±    1163.026  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     84816.303 ±   69281.944    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.687 ±       4.250  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        39.607 ±     246.274    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7781.690 ±     343.492   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1161.866 ±      45.085  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234956.591 ±    6120.962    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1206.731 ±    1155.167  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    244083.372 ±  234397.411    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.795 ±       6.759  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       159.365 ±    1353.928    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17955.586 ±    1320.088   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1652.103 ±     106.012  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144796.195 ±    3694.227    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.314 ±    1413.975  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    141080.998 ±  124373.587    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.787 ±       4.449  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        70.029 ±     399.931    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     42788.659 ±    2245.297   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1211.983 ±      75.484  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44569.594 ±     778.192    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.649 ±    1153.582  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     44227.092 ±   40920.462    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.837 ±       5.168  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        30.522 ±     188.507    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     60913.813 ±     384.346   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       810.762 ±      32.142  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20946.061 ±     713.177    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       806.087 ±    1156.136  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20818.176 ±   29726.774    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.753 ±       3.470    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     32981.968 ±     613.291   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2176.534 ±      42.660  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    103845.705 ±    2160.106    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2151.296 ±    1137.719  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    102674.382 ±   55627.380    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.212 ±       1.250  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        10.165 ±      59.964    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27229.800 ±     551.721   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1754.243 ±      69.839  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101377.254 ±    3417.080    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1739.579 ±    1408.704  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100515.562 ±   81086.398    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.762 ±       6.426  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        44.214 ±     372.936    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34719.929 ±     496.811   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1564.129 ±      30.987  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     70889.694 ±    1158.280    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1478.644 ±    1163.240  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67018.624 ±   52808.562    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.666 ±       4.013  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        30.177 ±     181.922    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34264.507 ±     799.567   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1492.570 ±      52.714  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68545.862 ±    2960.825    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1479.516 ±    1153.155  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     67993.564 ±   54399.510    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.620 ±       5.073  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        28.329 ±     231.569    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    339091.199 ±    9021.869   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1924.081 ±      58.453  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8928.523 ±     205.503    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1743.381 ±    1410.545  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8092.280 ±    6592.174    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.712 ±       6.086  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.294 ±      28.150    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1492002.302 ±  122169.665   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       481.029 ±      52.561  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       507.402 ±      42.031    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.833 ±    1405.469  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       423.318 ±    1488.587    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    896519.151 ±  280545.211   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       710.637 ±     213.631  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1247.723 ±      25.186    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.309 ±       2.084  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1178.264 ±     408.495    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.014 ±       0.075    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1878331.885 ±   39183.012   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       374.373 ±      38.423  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       313.694 ±      38.616    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.849 ±    1217.120  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       284.906 ±    1024.673    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.014 ±       0.074    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    101478.582 ±    4511.897   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3410.996 ±     128.935  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52896.029 ±     951.404    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3223.780 ±    1158.187  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     49987.296 ±   17676.140    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.196 ±       1.126    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                                128  thrpt    5    684760.569 ±   24611.500   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1845.940 ±      94.883  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      4242.404 ±      98.194    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1880.796 ±    1159.096  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4317.921 ±    2546.834    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.670 ±       5.194  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.542 ±      11.943    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    353754.760 ±   15786.608   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1213.020 ±      65.407  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5395.917 ±      90.735    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1073.682 ±    1415.532  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4773.508 ±    6263.893    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.687 ±       5.395  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.079 ±      24.186    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1658802.599 ±  169258.016   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       788.506 ±     107.080  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       747.849 ±      35.783    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       799.476 ±    1145.965  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       754.588 ±    1007.245    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.019 ±       0.107  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.018 ±       0.099    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1016036.978 ±  115266.988   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       738.818 ±      77.245  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1144.387 ±      24.011    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.650 ±       2.129  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1036.369 ±     120.080    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.033 ±       0.217    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2780697.359 ±   66899.499   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1319.953 ±      25.397  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       746.787 ±      10.661    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1210.701 ±    1156.367  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       685.413 ±     659.947    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.557 ±       3.968  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.314 ±       2.234    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3233362.913 ±   62293.843   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.658 ±       5.488  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.323 ±       2.695    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    491001.647 ±   40760.412   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       579.118 ±      46.243  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1856.350 ±     107.138    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.798 ±    1151.194  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1720.665 ±    3707.844    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.027 ±       0.235    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                               128  thrpt    5    144423.192 ±    1483.302   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1579.526 ±      34.131  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     17211.420 ±     506.999    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1478.214 ±    1163.521  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     16113.566 ±   12865.120    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.683 ±       4.930  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         7.466 ±      53.954    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    155206.145 ±    6246.851   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1974.651 ±      65.686  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     20021.912 ±     311.602    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2011.770 ±      13.908  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     20399.538 ±     785.084    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.754 ±       4.702  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.579 ±      46.974    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    452510.249 ±    6661.964   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       374.094 ±      36.696  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1301.006 ±     140.077    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.968 ±    1212.687  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1178.038 ±    4224.644    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.029 ±       0.251    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1243778.848 ±   81528.816   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       246.105 ±      24.471  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       311.478 ±      41.434    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       204.644 ±    1079.028  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       262.379 ±    1383.446    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.011 ±       0.092    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     83423.396 ±    2092.817   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3342.340 ±     163.169  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63044.941 ±    1777.070    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3220.875 ±    1137.400  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60765.939 ±   21887.249    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.046 ±       0.351  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.872 ±       6.692    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        24.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                   128  thrpt    5    298500.324 ±   13382.356   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1398.708 ±      74.865  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7373.109 ±     300.078    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344.540 ±       4.619  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      7088.178 ±     314.699    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.654 ±       4.817  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.472 ±      25.664    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    306339.130 ±    7189.294   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1726.814 ±      68.083  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8870.186 ±     176.984    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1609.204 ±    1416.025  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8263.445 ±    7207.680    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.720 ±       5.584  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.702 ±      28.695    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1936765.771 ±   39204.987   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1023.406 ±      44.397  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       831.565 ±      37.053    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.303 ±    1410.501  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       870.372 ±    1154.791    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.017 ±       0.092    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2813402.768 ±   81574.985   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       779.967 ±      46.067  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       436.253 ±      22.502    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806.396 ±    1157.506  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       451.084 ±     648.093    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.002 ±       0.020    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3048435.794 ±   26941.316   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         1.514 ±      13.030  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.781 ±       6.724    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     47578.644 ±    2473.937   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2160.533 ±     170.797  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71450.198 ±    2435.247    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2141.354 ±    1155.992  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     70779.551 ±   36274.299    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.853 ±       6.947  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        28.206 ±     229.542    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                  128  thrpt    5    114725.249 ±    3400.454   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1864.421 ±      63.074  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     25574.332 ±    1079.834    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1745.228 ±    1413.312  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23957.105 ±   19769.588    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.733 ±       5.608  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        10.062 ±      76.923    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    242789.315 ±    9821.488   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2669.016 ±     123.067  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17297.917 ±     335.495    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2549.654 ±    1148.738  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16515.529 ±    7111.146    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.050 ±       0.303  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.321 ±       1.948    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    378938.548 ±   27681.428   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1959.173 ±     164.383  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8135.989 ±     205.415    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1871.440 ±    1145.962  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7757.678 ±    4378.689    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.816 ±       6.803  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.348 ±      27.896    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2279148.157 ±   66418.264   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       810.335 ±      30.788  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       559.544 ±      24.122    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       805.940 ±    1156.023  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       556.355 ±     795.267    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.009 ±       0.030    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     89399.192 ±    1163.010   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3532.642 ±      47.031  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62187.730 ±     861.701    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3381.519 ±      50.121  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     59527.979 ±    1461.379    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.073 ±       0.631    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        36.000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                   128  thrpt    5    422418.244 ±   18379.137   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2050.697 ±     133.444  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7639.294 ±     204.283    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1880.545 ±    1150.679  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      7000.123 ±    4143.661    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.679 ±       4.534  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         2.552 ±      17.120    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    265452.970 ±   10452.105   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2157.395 ±     107.236  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12788.945 ±     166.982    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2144.824 ±    1144.956  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12712.624 ±    6675.175    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.720 ±       6.157  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.263 ±      36.437    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1503572.513 ±   25993.501   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       901.050 ±      31.525  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       943.094 ±      30.069    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.877 ±    1152.673  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       840.537 ±    1210.163    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.013 ±       0.075    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2797130.751 ±  132343.666   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       985.710 ±      53.539  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       554.562 ±      13.717    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1075.498 ±    1417.790  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       605.582 ±     803.665    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.021 ±       0.001  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.012 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3169718.151 ±   16143.274   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.018 ±       0.155  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.009 ±       0.077    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    394159.865 ±   21794.254   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2544.790 ±      84.395  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10160.984 ±     236.106    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2541.431 ±    1159.644  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10155.167 ±    4887.078    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.087 ±       0.579  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.346 ±       2.284    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                  128  thrpt    5     85237.909 ±    1836.161   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1569.317 ±      62.848  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     28972.848 ±     989.334    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1612.173 ±    1414.574  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     29782.798 ±   26536.792    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.737 ±       4.280  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        13.676 ±      79.723    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     25866.264 ±    1392.309   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1660.977 ±     103.517  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101045.111 ±    2728.398    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.642 ±    1411.961  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     97873.346 ±   84588.690    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.775 ±       4.932  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        47.401 ±     302.370    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     99312.048 ±    3452.677   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       961.125 ±      68.453  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15228.868 ±     641.700    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       933.342 ±    1403.796  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14761.644 ±   21841.518    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.015 ±       0.100  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.239 ±       1.568    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     67563.371 ±    3327.713   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1212.284 ±      58.862  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28236.941 ±     998.506    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.424 ±    1154.280  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     28082.440 ±   26965.847    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.833 ±       5.405  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.410 ±     126.267    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    136920.951 ±    1787.369   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       947.139 ±      41.840  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10886.399 ±     539.894    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940.906 ±    1418.120  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10817.140 ±   16335.014    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.144 ±       0.505    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     36105.089 ±    1798.240   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1803.661 ±     108.609  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78613.368 ±    1415.990    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1736.163 ±    1404.964  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     75602.845 ±   59601.015    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.895 ±       7.663  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        39.019 ±     334.030    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                                 128  thrpt    5     69274.320 ±    3812.905   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1356.598 ±      64.353  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30818.207 ±     829.542    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1344.020 ±       5.629  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30536.026 ±    1624.419    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.695 ±       4.549  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        15.619 ±     102.183    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     31611.914 ±     297.857   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       517.807 ±      27.697  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25778.137 ±    1532.092    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       503.744 ±    1115.666  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     25098.693 ±   55575.718    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.623 ±       5.364    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32338.287 ±     556.186   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       403.889 ±      27.277  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19656.613 ±    1598.164    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       369.178 ±    1320.545  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18012.891 ±   64407.004    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.203 ±       1.747    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     33819.084 ±     309.022   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       416.328 ±      37.421  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19373.198 ±    1885.306    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.656 ±    1326.715  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     17276.875 ±   61835.940    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.388 ±       3.343    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34755.281 ±     999.381   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       322.801 ±      52.433  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     14621.052 ±    2806.610    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       338.823 ±    1217.029  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     15403.547 ±   55285.026    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.189 ±       1.625    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                                128  thrpt    5     25263.881 ±     979.051   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       727.387 ±      34.655  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     45307.234 ±     820.574    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       671.074 ±       1.783  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41803.635 ±    1686.393    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.046 ±       0.280  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2.842 ±      17.395    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15006.533 ±     947.490   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1111.167 ±      31.527  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    116532.764 ±    6053.413    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1074.198 ±    1416.359  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    112606.035 ±  147976.978    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.658 ±       5.620  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        69.814 ±     596.466    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15821.274 ±     355.580   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1036.138 ±      19.467  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    103065.186 ±    3667.781    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1069.452 ±    1409.426  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    106463.656 ±  141271.329    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.007 ±       0.040  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.739 ±       3.940    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    105789.834 ±   10450.031   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       288.179 ±      31.839  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4290.534 ±     780.131    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306.964 ±    1079.023  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4612.783 ±   16228.720    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.061 ±       0.528    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13758.594 ±    1178.724   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1345.168 ±      84.195  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    153874.742 ±    6471.102    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.027 ±       5.546  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    153100.535 ±   13945.909    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.895 ±       7.049  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       106.008 ±     838.374    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                               128  thrpt    5     14286.444 ±    1120.070   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       962.473 ±      88.727  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    106012.778 ±    5590.830    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941.225 ±    1417.588  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    104023.455 ±  160738.740    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.391 ±       7.979    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     44851.779 ±    1206.358   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1145.850 ±      76.645  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40195.864 ±    1704.932    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.059 ±    1155.980  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42327.344 ±   39850.654    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.695 ±       5.899  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24.228 ±     205.476    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     62135.428 ±    2096.929   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1090.130 ±      57.840  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27608.159 ±    1096.547    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.242 ±    1411.252  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     27101.601 ±   35695.274    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.725 ±       6.197  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        18.495 ±     158.117    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        26.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    176421.637 ±    2240.844   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       288.971 ±      29.793  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2577.851 ±     291.771    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.966 ±    1079.028  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2743.856 ±    9645.087    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.112 ±       0.964    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    185123.656 ±    1985.008   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.221 ±       1.720  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         1.884 ±      14.675    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     57742.188 ±    2130.431   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1115.207 ±      62.097  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30394.534 ±    1348.668    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1073.329 ±    1413.757  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29238.371 ±   38337.674    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.621 ±       5.345  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        16.769 ±     144.386    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                              128  thrpt    5     16959.223 ±     398.393   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1053.408 ±      40.550  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     97747.006 ±    3527.218    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1070.050 ±    1411.392  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     99279.871 ±  130816.303    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.773 ±       4.074    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     97414.967 ±     615.321   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2172.851 ±      74.588  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     35101.522 ±    1118.968    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2142.000 ±    1157.348  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     34599.587 ±   18545.155    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.804 ±       6.251  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        12.979 ±     100.965    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    123053.333 ±   11291.350   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1749.111 ±     149.132  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22371.113 ±     800.395    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1735.276 ±    1405.825  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     22199.598 ±   18047.565    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.879 ±       7.296  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        11.049 ±      91.730    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    166851.068 ±   10435.549   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1568.272 ±     108.326  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14790.413 ±     211.116    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1478.200 ±    1161.920  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     13939.457 ±   10847.295    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.654 ±       4.623  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.138 ±      43.455    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     55373.352 ±    1779.847   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2974.738 ±     135.980  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84536.704 ±    2512.143    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2969.615 ±    1436.478  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     84357.894 ±   39349.153    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.054 ±       0.275  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.540 ±       7.859    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        22.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                   128  thrpt    5    110849.016 ±    3361.596   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2131.371 ±      79.714  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     30255.755 ±     862.951    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2146.412 ±    1152.065  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     30460.759 ±   15975.979    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.733 ±       5.687  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        10.416 ±      80.875    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    181208.727 ±    7313.452   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1206.108 ±      49.824  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10474.466 ±     339.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.526 ±    1415.414  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9323.864 ±   12302.802    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.695 ±       5.082  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         6.119 ±      44.773    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    526239.315 ±   21586.982   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       548.481 ±      27.991  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1640.107 ±      54.429    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.912 ±    1149.287  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1603.681 ±    3452.147    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.050 ±       0.263    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    718031.170 ±   24475.255   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       567.925 ±      35.402  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1244.727 ±      81.073    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.993 ±    1155.918  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1179.085 ±    2538.511    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.018 ±       0.157    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    778304.110 ±    3191.921   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    326588.081 ±   16211.500   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       923.674 ±      63.390  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4449.701 ±     155.562    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       933.754 ±    1405.748  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4492.254 ±    6680.003    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.040 ±       0.210    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                  128  thrpt    5     41968.368 ±     461.252   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1075.452 ±      27.957  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     40327.657 ±    1478.553    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1075.984 ±    1418.282  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     40377.842 ±   53561.900    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.512 ±       4.276  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        19.249 ±     160.707    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38517.805 ±     382.074   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1960.605 ±      39.695  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80101.898 ±    2217.949    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1878.379 ±    1156.903  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     76756.529 ±   47612.362    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.766 ±       4.617  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        31.267 ±     188.260    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    290862.263 ±   16817.859   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       311.271 ±      43.755  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1683.690 ±     188.685    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.951 ±    1212.565  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1818.919 ±    6556.697    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.010 ±       0.084  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.052 ±       0.448    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    116667.550 ±    5206.694   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1399.646 ±      81.254  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18879.718 ±     335.929    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1332.954 ±      10.850  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     17982.357 ±     721.385    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.112 ±       0.590    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    538111.493 ±   22160.365   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       362.702 ±      29.022  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1060.788 ±      81.277    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.825 ±    1217.020  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       994.273 ±    3562.262    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     41961.140 ±    2304.734   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2083.787 ±     136.432  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78145.928 ±    1273.207    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2004.358 ±      16.146  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     75182.797 ±    4607.965    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.903 ±       5.870  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34.387 ±     223.579    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                  128  thrpt    5     87682.063 ±    1626.462   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1541.210 ±      43.794  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     27661.716 ±     386.750    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1477.809 ±    1152.398  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     26512.542 ±   20326.547    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.695 ±       5.897  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        12.464 ±     105.710    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     75563.993 ±     484.920   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       615.255 ±      35.423  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12813.188 ±     795.907    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.461 ±    1152.621  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11157.211 ±   24016.800    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     86931.391 ±     752.232   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       508.333 ±      34.817  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9202.277 ±     707.762    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       532.993 ±    1147.307  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9657.679 ±   20788.903    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.032  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.151 ±       0.580    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     77373.896 ±    4582.080   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       473.792 ±      33.595  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9637.303 ±     876.087    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       369.350 ±    1321.201  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7547.925 ±   26902.877    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.168 ±       1.450    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     86715.037 ±    1710.008   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       505.262 ±      37.884  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9169.289 ±     702.126    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.799 ±    1118.562  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9171.504 ±   20346.390    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.152 ±       0.801    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     86869.289 ±    6013.482   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       435.766 ±      32.626  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7896.740 ±     939.145    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.665 ±    1326.762  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6779.553 ±   24347.004    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.075 ±       0.644    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5      9987.166 ±     411.845   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1643.750 ±      64.065  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    258992.080 ±    3434.782    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1608.731 ±    1413.064  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    253315.447 ±  218885.853    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.799 ±       5.196  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       126.904 ±     825.612    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9785.415 ±     463.068   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1518.366 ±     111.056  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    244164.484 ±    6978.163    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1471.126 ±    1157.974  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    236447.449 ±  181553.124    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.900 ±       6.845  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       143.647 ±    1092.352    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    155896.505 ±    2628.933   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       416.992 ±      37.395  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4209.686 ±     441.856    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.795 ±    1327.309  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3753.201 ±   13440.787    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5790.731 ±     318.310   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1516.958 ±     127.210  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    412197.859 ±   16950.866    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1470.030 ±    1149.942  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    399144.219 ±  301228.473    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.966 ±       6.882  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       260.627 ±    1856.856    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                                128  thrpt    5      9945.464 ±     437.559   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1588.899 ±      63.791  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    251392.874 ±    6018.784    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1612.126 ±    1415.147  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    255297.701 ±  228884.920    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.774 ±       6.093  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       120.317 ±     944.594    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     20188.458 ±     756.603   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1574.181 ±      34.867  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122705.353 ±    2750.253    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.570 ±    1410.156  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    125383.559 ±  111610.943    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.787 ±       4.917  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        61.065 ±     382.108    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23156.904 ±    1457.706   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1573.011 ±      58.172  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106896.907 ±    4064.777    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1472.814 ±    1158.978  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    100157.222 ±   80727.194    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.808 ±       5.351  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        55.056 ±     366.047    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134125.255 ±     825.782   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       305.806 ±      31.591  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3588.139 ±     382.375    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.645 ±    1079.032  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2400.460 ±   12656.937    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.098 ±       0.841    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    139879.378 ±    1326.066   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.252 ±       2.164  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         2.840 ±      24.423    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23372.154 ±    1199.253   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1632.556 ±     118.907  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109916.593 ±    4096.749    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1606.334 ±    1412.369  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    108243.606 ±   96975.183    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.822 ±       5.288  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        55.628 ±     358.857    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                               128  thrpt    5      9410.680 ±     113.672   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1191.592 ±      13.848  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    199257.615 ±    4481.191    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1076.970 ±    1419.378  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    180108.571 ±  237588.416    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.616 ±       4.228  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       102.824 ±     705.874    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    124818.810 ±    5434.987   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1780.225 ±      70.215  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22444.077 ±     543.492    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.748 ±    1413.062  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22007.762 ±   18301.761    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.724 ±       5.582  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.122 ±      70.150    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    565226.961 ±    4422.788   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       605.060 ±      22.298  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1684.631 ±      55.355    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       665.847 ±       1.579  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1853.892 ±      13.253    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.009 ±       0.078    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    341966.455 ±   31873.677   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       498.706 ±      75.156  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2294.532 ±     181.191    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       502.357 ±    1111.861  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2287.005 ±    5041.353    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.094 ±       0.629    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    754263.536 ±   43861.191   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       505.969 ±      36.573  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1055.763 ±      79.554    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.775 ±    1118.498  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1057.536 ±    2339.140    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.009 ±       0.076    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     75855.625 ±    1655.639   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3138.953 ±     133.121  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65109.747 ±    1507.343    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2968.627 ±    1429.071  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61556.104 ±   28712.511    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.173 ±       0.911    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                    128  thrpt    5    230688.988 ±   10257.005   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1324.148 ±      76.260  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5      9032.306 ±     214.581    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1210.786 ±    1157.887  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8258.189 ±    7884.845    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.620 ±       5.118  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.199 ±      34.615    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    199367.080 ±    4950.385   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1457.978 ±      68.210  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11508.539 ±     318.299    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1474.887 ±    1155.879  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11634.690 ±    8886.564    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.712 ±       5.142  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.613 ±      40.582    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    636526.040 ±   96825.320   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       359.171 ±      79.174  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       887.545 ±      87.147    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.552 ±    1317.924  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       910.305 ±    3272.778    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.003 ±       0.030  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.008 ±       0.072    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    658487.762 ±   10794.938   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       502.854 ±      34.844  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1201.807 ±      84.005    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502.819 ±    1113.124  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1202.282 ±    2657.430    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.020 ±       0.171    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1149168.143 ±   16451.697   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       643.369 ±      17.156  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       881.016 ±      15.964    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.404 ±       2.006  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       919.420 ±      13.171    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.023 ±       0.196    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1168863.306 ±    5401.102   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34362.918 ±    1339.489   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1924.790 ±      37.606  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     88152.649 ±    2226.856    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1873.795 ±    1157.145  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     85856.212 ±   53948.954    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.820 ±       5.360  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        37.323 ±     243.509    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    102659.229 ±    3389.851   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1824.025 ±      49.997  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     27961.615 ±     283.752    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1611.266 ±    1417.684  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     24690.083 ±   21489.575    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.691 ±       5.727  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        10.578 ±      87.667    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5        21.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    129521.117 ±    6074.800   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1658.965 ±      70.214  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20156.488 ±     530.481    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1606.505 ±    1416.207  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     19536.095 ±   17570.060    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.808 ±       5.676  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.916 ±      69.726    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    203921.232 ±    3312.474   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1246.397 ±      37.590  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9619.303 ±     317.618    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203.320 ±    1151.309  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9289.513 ±    8921.077    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.841 ±       6.012  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.519 ±      46.680    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    252964.631 ±   11057.121   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1351.924 ±      26.719  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8410.137 ±     209.245    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345.145 ±       3.371  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8368.345 ±     366.984    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.595 ±       4.347  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.691 ±      26.970    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     66728.076 ±     878.935   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2687.586 ±      46.675  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63373.937 ±    1687.077    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2561.720 ±    1149.124  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60414.833 ±   27432.352    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.100 ±       0.816  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.356 ±      19.252    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                               128  thrpt    5    179918.092 ±   10924.874   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1413.777 ±      86.569  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     12366.375 ±     404.385    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1343.991 ±       5.404  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     11758.058 ±     740.364    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.712 ±       5.053  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6.288 ±      44.622    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    180886.227 ±    6307.486   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1206.762 ±      82.567  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10497.621 ±     470.681    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208.548 ±    1156.750  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10496.188 ±    9831.077    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.654 ±       4.897  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.655 ±      42.329    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    694170.948 ±   34382.886   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       720.054 ±      42.003  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1632.291 ±      33.772    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.329 ±       1.916  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1512.999 ±      78.259    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.019 ±       0.099    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    703428.177 ±   15144.468   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       560.899 ±      42.045  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1254.983 ±     118.552    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.929 ±    1155.780  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1204.127 ±    2591.985    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.028 ±       0.161    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    778018.834 ±    4379.900   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    350364.634 ±   17327.079   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       993.311 ±      60.082  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4460.441 ±     238.376    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1067.088 ±    1404.968  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4787.926 ±    6259.278    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.057 ±       0.328    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                              128  thrpt    5     41828.242 ±     392.703   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1076.053 ±      45.293  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     40481.027 ±    1972.663    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1076.113 ±    1418.560  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     40507.919 ±   53675.766    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.520 ±       4.437  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        19.597 ±     167.060    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11079.053 ±     587.039   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1384.935 ±      90.683  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    196705.952 ±    2770.086    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1342.603 ±       5.394  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    190730.976 ±   10829.520    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.783 ±       6.251  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       113.113 ±     905.429    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     11083.248 ±     169.826   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1290.696 ±      17.744  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    183267.480 ±    2303.902    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1204.498 ±    1152.475  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    170927.040 ±  162333.541    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.976 ±       6.203  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       138.414 ±     880.670    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    272614.531 ±   13732.224   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1834.866 ±     104.055  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10591.596 ±     339.832    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1747.941 ±    1416.465  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10102.020 ±    8423.616    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.633 ±       4.710  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.709 ±      27.630    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8490.465 ±     418.297   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1532.473 ±      72.292  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    284030.271 ±    1290.770    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.372 ±    1154.113  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    272321.632 ±  201532.959    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.929 ±       6.957  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       171.621 ±    1282.040    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                          128  thrpt    5     10573.201 ±     415.444   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1281.227 ±      72.592  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5    190677.404 ±    5775.223    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1208.621 ±    1156.124  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    179791.709 ±  170967.677    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.754 ±       5.624  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       111.598 ±     832.975    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     25605.831 ±     506.765   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1346.341 ±      42.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82738.835 ±    2439.148    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1335.782 ±       8.025  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     82091.050 ±    1726.399    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.512 ±       2.697    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     29410.624 ±    1855.616   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1225.426 ±     110.477  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65550.581 ±    3031.287    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.776 ±    1154.818  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     64520.901 ±   62018.544    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.830 ±       6.750  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        44.775 ±     364.519    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        33.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    609375.622 ±   15744.871   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1127.531 ±      18.469  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2911.205 ±      85.082    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1211.525 ±    1159.165  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3130.845 ±    3029.287    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.596 ±       4.637  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.537 ±      11.965    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    765819.362 ±   22033.092   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.016 ±       0.138  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.034 ±       0.286    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     30147.572 ±    1693.273   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1367.522 ±      97.825  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71377.894 ±    1322.887    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1340.266 ±    1819.355  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69755.320 ±   91974.524    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.804 ±       5.316  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        41.672 ±     274.018    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                         128  thrpt    5     14222.267 ±     248.872   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5      1318.043 ±      18.416  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    145839.161 ±    4236.463    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1344.821 ±       4.454  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    148801.086 ±    2983.967    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.662 ±       4.723  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        73.449 ±     524.592    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     33396.202 ±    1298.909   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1771.479 ±      93.591  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83473.457 ±    3276.087    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.889 ±    1413.615  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     82104.258 ±   66072.302    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.779 ±       5.703  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.184 ±     272.786    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     32612.290 ±    3238.622   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1446.923 ±     119.119  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69829.205 ±    1821.398    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1338.309 ±       6.270  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     64616.595 ±    6673.167    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.879 ±       5.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        42.763 ±     286.618    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    449255.588 ±   64728.763   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1205.322 ±     151.990  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4222.723 ±     161.147    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1210.791 ±    1158.606  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4258.657 ±    4275.552    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.583 ±       4.246  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.070 ±      14.976    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     18216.944 ±     744.897   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1854.073 ±      63.106  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    160173.010 ±    5412.101    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1735.187 ±    1408.211  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    150109.897 ±  125970.446    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.937 ±       7.286  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        82.035 ±     639.104    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                              128  thrpt    5     33525.652 ±     394.242   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1658.831 ±      44.424  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     77863.149 ±    2326.774    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1610.728 ±    1413.457  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     75581.618 ±   65809.393    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       5.270  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.285 ±     246.683    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     56387.479 ±    2990.046   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1728.516 ±     124.423  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48231.873 ±    2049.937    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1607.812 ±    1414.715  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     44833.923 ±   38676.500    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.783 ±       6.384  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        21.667 ±     176.627    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    158429.252 ±    5729.618   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1921.386 ±      71.449  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19085.225 ±     457.869    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.469 ±    1156.266  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18601.096 ±   11287.610    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.771 ±       5.385  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.615 ±      53.071    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1179663.303 ±   28230.172   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1303.615 ±      41.873  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1738.991 ±      35.045    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1345.581 ±       4.909  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1795.029 ±      43.437    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.595 ±       5.127  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.799 ±       6.879    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1380413.116 ±   25042.646   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.491 ±       2.589  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.561 ±       2.964    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     68077.219 ±    3281.321   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1723.669 ±      85.208  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39829.348 ±     923.566    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1739.803 ±    1401.902  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     40181.309 ±   31889.181    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.817 ±       6.458  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.222 ±     152.371    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                             128  thrpt    5     27359.778 ±     894.280   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5      1220.873 ±      56.727  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     70215.356 ±    1575.740    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1210.827 ±    1158.097  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     69543.216 ±   65339.554    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.695 ±       4.234  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        39.800 ±     242.541    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     17342.794 ±    1398.373   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1519.101 ±      95.868  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    137860.172 ±    5660.987    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1476.079 ±    1161.932  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    133941.012 ±  104504.584    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.762 ±       6.382  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        68.903 ±     576.912    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     17929.555 ±     489.421   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1478.166 ±      47.434  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    129739.869 ±    3815.555    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.150 ±    1152.611  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    129059.856 ±   99169.358    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.904 ±       6.212  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        79.392 ±     546.409    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    657929.957 ±   64722.029   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1759.467 ±     132.550  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4208.613 ±     152.945    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1748.601 ±    1420.149  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4188.699 ±    3524.539    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.545 ±       4.518  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.363 ±      11.315    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     12820.251 ±     816.211   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1764.017 ±     100.145  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    216536.789 ±    6047.616    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1735.957 ±    1413.713  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    213168.537 ±  174859.965    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.924 ±       7.297  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       112.239 ±     886.455    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                              128  thrpt    5     17492.527 ±    1187.154   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1534.372 ±     147.514  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    138019.894 ±    5648.927    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1477.432 ±    1163.473  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    132858.139 ±  102466.158    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.741 ±       6.337  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        66.221 ±     566.142    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     45033.219 ±    1866.994   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1760.962 ±      50.178  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61536.831 ±    2474.381    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1743.188 ±    1412.276  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     61011.801 ±   51369.128    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.716 ±       6.167  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        24.711 ±     212.765    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     54084.862 ±    2772.850   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1661.244 ±     103.688  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48336.667 ±    1140.325    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1604.675 ±    1411.388  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     46669.727 ±   40466.775    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.779 ±       5.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        22.605 ±     170.803    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1350918.847 ±   19302.554   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1267.096 ±      26.725  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1476.018 ±      45.879    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.923 ±    1159.683  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1411.439 ±    1362.151    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.545 ±       4.428  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.638 ±       5.181    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1564381.152 ±   23118.977   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3844.285 ±     414.265   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       526.186 ±      40.068  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    215420.392 ±   10934.999    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       401.135 ±    1410.045  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    166295.873 ±  585031.174    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.548 ±      30.551    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                             128  thrpt    5     30235.463 ±     384.585   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5      1233.497 ±      34.736  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     64197.860 ±    2171.852    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1211.064 ±    1158.635  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     63051.524 ±   60584.384    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.658 ±       4.167  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        34.251 ±     217.159    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    122959.909 ±   16099.214   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1945.726 ±     260.038  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     24898.894 ±     297.600    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.797 ±    1156.379  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     23944.355 ±   12242.572    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.725 ±       4.562  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.159 ±      57.700    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    380464.647 ±    5480.898   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       783.702 ±      33.928  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3241.377 ±     141.629    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       800.327 ±    1146.753  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3311.999 ±    4778.871    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.052 ±       0.297    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    255528.088 ±   12232.213   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       570.917 ±      21.952  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3516.454 ±     238.732    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.493 ±    1148.385  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3297.483 ±    7099.904    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.052 ±       0.274    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    505886.664 ±   40804.596   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       659.250 ±      37.801  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2050.945 ±      86.284    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.428 ±       2.112  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2089.274 ±     166.174    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.026 ±       0.225    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     75052.406 ±    1557.465   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3170.049 ±      74.838  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66462.333 ±     999.433    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3084.148 ±    1400.253  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     64668.214 ±   29594.310    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.067 ±       0.530  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.395 ±      11.099    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    136219.568 ±    1838.269   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1193.793 ±      36.845  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13790.903 ±     462.763    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.610 ±    1416.103  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12408.940 ±   16438.582    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.733 ±       6.087  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.504 ±      70.644    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    206933.323 ±    5525.387   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       167.509 ±      27.670  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1273.955 ±     222.030    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.650 ±    1079.062  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1561.701 ±    8234.582    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.427 ±       3.676  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.241 ±      27.908    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    388670.182 ±   13215.087   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       396.267 ±      25.204  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1604.722 ±     144.742    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.509 ±    1058.231  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1915.571 ±    4314.738    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.068 ±       0.425    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    466136.318 ±    7425.590   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       377.747 ±      38.041  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1275.260 ±     116.287    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.748 ±    1216.665  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1140.725 ±    4094.969    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    490075.459 ±    4917.181   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         2.758 ±      23.743  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         8.897 ±      76.600    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     28532.671 ±    3648.463   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1619.189 ±     235.037  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     89292.985 ±    3292.528    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.718 ±    1412.227  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     88507.101 ±   72944.834    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.845 ±       4.931  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        48.555 ±     288.132    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8228.070 ±     359.234   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1196.859 ±      82.319  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    228899.593 ±    7657.657    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.588 ±    1155.506  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    230860.068 ±  219652.639    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.758 ±       6.301  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       142.810 ±    1186.997    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8006.182 ±     495.402   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1062.782 ±      72.379  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    208895.675 ±    8567.121    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       936.342 ±    1411.286  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    184433.949 ±  282697.497    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.009 ±       0.049  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.824 ±       9.676    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    182043.996 ±    7392.193   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1827.242 ±      38.796  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15796.993 ±     396.949    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1881.324 ±    1158.889  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     16270.447 ±   10166.987    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.587 ±       4.965  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.040 ±      42.617    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7775.402 ±     218.361   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1302.227 ±      62.690  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    263545.046 ±    7949.037    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1202.501 ±    1148.562  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    243039.266 ±  228095.452    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.936 ±       6.950  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       191.622 ±    1424.671    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                         128  thrpt    5      8202.145 ±     465.570   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                          128  thrpt    5      1134.483 ±      65.062  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    217659.100 ±   10653.948    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1075.153 ±    1417.758  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    206730.269 ±  277558.034    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.687 ±       5.694  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       130.364 ±    1079.943    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     20748.825 ±     757.926   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1180.530 ±      33.875  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89542.979 ±    3244.708    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207.888 ±    1154.599  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     91611.106 ±   87544.925    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.733 ±       6.131  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        56.467 ±     472.657    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     23506.198 ±    1645.953   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1039.202 ±      70.221  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69571.440 ±    2129.530    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       937.294 ±    1412.264  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     62698.817 ±   93714.615    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.383 ±       6.532    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    364878.094 ±   45351.504   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       853.384 ±     129.644  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3679.752 ±     148.714    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806.800 ±    1158.863  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3470.459 ±    4783.465    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.055 ±       0.321    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    424966.917 ±    5087.423   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.216 ±       1.854  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.798 ±       6.861    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     21395.338 ±    1215.171   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1115.008 ±      97.743  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     82008.832 ±    4129.347    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1072.254 ±    1413.011  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     78936.108 ±  104736.521    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.658 ±       5.619  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        48.756 ±     416.461    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                        128  thrpt    5     11203.548 ±     312.013   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                         128  thrpt    5      1389.731 ±      57.580  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    195205.852 ±    7865.950    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1344.842 ±       6.229  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    188904.152 ±    4750.945    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.687 ±       4.229  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        95.815 ±     590.014    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13322.295 ±     266.757   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1303.747 ±      11.250  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    154002.992 ±    3565.674    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.380 ±       5.330  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    158565.888 ±    2951.963    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.774 ±       6.624  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        91.608 ±     783.510    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13512.883 ±     786.077   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1219.164 ±      90.282  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    141974.845 ±    4240.970    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.518 ±    1151.042  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    139836.217 ±  129699.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.874 ±       7.349  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       102.752 ±     863.765    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    273053.179 ±   24057.526   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1622.970 ±     124.193  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9352.824 ±     234.394    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1478.019 ±    1159.360  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      8511.520 ±    6445.326    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.604 ±       4.461  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.606 ±      26.830    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12175.939 ±     240.845   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1506.110 ±      46.553  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    194657.446 ±    7263.743    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1472.100 ±    1161.257  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    190316.252 ±  151747.880    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.302 ±       2.422  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        39.127 ±     314.088    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                             128  thrpt    5     13476.528 ±     738.513   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1270.466 ±      72.769  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    148356.983 ±    3881.328    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1208.389 ±    1157.174  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    141313.901 ±  137739.819    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.766 ±       5.939  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        89.103 ±     691.085    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     32074.866 ±    5356.685   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1387.494 ±     220.360  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68083.200 ±    2319.684    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1341.902 ±       5.241  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     65943.524 ±   11589.277    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       4.754  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        36.623 ±     226.078    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     80411.337 ±    3607.811   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2018.376 ±      66.216  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39497.151 ±     542.468    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1875.151 ±    1156.766  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     36654.701 ±   21664.837    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.746 ±       5.842  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.682 ±     115.074    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    615906.256 ±   85150.538   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       867.978 ±     121.049  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2217.909 ±      75.743    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.301 ±    1158.070  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2056.066 ±    2848.302    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.032 ±       0.182    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    724638.883 ±    4166.500   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.186 ±       1.601  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.405 ±       3.479    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     74192.179 ±    1121.024   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2144.528 ±      52.416  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45489.524 ±    1547.694    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2140.128 ±    1146.390  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     45403.703 ±   24649.541    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.799 ±       6.262  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        16.950 ±     132.762    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                            128  thrpt    5     19947.555 ±     478.800   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1315.629 ±      40.733  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    103793.766 ±    2828.839    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1344.875 ±       4.946  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    106103.269 ±    2544.494    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.695 ±       5.764  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        54.706 ±     453.459    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     14373.140 ±     760.741   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       763.653 ±      58.523  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83609.480 ±    4223.429    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       670.364 ±       1.714  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     73407.707 ±    3814.525    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.897 ±       7.726    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17620.567 ±     245.876   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       780.360 ±      31.663  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69693.470 ±    3623.354    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       801.807 ±    1153.545  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     71640.019 ±  103657.142    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.746 ±       6.423    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    120543.469 ±    1150.689   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       308.385 ±      28.560  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4026.323 ±     408.959    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204.649 ±    1079.055  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2679.052 ±   14125.871    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14815.602 ±     745.668   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1125.874 ±      71.159  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    119575.267 ±    3327.126    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1070.569 ±    1412.056  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    113548.494 ±  148009.524    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.749 ±       6.319  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        78.467 ±     661.404    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                                 128  thrpt    5     15229.470 ±     773.348   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       747.005 ±      25.368  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     77194.814 ±    1711.581    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       671.222 ±       0.946  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69369.666 ±    3568.246    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.853 ±       7.343    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     46503.644 ±    4361.975   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1429.387 ±     131.101  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48371.188 ±     513.219    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1341.738 ±       4.933  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     45426.627 ±    4387.346    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.733 ±       4.827  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        24.665 ±     160.577    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     77053.728 ±    2893.838   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1641.470 ±      88.052  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33524.266 ±    1030.831    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1607.304 ±    1409.778  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32781.804 ±   27716.198    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.728 ±       5.048  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        14.935 ±     103.725    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    298108.468 ±   13834.998   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       587.949 ±      42.710  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3102.828 ±     196.435    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       536.648 ±    1155.178  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2837.994 ±    6111.064    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.044 ±       0.234    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    356325.507 ±   10099.053   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.209 ±       1.799  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.930 ±       7.999    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     65234.449 ±    8673.183   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1514.451 ±     224.385  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36529.287 ±     683.002    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1472.493 ±    1143.842  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     35412.414 ±   23493.650    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.792 ±       6.816  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.713 ±     161.125    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                                128  thrpt    5     14991.146 ±     695.223   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1103.650 ±      89.246  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    115843.272 ±    4205.851    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1076.194 ±    1417.309  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    112672.324 ±  144966.813    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.504 ±       4.160  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        53.936 ±     445.842    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    139653.829 ±   12258.017   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1833.574 ±     124.782  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20665.129 ±     884.738    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1743.996 ±    1414.302  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     19714.012 ±   17095.334    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.733 ±       5.616  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.337 ±      63.819    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    831699.982 ±   58368.480   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       473.726 ±      39.994  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       896.509 ±      91.240    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.614 ±    1404.700  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       762.361 ±    2679.832    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.006 ±       0.054    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    390272.264 ±   10563.563   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       412.297 ±      27.457  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1662.581 ±     123.294    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       470.994 ±    1056.419  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1902.740 ±    4273.667    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.033 ±       0.288    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1097638.207 ±  257200.837   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       392.610 ±      94.742  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       562.996 ±      47.517    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       472.842 ±    1062.809  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       678.672 ±    1494.322    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.012 ±       0.102    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     76843.273 ±    3954.421   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3103.404 ±     169.388  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63555.934 ±    1215.355    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2947.945 ±    1408.933  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     60428.505 ±   30905.425    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.050 ±       0.263  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.032 ±       5.441    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        22.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                  128  thrpt    5    282875.558 ±   14436.410   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1412.239 ±      75.735  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5      7855.926 ±     141.059    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1344.311 ±       3.742  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      7479.083 ±     375.376    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.645 ±       4.660  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.550 ±      25.637    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    265442.856 ±   21457.662   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1611.612 ±     152.508  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9554.055 ±     243.767    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.558 ±    1412.366  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9514.902 ±    7679.329    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.704 ±       4.953  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.272 ±      30.242    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1240863.687 ±    8942.603   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       439.987 ±      42.212  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       557.987 ±      50.513    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       501.917 ±    1110.649  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       636.143 ±    1406.775    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.015 ±       0.061  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.020 ±       0.077    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5    922253.499 ±   52353.032   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       555.141 ±      36.442  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       947.323 ±      63.034    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       532.847 ±    1146.998  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       911.544 ±    1962.981    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.741 ±       6.292  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.254 ±      10.646    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1871740.766 ±  123892.034   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       660.364 ±      47.574  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       555.236 ±      19.371    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.371 ±       2.141  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       564.619 ±      37.623    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1999012.183 ±  151989.605   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         1.964 ±      16.717  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         1.536 ±      13.072    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     42585.123 ±    1749.437   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2128.202 ±      76.787  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78646.728 ±    1093.806    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2007.673 ±      13.319  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     74198.362 ±    3162.656    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.849 ±       6.822  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        31.355 ±     251.758    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                                 128  thrpt    5    114397.685 ±    3594.477   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1904.712 ±      56.673  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26201.673 ±     660.508    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1879.516 ±    1152.068  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25868.695 ±   16172.060    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.712 ±       4.286  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.849 ±      59.544    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     15041.918 ±    2292.226   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1870.599 ±     269.591  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    195714.370 ±    5128.132    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.814 ±    1148.462  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    196899.580 ±  129250.193    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.762 ±       5.729  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        78.865 ±     592.211    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     97296.585 ±    5458.127   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1311.286 ±      87.598  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21207.865 ±     602.656    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.434 ±       5.306  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21650.955 ±    1240.030    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.833 ±       6.902  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.520 ±     112.065    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    254584.696 ±   10844.690   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       849.101 ±      53.153  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5248.773 ±     252.051    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.461 ±    1159.237  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4986.948 ±    7193.726    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.052 ±       0.274    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13533.829 ±     641.432   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2059.732 ±     120.848  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    239494.044 ±    6192.962    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2003.481 ±      15.461  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    232982.116 ±   10052.041    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.924 ±       5.491  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       106.910 ±     636.431    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                   128  thrpt    5     15114.874 ±     778.890   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1764.182 ±      71.861  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5    183685.713 ±    7235.345    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1745.588 ±    1415.266  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    182001.927 ±  152671.934    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.729 ±       5.569  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        75.410 ±     575.080    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     32812.864 ±    1117.191   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2742.007 ±     166.030  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    131491.460 ±    3632.282    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.781 ±      32.955  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    128806.955 ±    3240.705    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         2.209 ±       8.836    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    103956.992 ±   21508.867   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1467.161 ±     276.607  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22214.498 ±     688.594    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1338.465 ±       5.719  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     20310.616 ±    4440.937    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.750 ±       6.364  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.011 ±      93.467    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    178053.340 ±    7221.339   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       584.037 ±      34.345  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5162.144 ±     322.263    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       537.104 ±    1156.158  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4754.764 ±   10237.521    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.111 ±       0.390    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    193715.470 ±     808.095   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.209 ±       1.800  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.700 ±      14.612    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     49222.384 ±    1490.503   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3488.128 ±     105.406  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111512.665 ±     122.979    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3366.315 ±      64.440  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    107621.749 ±    2647.440    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.461 ±       5.826    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        36.000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                  128  thrpt    5      9175.193 ±     599.584   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1394.505 ±     115.721  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5    239142.327 ±    6247.469    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1344.546 ±       5.450  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    230640.976 ±   15324.129    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.716 ±       4.228  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       121.370 ±     717.479    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     25706.503 ±    2846.505   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1389.280 ±     151.685  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     85043.959 ±    1520.315    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.471 ±       5.355  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     82170.543 ±    9156.909    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.787 ±       6.597  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        47.118 ±     394.472    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     28906.075 ±    2038.708   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1180.556 ±      99.033  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64263.625 ±    2161.756    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1198.345 ±    1146.963  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     65188.849 ±   61854.235    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.674 ±       3.843    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    602099.240 ±  116262.568   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1616.255 ±     294.444  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4224.941 ±     151.262    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1478.186 ±    1158.494  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3882.283 ±    3425.810    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.650 ±       4.525  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.756 ±      12.240    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     23801.724 ±     694.195   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1760.934 ±      59.339  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    116413.877 ±    1701.488    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1739.142 ±    1422.875  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    115068.559 ±   95977.164    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.121 ±       0.996  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         7.984 ±      65.803    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                              128  thrpt    5     28273.943 ±     664.093   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1361.158 ±      46.232  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     75756.302 ±    2028.556    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1342.843 ±       6.160  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     74738.910 ±    1751.220    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.774 ±       6.579  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        42.964 ±     364.980    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     73651.417 ±    2193.482   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1957.687 ±      57.524  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41829.282 ±     919.146    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1876.543 ±    1155.704  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     40105.953 ±   24936.876    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.758 ±       4.852  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        16.102 ±     102.929    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    184768.480 ±    5927.876   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2067.931 ±      90.651  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17612.881 ±     437.902    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2007.596 ±       9.693  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17100.004 ±     517.718    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.749 ±       5.763  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.378 ±      49.057    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1484334.735 ±   71266.077   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1268.690 ±      68.066  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1345.085 ±      42.562    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.166 ±    1157.381  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1284.780 ±    1235.976    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.608 ±       4.103  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.641 ±       4.334    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1700734.108 ±  540580.086   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.492 ±       4.238  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.441 ±       3.797    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    155806.007 ±    7919.268   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2019.011 ±      74.513  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20391.108 ±     714.059    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1870.177 ±    1152.104  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     18900.563 ±   11943.207    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.829 ±       6.866  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.339 ±      69.090    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                             128  thrpt    5     34852.211 ±     458.471   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5      1303.679 ±      34.739  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     58862.051 ±     984.916    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1345.214 ±       5.897  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     60738.508 ±     970.224    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.675 ±       5.719  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        30.466 ±     258.302    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     40470.600 ±    4641.720   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1497.886 ±     177.390  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     58242.623 ±    1944.462    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1471.686 ±    1155.407  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57210.356 ±   43725.785    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.854 ±       7.125  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        32.670 ±     272.469    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    738575.840 ±   61839.115   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1489.743 ±     147.143  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3174.022 ±      96.056    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479.625 ±    1161.522  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3151.210 ±    2408.197    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.612 ±       4.959  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.293 ±      10.471    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     32082.973 ±    1912.967   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2284.033 ±      78.026  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    112046.126 ±    4116.756    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2283.831 ±    1405.886  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    112080.624 ±   70384.980    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.125 ±       1.031  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         6.059 ±      50.022    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                   128  thrpt    5     40146.564 ±    2263.244   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1675.762 ±      62.467  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     65671.513 ±    1649.090    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.510 ±    1417.681  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     63141.144 ±   56113.776    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.758 ±       4.794  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        29.480 ±     185.673    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    349763.407 ±     545.264   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1004.414 ±      63.957  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4519.328 ±     293.331    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1069.581 ±    1409.862  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4813.044 ±    6349.982    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.112 ±       0.395    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1930665.401 ±  122465.331   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1163.594 ±      52.041  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       948.463 ±      42.715    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1076.442 ±    1419.482  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       876.980 ±    1151.223    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.571 ±       4.868  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.463 ±       3.948    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2245429.617 ±   18946.641   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.221 ±       1.898  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.155 ±       1.335    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    254785.342 ±    7715.723   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1691.239 ±      81.053  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10445.574 ±     301.494    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1470.561 ±    1158.563  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9089.196 ±    7339.023    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.808 ±       6.556  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         5.024 ±      40.791    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                  128  thrpt    5     49700.417 ±     386.267   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1234.593 ±      23.168  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     39089.453 ±     796.366    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1210.553 ±    1157.512  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     38339.735 ±   36797.621    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.704 ±       4.242  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        22.298 ±     134.491    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     73016.208 ±    1353.879   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1614.932 ±      50.740  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34803.654 ±    1109.184    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.278 ±    1412.501  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     34670.320 ±   30671.086    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.816 ±       5.427  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        17.628 ±     117.433    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     87903.759 ±    1139.430   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1144.526 ±      25.733  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20490.105 ±     629.551    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.414 ±    1151.308  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     21557.746 ±   20786.652    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.887 ±       7.501  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        15.886 ±     134.376    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     89316.083 ±    1372.614   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1100.496 ±      57.466  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19390.529 ±     896.799    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1074.867 ±    1415.626  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18934.659 ±   24888.025    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.612 ±       5.002  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        10.771 ±      88.031    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     44079.696 ±    1906.113   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2072.659 ±      75.029  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73995.976 ±    1095.521    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2002.494 ±      14.894  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     71497.311 ±    3381.282    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.958 ±       6.222  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        34.201 ±     221.329    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                                 128  thrpt    5     77233.332 ±    2795.916   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1394.084 ±      35.010  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     28403.956 ±     526.885    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1343.194 ±       5.583  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     27368.126 ±     919.426    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.787 ±       5.281  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        16.058 ±     107.616    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    115260.649 ±    2409.702   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1102.182 ±      31.809  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15047.702 ±     360.106    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1072.361 ±    1413.141  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14649.822 ±   19405.897    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.699 ±       5.844  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.480 ±      79.183    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    309984.363 ±    7087.415   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       473.348 ±      36.173  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2402.931 ±     169.828    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.589 ±    1112.498  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2550.619 ±    5648.326    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.021 ±       0.183    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    710569.214 ±   56179.064   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       906.298 ±      66.352  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2007.390 ±      83.648    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.089 ±    1415.691  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2085.365 ±    3175.075    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.027 ±       0.096    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    697488.442 ±  317958.686   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.007 ±       0.059  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.018 ±       0.153    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    232809.285 ±   11810.037   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       776.395 ±      44.189  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5248.091 ±     168.292    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.268 ±    1153.240  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5420.680 ±    7741.863    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.084 ±       0.483    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        21.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                                128  thrpt    5     26467.753 ±     283.219   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1016.141 ±      45.964  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     60410.797 ±    2536.922    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       940.518 ±    1416.883  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     55906.958 ±   84117.575    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.990 ±       3.985    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    123402.815 ±    6753.127   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1733.753 ±     134.362  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22108.110 ±     661.808    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1607.294 ±    1409.154  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20473.108 ±   17372.530    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.783 ±       5.109  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.008 ±      65.510    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    183061.237 ±    7823.250   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1117.957 ±      30.357  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9611.063 ±     454.320    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070.067 ±    1411.894  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9220.137 ±   12396.578    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.770 ±       6.499  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.581 ±      55.523    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    508038.459 ±   63693.138   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       338.684 ±      59.152  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1048.714 ±      89.864    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       338.780 ±    1216.736  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1037.538 ±    3720.671    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.038 ±       0.327    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     69046.487 ±    1700.920   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2779.611 ±      85.555  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63347.383 ±    1494.031    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2696.303 ±      35.126  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61449.891 ±    1282.617    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.223 ±       1.403  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.113 ±      32.259    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                             128  thrpt    5    199280.290 ±   12657.284   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1163.984 ±      85.258  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      9192.372 ±     451.153    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1209.891 ±    1157.594  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9541.095 ±    8961.850    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.716 ±       5.898  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.770 ±      47.592    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    181580.031 ±    4542.752   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1180.528 ±      30.769  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10231.397 ±     304.612    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1200.643 ±    1150.275  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10414.236 ±   10080.381    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.144 ±       0.580    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    544803.518 ±   18571.233   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       553.950 ±      50.191  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1599.887 ±     108.365    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       533.366 ±    1148.112  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1538.079 ±    3311.318    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.036 ±       0.206    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1155656.462 ±   21790.780   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       878.338 ±      40.870  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1196.010 ±      39.027    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.219 ±    1156.931  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1097.098 ±    1560.918    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±       0.060    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1283663.521 ±    4061.027   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    355325.480 ±   25753.904   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       997.938 ±      81.199  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4420.138 ±     245.622    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.524 ±    1408.522  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4741.072 ±    6337.972    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.056 ±       0.321    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                            128  thrpt    5     40225.938 ±    2414.216   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1007.608 ±      58.456  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     39421.237 ±    1842.524    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       941.328 ±    1418.641  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     36978.205 ±   57584.089    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.000 ±       6.988    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       578.271 ±      31.675   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1230.438 ±      77.567  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3346993.165 ±   66690.542    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.417 ±    1150.682  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3270854.828 ± 3094777.751    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.131 ±       7.774  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3025.999 ±   20753.135    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       590.599 ±      36.388   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1257.580 ±      44.541  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3350309.505 ±  185044.123    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1198.099 ±    1144.498  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3196222.327 ± 3109912.515    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.203 ±       9.351  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3181.444 ±   24656.207    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     41818.751 ±    1691.717   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       705.589 ±      16.213  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26554.822 ±     993.239    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       670.154 ±       0.066  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     25221.758 ±    1020.254    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.159 ±       1.367    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       566.583 ±      30.771   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1240.319 ±      83.040  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3444038.906 ±  134772.930    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1198.921 ±    1146.128  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3327574.002 ± 3162391.518    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.278 ±       8.740  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3539.285 ±   24093.361    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        38.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                          128  thrpt    5       574.818 ±      31.977   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1222.466 ±      76.668  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5   3345329.559 ±   62632.021    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1204.695 ±    1150.895  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5   3291967.306 ± 3085387.230    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.119 ±       8.212  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3069.614 ±   22501.104    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14560.316 ±     672.590   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1169.721 ±      51.071  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    126420.631 ±    7055.815    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.215 ±    1408.660  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    115502.857 ±  153007.664    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.129 ±       9.583  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       122.362 ±    1039.244    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     17272.104 ±     267.689   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1051.740 ±      42.916  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     95826.030 ±    4547.038    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1067.136 ±    1408.377  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     97308.271 ±  129311.326    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.016 ±       8.569  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        92.460 ±     779.780    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    206582.196 ±    5105.737   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       771.340 ±      36.241  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5876.149 ±     277.199    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       804.147 ±    1154.309  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6124.902 ±    8770.185    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.190 ±       0.795    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        19.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    228615.569 ±    1733.730   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         2.028 ±      17.461  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        13.981 ±     120.362    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     17525.702 ±     489.367   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1138.385 ±      41.358  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    102197.078 ±    4836.992    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1067.517 ±    1406.880  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     95974.164 ±  128038.120    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.191 ±      10.254  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       106.872 ±     920.204    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        30.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                         128  thrpt    5      7199.730 ±     116.220   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5      1383.096 ±      41.771  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    302275.206 ±    8618.588    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1339.880 ±      11.692  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    292832.855 ±    4956.937    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.003 ±       6.862  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       218.824 ±    1497.419    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        28.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1543244.487 ±   73335.489   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        66.521 ±      29.406  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        67.923 ±      33.775    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.317 ±     880.983  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       106.696 ±     918.681    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     81598.854 ±    4074.027   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3484.377 ±     237.680  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67197.609 ±    1788.644    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3382.919 ±      54.344  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     65251.433 ±    3091.526    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.079 ±       0.683    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        35.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1812899.866 ±   55681.462   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       975.494 ±      68.046  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       846.656 ±      40.952    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       936.300 ±    1407.905  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       811.939 ±    1211.616    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.021 ±       0.098  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.018 ±       0.086    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        22.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2207439.340 ±   87758.855   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       636.825 ±      37.208  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       453.994 ±      10.009    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.310 ±       1.585  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       478.637 ±      19.488    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.006 ±       0.031    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2372764.035 ±    3779.322   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.124 ±       0.040  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51061.835 ±    2211.576   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2208.247 ±     117.223  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     68053.402 ±     820.327    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2136.988 ±    1158.752  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     65860.658 ±   35623.578    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.887 ±       7.502  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        27.306 ±     230.955    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    879313.764 ±    3844.812   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2849.803 ±      39.780  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5099.828 ±      58.770    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2681.625 ±      33.684  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      4798.872 ±      56.331    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.030 ±       0.120    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        20.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5151239.797 ±   72623.758   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       320.939 ±      38.868  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98.041 ±      12.285    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.586 ±    1259.835  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        72.134 ±     385.548    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.007 ±       0.056  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.002 ±       0.017    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5    978351.423 ±   57284.119   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1171.671 ±      98.561  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1884.500 ±      65.653    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1069.155 ±    1409.465  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1718.157 ±    2245.866    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.841 ±       7.107  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.382 ±      11.684    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   8497373.404 ±  523751.797   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       404.257 ±      48.082  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.862 ±       6.401    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       473.129 ±    1063.762  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        87.599 ±     198.626    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.002 ±       0.008    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    503970.289 ±   16425.624   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2230.323 ±      94.195  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      6964.502 ±     117.054    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2150.928 ±    1166.244  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6716.297 ±    3618.106    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.208 ±       1.792  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.645 ±       5.556    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        24.000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                  N/A  thrpt    5   1324166.707 ±   44015.683   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1872.636 ±      72.813  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5      2225.547 ±      28.174    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1745.054 ±    1412.266  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2074.983 ±    1699.589    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.654 ±       5.628  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.771 ±       6.638    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4433.481 ±      96.853   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2232.700 ±      60.340  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    792469.456 ±   30043.694    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2269.676 ±    1422.937  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    805895.040 ±  514842.176    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         1.015 ±       7.142  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       360.016 ±    2533.425    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        31.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6780.127 ±     263.439   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2315.037 ±      86.765  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    537343.765 ±   21146.203    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2282.082 ±    1427.445  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    530249.092 ±  348383.825    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.200 ±       1.078  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        46.718 ±     251.553    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     48341.427 ±     637.515   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       799.120 ±      20.192  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26015.355 ±     732.284    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       805.929 ±    1154.682  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     26244.240 ±   37731.035    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.543 ±       2.187    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4841.416 ±      73.508   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1057.054 ±      37.744  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    343588.144 ±   13045.772    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       937.121 ±    1411.743  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    304657.265 ±  459629.767    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.022 ±       0.093  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         7.291 ±      30.059    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      4945.804 ±     433.238   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       620.367 ±      58.768  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    197379.641 ±   10951.446    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       528.399 ±    1137.425  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    168366.889 ±  362969.113    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         2.618 ±      13.801    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6478.164 ±     227.865   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       328.579 ±      44.871  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79838.588 ±   13754.647    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.792 ±    1216.916  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     82733.404 ±  298047.349    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         1.028 ±       8.847    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6590.360 ±     325.311   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       286.795 ±      51.785  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     68520.980 ±   15910.290    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       306.959 ±    1079.003  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     73693.648 ±  259093.951    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7898.696 ±     217.356   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1675.059 ±      91.139  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    333721.116 ±   11004.753    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1606.987 ±    1411.090  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    320151.379 ±  280676.212    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.873 ±       5.027  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       174.299 ±    1006.079    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     19208.401 ±     575.600   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       486.883 ±      40.175  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39890.940 ±    3983.296    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       399.208 ±    1403.272  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     32802.422 ±  115312.796    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±       0.023  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.351 ±       1.880    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     14972.447 ±     243.743   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       410.217 ±      41.305  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43115.872 ±    4489.047    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       367.594 ±    1313.903  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     38640.085 ±  138141.989    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.964 ±       8.303  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5       101.996 ±     878.212    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     22890.196 ±    1275.800   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       434.657 ±      59.436  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29877.618 ±    3143.311    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       401.994 ±    1413.067  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     27484.479 ±   96611.924    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.679 ±       5.803  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        46.449 ±     396.881    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4082.798 ±     227.049   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2449.365 ±     160.640  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    944073.160 ±   40914.073    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2285.308 ±    1417.898  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    881494.488 ±  565225.748    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.277 ±       1.829  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       105.924 ±     696.147    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        32.000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                  N/A  thrpt    5     10042.603 ±      41.763   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1267.112 ±      43.167  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5    198549.674 ±    6765.345    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1208.261 ±    1154.782  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    189332.649 ±  181009.799    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.729 ±       4.963  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       114.144 ±     777.560    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10295.998 ±     352.174   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2187.524 ±     120.269  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    334330.563 ±    8451.567    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2139.915 ±    1146.066  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    327030.391 ±  173242.516    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.847 ±       6.450  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       129.405 ±     984.517    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     56439.750 ±    4714.233   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       546.282 ±      34.195  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15237.096 ±    1497.728    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       531.867 ±    1144.886  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     14930.057 ±   32158.490    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.119 ±       1.023    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     42952.276 ±    2604.342   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       640.071 ±      28.910  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23453.486 ±    1005.213    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       664.098 ±       3.417  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     24336.220 ±    1411.920    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.010 ±       0.057  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.384 ±       2.086    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5        17.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     87855.235 ±    4068.020   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       676.913 ±      56.053  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12122.625 ±     657.252    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       536.543 ±    1154.950  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      9597.073 ±   20664.869    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.073 ±       0.630    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    105444.432 ±    1061.944   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.020 ±       0.168  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.295 ±       2.505    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7692.079 ±     238.199   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2445.979 ±     101.336  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    500391.157 ±   12840.576    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2285.060 ±    1417.645  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    467307.623 ±  284353.892    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.271 ±       1.805  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        55.970 ±     374.431    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                                 N/A  thrpt    5      3430.469 ±      42.741   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                  N/A  thrpt    5      1903.084 ±      63.054  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                             N/A  thrpt    5    872969.294 ±   25673.011    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1878.549 ±    1159.190  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    861886.090 ±  535699.990    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.746 ±       4.179  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       343.678 ±    1926.534    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                       N/A  thrpt    5        14.000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                        N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   9187986.168 ±   73055.247   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4952.575 ±      33.331  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       848.251 ±       1.237    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4743.795 ±      76.245  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       812.498 ±      18.078    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.046 ±       0.105  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.008 ±       0.018    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        35.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        49.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38010247.343 ±  383569.130   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10825910.744 ±  358839.857   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3715.849 ±     138.964  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       540.134 ±       6.904    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3500.207 ±    1166.422  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       508.740 ±     165.351    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        26.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        34.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48100060.429 ±  396829.322   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         0.237 ±       2.038  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.008 ±       0.067    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31302181.170 ± 2254288.909   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       817.506 ±      79.582  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.097 ±       2.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.677 ±    1157.307  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.536 ±      57.655    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9077504.435 ±  187530.483   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3835.241 ±      76.252  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       664.872 ±      10.432    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3639.996 ±    1426.580  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       631.158 ±     253.750    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.054 ±       0.209  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.009 ±       0.036    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        39.000                    ms
[info] IntBenchmark.readUPickle                                                                            N/A  thrpt    5  11530751.651 ±  300582.077   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                             N/A  thrpt    5      4937.195 ±     120.029  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                        N/A  thrpt    5       673.828 ±       1.726    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      4747.190 ±      65.337  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       647.922 ±      21.464    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0.117 ±       0.193  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0.016 ±       0.026    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                  N/A  thrpt    5        35.000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                   N/A  thrpt    5        47.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  13749564.352 ±  400238.951   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1663.653 ±      40.565  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       190.402 ±       5.129    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.188 ±    1416.428  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       184.460 ±     166.130    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.658 ±       4.535  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.075 ±       0.518    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42363067.801 ±  348225.043   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       885.678 ±      45.626  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.902 ±       1.912    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       800.248 ±    1147.307  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        29.745 ±      42.949    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.012 ±       0.046  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13269379.666 ±  324710.481   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2709.171 ±     156.707  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       321.416 ±      11.699    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2679.757 ±      36.541  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       317.948 ±       7.879    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.079 ±       0.636  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.009 ±       0.076    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        30.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  48325570.103 ± 2492850.724   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1010.730 ±      48.875  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.913 ±       1.057    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1075.752 ±    1417.824  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        34.997 ±      45.734    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62311715.684 ±  869428.456   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.293 ±       2.520  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.007 ±       0.064    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17844550.153 ±  268323.304   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1682.742 ±      47.157  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.404 ±       3.636    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1613.145 ±    1417.931  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       142.304 ±     125.894    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2700543.523 ±  115217.378   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2168.215 ±     129.102  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1263.445 ±      25.518    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2010.576 ±       9.229  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1171.748 ±      52.084    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.712 ±       5.820  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.421 ±       3.443    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        28.000                    ms
[info] IntBenchmark.writeUPickle                                                                           N/A  thrpt    5   1447801.151 ±   76750.777   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                            N/A  thrpt    5      8273.370 ±     517.496  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                       N/A  thrpt    5      8991.577 ±     128.968    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      7901.418 ±    1435.881  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      8584.468 ±    1125.203    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.129 ±       0.215  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.140 ±       0.228    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                                 N/A  thrpt    5        58.000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                  N/A  thrpt    5        80.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    169836.591 ±    4737.038   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3242.146 ±     121.019  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     30037.419 ±     442.357    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3235.383 ±    1160.421  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     29964.556 ±   10237.799    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.038 ±       0.330    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        24.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        33.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     33465.948 ±    1031.601   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2520.773 ±     108.143  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    118530.546 ±    3421.605    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2416.940 ±    1420.692  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    113660.961 ±   67084.783    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.387 ±       3.200  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        18.070 ±     149.269    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    141621.209 ±    6022.832   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1229.118 ±      56.950  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13657.715 ±     280.513    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.283 ±    1151.904  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13369.819 ±   12790.059    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.829 ±       6.094  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.327 ±      68.735    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    434412.746 ±   28257.779   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1745.251 ±     132.209  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6322.425 ±     274.314    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1746.754 ±    1416.697  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6334.797 ±    5266.890    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.625 ±       4.722  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.276 ±      17.226    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    476379.879 ±   11852.645   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1367.912 ±      37.106  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4518.365 ±      39.227    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1345.033 ±       3.658  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4442.954 ±     116.861    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.595 ±       4.476  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.978 ±      14.894    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     63799.262 ±    1617.298   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1514.549 ±      67.211  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     37354.356 ±    1555.446    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1470.205 ±    1151.201  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     36267.351 ±   28584.085    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.103 ±       0.887    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    320255.353 ±     932.941   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2391.446 ±      70.717  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11751.372 ±     369.685    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2279.900 ±    1418.253  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11203.819 ±    6988.384    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.162 ±       1.354  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.797 ±       6.644    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    566419.786 ±   28216.016   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1509.673 ±      99.856  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4193.993 ±     137.405    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1469.396 ±    1156.850  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4083.346 ±    3237.475    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.887 ±       7.502  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.469 ±      20.876    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1332873.033 ±   42353.293   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2706.220 ±      83.682  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3195.193 ±      37.444    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2692.503 ±      27.039  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3179.177 ±     117.778    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.034 ±       0.084    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    108666.183 ±    5230.743   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3643.906 ±     175.291  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52772.708 ±     282.613    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3498.087 ±    1101.564  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     50657.258 ±   15472.143    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.033 ±       0.156  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.481 ±       2.248    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        35.000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                                 128  thrpt    5    598828.194 ±   21028.451   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2706.564 ±     142.039  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7112.436 ±     133.727    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2555.791 ±    1166.883  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      6711.033 ±    2866.583    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.055 ±       0.212    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    346405.813 ±    5666.371   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1201.272 ±      24.941  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5457.453 ±     157.230    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1207.882 ±    1154.581  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5489.943 ±    5278.148    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.716 ±       5.943  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.249 ±      26.957    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    839310.087 ±    6348.213   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       625.306 ±      16.448  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1172.443 ±      23.972    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.041 ±       2.131  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1250.707 ±      11.391    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.008 ±       0.067    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2106766.365 ±   91716.810   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1000.492 ±      66.596  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       747.369 ±      42.937    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941.308 ±    1418.445  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       703.303 ±    1061.142    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.003 ±       0.027    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2347018.631 ±   13559.740   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.216 ±       1.855  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.145 ±       1.244    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    470713.826 ±   21094.373   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       699.073 ±      24.397  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2337.357 ±      72.932    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       669.160 ±       1.585  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2237.491 ±     104.497    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.070 ±       0.383    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                                128  thrpt    5    142585.240 ±    1330.510   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1555.249 ±      52.659  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     17164.728 ±     602.282    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1478.013 ±    1160.572  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     16315.507 ±   12905.226    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.724 ±       6.014  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         8.012 ±      66.522    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     59603.462 ±    1272.208   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2084.062 ±      43.376  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55019.547 ±    1129.096    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2011.684 ±       9.553  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     53109.523 ±    1240.937    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.757 ±       5.782  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.051 ±     153.222    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     93623.117 ±     955.125   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1732.914 ±      48.825  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29126.729 ±     976.207    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1736.337 ±    1408.421  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     29196.116 ±   23926.287    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.912 ±       6.161  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.319 ±     103.427    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        30.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    161980.949 ±   10562.854   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2575.833 ±     114.904  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25027.385 ±     574.319    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2553.713 ±    1162.027  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24835.734 ±   12057.988    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.087 ±       0.664  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.840 ±       6.388    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     33568.333 ±     862.319   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2249.696 ±      27.589  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105470.794 ±    3103.750    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2149.219 ±    1145.627  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100800.600 ±   55406.558    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.148 ±       1.008  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6.967 ±      47.587    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    160458.406 ±    4333.543   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1073.300 ±      38.399  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10526.683 ±     417.723    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.018 ±    1410.229  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10493.173 ±   13936.627    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.766 ±       6.462  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.557 ±      63.765    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    434590.616 ±   25460.174   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       497.730 ±      53.591  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1802.186 ±     149.094    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.795 ±    1118.518  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1826.651 ±    4025.690    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    478982.352 ±    6373.750   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         6.083 ±      10.386  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        20.009 ±      34.514    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     64586.683 ±    2430.245   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1350.999 ±      22.246  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     32919.264 ±    1011.957    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1338.260 ±      15.425  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     32609.836 ±    1439.897    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.187 ±       1.101  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         4.562 ±      26.693    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2909708.358 ±   52758.591   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3749.406 ±      93.771  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2027.812 ±      24.163    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3638.215 ±    1381.788  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1967.557 ±     739.632    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.007 ±       0.024    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        27.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        38.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    894249.043 ±   16748.285   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       529.158 ±      29.886  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       931.205 ±      41.933    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       532.929 ±    1147.171  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       939.455 ±    2022.295    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.007 ±       0.059  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.012 ±       0.104    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    337684.439 ±   11408.245   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       801.663 ±      56.762  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3736.159 ±     271.214    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.427 ±    1149.488  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3733.804 ±    5422.463    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.006 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.029 ±       0.168    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        23.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    762825.074 ±   47860.923   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       699.991 ±      57.711  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1444.052 ±      63.227    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.055 ±       2.044  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1386.750 ±      86.772    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.009 ±       0.074    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3250198.582 ±  134303.365   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      1966.063 ±      81.963  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       951.926 ±      18.349    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      1885.613 ±    1162.179  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       913.710 ±     579.348    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.558 ±       4.319  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.269 ±       2.085    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        14.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        25.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   8050331.907 ±  633398.130   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       882.512 ±      81.279  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       172.515 ±       6.365    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       806.729 ±    1157.941  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       157.329 ±     218.342    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.003 ±       0.018    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    229642.700 ±    7836.777   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2047.912 ±      38.416  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     14033.812 ±     352.554    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2012.456 ±      15.242  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     13791.322 ±     557.556    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.354 ±       1.900  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2.421 ±      12.984    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        26.000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                                N/A  thrpt    5    324341.140 ±    2539.121   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5       636.535 ±      37.060  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      3088.232 ±     161.773    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       671.154 ±       0.873  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      3256.249 ±      20.660    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.061 ±       0.523    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5        15.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1588297.917 ±   22795.837   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        53.484 ±      42.945  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        53.011 ±      43.139    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.338 ±     881.164  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       101.807 ±     876.585    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     73719.987 ±    3260.175   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3251.798 ±     127.641  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69415.178 ±    2518.682    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3110.276 ±    1440.829  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     66429.290 ±   32088.124    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.089 ±       0.763    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1570171.880 ±   66843.524   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       849.971 ±      73.082  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       851.829 ±      49.156    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       935.302 ±    1408.994  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       935.661 ±    1386.732    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.008 ±       0.044    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1691256.756 ±  122427.753   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       487.729 ±      27.928  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       453.889 ±      30.385    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.920 ±    1118.898  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       471.539 ±    1039.773    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.012 ±       0.067    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1789039.975 ±   62054.952   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.190 ±       0.632  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     50252.220 ±    2671.779   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2174.476 ±     123.374  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68083.217 ±    1404.363    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2135.492 ±    1136.603  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     66810.957 ±   33150.636    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.883 ±       7.333  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        27.223 ±     226.012    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    270430.538 ±    8376.885   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1092.918 ±      31.588  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6360.446 ±     321.648    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.466 ±    1417.714  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6260.488 ±    8274.719    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.550 ±       4.598  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.186 ±      26.649    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     38173.578 ±    1665.356   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1955.095 ±     105.801  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     80597.042 ±    1947.338    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1876.096 ±    1138.005  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     77292.697 ±   45662.360    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.171 ±       1.470    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        21.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    114014.047 ±    4042.729   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1151.423 ±      33.822  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15892.790 ±     532.152    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1203.162 ±    1151.602  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16630.943 ±   16204.289    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.816 ±       6.848  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.191 ±      93.910    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        30.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    312818.298 ±    2944.614   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       431.937 ±      34.847  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2172.965 ±     193.816    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       370.565 ±    1326.321  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1867.286 ±    6682.463    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         9.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    365446.395 ±    1972.719   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         4.258 ±       3.063  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        18.338 ±      13.241    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     52569.824 ±     466.774   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1399.596 ±      41.235  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     41895.428 ±    1140.245    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1332.191 ±      14.126  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     39877.816 ±     316.039    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.106 ±       0.826  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.179 ±      24.716    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        17.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73519.885 ±    5365.989   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1587.178 ±     111.911  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     33976.090 ±    1040.010    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1610.813 ±    1413.417  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     34551.811 ±   31748.557    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.770 ±       5.701  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.246 ±     120.133    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        28.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    136080.690 ±     937.704   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       683.575 ±      13.552  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      7905.476 ±     161.637    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       666.361 ±       2.135  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      7706.392 ±      41.262    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.048 ±       0.415    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    291579.080 ±   10670.744   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1235.334 ±      61.506  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6666.913 ±     114.620    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1210.232 ±    1157.842  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6520.113 ±    6095.314    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.654 ±       4.606  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.522 ±      24.839    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27384.801 ±     839.068   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1474.467 ±      47.997  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     84727.370 ±    2245.342    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1337.309 ±      12.443  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     76847.481 ±    1732.152    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.270 ±       2.148  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        15.482 ±     123.137    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    177678.589 ±    8842.032   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1011.555 ±      59.786  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8959.518 ±     302.378    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1068.003 ±    1407.754  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      9463.893 ±   12518.068    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.112 ±       0.643    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        27.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    466447.911 ±   29603.121   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1403.393 ±      57.761  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4734.987 ±     129.495    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1344.469 ±       3.760  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4536.756 ±     279.104    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.600 ±       4.549  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.998 ±      15.115    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        20.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    525070.245 ±   13861.789   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       986.396 ±      19.013  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2956.495 ±      88.524    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       941.023 ±    1419.427  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2825.185 ±    4320.517    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.025 ±       0.217    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     67745.531 ±    3508.595   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1515.520 ±      30.415  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35208.005 ±    1277.137    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1468.055 ±    1151.248  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     34124.691 ±   27318.258    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.033 ±       0.185  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.772 ±       4.268    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     97891.930 ±    2141.991   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1607.148 ±      41.839  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25837.253 ±     713.255    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1610.042 ±    1415.099  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25880.111 ±   22666.343    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.754 ±       4.648  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.063 ±      74.332    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    176482.225 ±    4967.261   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       748.698 ±      24.681  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6675.668 ±      80.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.627 ±       2.645  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5944.198 ±     184.162    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.074 ±       0.390    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    277498.344 ±   17274.315   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1014.486 ±      63.622  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5753.442 ±     158.469    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941.286 ±    1419.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5357.306 ±    8310.004    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.047 ±       0.247    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     68368.547 ±    2040.184   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2674.791 ±     149.828  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     61564.082 ±    2127.424    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2543.498 ±    1158.892  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     58504.454 ±   25235.225    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.046 ±       0.313  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.052 ±       7.153    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                               128  thrpt    5    155692.103 ±    6179.795   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1318.215 ±      56.012  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13325.033 ±     535.379    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1344.457 ±       4.626  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     13590.930 ±     537.857    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.687 ±       5.781  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6.897 ±      58.022    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    203339.991 ±    5491.958   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1416.561 ±      51.339  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10962.162 ±     179.907    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.938 ±       5.347  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10385.209 ±     304.007    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.708 ±       5.137  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.504 ±      40.034    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    504770.114 ±   28769.788   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       415.509 ±      38.955  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1295.540 ±     125.095    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.266 ±    1057.331  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1469.305 ±    3279.186    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.108  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.039 ±       0.332    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    628399.042 ±   42133.392   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       351.344 ±      39.026  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       879.925 ±     103.732    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.784 ±    1216.839  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       848.791 ±    3057.800    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.021 ±       0.177    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    689456.158 ±    5183.023   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.071 ±       0.488  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.140 ±       1.202    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35400.308 ±    1091.881   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1928.711 ±      34.878  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85733.412 ±    3139.742    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1874.422 ±    1148.402  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     83360.281 ±   52061.150    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.804 ±       5.244  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        35.673 ±     232.958    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                              128  thrpt    5    105262.886 ±    1152.199   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1805.256 ±      57.357  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     26989.331 ±     716.739    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1745.497 ±    1415.042  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     26104.311 ±   21328.308    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.712 ±       5.729  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        10.639 ±      85.607    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] NestedStructsBenchmark.readCirce                                                                    128  thrpt    5     81233.113 ±    1846.724   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      3057.153 ±     143.993  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     59218.631 ±    1442.991    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2955.880 ±    1413.572  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     57236.032 ±   26419.451    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.046 ±       0.183  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.890 ±       3.577    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        22.000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        31.000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                             128  thrpt    5    132545.912 ±    4283.976   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1754.081 ±      86.063  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     20825.420 ±     530.659    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1734.807 ±    1405.418  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     20587.646 ±   16478.772    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.883 ±       7.421  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10.576 ±      88.937    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        13.000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                            128  thrpt    5    655219.456 ±   24450.129   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1765.436 ±      61.485  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      4239.940 ±     129.608    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1747.184 ±    1414.857  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4198.466 ±    3448.244    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.583 ±       4.930  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.422 ±      12.033    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        13.000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                                 128  thrpt    5     20127.585 ±    1652.425   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2623.392 ±     105.661  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    205152.181 ±    9677.475    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2539.460 ±    1171.118  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    198838.045 ±   99965.702    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.531 ±       2.181  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        41.790 ±     170.890    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        19.000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                   128  thrpt    5     82805.478 ±    2294.079   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      3369.926 ±     188.582  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     64038.476 ±    2144.028    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3229.643 ±    1193.045  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61353.999 ±   21691.237    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.046 ±       0.174  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.873 ±       3.340    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        24.000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                            128  thrpt    5    285449.189 ±    2880.034   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1360.972 ±      32.950  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7501.343 ±     155.372    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1202.837 ±    1150.947  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      6631.167 ±    6362.180    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.749 ±       6.363  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.136 ±      35.119    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1220915.938 ±   89321.978   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       634.164 ±      57.284  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       817.323 ±      16.263    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.011 ±       1.533  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       865.119 ±      63.595    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.021 ±       0.113    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        15.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1320476.398 ±   10754.295   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                                128  thrpt    5     49063.812 ±    1125.801   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2674.772 ±     132.127  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85774.766 ±    2573.803    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2537.511 ±    1159.338  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     81361.412 ±   36665.626    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.187 ±       1.167  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.036 ±      37.747    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        19.000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    861445.101 ±   42282.532   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2307.343 ±     182.350  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4214.306 ±     154.548    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2276.365 ±    1408.688  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      4154.938 ±    2463.819    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.850 ±       6.738  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.565 ±      12.406    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1717668.427 ±   96271.960   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1095.538 ±      63.991  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1003.683 ±      39.255    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1068.331 ±    1406.916  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       978.124 ±    1281.355    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.025 ±       0.073  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.023 ±       0.066    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8487243.255 ±  388317.520   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       265.730 ±      18.577  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.276 ±       4.419    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.007 ±    1079.172  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        57.229 ±     201.171    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    283393.168 ±   12835.840   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1920.932 ±      51.979  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10667.681 ±     280.828    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1877.556 ±    1149.143  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5     10436.393 ±    6608.819    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.371 ±       2.083  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         2.047 ±      11.443    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1098058.140 ±   79457.196   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1799.298 ±     130.543  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2578.473 ±      37.980    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1873.446 ±    1153.445  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2683.955 ±    1630.943    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.804 ±       6.785  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.170 ±       9.878    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2733259.947 ±  153933.197   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1202.331 ±     105.331  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       692.229 ±      30.648    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1204.059 ±    1152.011  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       693.081 ±     660.744    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.797 ±       6.687  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.456 ±       3.821    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6395094.056 ±  267975.121   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       738.760 ±      60.019  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       181.785 ±       9.404    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       805.542 ±    1152.802  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       198.052 ±     279.963    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.003 ±       0.018    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6631040.127 ±  364498.440   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       422.373 ±      59.415  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       100.223 ±      10.243    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.841 ±    1062.794  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       111.571 ±     250.829    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.003 ±       0.017    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    407681.950 ±   21602.334   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2561.619 ±     157.520  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      9887.947 ±     268.765    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2536.049 ±    1158.931  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      9796.924 ±    4707.618    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.962 ±       8.057  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         3.799 ±      31.852    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        33.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     81290.624 ±    2214.016   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2276.478 ±     105.230  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44068.252 ±    1454.265    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2145.042 ±    1151.902  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     41523.175 ±   22215.431    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.745 ±       6.328  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        14.323 ±     121.603    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    125278.902 ±    6950.965   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1975.612 ±     150.237  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24815.409 ±     613.710    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2002.040 ±      14.592  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25153.009 ±    1428.632    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.941 ±       6.008  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.934 ±      76.340    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    182240.199 ±    3045.402   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2775.754 ±      89.330  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23969.709 ±     386.548    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2555.278 ±    1141.882  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     22058.193 ±    9572.511    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.025 ±       0.105  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.216 ±       0.902    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     61813.946 ±    3689.800   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3129.106 ±     243.237  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79659.025 ±    1918.997    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2948.513 ±    1409.054  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     75149.490 ±   38892.414    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.021 ±       0.098  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.538 ±       2.569    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                      128  thrpt    5    117202.114 ±    1201.132   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                       128  thrpt    5      2339.465 ±      83.256  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                  128  thrpt    5     31413.206 ±    1043.217    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2282.910 ±    1419.164  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     30661.623 ±   19297.510    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.741 ±       5.465  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.992 ±      73.745    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                            128  thrpt    5        17.000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                             128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    189423.019 ±    4851.722   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1338.595 ±      70.726  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11118.452 ±     440.372    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1206.967 ±    1154.097  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     10027.537 ±    9614.083    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.754 ±       5.658  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         6.246 ±      46.896    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        23.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    462119.983 ±    9453.187   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       411.091 ±      36.715  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1400.115 ±     149.072    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       368.652 ±    1318.346  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1259.979 ±    4507.590    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        11.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    647138.161 ±   29159.138   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       362.194 ±      58.645  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       880.621 ±     120.557    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.846 ±    1217.097  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       820.013 ±    2944.742    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.010 ±       0.087    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    714320.872 ±    2967.687   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.270 ±       0.066  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.017 ±       0.140    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35801.875 ±     399.670   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1944.294 ±      54.527  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85454.293 ±    2480.635    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1874.569 ±    1148.618  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     82410.394 ±   50977.900    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.820 ±       4.898  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.130 ±     216.147    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                     128  thrpt    5     97207.739 ±    2808.058   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                      128  thrpt    5      1862.753 ±     102.837  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                                 128  thrpt    5     30155.150 ±     913.234    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1745.528 ±    1414.894  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     28246.026 ±   22634.102    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.708 ±       5.607  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        11.475 ±      90.882    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                           128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3454458.688 ±   66656.087   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2916.257 ±      72.104  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1328.394 ±      31.017    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2826.079 ±    1172.348  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1287.712 ±     553.782    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.042 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.019 ±       0.052    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   5985311.254 ±  324859.369   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1157.157 ±      41.532  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       304.266 ±      10.278    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1067.771 ±    1408.776  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       281.419 ±     378.563    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.923 ±       7.771  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.242 ±       2.035    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4097014.225 ±   79293.997   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2265.854 ±      58.070  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       870.304 ±      14.660    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2141.067 ±    1142.993  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       822.226 ±     432.502    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.787 ±       6.731  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.301 ±       2.576    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6907069.474 ±  142925.629   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1336.758 ±      31.066  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       304.558 ±       5.409    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.996 ±    1159.552  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       275.983 ±     265.202    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.575 ±       3.988  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.130 ±       0.904    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4268604.572 ±  256985.857   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2444.037 ±     195.747  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       900.962 ±      26.709    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2277.076 ±    1405.627  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       840.003 ±     532.738    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.092 ±       0.658  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.034 ±       0.246    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                             128  thrpt    5   3979386.779 ±   61433.427   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      2261.884 ±      55.566  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5       894.310 ±       8.832    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2149.624 ±    1146.337  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       849.950 ±     453.762    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.654 ±       5.586  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.260 ±       2.223    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2071518.855 ±   66950.942   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1240.545 ±      72.964  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       942.409 ±      47.151    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1202.998 ±    1152.712  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       913.293 ±     867.951    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.009 ±       0.054    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5821858.303 ±  345037.753   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       580.920 ±      35.252  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       157.016 ±       2.018    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       665.431 ±       2.158  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       179.894 ±      11.082    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.002 ±       0.020    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        15.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4588043.375 ±  286701.587   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1245.998 ±      82.328  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       427.402 ±      10.570    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1206.155 ±    1153.108  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       413.948 ±     398.274    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.699 ±       5.284  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.238 ±       1.804    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6008673.002 ±   56407.220   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       597.628 ±      34.290  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.531 ±       9.917    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       537.190 ±    1156.342  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       140.809 ±     303.106    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.001 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6446776.221 ±   14481.704   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4569956.525 ±   70464.045   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1292.765 ±      45.232  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       445.181 ±      11.533    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.639 ±       4.177  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       462.022 ±       7.813    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.712 ±       6.041  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.246 ±       2.083    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                            128  thrpt    5    322029.244 ±    4499.679   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      2530.305 ±      62.118  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     12365.489 ±     358.894    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2419.810 ±    1422.556  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     11828.915 ±    7055.503    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.104 ±       0.852  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.510 ±       4.178    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5    836446.884 ±   35694.200   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1191.924 ±      87.576  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2242.413 ±     101.723    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1208.649 ±    1157.711  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2271.630 ±    2147.144    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.674 ±       5.674  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.258 ±      10.576    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2813044.478 ±  181601.129   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       546.079 ±      53.887  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       305.454 ±      22.015    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       532.617 ±    1146.498  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       297.451 ±     640.694    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.021 ±       0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.012 ±       0.063    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1705437.786 ±   63804.310   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       930.877 ±      46.165  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       858.932 ±      29.532    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       802.106 ±    1151.361  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       739.572 ±    1051.214    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.010 ±       0.057  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.010 ±       0.052    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        20.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2417411.681 ±   57757.528   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       466.463 ±      48.031  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       303.654 ±      29.928    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.057 ±    1328.410  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       241.458 ±     864.318    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.047    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1712918.220 ±   48896.218   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       975.227 ±      56.677  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       895.915 ±      41.669    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       936.966 ±    1412.398  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       860.713 ±    1296.296    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.012 ±       0.040    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                          128  thrpt    5   1411812.605 ±   36531.199   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1525.313 ±      23.741  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      1700.322 ±      49.981    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1479.690 ±    1151.066  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1651.237 ±    1336.722    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.604 ±       5.109  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.670 ±       5.670    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                                128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1826607.771 ±   43450.488   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1399.696 ±      48.989  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1205.928 ±      31.756    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1342.590 ±       4.284  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1156.759 ±      25.759    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.679 ±       5.183  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.583 ±       4.453    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2795305.517 ±   19156.801   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       745.049 ±      31.051  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       419.441 ±      18.635    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       799.625 ±    1147.378  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       450.286 ±     648.316    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.020 ±       0.084  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±       0.047    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2965169.101 ±  102767.368   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1299.164 ±      53.222  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       689.504 ±      15.524    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.264 ±    1153.292  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       639.495 ±     609.816    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.702 ±       5.729  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.371 ±       3.032    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3336866.660 ±  183243.928   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       886.933 ±      33.149  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       418.334 ±      17.201    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       806.184 ±    1156.903  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       379.876 ±     538.259    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.002 ±       0.017    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3631757.811 ±   11839.758   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.016 ±       0.136  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.007 ±       0.059    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2834375.448 ±   71236.333   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1415.904 ±      75.101  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       786.149 ±      27.510    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1475.659 ±    1158.379  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       819.090 ±     634.824    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.712 ±       6.018  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.394 ±       3.329    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        29.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11662.868 ±     560.303   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1367.398 ±      56.925  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    184510.127 ±    2596.838    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1336.578 ±       5.210  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    180370.026 ±    8692.190    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.872 ±       6.595  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       116.322 ±     878.733    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     22393.597 ±    1099.135   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       348.130 ±      56.622  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24477.008 ±    5224.038    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.648 ±    1206.072  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     23790.537 ±   85045.311    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.299 ±       2.573    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22361.536 ±     600.506   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       251.679 ±      26.754  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17713.599 ±    2174.322    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.983 ±    1079.090  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21675.879 ±   76195.278    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.004 ±       0.023  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.294 ±       1.615    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      7541.570 ±     148.051   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2135.252 ±      60.606  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    445539.589 ±    6015.262    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2007.539 ±      13.095  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    418900.514 ±    6547.586    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.460 ±       3.571  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5        95.892 ±     744.452    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        15.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     62189.439 ±    4349.252   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       805.233 ±      60.415  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20377.686 ±    1073.743    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       797.252 ±    1141.742  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     20155.870 ±   28452.875    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.017 ±       0.087  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.425 ±       2.179    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     71611.232 ±     370.925   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       496.370 ±      22.886  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10907.914 ±     543.236    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       502.375 ±    1111.907  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11045.947 ±   24448.638    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.275 ±       1.576    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     77177.544 ±     396.469   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        20.833 ±       0.316  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       424.772 ±       4.574    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    312098.678 ±    3085.204   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1866.434 ±      71.463  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9411.295 ±     282.607    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1877.350 ±    1157.608  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9466.878 ±    5847.027    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.741 ±       6.158  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.736 ±      31.038    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    469676.624 ±   22939.864   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       546.305 ±      18.341  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1830.516 ±     111.360    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       532.621 ±    1146.508  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1792.337 ±    3858.859    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1264656.074 ±   12023.545   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       681.112 ±      11.267  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       847.502 ±       9.958    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671.768 ±       1.736  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       835.880 ±       8.285    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.088  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.021 ±       0.109    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    104252.771 ±    2087.262   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3345.598 ±     113.612  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50497.887 ±     866.460    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3224.090 ±    1117.687  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     48651.116 ±   16203.608    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.037 ±       0.191  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.565 ±       2.881    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        35.000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    621094.902 ±   14095.609   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1866.205 ±      90.543  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      4728.575 ±     179.587    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1746.112 ±    1414.764  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4423.072 ±    3556.323    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.650 ±       5.548  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.646 ±      14.060    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        21.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    335460.912 ±   13844.471   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1173.565 ±      89.246  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5505.068 ±     260.084    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.942 ±    1154.598  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5657.774 ±    5298.321    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.679 ±       5.799  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.183 ±      27.199    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    750530.963 ±   38526.266   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       588.915 ±      42.514  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1234.857 ±      68.553    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.206 ±    1147.767  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1119.699 ±    2411.302    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.074    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1579403.634 ±   65611.295   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       750.987 ±      33.503  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       748.252 ±      13.411    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671.196 ±       1.589  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       668.815 ±      28.021    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.008 ±       0.043    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1740126.673 ±    5323.743   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    458570.138 ±   10917.836   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       702.750 ±      24.993  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2411.209 ±     100.132    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       801.998 ±    1143.613  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2755.498 ±    3997.069    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.029 ±       0.247    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    143722.859 ±     988.705   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1576.366 ±      56.295  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     17261.542 ±     574.876    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1611.778 ±    1415.249  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     17653.159 ±   15583.580    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.712 ±       4.410  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         7.810 ±      48.435    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        12.000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 8298 s, completed May 31, 2018 1:38:28 AM
